<<<<<<< HEAD
{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"f1d11b90869389e134cf743bfb1dd7a06dae085c","modified":1598417163538},{"_id":"themes/hexo-theme-next/.DS_Store","hash":"b4c2c9d58fc5b5276e41ee0a9a660269f2bbb7ca","modified":1598428632407},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1464079577000},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1532575315000},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1532575315000},{"_id":"themes/hexo-theme-next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1532575315000},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1464079577000},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1532575315000},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1464079577000},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1532575315000},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1532575315000},{"_id":"themes/hexo-theme-next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1532575315000},{"_id":"themes/hexo-theme-next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1532575315000},{"_id":"themes/hexo-theme-next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1464079577000},{"_id":"themes/hexo-theme-next/_config.yml","hash":"e8c12ac5174057680092b7ac00943d568f64b171","modified":1532932819000},{"_id":"themes/hexo-theme-next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1532575315000},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1532575315000},{"_id":"themes/hexo-theme-next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1532575315000},{"_id":"source/_posts/.DS_Store","hash":"0eeb2d87f9afac5b148766f5f6e37c19eff6ba2d","modified":1598417192240},{"_id":"source/_posts/git-pull-refusing-to-merge-unrelated-histories.md","hash":"6df691871c692d8e5caab9c1b7272cfa25c7f38e","modified":1534736210000},{"_id":"source/_drafts/2015-11-14-我的简历.md","hash":"253dbe7e076dbb5c2ae03c1980d13b86d81a3537","modified":1464145457000},{"_id":"source/_drafts/.DS_Store","hash":"369d055d47755b4d49d678bc374eac0e1471535a","modified":1468292730000},{"_id":"source/_drafts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1464102752000},{"_id":"source/_drafts/2015-11-17-iOS面试题.md","hash":"fb36fd6294ad2fe9d5eeda701fa5a1cc05b082e5","modified":1464145467000},{"_id":"source/_drafts/私密日记.md","hash":"12310ff1b67f5e1b19cd80deafe40dc09d69ef67","modified":1464141576000},{"_id":"source/_drafts/面试的自我总结.md","hash":"e52392ec1a5654571a19718781dc3b3e02acc1af","modified":1464146426000},{"_id":"source/about/.DS_Store","hash":"ef6f3d4f7e5a75547e8c1aa40d8d8f2a0e9a35d7","modified":1532932359000},{"_id":"source/about/index.md","hash":"dd1cf6f3b2f99cba6ed37145150f48d3873a814d","modified":1532932392000},{"_id":"source/categories/.DS_Store","hash":"ef6f3d4f7e5a75547e8c1aa40d8d8f2a0e9a35d7","modified":1468372251000},{"_id":"source/categories/index.md","hash":"bd1d915813fda3e06e812e8f467794b4fc83ab89","modified":1468372265000},{"_id":"source/tags/.DS_Store","hash":"4b1737e2d95536850ac239b97c1d4b1deae9a602","modified":1468314208000},{"_id":"source/tags/index.md","hash":"871679ad9642ff3795825e5b705d504d7c0806ae","modified":1468372179000},{"_id":"themes/hexo-theme-next/.git/.DS_Store","hash":"01a0c066299d11795838e883eb5c17271da6ba8a","modified":1532070409000},{"_id":"themes/hexo-theme-next/.git/COMMIT_EDITMSG","hash":"f24b5fbf82e125fa1a3853489f67768bccd6ec6e","modified":1532575005000},{"_id":"themes/hexo-theme-next/.git/HEAD","hash":"75173e2dd18a6221ff84742ff53d01ac5c6e04b0","modified":1532575315000},{"_id":"themes/hexo-theme-next/.git/FETCH_HEAD","hash":"288e0077fd96f9bfb8d4694ae4e06ad03bdada50","modified":1598428590919},{"_id":"themes/hexo-theme-next/.git/ORIG_HEAD","hash":"75173e2dd18a6221ff84742ff53d01ac5c6e04b0","modified":1598428590944},{"_id":"themes/hexo-theme-next/.git/config","hash":"fd33aee7854043871a6581cb5c7a8b69c840d523","modified":1532575200000},{"_id":"themes/hexo-theme-next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1499842156000},{"_id":"themes/hexo-theme-next/.git/index","hash":"d4d623cc182051d13d3b31caaca2c9a0f52ba00c","modified":1532575315000},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1532575315000},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1532575315000},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1532575315000},{"_id":"themes/hexo-theme-next/languages/.DS_Store","hash":"41bc803c14c7129eed85c1b0875c2a80c09c1fde","modified":1464592267000},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1532575315000},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1532575315000},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1532575315000},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1532575315000},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1532575315000},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1532575315000},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1532575315000},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1532575315000},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1532575315000},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1532575315000},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1532575315000},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1532575315000},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/.DS_Store","hash":"cd9de0b9ea758fdc5d7966542982dcf4b6fdecb8","modified":1464230177000},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1532575315000},{"_id":"themes/hexo-theme-next/scripts/.DS_Store","hash":"f08b6df518a6cb1c4ef3ceca90e58823c9f6aed4","modified":1468293337000},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1532575315000},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/.DS_Store","hash":"7a06780c9437730184090b1205dea414d3126f87","modified":1532581801000},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1532575315000},{"_id":"themes/hexo-theme-next/test/.DS_Store","hash":"86aaef889514f63213877b6166c2177fd70fc322","modified":1464162667000},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1464079577000},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464079577000},{"_id":"source/_posts/2015/2015-10-29-HTTP和FTP协议的区别.md","hash":"082e95a678803538e367681c5363607d73ffef24","modified":1464142165000},{"_id":"source/_posts/2015/.DS_Store","hash":"d2d00a294f5c2f4f5a8c50de44d434f94b8e63cd","modified":1468290908000},{"_id":"source/_posts/2015/2015-10-31-IOS中获取各种文件的目录路径的方法.md","hash":"e624e755e061dc9a413bb393170b165add56007c","modified":1464142623000},{"_id":"source/_posts/2015/2015-11-1-关于TCP&%IP和socket详解.md","hash":"780dec4a54044b5a224d40ffc20e9e5438526e4e","modified":1464142855000},{"_id":"source/_posts/2015/2015-11-17-Block详解.md","hash":"6c0312cb9c08a38bc6f06265d92b57af6409c6af","modified":1464142932000},{"_id":"source/_posts/2015/2015-11-2-iOS学习之Socket使用简明教程－ AsyncSocket.md","hash":"25f38a06c0f5165acb1dd45432a4e8529da7997d","modified":1464142882000},{"_id":"source/_posts/2016/.DS_Store","hash":"46c78d0bc1c353a9b476494c16144aa08ff2b67c","modified":1499874717000},{"_id":"source/_posts/2016/2016-03-30mac技巧.md","hash":"ad3b9929f5761c0637b57d01879b737bbd32e13f","modified":1464142978000},{"_id":"source/_posts/2016/iterm2_快捷键大全.md","hash":"482f1a8d1916af578b04e552c7ca67e661f95a63","modified":1464141149000},{"_id":"source/_posts/2016/my-frist-post.md","hash":"aabcec325d4bd696d7cd24669e605d0653c15372","modified":1464104043000},{"_id":"source/_posts/2016/关于tableview数组越界的问题处理.md","hash":"c8add2712045f7a8cf29aea2f632417648744a9b","modified":1464143055000},{"_id":"source/_posts/2016/关于博客的markdown语法.md","hash":"01738a80f0f0a41131e58de33ec66a603d37d4e0","modified":1464140992000},{"_id":"source/_posts/2016/处理耗时任务.md","hash":"08048c49e1d466c9fd91dbde8acf79183478e5b8","modified":1464144690000},{"_id":"source/_posts/2017/.DS_Store","hash":"3c945cdab515f593d9a3b89f1a7c5240dd964514","modified":1532533396000},{"_id":"source/_posts/2018/.DS_Store","hash":"16ca7b7c2cb5f2ea0b0dfc2ba15f294a74dcafff","modified":1534735759000},{"_id":"source/_posts/2018/Nginx入门指南.md","hash":"326a43150148f4e3fdf6dd5badf1a0525f5f3a87","modified":1527259464000},{"_id":"source/_posts/2018/git-rebase-i-命令使用详解.md","hash":"82ec6230476d821f2f3f07243407e2d75e6cdfc0","modified":1532586096000},{"_id":"source/_posts/2018/git修改远端地址.md","hash":"cbc826671a8d1cbf133875f300414fcca2652a3e","modified":1532587427000},{"_id":"source/_posts/2018/利用国内服务器进行Shadowsocks-中转.md","hash":"12d548276211736a881bcbfcd01d596c3c3fdeb9","modified":1532931931000},{"_id":"source/_posts/2018/正确创建pch文件.md","hash":"e6809003cf4f74ff922464e2a7bd2d171c7f2e3e","modified":1534492600000},{"_id":"source/_posts/2020/.DS_Store","hash":"ea94c07f58fce5d2b4aba722a2ad89c5fd80da5c","modified":1598417187227},{"_id":"themes/hexo-theme-next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1499842156000},{"_id":"themes/hexo-theme-next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1499842156000},{"_id":"themes/hexo-theme-next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1499842156000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1499842156000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1499842156000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1499842156000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1499842156000},{"_id":"themes/hexo-theme-next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1499842156000},{"_id":"themes/hexo-theme-next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1499842156000},{"_id":"themes/hexo-theme-next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1499842156000},{"_id":"themes/hexo-theme-next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1499842156000},{"_id":"themes/hexo-theme-next/.git/logs/HEAD","hash":"24c0662895d9e4239f17d0a18b765783330debd6","modified":1532575315000},{"_id":"themes/hexo-theme-next/.git/refs/stash","hash":"f37088167ee9668826b112e7eee4a3b2de8f605e","modified":1532575027000},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"911363776867d9523a3e322cdf591d49cd166403","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1464079577000},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1464079577000},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1464079577000},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1532575315000},{"_id":"themes/hexo-theme-next/scripts/tags/.DS_Store","hash":"a527b0bb9926e259b1c3dd0e5b77fc58b24e1725","modified":1468293337000},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1532575315000},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1464079577000},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1532575315000},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1464079577000},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1532575315000},{"_id":"themes/hexo-theme-next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1532575315000},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1532575315000},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1532575315000},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/.DS_Store","hash":"8ef2591f4e6505362d9f6f069e8316229cf8edd3","modified":1484896305000},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/images/.DS_Store","hash":"c263898dbcae2988c89433be3dce2fe637d77479","modified":1484896293000},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/js/.DS_Store","hash":"135e2379446d6ad159d1603fc961168f1a39db59","modified":1484896305000},{"_id":"themes/hexo-theme-next/source/vendors/.DS_Store","hash":"11b72e68cb28709f04e8e959b99f7010a0c31640","modified":1468314690000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464079577000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464079577000},{"_id":"source/_posts/2016/12月/Gitlab的安装升级以及汉化操作说明.md","hash":"f3aeb11d2f4f3f5c7dce6a46994c7db033e3666e","modified":1499874753000},{"_id":"source/_posts/2016/5月/.DS_Store","hash":"53577ad1cc793a4698c3af8cac05a6a32b9beee7","modified":1499874657000},{"_id":"source/_posts/2016/5月/Mac使用的奇淫巧计.md","hash":"89e890d977df1c9398f203137713f275205ca517","modified":1464230326000},{"_id":"source/_posts/2016/5月/iOS-仿射变换CGAffineTransform详解.md","hash":"2c6ebd8c25b4633cba0b6b429e6b977808fd72d9","modified":1464158551000},{"_id":"source/_posts/2016/5月/关于xib的动态桥接.md","hash":"2ce85a2fd0b521fa582f1d01474afe410b10033c","modified":1464189768000},{"_id":"source/_posts/2016/5月/收集一些酷站.md","hash":"0e874ea83da7cb76ffee5443b2b72ccc55da2215","modified":1464230780000},{"_id":"source/_posts/2016/6月/.DS_Store","hash":"f583336eea5df6d1601daa39c1b5baf76a6e4fe8","modified":1468293162000},{"_id":"source/_posts/2016/6月/用Charles抓ssl的包.md","hash":"ef0275dd96969bf85a6dc89bcac2a3902e99a558","modified":1465010262000},{"_id":"source/_posts/2016/7月/.DS_Store","hash":"a5bd5d847d5ffb52980efc6646e08c87c09c4bb3","modified":1469780491000},{"_id":"source/_posts/2016/7月/NSString为何要用copy？而不是strong？.md","hash":"ec57ca7eb787029fb24b41d45c6a4bb6e46bf56b","modified":1469071453000},{"_id":"source/_posts/2016/7月/iOS-UITableView-的beginUpdates和endUpdates.md","hash":"46ed26e983bd2c7fa6413da519ff0886becf3613","modified":1469883274000},{"_id":"source/_posts/2016/7月/tableviewcell上播放倒计时.md","hash":"ad274f26e2fcc5ac4a458a6afa0ebdc66244c254","modified":1468305712000},{"_id":"source/_posts/2016/7月/使用jsonModel需要注意的.md","hash":"4b4bbc224103c6112a51da863f19631b89e4e1cc","modified":1499874702000},{"_id":"source/_posts/2016/7月/真机运行第三方开源项目.md","hash":"80ed2dbf863e6e9659b79ae56a727fe253c5de50","modified":1468564539000},{"_id":"source/_posts/2016/7月/透明导航栏需要注意的几点问题.md","hash":"883b6fae9df680ce93596404d918e185801ec7f6","modified":1468293003000},{"_id":"source/_posts/2017/1月/.DS_Store","hash":"3c8696526abb68dc252fc8176b0e9e1e29fcf130","modified":1484040796000},{"_id":"source/_posts/2017/1月/IOS中的-block关键字简单使用.md","hash":"9010497aeda5b7fb7a017044b5a719d656f1ff1a","modified":1499874974000},{"_id":"source/_posts/2020/8月/.DS_Store","hash":"002df02f78f0caea48825008b1213d20859d893d","modified":1598417192239},{"_id":"source/_posts/2020/8月/iOS性能优化之离屏渲染.md","hash":"236a2a258c546a0ebe8e82a68c694a899175e6c4","modified":1598417478478},{"_id":"themes/hexo-theme-next/.git/logs/refs/stash","hash":"bec35013e5625e23748c0bca4a5b6eb5a614a1eb","modified":1532575027000},{"_id":"themes/hexo-theme-next/.git/refs/heads/master","hash":"6dc02ea4758e9e7a69473a50b3fdc77f3500ae7b","modified":1532575005000},{"_id":"themes/hexo-theme-next/.git/refs/tags/v0.1.0","hash":"4131ee173e7ccb518cfdb5bfdb82e2ca39b397e9","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/refs/tags/v0.1.3","hash":"4b6852c6d03499316a3c0682eb85d475280c5a70","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/refs/tags/v0.2.0","hash":"1bb0eb21a1b732f257b41cfbebbde82befe1e93d","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/refs/tags/v0.2.2","hash":"4970bda4df4f24bd0a1355d879cdd400d07e04ef","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/refs/tags/v0.3.0","hash":"63bf4ae4f5f04d666818d072fcd12938e8f8a095","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/refs/tags/v0.3.0rc1","hash":"c3b0520606e24e2b055125bc56299ea86c0a04cf","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/refs/tags/v0.4.0","hash":"6ffae8c2660193cef94f2a676decba27a8c19eef","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/refs/tags/v0.4.3","hash":"61eaf135adbfedfa15d423118ccd7326bbc783f5","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/refs/tags/v0.4.4","hash":"ca10471ab08289ed10c10cf8504ab8844d5392ab","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/refs/tags/v0.4.5.1","hash":"361f90f9c4fc29b424a3156dc512e683a0a19d75","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/refs/tags/v0.4.5.2","hash":"b7daf711143ef7cb06d12e908f9e25d40688d809","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/refs/tags/v5.0.0","hash":"3db07998a600b0c7d7d15359cb4ef808b6ec8648","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/refs/tags/v5.0.1","hash":"4bd3aae6c4ad63fce23f9306572ecd3961d58a03","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/refs/tags/v5.1.0","hash":"7ec0539e56966d1eaf8b88c1d27165c1f7dfacf5","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/refs/tags/v5.1.1","hash":"3caf2cc30e2bc17ce7c8decb48064104d4845453","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/refs/tags/v5.1.2","hash":"75173e2dd18a6221ff84742ff53d01ac5c6e04b0","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/refs/tags/v5.1.3","hash":"5eec1427a836e6e34c81dc784bafb33c2ccf48f9","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/refs/tags/v5.1.4","hash":"66e8b5048a20ce41a8a240072e535d725d62aef4","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/objects/01/aa127f5e6ff52c64866fce044bdd4eb7938237","hash":"3f45af54376754987780b590488b64037854b6bb","modified":1532575005000},{"_id":"themes/hexo-theme-next/.git/objects/01/f7f8af0ae9b56853286db99a220d4ba9a46a41","hash":"f5a304554f6976ffe5aa2e84eb2927bb4efa4d84","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/07/4895dc45b21455a0cc5bdf9229e6d75e70853a","hash":"c99fdaa190b8153981a0003767c76b7c82411948","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/07/4e866df83a9479d7d717aebd2723debc32484e","hash":"209693bc9eb84cc81d2e3e97ae89b4482d1cac9c","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/07/872072704114b91681e2e6f9697ce1521b64d2","hash":"e1e853424fa012a1c0eb1cba9da3f0916b80538a","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/07/d568259749d7ed8c07f475954544831e50bad3","hash":"b3221530c14eca5f79024d37a13761e9c1c0a7e1","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/08/9e857fce8284ebd04dd3c240b42e0ba79efef2","hash":"8980773c8e53825176c5d68f03fb5728f7633dd1","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/09/2f8ec2db75b56d9286e2cebb97435b1ae2d9c9","hash":"9949e98259db2fca17f2d9f8da2ae68bbaa5e064","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/0e/651dcb6654c37f11ce4ef2ace9ee8b04928bd1","hash":"6e23f76a1c86575c22fe34076bd8606bdd0c6af0","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/0c/d53d36a8df4a6e64352e8817188730c448623c","hash":"f14e3eb9c775d628c3285c006fc42c7e3e8b0886","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/0a/17592fcdb0a61110d806153cb92ad488fa8509","hash":"752278ff5a0ed05aaed34416d26e3efa12312bd2","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/10/502df2eebda132b6b3c915c63c07599b71705b","hash":"e9335d3b5bdd0ac1825458a2cbbcdeee986fc95b","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/12/c0bae253df0eb2b20b7c88e7cb1b93935b4610","hash":"73a45cf75d95853a361e9fd38ea239758c53946f","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/12/eefdfde4e15f9dc6d0ab41c7e78a29beae4a05","hash":"1af93f1bc099525f0657dc7019694a89b9c12601","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/0f/866392f16f120ce1fa81de151dceedabf30bcc","hash":"8cb9a5673fc309883f08f7b28d2285d4fd6d6d25","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/11/a3d39a0dcbb2f0c95f6aaf1795c708bb541b54","hash":"4f66596e23350369171578db7cad377387d881cb","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/13/855065037d71e3d81e258beb95c86dccbe83a4","hash":"6dd029a84804bb8c9a6b9deed569c9c2c3445629","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/14/a16cad3e0722952bae78768f4ef457dbfb4c0d","hash":"d3484d2946700bb7de29d20018611dee1277d5f6","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/14/ac7172f4dc29d965ece7306047f8f7aa784274","hash":"751c1ea96446c45dd7fc53389f1d77c88c4baefa","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/16/923e0dbc07e77c8ac340dc8e7eff83dc6eb537","hash":"61f285d184bcfbb5e81c6079771e54dd0d50ad36","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/16/9b1b9a3421aca8822620e515f3b375e72bd2d5","hash":"ab2685272cdea8fb81d5d72e80bef18bd5ad6056","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/15/6b697438e5015b9a38528c7862565a1fd9c23d","hash":"1a4a9b744499d9059a9ab60bdc24b77e736e22e6","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/17/5003dc28c68ec832558a5fd7730155262a831d","hash":"08c364001e2ea8d9d8b4b741919a0cce81f95e42","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/18/854ea32ee834fdc4d4bd99cf336815e7d0077e","hash":"dc6036ffb01b50fdbad001124729fb05e5291a92","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/18/e1abd47f6274ffd7ed82dc00decd1c00c6e323","hash":"5a569722fa4f206672376b71c3e1c16f643e64f7","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/19/cb0b902e54d7d52ed0662eafceaf32b7d4071f","hash":"7e77acac6f742a36308f3470ce32b1add67074eb","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/1b/ffe5031a38f5c103757b10d015d0140ab7afb2","hash":"b2653508a5dba9aad6c9aee7f077c8058600d893","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/1d/0437aefdbb848e3b0f500bf0e319b993786977","hash":"acad9da4d95e9e77601523c061989b4aae4890e4","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/1e/6843316b3b3be83c6296e38edbcf7a1a389eaa","hash":"b85a7e69e5655a3e37e9fc6d0f7e2bacdbff58fc","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/20/4221c1967816ecd037a8395f65e78d0ebb95a2","hash":"8a9c4fef9b11eeae8c25de73cf2dac67462c1ab6","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/21/33108c96d813b401a64f3468c9948182fcfa03","hash":"2617252ab415d17eac7d8c40fe2c8566b382b17d","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/21/9316ef84bd01997cd00b1d0a397985ec61c822","hash":"a60be79fb2c8622cabd2c1ad49f8cab75b56406d","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/22/710a83abc0500223099aafdfe938a1632c6e69","hash":"5892aa3f69d9e0bea55c87e843224429190c8ef7","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/25/714ed29ab6fcf0355da4b45ac602fac0154efb","hash":"333809419ce99e47ee80ea6c61bd6361b2dd4f6a","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/2c/b7aae11210afcb756c9dd8478886343c8ed16e","hash":"67cbda9bd37e7d9010205154350a7d83dba986c1","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/2d/1088d0ded8722806509f50f4c8aa7fe2397055","hash":"4915c9b3287d68e246d9e93b96867348b1a2a5c8","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/2d/fa3e3175c97d93b0238f49e5e9048ae4e3a95a","hash":"9dd76d111a75890f9feda9d2d436bc1eb2c45d35","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/2d/fac691dd9052ef36f1f6ef2a6e147abf09b4ca","hash":"d35ddc2bc47169977b6efadfcb66655a9def0333","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/30/b01c6427ac840bd865c0ee4b75582c410f1c0a","hash":"e00f6a011f4f78bebe2d0f50c84476b8a85ac582","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/30/b67e021f37cc606d592949d75301919fcfd60e","hash":"b479cb41d178b71c2009bfc3848e627a09542068","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/2b/db6033629c9fef9fda069d92aeea8c3aaa4f22","hash":"1784ba0031282d01a06561723aea720e96db70db","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/31/2b64d71d134592174d1405ac37ad7e05463a6b","hash":"f0708644f128c829b0021de9b6380e2ba9972e0e","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/31/8ec8bba329788906cb58019fa04e47fd1fa7f4","hash":"ee1f1395c57e9f3cfbe10236712a719db2a173ed","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/31/daeddf243aee85f3ad268f7846f7396a8c55ce","hash":"3cf4865ff17eb212d16cff0bd0e1a88497643016","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/31/db88014c65791c6f90ac0bc2ec05cf357dcb42","hash":"e03e5c46b9cdc5d7dcbf2c605d398e2c5a0a6774","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/33/595189be97031db6536c7d8242c3a02aa1f8b9","hash":"04afd0f559d281bee0b17b00b933c69a11fa5ff3","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/35/84c8a781abd6116ed585d50a4586e485491860","hash":"31d5a4a413f1a67480ea02878389be367a2e2e68","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/35/d42e808f0a8017b8d52a06be2f8fec0b466a66","hash":"78537d1ed6c5d74a9db86a7c127b3d0fccb15b2f","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/35/effe878d4ec55bca6a949a1ef886fb671b67a9","hash":"92353469fec892910167fae10b80b07a820b0b4a","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/36/7890a4af658d073d2b79c06829337d45434b84","hash":"6668ecb7c9d769947940486cfa3fa79b548cf2db","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/36/973490ad2a7192f65365ad5eb55cb99f6c4593","hash":"6b9539d7cec8f221017027cb9dad3e1afe50947f","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/37/d751352319f4e9e2b2f8ffc2d0d1f0044271ff","hash":"17509139f6720f968f944f0f7e27426a30b499cb","modified":1532575005000},{"_id":"themes/hexo-theme-next/.git/objects/38/2dbd9cddb71f14557dd07dd4bee4d199eb36e2","hash":"0be62abd44c5f70d78d527ec999b3fca9dc7aaf1","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/39/5e65a14c1292a8dbb6e0baea92ae0bfcea4343","hash":"15acc76f1985c815db2edef178dc8e639eb180dd","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/39/c4f20b707d65c2c3543defc53bf9f56863cc55","hash":"182d01e519499f887fbf074a368c7e35bb41ce88","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/3a/f4f9d6f14e39b48e9c449de1c660e245a2bc27","hash":"bf9503b3af60d018a7b9ad9e177b424b14a970e5","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/3b/40f43e7da91b6750dc2cb45528fe356da68803","hash":"90a513b029a6f35375a524988e32d7932d6155f4","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/3b/a1de5e49402ca387064c2439db1aa0161e4179","hash":"e812f60960a4264c95f1d9cab00670a912aa4b7a","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/3b/fd8f0ec1dc477f499c9a2d417e460491a4bdd2","hash":"b534d40cf31c5d234c2f7e6fc551e82556a7fe0f","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/3f/26afdb299278921e41f06600545697d8bb8978","hash":"adec8a4b36a357c9e89a9cef272d3717c2d221c9","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/3f/d95b25cfb21070793660c867ecb536075d51a1","hash":"9fac8ad59531c34674ac172cc6674c23a6c71d6d","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/40/72359be84eb7b27887ab489b170c5dc5d550ee","hash":"2a4d037ece5f665a3a06494ae503117b646f7279","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/43/0bf8aeb8b8baa571c5d5ffc3fe35b1a8dae4dc","hash":"d47667d9e2333620ecd37e574570bc59f77862e9","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/43/455b0d79b043abaeea83cd4df747c9fb36f03f","hash":"423318172bd828a38ab427029b1d32a27489606f","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/44/db571ab5324b5d00a0888754a55e9400feccae","hash":"7a4b5dec7ac39d07fce3111df9bf36bbc69723d0","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/45/1db575fa9eec3eeedfd2a43f9e4d8c27b51803","hash":"38049d9d9a95034e5d0540e60555b47929280c0b","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/45/9a20dbcce4e1ecc4891b56617304db0bb5cf20","hash":"c75f73c5dd494ba4be4c00a8bf3134817dda90b8","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/46/3276a8cf4ba6fe5e9753d1ef199738204e2eb4","hash":"b6da815eeea727f80105f4a297923884d4713404","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/47/3f5d98f8d4adafc12b794b097b41549b9af43f","hash":"05b11fb590b77244367bfcee468072f786e015cc","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/48/28216f238bdd9bd5a2ec70d6a65440ee679c6d","hash":"10f7b8566ce1c0a301cb3cdd71d2d08674b2f0c7","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/49/8409d9ce8750d32f21d1e80e9a25a9f0513509","hash":"f3b0a3dc15020b851559c31d72764b0826676cc7","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/49/b94253f1a62e59e7a8186713add96cc66cdf8c","hash":"3d83dc4fff99fdff69ab4cb70c4eac87447bb7a2","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/4a/5fb22afc445df3fc08cbfe9e0c788d0b58d272","hash":"ec4b1d7a35f15f59f5e05b4a8a8d1566227a869a","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/4b/ccd14f6d44c4e1fbf38375bd677b3231dca03a","hash":"9741f5cac94798a691db771777dbdefc2f58258d","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/4c/426a213e877a4d379483129a41c28f478ed7e7","hash":"6e626fb54eddcfe94d3cd49be8255ec14737db48","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/50/a0db2cca42191889d072190abd94634eeb9b46","hash":"e10d7b076bafa7e6f272a4020eed012f97ed3f70","modified":1532575027000},{"_id":"themes/hexo-theme-next/.git/objects/51/19eba656e540fcd15781c12cbe26f3bdb52dd6","hash":"4f046a05cf62a396389edd29e4cec2cdcec22599","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/53/4bae82f9d80b26d73391aaee15d86781a4e676","hash":"01d27c6fcbde807e2b8a04fba1c3d9fb28a2c049","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/54/a691f81598172c378f35c30774b0d428294d37","hash":"f0119d1e14ee480cecf273e0458ddba152315f45","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/55/0704b330ccd200db92fd22cb250f805f8fe95b","hash":"a545cce157ebebd1928dd79cf1e31698e5791ba4","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/57/1b407073db8ad3fa529b41b88e80e10be2f92d","hash":"3f0256f959aa200be1c8c0e2f3727567ed50f2b8","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/55/60193ccc5d768df40766ba54491f1822ed683c","hash":"ea0b4992660ba9153b38714047469d7a150f4c98","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/58/244c80e39818c221deba344cd0867f7fc0881e","hash":"1dd1d66392bf08f60943bb54dda0a023495cde7b","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/5b/d633b7ff5278866ad6fad8db1505d302226f60","hash":"8570e1f62cabf23575d0a7649bf37bf07a2b78f5","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/5d/7e72be0d436115388e0a4472c17ee8cd7a3da4","hash":"ea066c263a1bdcdad501a7f791542a4c35722581","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/5d/b3d4ac2e42459be7f72b6ce88f697d42b931b4","hash":"13c3052cf9b64c5e6f396eb23556931f5fed2bbc","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/5e/950905b18f9c5645c4a32c8713c7998566bcba","hash":"18fcf5965b980e10b13772ff9a336c292caf63a6","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/5f/96b99a1e23849fc0a7ce286e71e5eed48aa08e","hash":"57c818415fe4b018c8f53c2398b9ef91d6ec5468","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/60/763a8640f1c7e3d2f839d41775806a2ad2caa7","hash":"4638b932f094d5f808eaee77b6ac71c2b57122b7","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/62/0b1e829eb8b6fd72426f3009866b79d8ee2e7b","hash":"f4b4e5001d6fa2046e1fb648056389ef28c8a7f5","modified":1598428569368},{"_id":"themes/hexo-theme-next/.git/objects/63/937f7cf4339298b4bdac963f094dcef83eadda","hash":"040fec0826e38d834d9f61821f10040780c8b104","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/63/d294368d9e280e976902648209486ffd056a1a","hash":"0dca77e6355e04537383b9362d4f239168d16f39","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/63/f58a91e0ba6f41193c5447e036f80ec8561973","hash":"d26c7d504a5c3d9236eb0c87067ac5b4215bfdeb","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/66/192e3bfb2cfbd798cc22b4b461392058ddc3b3","hash":"5a60d5c0783aa79ea0d91a545ab75033e3eed10d","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/69/38779753f9ee9eae163f02c6ad5cd38b170cf1","hash":"1aacbd790febe7a75d1e24d7de787ca66e909df9","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/6a/ac05c0137f228e44b4fbc0b78a678ca6b78be5","hash":"74c641d5586982f78e1d0f856f8fa183b3d8dd33","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/6c/5dc537cdeee0a8870adaf9aa3b1e99ebafaf94","hash":"28e5d2df553102573141a7c4de879491784d1a20","modified":1532575005000},{"_id":"themes/hexo-theme-next/.git/objects/6c/64a7194736abd8857ceb7ab858bb865913044c","hash":"51b34d1fe0c3c13ecacf08afa871e9f68cfbaf2d","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/6c/d7b2c9601a802ad675c3bb1a216f749130b72f","hash":"03989720c0cc41633cf025ab004ac3868d2e47c4","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/6d/3606fb380d0f1c4423b1e8a6cea1fa6d36b319","hash":"b5ba5c38cd6bd65547cdcc058ba68d22d2adcbe9","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/6d/b17071c82e4c4104393646fe7f836114b724f6","hash":"306be57fdda05487ae8e3fe2166340e3647fec5f","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/6d/d94a4a0597f343424e0bcd3b8182df6a7a0c89","hash":"3336ddbf367e66040f7814fcebc5837cf13d11cf","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/6e/186847abc6568a3c9ba8766bae91edd00a8eeb","hash":"32b13233622af97306bf7fc84ce79e35709a2837","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/6e/ba55626c89674db23e3fa719937fbba3f676c7","hash":"e30bf14001a3adfbc5942e1d641be8c5507bc949","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/73/2e0c14ba916e9566fdf88dce57c72dc6997b80","hash":"f493c4e786782dcfe6c897c6ad1c1a84f37f4c7e","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/73/37e18235a9ead9c8c93b3d67cdf96035e3921c","hash":"1e2c688f9044c2bc0c75f50f32fe1c59f3cbd20b","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/73/f757843855f1eb0b23d8c81a8fb7f001989b66","hash":"84152c7efd120a5c51a8a60cea9cc39616f6ad1a","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/76/204303c69d7b5eda507df9760db69d02c2caa9","hash":"4ce0078bc64f0b95c415769f20ff2aff4ec687bc","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/76/8ee613945f9c4b465b9b4cfe40134fcee613ad","hash":"936f65bc896093c2fd67c757a8ad0b888451acf8","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/76/9d94d310785e4a1f48bd543eb7d5e4837dbedf","hash":"15316224a52b848aac909f8d6838d14d6c4ee99a","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/79/a4f2e0d16d8f7062b62587139b689cdc109c9f","hash":"c5b4aec896c532fd444f85c15038d351c1702541","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/7b/050d9865a3b2f8fbd128eae1f87ca4fd59a657","hash":"c19b8e4c1b86b724f7b36d027f5b70ae4fbab959","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/7b/60f6babb5f25f864148cae400fc25e22804317","hash":"605506e6f7355a515d325489e637b75c5d78aca2","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/7d/047f4db2eab08a840d263ac86eb2115664b4f4","hash":"9e144d04167bc6c5f8c9110b3237a87a2ba2082a","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/7c/2f9965da2177236cd2f08eb276ce504dd2211d","hash":"e694416d88be303eb2ae58b007881fbca81dc162","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/7e/22b209147c677eb1573a48e055a064dd398f15","hash":"997dd7bf1366eb1036a6e6c3953880b55f6aa57b","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/7e/7d4bd010bae8399e5c897205f1a0b00cf7b6f5","hash":"d1c7b6915f2fab345f133fcb15c88b65bb2a271f","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/81/c6f31ea4b8d36d19133c690c0701c240200e7e","hash":"0345b9520587fed41046ae057b90a60bb4552143","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/81/d98bda226dc681dd0fd5f8539fcf9d0c4bdc1b","hash":"a33b37ebbdbc657369f203c4c8368bacbde2b53c","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/83/f51d044ca29455945f8def1e71759ad45112b1","hash":"167107a699dfcf59af1be032840a7082b224c12d","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/87/0694530b1f12ac6d6c5c03dac2d3ace06c9b9a","hash":"bcd72bd22ab1d953b73f1fc48886b82e1f7bb2d8","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/87/6e12e7bb1cc41c298a41cb56f887d23195c2ba","hash":"61035d3d8a0a4771bfb4d68f6bca6e01dbd70f22","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/88/0eb825032d4ae1012e8f54f8e5e615817116ac","hash":"76290fd9b5b14f298f53bd189f3bf992fc014f55","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/8a/60a403d3de1a6315624d730458042e48057230","hash":"9d2ff653150dff4a9d2a1a8da12863ea982445d6","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/8b/3f02ba9305c21f107c7ad433ec376b7e02f641","hash":"b57558e0991a82eb4939667f2cb489e167d26a2c","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/8d/23d3f0bf3d858a9e0b54edc1e6b4437ec8468e","hash":"4675fbd267b2125d0939bfde552fe56451582099","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/8c/04ec7f07659076d3da5b0aafed1188af7746de","hash":"f3ab408b7b3a5bc185e2738cbd74c67d22e69b7f","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/8c/a48f3665a4225af8100c4ee8a465d94f3415ed","hash":"aa34bb3f1dd944cac744ae3e99350269ee4c8d79","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/8f/74ca818d4d29edb324bd7035e39d557f5d6163","hash":"05cb79dc28f8aba7e6f7e47bab44dcf3b9ac5caa","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/8f/b3b04923e10c2527b2db12e3c2441834c97651","hash":"2fa7f80a59a4ab9204a398f7ec0f620dcd7fa70c","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/90/52172c606fc4463b74c8c0898f099da6603ebd","hash":"58eabd4ff1bd89d0ff63f48b731e07ac4934938c","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/90/cecd13a552516139ef8acb42c7a9413bb6e4e3","hash":"f77f67651dcbf6a5698b97a4b29a86a8928ac8f7","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/92/05aeb09fffa6b571b4c6beee30b18400829c03","hash":"7108489bba664f36612804a465c2910a6efe85a8","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/92/9d3c446aba8ac3a7854bca3fa99071ec0f1b0a","hash":"324298d9a7b50c2a0640053f01aeaa53e8d1a7ca","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/92/def6d368bdf7696d7cf48e722a3f291473d18c","hash":"aa33759c05fd304d043fec10679330508219f742","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/93/4c61e15e4bf5309f3bff107465534aa32c8c91","hash":"b37ea988110c006affe5e7474417bd17f5b4f929","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/93/543e1fc2d89553497652be136a9914b57e3a03","hash":"62f4caae376530f2e86f2065d0a720d30daec2ed","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/93/8fa3d9f0d4b5ca28e442d4bad360685adda17c","hash":"223031fabac04d796808a1977b90052682c9c63e","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/93/c43cac5adc20009dffc9999906f72f19c29174","hash":"c9d5de37234fc13f77267ed8f7efbb9dcd2772ea","modified":1532575005000},{"_id":"themes/hexo-theme-next/.git/objects/93/c52583958110aa505c247db5d68fe8fae4c735","hash":"74c5849b4f017f32f88e3e131263811d56e1af3c","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/94/dc02c54739990504c8dadeca24d66803fafad9","hash":"a257ed3f8c02d3d5c76ffec25df9d548dbb9cde3","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/97/3eda70f1918bd58e0fe0dfb309dde6231e62bd","hash":"0e04be79ceb64c92c047284207b6d4d0542790f7","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/97/dc4cb795a3458bcaafce22bd79471242bda5db","hash":"1bee2d1c74f6c975b5511b2def29b51a85bcad14","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/98/9902574302a6378709709f7baab789b242ebbb","hash":"03552ed184c063d02aa69f9082dcc5c9ca7649e1","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/9a/1e19c993e4ccd9404b3bd2eecd96d4cc6211ef","hash":"614392facc856f5838aac32d432f4781da4b041d","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/99/99f3981a0f624ec98a63f2bef6b59ab5a4a130","hash":"e3318de2933bd40a6b707e06d63d97a72d2a41b6","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/9b/2985e060787838afdbd113e035ab9003a935e8","hash":"26ae348b92ad1e99edcfb221709c8c5d970c9c8c","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/9e/2112659b01fcfc385bd070c0d2fb1d6bbb80a8","hash":"3feb7b3c95632a29ff5ded73a26a735b366d2bd4","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/9f/12a6295b489a767e5df65df53bbe40765bc06d","hash":"0f8162ff2049e0f03e1115984acc125d0c022be1","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/a0/3a40c097ee728709f65d4ea7397903a389d484","hash":"260ab091942f1d6279b3933b22db30b5efcc9d50","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/a0/559ea2330f1ecc0062384c9785e66b8d4d2987","hash":"294e9e6e1a83fc055b33479a1b7ce47093bc3621","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/a0/bb6371002f36c275d90ef0a78f4e951c1b36a4","hash":"e73b2d57d9528243fa4163d4078ff74f274aa159","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/a0/d3a170d57d596717bd3a47a428439b95b573c1","hash":"0269f57f8571829e46480ad9681ccf0c8aa4bd2f","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/a1/916490733ae0ace912e00a320bdb2a78d45ef8","hash":"ae2fb9c2d260fd37822c87cb0443de44f441fb2b","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/a2/6273af232562db60229e75809403a784e36d28","hash":"57f280327903563e205ed329a365ee91b44dc17c","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/a2/02b7efed7817b2a729d64f453994c720d3332b","hash":"2437ede73ad98f191710572f57418bfb0c5142c2","modified":1598428569369},{"_id":"themes/hexo-theme-next/.git/objects/a2/d0ed3c5ff77e06714d473ca5e863ab4fa77096","hash":"ae8c832c4c85e141a458d68bc7b160a5260facb9","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/a2/b004fbb6237ffdf97c354ac62c2e3d95239c3c","hash":"f0f0678d50be78d955a6a810d1def7b0138b0a56","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/a3/47b065d3290069128e7d6f32cbda9f4a699dac","hash":"336c99f9a00e0436b4d17ed16bca5d6f1a09eecc","modified":1532575027000},{"_id":"themes/hexo-theme-next/.git/objects/a3/4b35209dc9d07cc1793bea62a1dec485a27d80","hash":"36966537c6bb9c73e31764bfacddab0939d378e6","modified":1532575005000},{"_id":"themes/hexo-theme-next/.git/objects/a3/64d8107eadd936ef242b7c5c0130fb11e75d22","hash":"8534f5154dc4d6e2fddd41fcde1810ded65a96e6","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/a6/6bd6191bf397b0031ea7fe1a1af12e524f40a1","hash":"72eb77627e1876b18c4a9124182d0c6d284d6514","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/a4/391396a9d6b6d7ff3b781f16904732fea40bdd","hash":"20fc3d5b4c6f0f72a178e61d15a8589bf475678d","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/a9/626eeff67784f009017d35d90de1926d2adda8","hash":"f67c4ea672b26e232bbdaf594dcfd1ac0e54e588","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/ab/0b0e681e093f1d5d3e55ca66147c337988b79a","hash":"543ff44f7fa87ee184a3aacf9c7a0e87a9d177ad","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/a6/f36d8afbc4899f421f01ec196d8b9a286fa79a","hash":"648f8c77d1d77cf9e7de00ca0d35bf671c1db2a8","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/ab/c29714258049fbda0af8ce76c3b49f7316899f","hash":"2273668f999d0ca001dc04a833d7e09c9598fdf5","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/b0/05011b2f9aa9f8ae35f90ce5a99a508b74003c","hash":"677917b649e3252035a6cdfa0d52a568a08179f0","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/b0/d911688c3d4f6e26561054ced262b24d1e0ad2","hash":"f631a5dbd5a24734597c5a6b75adfc0add2714b8","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/b0/f3bccaa0a6b449509e95a4331abf9bb1efbd09","hash":"5e6b69463a87a0b167cd02f9bf70ee1e51a4e16c","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/ac/23e7df21662e8414a9086f87839692b2dc9f56","hash":"e5e8e18c12221c5acab5836e100e48cb8b6ce962","modified":1532575005000},{"_id":"themes/hexo-theme-next/.git/objects/b2/385ae3f7f588d7ade9cf835b38548431d0ad49","hash":"338ca347bd28b12e4a7c291370dcc64b08afaec0","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/ac/2d530756f136ba27c2b2e442f289dcd0afd6e3","hash":"acdd87508e891a35b6d58280ca95d0590a92ccb8","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/b2/da253c753c00c2fde3879a2a5ec5dff65515df","hash":"3a3297d68412b88bed19cc749dbf81857bc1cbcc","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/b3/cfe47b3410df4b272e9b74edd9a936db4bf8e1","hash":"8087dca274d1baf8110179111ab595c5d8ef1660","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/b3/868a8584401c1b8a847f34b2439eb0c70ee623","hash":"520bb499f2fd4e69b9036978ae9dd5c59895bb28","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/b4/4306200fd30bd6bee61c1c831484a1fafcb70f","hash":"c86dfb38b7fbb0f8123891b3aba823f053124fbe","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/b9/45355315494d5c34d6bd2bea8feb0f0be306d7","hash":"d35d0125f225d8c25cf6f37906bd6530b98ee93d","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/b8/72066862f376c04a4db6e77f2bd1d3f8e49613","hash":"ecfa960cd3334c4502ef4fbc68afe98cef49faed","modified":1532575027000},{"_id":"themes/hexo-theme-next/.git/objects/ba/241010f9339337a781c28aef5798d2f26ff0a8","hash":"f26447b21e25c64545c67a2d64629990ba2ce211","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/bb/c81b43d518601b86d746e288b27444a9cffbe0","hash":"08a50d40678f4a4062c998a473b02616aa127f19","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/be/b4ceab905557e8166277cef360877156d7a4ae","hash":"c711072810bef93c9cd0bf12c680a5293e8d3b0f","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/bf/3edb945c31eb8a5cb38905ad213b1de14d7b14","hash":"17c351ad78b26a8337ae0a3c6bc74957603998d7","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/bf/6bc26f54a9fad17c960593ca0ae378c11ec2f6","hash":"dcfc4701fa19f2a0ad77da98bab08d113084c0ce","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/c0/5b0ea09bea918883da6d9549b559a86c6ecbc7","hash":"8eb1ab0732be3ef543fe48516061714087bb1eaf","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/bf/a26f4651e64f3fdea538af5cd4ab70ee7f98ac","hash":"0ae22a28dc869b4f29963d5923f4e47ebdc157b2","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/c0/ce1d679e94199c6a2bad793450f97d72b72b57","hash":"29d564e3d411fd1dd1aab8b365a86c1988ce05db","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/c2/fab35ec675478b8f2f18995d4678005c3484c6","hash":"efb364947069b1235b1e2e168e948805d3412b43","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/c6/245aa6a9fdebae0b5317a25ad6363ff2d7bcca","hash":"168fc50a0a9f8713b1392aa16ff9b031dd383128","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/c6/446e73f4f2a7aaf8eafd3c9787548b10074a84","hash":"290e0c8207bd151512df06f6b2f75e2b71fa0f28","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/c6/53b812f1af6f1b422c181049db44c8383be798","hash":"fe720ad3e1295b869e3863944577d8782f914367","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/c3/d2510b90036876d5ea2e5f0af5916811d5ed62","hash":"9dac098bfbf9ee0b9d918e1bca211f81146a8ef5","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/cb/fb8244f50d4ca23bdd56187e3ee6c55eb0cdbf","hash":"c48717c765f259e8dc2013fb233f2669bc3c67c9","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/ca/64dbd048fb7c6263afd9f24d1af00a443cf791","hash":"fed423938aebc85e4bbe58d66b2b430c78f0a7f5","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/cc/63d3cf4144bdf5a6605bda7bb54339f83ce470","hash":"be587589eba29416e2676b3d6b99012d265215bf","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/ce/06b46880336395ca4c7d90cb140064846a1c40","hash":"d0c4569eb0ffa7fc0166149634e7ee183eb30d82","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/ce/1461ddf61c383228f944c28bb3e1b6122f9e61","hash":"39c8cb133e898ed45f3ec52409457f5d43f1fb4c","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/ce/1820a4875cddbbdeb464a242c9d66bb4417ba2","hash":"4f8dda40bf7f6dfd696004f848810b26c11c0418","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/cf/0642795f0b53282dac0e2978ae6d1b03b365b5","hash":"7c8b1e12e4d34a5e3295e98f25a3529a7f33479e","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/cf/228616c4bb9834152b110fe7183cf78ef24b71","hash":"b43bae8d77a53cbc3ad7b0852124610a6cd93142","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/cf/abed7d73eee3176b90b91f3dd656666d8c639d","hash":"bda6cd7c2f9d7b568498f96a3d4248563034eabe","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/d1/3ebfbd5fabaab28cffc35c5cf8f3243f9b5c37","hash":"d1d7032cde6eb9e46df2905c101664ede513a2c0","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/cf/d9d9f3ceaa8961be864a05d0134b8c68a60961","hash":"31b8f69a9d33e19289c6bec43fb1891ebcbf811c","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/d0/e4779f4bed43fe339f0cf1eb045d8cb9430c87","hash":"89fdecf64fedf2cca040f73464d56ef834945733","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/d4/4e9ac4f93d8289ce96883d87432b1362f662dc","hash":"6b6b4b2bd155a691284eb477b49e7c2917553426","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/d4/6298de6242694814a7a219b407adc5cbe05513","hash":"ab43c051a218156c45e9bb698570c5b8e2b93f1f","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/d5/01fb5034b83386a0978b7415eaa498f36683a7","hash":"bf37e4971f510c6c08c4c9c503ba1b94253ff1ff","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/d5/978c1cca47064086d6e3dc4400e16d332f70f3","hash":"6cf5f8114df96524380cd3f9b4864b4747eee9a6","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/d5/c0cde09b0bd66009adaa989e3fcf0c6d6f289a","hash":"8108821d2efe6327054932cf0e3445483731313d","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/d6/0ac946d7b9c5ec7bf8a97f0b52cc2b7b848207","hash":"da1f2f115796cb4bce46f20a197b4280cdd436bb","modified":1598428569372},{"_id":"themes/hexo-theme-next/.git/objects/da/719fcb17d0d4933e782ccac329054840183f24","hash":"26a2441d02c7d21394e36a93889255edd23e69bb","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/db/115c76abefbb8d8492a9c6a56eb412b68d88db","hash":"ae408b9d4ae2e37a91c1b55e9d4badd784a3529d","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/db/3bb10a342cc39f226cd34cfaa6c2a2b7e17c96","hash":"7884c83e5277d1ebebc3e1ca3600cd1f428a6d40","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/df/029d1c016dbb605c2f1fbc45a2cdd4baf4061d","hash":"7f3f56f59f7df6261ca1737a599c88f13d3b3f49","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/df/7774be2ccfd1762968dd19aa75e809dbf73dd2","hash":"00077538882bb4e13b5fefc799e0ba477de769ba","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/e0/22242aa707a7f1d212783ef66ef453001f9deb","hash":"50a45968bb1ccddfe12a380ef261335b7c33a3de","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/e0/d08f64777521f9de6123667dc6c35e9e074690","hash":"c1d63492da5e3f96311c29814a6007f8b0e3a99f","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/e1/c1ed66b6b9cd34b3a5690271ea9df043f7fe16","hash":"1e7cb7469a4841925ae750f823dc480d6c7dfa93","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/e2/ac1d98df9a244fc196495ca299e440229420b6","hash":"8d0db21b32f73b3ee7ba2bc044c4c2b53f5667ca","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/e4/303252ea7ead999ccf23b4a1aa205276c9811c","hash":"9bc44de462045fe9b3b17750e2647a47358a2d9e","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391","hash":"c2baae88d6364d878fd67e778c6a5d8306ad4ab0","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/e8/068b045f4ab44dd914e6d5790344e0893674ba","hash":"ab417fb865cfcf58ed3991237226089364d7df46","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/e8/e1987c6cbd752cf39f724e084865a85b56ac9f","hash":"3516f2621bf9d94d803163a2aeb6f3c4efc36d81","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/ea/378cf1fa6850120248a69165d5f54cc4db6128","hash":"6426df48d58974f1a7842120a93c993e1794dc9b","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/eb/53836ce08cd48bd34a5dedc98834fd645fa6cb","hash":"d6ea2505120b5bf6f078c8beb639921be550d759","modified":1532575005000},{"_id":"themes/hexo-theme-next/.git/objects/ed/ea97fbb8615e9370c3b921f20636aa8784fd21","hash":"038a1ffe20821367fe2de800d5082d2cec7010ef","modified":1532575027000},{"_id":"themes/hexo-theme-next/.git/objects/ee/4e9782bf8b320c60a8d5d7aa070d47d752dba1","hash":"c97a61d5b2b115dba1edaaf88716acf47fc3b41b","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/ef/766f037bd222bc0683acb5457b51b24c6793d0","hash":"c18e304c301178282c16d3895374fec45643c02a","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/ef/b6768db9d768e6c7322905ed131b4f184c23f8","hash":"05656d771b406d3d835ac54d0a2740955a6a0198","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/ef/e31ec26ffd75a68fe20a33c02ef297c2cc5794","hash":"e0965a6d9b679883e0a6ccb94def9f9d031b97ae","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/f0/627b937bf9cd1fe8f0d2fe0b2a8ee6ab8f7c19","hash":"be8fb5033f8a6fcb54512595a222410a57fa801d","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/f5/7b44aa20cb77a291ece6c91b2ea0180a8797fd","hash":"3549deaecee23c842d3aed44f965f43e642ac2ec","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/e3/7aa70b3897c42169ee777cae18cca1f06c9490","hash":"904758709c8bc0bc0dd5cb6f4991323e8996832c","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/f5/b1bea9b1a529c32efff0b578053606e6c15840","hash":"fdd2b966babd31ea7d659880d94d64ec0589adf5","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/f5/c5c6cb8d3391fca4bf4555a935ed54af223cd8","hash":"3b87d4e2620ac9b619ae3ad225c29bc9437d811e","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/f5/e1c17ff10b12d70735d61064850c0feef6d4cf","hash":"4b47634327500cd3745fe7ad7a28280482316339","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/f8/d62383538909a39a5ef9b3f07fe49771bcded5","hash":"8077d0fe4e0f478b959eb4d06ee59f7d6d9945cb","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/fa/0cd4e4dabcf8422179fe2ff7aea016ba87b061","hash":"fb97d4b9fbc621513fd278fa40f353d3fd409cd7","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/fa/97eb73d5e4dee0f61dc04676321802f13de754","hash":"feac9de689be7f8687f6b1122430b6eb0848ba8b","modified":1598428569370},{"_id":"themes/hexo-theme-next/.git/objects/fa/dd6d07d965dcc5a04300ced34fa6280357aa13","hash":"df32df2ca1b548f3b1f10a560e3c3f10ecb31320","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/fc/42b713d4849030b0aad921f29b29473f2eadb3","hash":"172b08efff5aa576b627862c95b57aada5b7f336","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/fd/8b95566800f8d70399b94728d6e4ba476641f9","hash":"5794953cab53637cdd39ddd6b4f732a98cf92c57","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/fd/8d5ca566d47a77d9562168617bb2f6482bf9be","hash":"93d5b016ddd99f514ae6e718357d83f14e22077a","modified":1532070434000},{"_id":"themes/hexo-theme-next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1464079577000},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1464079577000},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1464079577000},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1464079577000},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1464079577000},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1464079577000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1464079577000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/.DS_Store","hash":"9ebaf912efb833d349de9de5d37859b4ea377f0c","modified":1468314690000},{"_id":"source/_posts/2016/6月/iOS开发资源终极汇总-转.md","hash":"c443d42637243c4d107589f143c922db4b602e83","modified":1468312993000},{"_id":"themes/hexo-theme-next/.git/objects/68/1bdd4d4c8dddbaeb4d4f2a1f58c38cad92afe0","hash":"10a364b66e2683c5072ef85f8e278e6cf01f19be","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/6f/d19abcb9ec83a925f17e9db1d44ad3fe2699b3","hash":"231fdb0baad06a394c9e1abeca03b9625e5ee686","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/6f/d4ede0f30f170eecb4156beb7235bf01fff00b","hash":"8abc3f762ae1b6c7fc8c633cd241e9fc36961e61","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/a3/0335d748c65c0bab5880b4e6dba53f5c79206c","hash":"b39e6a08f4de62cfd4a61258f0e8998ba83eca06","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/d7/994e13086b1ac1a216bd754c93e1bccd65f237","hash":"a82d756a2b0786dc5117fb67e6e80fd09074b1ab","modified":1532070434000},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1532575315000},{"_id":"source/_posts/2016/7月/别人总结的开源项目和库.md","hash":"82cbb280ef5ee5bef3474c2e3d700b42143f810b","modified":1469431337000},{"_id":"themes/hexo-theme-next/.git/logs/refs/heads/master","hash":"79aa300fc382e60dc8ed5a106fc1f86b1015b46e","modified":1532575005000},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/dev","hash":"c9abcffd1f03a6a76afa09334100c5003cf895a0","modified":1532575207000},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/master","hash":"3c959678e3fe6e51e935526c19927d21443a3be3","modified":1598428569396},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/servant","hash":"ee903ee2112907f4498fdb13674a640c685e95fb","modified":1532575207000},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/testing","hash":"15660a56eaab85fc3fd3324de8d61dbc2b09b42a","modified":1532575207000},{"_id":"themes/hexo-theme-next/.git/refs/remotes/upstream/dev","hash":"c9abcffd1f03a6a76afa09334100c5003cf895a0","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/refs/remotes/upstream/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/refs/remotes/upstream/servant","hash":"ee903ee2112907f4498fdb13674a640c685e95fb","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/refs/remotes/upstream/testing","hash":"15660a56eaab85fc3fd3324de8d61dbc2b09b42a","modified":1532070670000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1532575315000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/.DS_Store","hash":"a50a9a0db42ccf0068cee6ed0300aabd0f4cd5b1","modified":1468314508000},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/.DS_Store","hash":"52ed21892cb4e2c748a2f43700a65f0a6514e6f2","modified":1468314514000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1532575315000},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/dev","hash":"480089b8447163d1b70879705bdb4d21d64b8d7f","modified":1532575207000},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/master","hash":"89436948ca44e0cf525b4d07c2e5a9b50b9a4c5e","modified":1598428569398},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/servant","hash":"33ed808035f370d076513c3ad9c931c8c368c8ef","modified":1532575207000},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/testing","hash":"f80a6b27830b0a87698a314b5f671e45d884572a","modified":1532575207000},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/upstream/dev","hash":"73309b95752b79f3a97bd172782b5708c5fe8f69","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/upstream/master","hash":"22087ee0700180354a8ca7f31e82b93cb737e7c5","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/upstream/servant","hash":"0705bbf4da4d27e1134e34812aa9734daedc39f5","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/upstream/testing","hash":"ecbf2de10ecdebcef705d5e30feddd75c411dd86","modified":1532070670000},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1464079577000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1532575315000},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-30a62047db825c29862367a57fb4121cf6d92feb.idx","hash":"8f0c72499de301e3bca267f0bdd3568f561f88dc","modified":1532070670000},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-825042e43df39f3447ce2bac48fb0e33f6ec4b66.idx","hash":"ed47dcf0b9814aa5765e904ab5d4c97aaf70bf2e","modified":1532070477000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1532575315000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1532575315000},{"_id":"themes/hexo-theme-next/.git/objects/90/5dc914ff516d11f51f0b7ba4a70c372aa331fc","hash":"e6a62218f58179d1614d7e8f6da560f49b7a15e8","modified":1532070434000},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-825042e43df39f3447ce2bac48fb0e33f6ec4b66.pack","hash":"6315f987e918607a7058324958ac052ce3e1d87a","modified":1532070477000},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-30a62047db825c29862367a57fb4121cf6d92feb.pack","hash":"9ad9de360c43a67068d2438f2c83a469a48d8d74","modified":1532575005000}],"Category":[{"name":"iOS面试题","_id":"ckeb5g9cr0008rb0ux8glva07"},{"name":"iOS","_id":"ckeb5g9l5000grb0ut07ohngt"},{"name":"lessons","_id":"ckeb5g9l9000lrb0upf8pomg0"},{"name":"Mac","_id":"ckeb5g9lk000trb0urtpd50p9"}],"Data":[],"Page":[{"title":"About","date":"2016-07-12T08:52:55.000Z","type":"about","_content":"## 关于我\n\n#### 穷屌丝iOS开发\n###   现居杭州\n### 致力于区块链","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-07-12 16:52:55\ntype: about\n---\n## 关于我\n\n#### 穷屌丝iOS开发\n###   现居杭州\n### 致力于区块链","updated":"2018-07-30T06:33:12.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckeb5g9ch0001rb0unlkpsre3","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><h4 id=\"穷屌丝iOS开发\"><a href=\"#穷屌丝iOS开发\" class=\"headerlink\" title=\"穷屌丝iOS开发\"></a>穷屌丝iOS开发</h4><h3 id=\"现居杭州\"><a href=\"#现居杭州\" class=\"headerlink\" title=\"现居杭州\"></a>现居杭州</h3><h3 id=\"致力于区块链\"><a href=\"#致力于区块链\" class=\"headerlink\" title=\"致力于区块链\"></a>致力于区块链</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><h4 id=\"穷屌丝iOS开发\"><a href=\"#穷屌丝iOS开发\" class=\"headerlink\" title=\"穷屌丝iOS开发\"></a>穷屌丝iOS开发</h4><h3 id=\"现居杭州\"><a href=\"#现居杭州\" class=\"headerlink\" title=\"现居杭州\"></a>现居杭州</h3><h3 id=\"致力于区块链\"><a href=\"#致力于区块链\" class=\"headerlink\" title=\"致力于区块链\"></a>致力于区块链</h3>"},{"title":"Categories","type":"categories","comments":0,"date":"2016-07-12T09:03:11.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\ncomments: false\ndate: 2016-07-12 17:03:11\n---\n","updated":"2016-07-13T01:11:05.000Z","path":"categories/index.html","layout":"page","_id":"ckeb5g9ck0003rb0ui5ndi49x","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","type":"tags","comments":0,"date":"2016-07-12T09:01:57.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: \"tags\"\ncomments: false\ndate: 2016-07-12 17:01:57\n---\n","updated":"2016-07-13T01:09:39.000Z","path":"tags/index.html","layout":"page","_id":"ckeb5g9cn0005rb0u1tk6qzb4","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"我的简历模板","category":null,"_content":"\n\n# 联系方式\n- 姓名：lp\n- 手机：18937207(河南)\n- Email：jp380490944@gmail.com \n- twitter: lp380490944\n- Google+:\n---\n\n#  个人信息\n\n  - 刘攀/男/1989 \n  - 本科\n  - 工作年限：1年半\n  - 技术博客：http://lp380490944.github.io\n  - Github：https://github.com/lp380490944 \n  - 期望职位：iOS开发工程师\n  - 期望城市：北京\n\n---\n\n# 工作经历\n\n## XXX公司 （ 2013年9月 ~ 2014年9月 ）\n\n### A项目 \n我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。\n#### 项目简介\n#### 项目中用到的技术\n\n\n### B项目 \n我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。\n\n#### 项目简介\n#### 项目中用到的技术\n\n### 其他项目\n\n（每个公司写2~3个核心项目就好了，如果你有非常大量的项目，那么按分类进行合并，每一类选一个典型写出来。其他的一笔带过即可。）\n\n \n## XXX公司 （ 2013年3月 ~ 2013年8月 ）\n\n### MNO项目 \n我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。\n\n### 其他项目\n\n\n\n# 开源项目和作品\n\n## 开源项目\n\n - [STU](http://github.com/lp380490944/projectAlpha)\n - [WXYZ](http://github.com/lp380490944/projectname)\n\n## 技术文章\n- [iOS文字转语音播放](http://www.yangchengyu.net/2015/08/30/voice/)\n- [Cocoapods为iOS工程添加第三方开源类库](http://www.yangchengyu.net/2015/08/29/cocoapods/)\n\n## 技能清单\n\n以下均为我熟练使用的技能\n\n- 熟练使用C语言 ObjectC，熟悉swift\n- 数据库相关：MySQL/CoreData/SQLite\n- 版本管理、文档和自动化部署工具：Svn/Git/Composer\n- 云和开放平台：GAE/微博开放平台/微信应用开发\n- 开发工具xcode\n\n\n# 致谢\n感谢您花时间阅读我的简历，期待能有机会和您共事。\n  ","source":"_drafts/2015-11-14-我的简历.md","raw":"---\n\ntitle: 我的简历模板\n\ncategory: \ntags: []\n---\n\n\n# 联系方式\n- 姓名：lp\n- 手机：18937207(河南)\n- Email：jp380490944@gmail.com \n- twitter: lp380490944\n- Google+:\n---\n\n#  个人信息\n\n  - 刘攀/男/1989 \n  - 本科\n  - 工作年限：1年半\n  - 技术博客：http://lp380490944.github.io\n  - Github：https://github.com/lp380490944 \n  - 期望职位：iOS开发工程师\n  - 期望城市：北京\n\n---\n\n# 工作经历\n\n## XXX公司 （ 2013年9月 ~ 2014年9月 ）\n\n### A项目 \n我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。\n#### 项目简介\n#### 项目中用到的技术\n\n\n### B项目 \n我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。\n\n#### 项目简介\n#### 项目中用到的技术\n\n### 其他项目\n\n（每个公司写2~3个核心项目就好了，如果你有非常大量的项目，那么按分类进行合并，每一类选一个典型写出来。其他的一笔带过即可。）\n\n \n## XXX公司 （ 2013年3月 ~ 2013年8月 ）\n\n### MNO项目 \n我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。\n\n### 其他项目\n\n\n\n# 开源项目和作品\n\n## 开源项目\n\n - [STU](http://github.com/lp380490944/projectAlpha)\n - [WXYZ](http://github.com/lp380490944/projectname)\n\n## 技术文章\n- [iOS文字转语音播放](http://www.yangchengyu.net/2015/08/30/voice/)\n- [Cocoapods为iOS工程添加第三方开源类库](http://www.yangchengyu.net/2015/08/29/cocoapods/)\n\n## 技能清单\n\n以下均为我熟练使用的技能\n\n- 熟练使用C语言 ObjectC，熟悉swift\n- 数据库相关：MySQL/CoreData/SQLite\n- 版本管理、文档和自动化部署工具：Svn/Git/Composer\n- 云和开放平台：GAE/微博开放平台/微信应用开发\n- 开发工具xcode\n\n\n# 致谢\n感谢您花时间阅读我的简历，期待能有机会和您共事。\n  ","slug":"2015-11-14-我的简历","published":0,"date":"2015-12-29T08:27:58.000Z","updated":"2016-05-25T03:04:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9cd0000rb0un3pk7dv6","content":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>姓名：lp</li>\n<li>手机：18937207(河南)</li>\n<li>Email：<a href=\"mailto:jp380490944@gmail.com\" target=\"_blank\" rel=\"noopener\">jp380490944@gmail.com</a> </li>\n<li>twitter: lp380490944</li>\n<li>Google+:</li>\n</ul>\n<hr>\n<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>刘攀/男/1989 </li>\n<li>本科</li>\n<li>工作年限：1年半</li>\n<li>技术博客：<a href=\"http://lp380490944.github.io\">http://lp380490944.github.io</a></li>\n<li>Github：<a href=\"https://github.com/lp380490944\" target=\"_blank\" rel=\"noopener\">https://github.com/lp380490944</a> </li>\n<li>期望职位：iOS开发工程师</li>\n<li>期望城市：北京</li>\n</ul>\n<hr>\n<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><h2 id=\"XXX公司-（-2013年9月-2014年9月-）\"><a href=\"#XXX公司-（-2013年9月-2014年9月-）\" class=\"headerlink\" title=\"XXX公司 （ 2013年9月 ~ 2014年9月 ）\"></a>XXX公司 （ 2013年9月 ~ 2014年9月 ）</h2><h3 id=\"A项目\"><a href=\"#A项目\" class=\"headerlink\" title=\"A项目\"></a>A项目</h3><p>我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。</p>\n<h4 id=\"项目简介\"><a href=\"#项目简介\" class=\"headerlink\" title=\"项目简介\"></a>项目简介</h4><h4 id=\"项目中用到的技术\"><a href=\"#项目中用到的技术\" class=\"headerlink\" title=\"项目中用到的技术\"></a>项目中用到的技术</h4><h3 id=\"B项目\"><a href=\"#B项目\" class=\"headerlink\" title=\"B项目\"></a>B项目</h3><p>我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。</p>\n<h4 id=\"项目简介-1\"><a href=\"#项目简介-1\" class=\"headerlink\" title=\"项目简介\"></a>项目简介</h4><h4 id=\"项目中用到的技术-1\"><a href=\"#项目中用到的技术-1\" class=\"headerlink\" title=\"项目中用到的技术\"></a>项目中用到的技术</h4><h3 id=\"其他项目\"><a href=\"#其他项目\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><p>（每个公司写2~3个核心项目就好了，如果你有非常大量的项目，那么按分类进行合并，每一类选一个典型写出来。其他的一笔带过即可。）</p>\n<h2 id=\"XXX公司-（-2013年3月-2013年8月-）\"><a href=\"#XXX公司-（-2013年3月-2013年8月-）\" class=\"headerlink\" title=\"XXX公司 （ 2013年3月 ~ 2013年8月 ）\"></a>XXX公司 （ 2013年3月 ~ 2013年8月 ）</h2><h3 id=\"MNO项目\"><a href=\"#MNO项目\" class=\"headerlink\" title=\"MNO项目\"></a>MNO项目</h3><p>我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。</p>\n<h3 id=\"其他项目-1\"><a href=\"#其他项目-1\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><h1 id=\"开源项目和作品\"><a href=\"#开源项目和作品\" class=\"headerlink\" title=\"开源项目和作品\"></a>开源项目和作品</h1><h2 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h2><ul>\n<li><a href=\"http://github.com/lp380490944/projectAlpha\" target=\"_blank\" rel=\"noopener\">STU</a></li>\n<li><a href=\"http://github.com/lp380490944/projectname\" target=\"_blank\" rel=\"noopener\">WXYZ</a></li>\n</ul>\n<h2 id=\"技术文章\"><a href=\"#技术文章\" class=\"headerlink\" title=\"技术文章\"></a>技术文章</h2><ul>\n<li><a href=\"http://www.yangchengyu.net/2015/08/30/voice/\" target=\"_blank\" rel=\"noopener\">iOS文字转语音播放</a></li>\n<li><a href=\"http://www.yangchengyu.net/2015/08/29/cocoapods/\" target=\"_blank\" rel=\"noopener\">Cocoapods为iOS工程添加第三方开源类库</a></li>\n</ul>\n<h2 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h2><p>以下均为我熟练使用的技能</p>\n<ul>\n<li>熟练使用C语言 ObjectC，熟悉swift</li>\n<li>数据库相关：MySQL/CoreData/SQLite</li>\n<li>版本管理、文档和自动化部署工具：Svn/Git/Composer</li>\n<li>云和开放平台：GAE/微博开放平台/微信应用开发</li>\n<li>开发工具xcode</li>\n</ul>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>姓名：lp</li>\n<li>手机：18937207(河南)</li>\n<li>Email：<a href=\"mailto:jp380490944@gmail.com\" target=\"_blank\" rel=\"noopener\">jp380490944@gmail.com</a> </li>\n<li>twitter: lp380490944</li>\n<li>Google+:</li>\n</ul>\n<hr>\n<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>刘攀/男/1989 </li>\n<li>本科</li>\n<li>工作年限：1年半</li>\n<li>技术博客：<a href=\"http://lp380490944.github.io\">http://lp380490944.github.io</a></li>\n<li>Github：<a href=\"https://github.com/lp380490944\" target=\"_blank\" rel=\"noopener\">https://github.com/lp380490944</a> </li>\n<li>期望职位：iOS开发工程师</li>\n<li>期望城市：北京</li>\n</ul>\n<hr>\n<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><h2 id=\"XXX公司-（-2013年9月-2014年9月-）\"><a href=\"#XXX公司-（-2013年9月-2014年9月-）\" class=\"headerlink\" title=\"XXX公司 （ 2013年9月 ~ 2014年9月 ）\"></a>XXX公司 （ 2013年9月 ~ 2014年9月 ）</h2><h3 id=\"A项目\"><a href=\"#A项目\" class=\"headerlink\" title=\"A项目\"></a>A项目</h3><p>我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。</p>\n<h4 id=\"项目简介\"><a href=\"#项目简介\" class=\"headerlink\" title=\"项目简介\"></a>项目简介</h4><h4 id=\"项目中用到的技术\"><a href=\"#项目中用到的技术\" class=\"headerlink\" title=\"项目中用到的技术\"></a>项目中用到的技术</h4><h3 id=\"B项目\"><a href=\"#B项目\" class=\"headerlink\" title=\"B项目\"></a>B项目</h3><p>我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。</p>\n<h4 id=\"项目简介-1\"><a href=\"#项目简介-1\" class=\"headerlink\" title=\"项目简介\"></a>项目简介</h4><h4 id=\"项目中用到的技术-1\"><a href=\"#项目中用到的技术-1\" class=\"headerlink\" title=\"项目中用到的技术\"></a>项目中用到的技术</h4><h3 id=\"其他项目\"><a href=\"#其他项目\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><p>（每个公司写2~3个核心项目就好了，如果你有非常大量的项目，那么按分类进行合并，每一类选一个典型写出来。其他的一笔带过即可。）</p>\n<h2 id=\"XXX公司-（-2013年3月-2013年8月-）\"><a href=\"#XXX公司-（-2013年3月-2013年8月-）\" class=\"headerlink\" title=\"XXX公司 （ 2013年3月 ~ 2013年8月 ）\"></a>XXX公司 （ 2013年3月 ~ 2013年8月 ）</h2><h3 id=\"MNO项目\"><a href=\"#MNO项目\" class=\"headerlink\" title=\"MNO项目\"></a>MNO项目</h3><p>我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。</p>\n<h3 id=\"其他项目-1\"><a href=\"#其他项目-1\" class=\"headerlink\" title=\"其他项目\"></a>其他项目</h3><h1 id=\"开源项目和作品\"><a href=\"#开源项目和作品\" class=\"headerlink\" title=\"开源项目和作品\"></a>开源项目和作品</h1><h2 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h2><ul>\n<li><a href=\"http://github.com/lp380490944/projectAlpha\" target=\"_blank\" rel=\"noopener\">STU</a></li>\n<li><a href=\"http://github.com/lp380490944/projectname\" target=\"_blank\" rel=\"noopener\">WXYZ</a></li>\n</ul>\n<h2 id=\"技术文章\"><a href=\"#技术文章\" class=\"headerlink\" title=\"技术文章\"></a>技术文章</h2><ul>\n<li><a href=\"http://www.yangchengyu.net/2015/08/30/voice/\" target=\"_blank\" rel=\"noopener\">iOS文字转语音播放</a></li>\n<li><a href=\"http://www.yangchengyu.net/2015/08/29/cocoapods/\" target=\"_blank\" rel=\"noopener\">Cocoapods为iOS工程添加第三方开源类库</a></li>\n</ul>\n<h2 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h2><p>以下均为我熟练使用的技能</p>\n<ul>\n<li>熟练使用C语言 ObjectC，熟悉swift</li>\n<li>数据库相关：MySQL/CoreData/SQLite</li>\n<li>版本管理、文档和自动化部署工具：Svn/Git/Composer</li>\n<li>云和开放平台：GAE/微博开放平台/微信应用开发</li>\n<li>开发工具xcode</li>\n</ul>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_drafts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":0,"date":"2016-05-24T08:37:39.000Z","updated":"2016-05-24T15:12:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9ci0002rb0uz5g9lk97","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"私密日记","_content":"","source":"_drafts/私密日记.md","raw":"---\ntitle: 私密日记\ntags:\n---\n","slug":"私密日记","published":0,"date":"2016-05-25T01:59:36.000Z","updated":"2016-05-25T01:59:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9cl0004rb0ujvmgwutu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"iOS面试题一","_content":"\n\n\n#iOS面试题点集锦\n\n\n##第一部分\n\n\n\n###1、 简述OC中内存管理机制。与retain配对使用的方法是dealloc还是release，为什么？需要与alloc配对使用的方法是dealloc还是release，为什么？readwrite，readonly，assign，retain，copy，nonatomic 、atomic、strong、weak属性的作用？\n 答案：OC使用一种叫做引用计数机制来管理对象，如果对一个对象使用了alloc、[Mutable]copy、retain，那么你必须使用相应的release或者autorelease。也可以理解为自己生成的对象自己持有。非自己生成的对象，自己也能持有。不再需要自己持有的对象时释放。非自己持有的对象无法释放。生成并持有对象<alloc,new,copy,mutableCopy等>，持有对象<retain>,释放对象<releatse>，废弃对象<dealloc>.readwrite(默认)：可读可写，表示既有getter方法也有setter方法。readonly：表示只有getter方法，没有sitter方法。nonatomic：不考虑线程安全。atomic（默认）：线程操作安全。strong（默认）：ARC下和MRC下的retain一样，weak（ARC下）：和（MRC下）assign类似，区别是当weak指向的内存释放掉后自动置为nil，防止野指针。\n unsafe_unretained声明一个弱引用，但是不会自动置为nil，可能会出现野指针\n 线程安全下的setter和getter方法：\n \n \n\t\t - (NSString*)value{\n\t\t @synchronized(self){\n\t\t returen [[_value retain]autorelease];\n\t\t }\n\t\t \n\t\t }\n\t\t - (void)setValue:(NSString*)aValue\n\t\t {\n\t\t @synchronized(self)\n\t\t {\n\t\t [aValue retain];\n\t\t [_value release];\n\t\t _value = aValue;\n\t\t }\n\t\t \n\t\t }\n###2、类变量的@protected ,@private,@public,@package，声明各有什么含义？\n  \n  答案：上面的几个声明表明的是成员的作用域，@private作用范围只能在自身类（外界及不可访问、也不可继承）；@protected作用范围在自身类和子类，如果什么都不加修饰，默认是@protected（外界不可访问，但是可以继承）；@pubilc作用范围最大，可以在任何 地方被访问（外界既可以访问，又可以继承);@package作用范围在某个框架内\n\n###3、线程是什么？进程是什么？二者有什么区别和联系？\n\n答案：线程是CPU独立运行和对立调度的基本单位（可以理解为一个进程中执行的代码片段），进程是资源分配的基本单位（进程是一块包含了某些资源的内存区域）。进程是线程的容器，真正完成代码执行的是线程，而进程则作为线程的执行环境。一个程序至少包含一个进程，一个进程至少包含一个线程，一个进程中的多个线程共享当前进程所拥有的资源。\n###4、谈谈你对多线程开发的理解？ios中有几种实现多线程的方法？\n\n答案：好处：\n1.使用线程可以把程序中占据时间长的任务放到后台去处理，如图片、视频的下载。\n2.发挥多核处理器的优势，并发执行，让系统运行的更快更流畅，用户体验更好\n缺点：\n1.大量线程降低代码可读性\n2.更多的线程需要更多的内存空间\n3.当多个线程对同一个资源出现争夺的时候要注意线程安全的问题。\niOS有三种多线程编程技术：\n>1、NSThread（两种创建方式）\n[NSThread detachNewThreadSelector:@Seletor(doSomething:) toTarget:self withObject:nil];\nNSThread *myThread  = [[NSThread alloc]initWithTarget:self selector:@slecteor(doSomething:)Object:nil];\n[myThread start];\n\n>2、NSOperationQueue\nNSoperatuionQueue* oprationQueue = [[NsoperrationQueue alloc]init];\noperationQueue addOperationWithBlock:^{\n//这个Block语句块在子线程中执行\n}\n>3、Grand Central Dispatch （GCD）[Grand:盛大的意思，Central：中央、中间；dispatch：调度]\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,0),{\n//耗时操作PRIORITY：优先\ndispatch_async(dispatch_get_main_queue(),^{\n\n//更新界面\n})\n})\nPS：不显示创建线程的方法：用NSObject的类方法 performSelectorInBackground：withObject：创建一个线程：[Object PerformSelector:@selector(dosSomething:) withObject:nil];\n###5、线程同步和异步的区别？IOS中如何实现多线程的同步？\n答案：\n 同步：一个线程要等待上一个线程执行完才能执行当前的线程，生活中的例子（上厕所）。\n \n 异步：同时去做两件事或者多件事，比如边听歌边看报纸。\n \n 原子操作（atomic），加锁（NSLock，NSRecursive，NSConditionLock）、@synchronized\n \n###6、假设有一个字符串aabcad，请写一段程序，去掉字符串中不相邻的重复字符串，即上述字符串处理之后的输出结果为：aabcd\n答案：本题的题意是以第一个出现的字母作为参照，只要之后出现相同的字母并且和第一个字母不相邻，那么就删除。为防止删除某些字符之后，把之前不相邻的重复字符串转化为相邻字符串，所以可以先用空格替换掉需要删除的字符，最后对数组里面的空格进行处理。\n\n方法一：\n\n\n\t-(void)removeRepeat:(NSString *)aNum\r    {\r    NSMutableArray *mArr = [[NSMutableArray alloc]initWithCapacity:10];\r    for (int i = 0;i < aNum.length;i++)\r    {\r        [mArr addObject:[aNum substringWithRange:NSMakeRange(i,1)]];\r    }\r    NSLog(@\"- %@\", mArr);\r    [self compareNum:mArr];\r     NSLog(@\"%@\",mArr);\n\t     }\r//比较是否相等\n\n\r    -(NSMutableArray *)compareNum:(NSMutableArray *)mArr\r\t\t{\r\t    int count = mArr.count;//重新定义了,count不会减一\r    for (int j = 0; j < count - 1; j++)\r    {\r        for (int i = j; i < count - 1-1-1; i++)\r        {\r            NSLog(@\" %@  %@\",[mArr objectAtIndex:j],[mArr objectAtIndex:i + 2]);\r            NSString *a = [mArr objectAtIndex:j];\r            NSString *b = [mArr objectAtIndex:i+2];\r            \r\t if ([a isEqualToString:b])\r            {\r                [mArr replaceObjectAtIndex:i + 2 withObject:@\" \"];\r            }\r        }\r\r         }\r    \r    return mArr;\r\r    }\n    \n    \n 方法二：\n \n\t NSMutableString *str = [[NSMutableString alloc] initWithFormat: @\"aabcad\"];\n\n        for (int i = 0; i < str.length - 1; i++) {\n\n            unsigned char s = [str characterAtIndex:i];\n\n            //从后面隔一个 开始\n\n            for (int j = i + 2; j < str.length; j++) {\n\n                if (s == [str characterAtIndex:j]) {\n\n                    [str deleteCharactersInRange:NSMakeRange(j, 1)];\n\n                }\n\n            }\n\n        }\n\n         NSLog(@\"删重后： %@\",str);\n###7、\t获取一台设备唯一标识的方法有哪些？\n答案：\n\n一.UDID(Unique Device Identifier)\n\n\n二.UUID(Universally Unique Identifier)\n\n\n三.MAC Address\n\n\n四.OPEN UDID\n\n\n五.广告标示符（IDFA-identifierForIdentifier）\n\n\n六.Vindor标示符 (IDFV-identifierForVendor)\n\n\n七.推送token＋bundle_id\nios7之后用的时keychain（钥匙串）\n\n###8.ios类是否可以多继承？如果没有，那可以用其他方法实现吗？简述实现过程。\n答案：不可以 Ios 不可以多继承.可以用代理 用catogory、extension来实现\nCategory也叫分类或类,主要作是为 没有源代码的类添加法 。通过Category添加的法会成为原类的部分。从达到扩展个类的功能。\nExtension (延展)的主要作是管理类的“私有”法 \n\n###9.堆和栈的区别？\n答案：堆需要用户手动释放内存，而栈则是编译器自动释放内存\n堆栈的区别:  \n(1)管理方式:对于栈来讲,是由编译器自动管理,无需我们手工控制;对于堆来说,释放工作由程序员控制,容易产生 memory leak。 \n(2)申请大小:能从栈获得的空间较小,堆是向高地址扩展的数据结构,是不连续的内存区域。堆的大小受限于计算机系统中 有效的虚拟内存。由此可见,堆获得的空间比较灵活,也比较大。\n(3)碎片问题:对于堆来讲,频繁的new/delete势必会造成内存空间的不连续,从而造成大量的碎片,使程序效率降低。 对于栈来讲,则不会存在这个问题,因为栈是先进后出的队列,他们是如此的一一对应,以至于永远都不可能有一个内存块 从栈中间弹出 \n(4)分配方式:堆都是动态分配的,没有静态分配的堆。栈有2种分配方式:静态分配和动态分配。静态分配是编译器完成 的,比如局部变量的分配。动态分配由 alloca函数进行分配,但是栈的动态分配和堆是不同的,他的动态分配是由编译器 进行释放,无需我们手工实现。\n(5)分配效率:栈是机器系统提供的数据结构,计算机会在底层对栈提供支持:分配专门的寄存器存放栈的地址,压栈出栈 都有专门的指令执行,这就决定了栈的效率比较高。堆则是C/C++函数库提供的,它的机制是很复杂的。\n###10.ios本地数据存储都有哪几种方式？\n1.  NSKeyedArchiver（归解档）：采用归档的形式来保存数据，该数据对象需要遵守NSCoding协议，并且该对象对应的类必须提供encodeWithCoder:和initWithCoder:方法。\n2.  NSUserDefaults：用来保存应用程序设置和属性、用户保存的数据。用户再次打开程序或开机后这些数据仍然存在。NSUserDefaults可以存储的数据类型包括：NSData、NSString、NSNumber、NSDate、NSArray、NSDictionary。\n3.  Write写入方式 ：永久保存在磁盘中。\nNSCoding + NSKeyedArchiver实现复杂对象的存储\n4.  SQLite3\n5.  coredata\n\n###11. iOS动态类型和动态绑定、动态载入  \niOS的动态性来自三个方面：动态类型、动态绑定、动态载入、SEL类型 \r1、动态类型<弱类型>（id）：在代码的运行阶段判断代码的类型，使用id类型可以让应用在“运行时”使用任何类型来替换。动态类型让程序更加灵活，但是会使数据的统一性降低和代码的可读性。我们常用静态类型<强类型>（如NSString）,使用静态类型编译器可以完全分析你的代码，这让代码的性能和可预知性更高。\r2、动态绑定：让代码在运行时判断需要调用什么方法，而不是在编译时。\t动态类型和动态绑定使得选择哪个接收者已经调用什么方法都放到运行\r      时去完成。\t   3、动态载入：应用程序可以根据需要加载可执行代码以及资源，而不是    \r      在启动时就加载所有资源。\r4、SEL类型 iOS在编译的时候会根据方法的名字（包括参数序列），生成一个用来区分这个方法的唯一的ID，这个ID是SEL类型的，SEL的本质就是类方法的编号[函数地址]。（类似C语言里面的函数指针，但是OC的类不能直接使用函数指针，这样只能做一个@selector语法来取。注意：@selector是查找当前类（含子类）的方法。）\n","source":"_drafts/2015-11-17-iOS面试题.md","raw":"---\n\ntitle: iOS面试题一\n\ncategory : iOS面试题\ntags: []\n---\n\n\n\n#iOS面试题点集锦\n\n\n##第一部分\n\n\n\n###1、 简述OC中内存管理机制。与retain配对使用的方法是dealloc还是release，为什么？需要与alloc配对使用的方法是dealloc还是release，为什么？readwrite，readonly，assign，retain，copy，nonatomic 、atomic、strong、weak属性的作用？\n 答案：OC使用一种叫做引用计数机制来管理对象，如果对一个对象使用了alloc、[Mutable]copy、retain，那么你必须使用相应的release或者autorelease。也可以理解为自己生成的对象自己持有。非自己生成的对象，自己也能持有。不再需要自己持有的对象时释放。非自己持有的对象无法释放。生成并持有对象<alloc,new,copy,mutableCopy等>，持有对象<retain>,释放对象<releatse>，废弃对象<dealloc>.readwrite(默认)：可读可写，表示既有getter方法也有setter方法。readonly：表示只有getter方法，没有sitter方法。nonatomic：不考虑线程安全。atomic（默认）：线程操作安全。strong（默认）：ARC下和MRC下的retain一样，weak（ARC下）：和（MRC下）assign类似，区别是当weak指向的内存释放掉后自动置为nil，防止野指针。\n unsafe_unretained声明一个弱引用，但是不会自动置为nil，可能会出现野指针\n 线程安全下的setter和getter方法：\n \n \n\t\t - (NSString*)value{\n\t\t @synchronized(self){\n\t\t returen [[_value retain]autorelease];\n\t\t }\n\t\t \n\t\t }\n\t\t - (void)setValue:(NSString*)aValue\n\t\t {\n\t\t @synchronized(self)\n\t\t {\n\t\t [aValue retain];\n\t\t [_value release];\n\t\t _value = aValue;\n\t\t }\n\t\t \n\t\t }\n###2、类变量的@protected ,@private,@public,@package，声明各有什么含义？\n  \n  答案：上面的几个声明表明的是成员的作用域，@private作用范围只能在自身类（外界及不可访问、也不可继承）；@protected作用范围在自身类和子类，如果什么都不加修饰，默认是@protected（外界不可访问，但是可以继承）；@pubilc作用范围最大，可以在任何 地方被访问（外界既可以访问，又可以继承);@package作用范围在某个框架内\n\n###3、线程是什么？进程是什么？二者有什么区别和联系？\n\n答案：线程是CPU独立运行和对立调度的基本单位（可以理解为一个进程中执行的代码片段），进程是资源分配的基本单位（进程是一块包含了某些资源的内存区域）。进程是线程的容器，真正完成代码执行的是线程，而进程则作为线程的执行环境。一个程序至少包含一个进程，一个进程至少包含一个线程，一个进程中的多个线程共享当前进程所拥有的资源。\n###4、谈谈你对多线程开发的理解？ios中有几种实现多线程的方法？\n\n答案：好处：\n1.使用线程可以把程序中占据时间长的任务放到后台去处理，如图片、视频的下载。\n2.发挥多核处理器的优势，并发执行，让系统运行的更快更流畅，用户体验更好\n缺点：\n1.大量线程降低代码可读性\n2.更多的线程需要更多的内存空间\n3.当多个线程对同一个资源出现争夺的时候要注意线程安全的问题。\niOS有三种多线程编程技术：\n>1、NSThread（两种创建方式）\n[NSThread detachNewThreadSelector:@Seletor(doSomething:) toTarget:self withObject:nil];\nNSThread *myThread  = [[NSThread alloc]initWithTarget:self selector:@slecteor(doSomething:)Object:nil];\n[myThread start];\n\n>2、NSOperationQueue\nNSoperatuionQueue* oprationQueue = [[NsoperrationQueue alloc]init];\noperationQueue addOperationWithBlock:^{\n//这个Block语句块在子线程中执行\n}\n>3、Grand Central Dispatch （GCD）[Grand:盛大的意思，Central：中央、中间；dispatch：调度]\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,0),{\n//耗时操作PRIORITY：优先\ndispatch_async(dispatch_get_main_queue(),^{\n\n//更新界面\n})\n})\nPS：不显示创建线程的方法：用NSObject的类方法 performSelectorInBackground：withObject：创建一个线程：[Object PerformSelector:@selector(dosSomething:) withObject:nil];\n###5、线程同步和异步的区别？IOS中如何实现多线程的同步？\n答案：\n 同步：一个线程要等待上一个线程执行完才能执行当前的线程，生活中的例子（上厕所）。\n \n 异步：同时去做两件事或者多件事，比如边听歌边看报纸。\n \n 原子操作（atomic），加锁（NSLock，NSRecursive，NSConditionLock）、@synchronized\n \n###6、假设有一个字符串aabcad，请写一段程序，去掉字符串中不相邻的重复字符串，即上述字符串处理之后的输出结果为：aabcd\n答案：本题的题意是以第一个出现的字母作为参照，只要之后出现相同的字母并且和第一个字母不相邻，那么就删除。为防止删除某些字符之后，把之前不相邻的重复字符串转化为相邻字符串，所以可以先用空格替换掉需要删除的字符，最后对数组里面的空格进行处理。\n\n方法一：\n\n\n\t-(void)removeRepeat:(NSString *)aNum\r    {\r    NSMutableArray *mArr = [[NSMutableArray alloc]initWithCapacity:10];\r    for (int i = 0;i < aNum.length;i++)\r    {\r        [mArr addObject:[aNum substringWithRange:NSMakeRange(i,1)]];\r    }\r    NSLog(@\"- %@\", mArr);\r    [self compareNum:mArr];\r     NSLog(@\"%@\",mArr);\n\t     }\r//比较是否相等\n\n\r    -(NSMutableArray *)compareNum:(NSMutableArray *)mArr\r\t\t{\r\t    int count = mArr.count;//重新定义了,count不会减一\r    for (int j = 0; j < count - 1; j++)\r    {\r        for (int i = j; i < count - 1-1-1; i++)\r        {\r            NSLog(@\" %@  %@\",[mArr objectAtIndex:j],[mArr objectAtIndex:i + 2]);\r            NSString *a = [mArr objectAtIndex:j];\r            NSString *b = [mArr objectAtIndex:i+2];\r            \r\t if ([a isEqualToString:b])\r            {\r                [mArr replaceObjectAtIndex:i + 2 withObject:@\" \"];\r            }\r        }\r\r         }\r    \r    return mArr;\r\r    }\n    \n    \n 方法二：\n \n\t NSMutableString *str = [[NSMutableString alloc] initWithFormat: @\"aabcad\"];\n\n        for (int i = 0; i < str.length - 1; i++) {\n\n            unsigned char s = [str characterAtIndex:i];\n\n            //从后面隔一个 开始\n\n            for (int j = i + 2; j < str.length; j++) {\n\n                if (s == [str characterAtIndex:j]) {\n\n                    [str deleteCharactersInRange:NSMakeRange(j, 1)];\n\n                }\n\n            }\n\n        }\n\n         NSLog(@\"删重后： %@\",str);\n###7、\t获取一台设备唯一标识的方法有哪些？\n答案：\n\n一.UDID(Unique Device Identifier)\n\n\n二.UUID(Universally Unique Identifier)\n\n\n三.MAC Address\n\n\n四.OPEN UDID\n\n\n五.广告标示符（IDFA-identifierForIdentifier）\n\n\n六.Vindor标示符 (IDFV-identifierForVendor)\n\n\n七.推送token＋bundle_id\nios7之后用的时keychain（钥匙串）\n\n###8.ios类是否可以多继承？如果没有，那可以用其他方法实现吗？简述实现过程。\n答案：不可以 Ios 不可以多继承.可以用代理 用catogory、extension来实现\nCategory也叫分类或类,主要作是为 没有源代码的类添加法 。通过Category添加的法会成为原类的部分。从达到扩展个类的功能。\nExtension (延展)的主要作是管理类的“私有”法 \n\n###9.堆和栈的区别？\n答案：堆需要用户手动释放内存，而栈则是编译器自动释放内存\n堆栈的区别:  \n(1)管理方式:对于栈来讲,是由编译器自动管理,无需我们手工控制;对于堆来说,释放工作由程序员控制,容易产生 memory leak。 \n(2)申请大小:能从栈获得的空间较小,堆是向高地址扩展的数据结构,是不连续的内存区域。堆的大小受限于计算机系统中 有效的虚拟内存。由此可见,堆获得的空间比较灵活,也比较大。\n(3)碎片问题:对于堆来讲,频繁的new/delete势必会造成内存空间的不连续,从而造成大量的碎片,使程序效率降低。 对于栈来讲,则不会存在这个问题,因为栈是先进后出的队列,他们是如此的一一对应,以至于永远都不可能有一个内存块 从栈中间弹出 \n(4)分配方式:堆都是动态分配的,没有静态分配的堆。栈有2种分配方式:静态分配和动态分配。静态分配是编译器完成 的,比如局部变量的分配。动态分配由 alloca函数进行分配,但是栈的动态分配和堆是不同的,他的动态分配是由编译器 进行释放,无需我们手工实现。\n(5)分配效率:栈是机器系统提供的数据结构,计算机会在底层对栈提供支持:分配专门的寄存器存放栈的地址,压栈出栈 都有专门的指令执行,这就决定了栈的效率比较高。堆则是C/C++函数库提供的,它的机制是很复杂的。\n###10.ios本地数据存储都有哪几种方式？\n1.  NSKeyedArchiver（归解档）：采用归档的形式来保存数据，该数据对象需要遵守NSCoding协议，并且该对象对应的类必须提供encodeWithCoder:和initWithCoder:方法。\n2.  NSUserDefaults：用来保存应用程序设置和属性、用户保存的数据。用户再次打开程序或开机后这些数据仍然存在。NSUserDefaults可以存储的数据类型包括：NSData、NSString、NSNumber、NSDate、NSArray、NSDictionary。\n3.  Write写入方式 ：永久保存在磁盘中。\nNSCoding + NSKeyedArchiver实现复杂对象的存储\n4.  SQLite3\n5.  coredata\n\n###11. iOS动态类型和动态绑定、动态载入  \niOS的动态性来自三个方面：动态类型、动态绑定、动态载入、SEL类型 \r1、动态类型<弱类型>（id）：在代码的运行阶段判断代码的类型，使用id类型可以让应用在“运行时”使用任何类型来替换。动态类型让程序更加灵活，但是会使数据的统一性降低和代码的可读性。我们常用静态类型<强类型>（如NSString）,使用静态类型编译器可以完全分析你的代码，这让代码的性能和可预知性更高。\r2、动态绑定：让代码在运行时判断需要调用什么方法，而不是在编译时。\t动态类型和动态绑定使得选择哪个接收者已经调用什么方法都放到运行\r      时去完成。\t   3、动态载入：应用程序可以根据需要加载可执行代码以及资源，而不是    \r      在启动时就加载所有资源。\r4、SEL类型 iOS在编译的时候会根据方法的名字（包括参数序列），生成一个用来区分这个方法的唯一的ID，这个ID是SEL类型的，SEL的本质就是类方法的编号[函数地址]。（类似C语言里面的函数指针，但是OC的类不能直接使用函数指针，这样只能做一个@selector语法来取。注意：@selector是查找当前类（含子类）的方法。）\n","slug":"2015-11-17-iOS面试题","published":0,"date":"2015-12-29T08:27:58.000Z","updated":"2016-05-25T03:04:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9co0006rb0uevywhizo","content":"<p>#iOS面试题点集锦</p>\n<p>##第一部分</p>\n<p>###1、 简述OC中内存管理机制。与retain配对使用的方法是dealloc还是release，为什么？需要与alloc配对使用的方法是dealloc还是release，为什么？readwrite，readonly，assign，retain，copy，nonatomic 、atomic、strong、weak属性的作用？<br> 答案：OC使用一种叫做引用计数机制来管理对象，如果对一个对象使用了alloc、[Mutable]copy、retain，那么你必须使用相应的release或者autorelease。也可以理解为自己生成的对象自己持有。非自己生成的对象，自己也能持有。不再需要自己持有的对象时释放。非自己持有的对象无法释放。生成并持有对象&lt;alloc,new,copy,mutableCopy等&gt;，持有对象<retain>,释放对象<releatse>，废弃对象<dealloc>.readwrite(默认)：可读可写，表示既有getter方法也有setter方法。readonly：表示只有getter方法，没有sitter方法。nonatomic：不考虑线程安全。atomic（默认）：线程操作安全。strong（默认）：ARC下和MRC下的retain一样，weak（ARC下）：和（MRC下）assign类似，区别是当weak指向的内存释放掉后自动置为nil，防止野指针。<br> unsafe_unretained声明一个弱引用，但是不会自动置为nil，可能会出现野指针<br> 线程安全下的setter和getter方法：</dealloc></releatse></retain></p>\n<pre><code>- (NSString*)value{\n@synchronized(self){\nreturen [[_value retain]autorelease];\n}\n\n}\n- (void)setValue:(NSString*)aValue\n{\n@synchronized(self)\n{\n[aValue retain];\n[_value release];\n_value = aValue;\n}\n\n}\n</code></pre><p>###2、类变量的@protected ,@private,@public,@package，声明各有什么含义？</p>\n<p>  答案：上面的几个声明表明的是成员的作用域，@private作用范围只能在自身类（外界及不可访问、也不可继承）；@protected作用范围在自身类和子类，如果什么都不加修饰，默认是@protected（外界不可访问，但是可以继承）；@pubilc作用范围最大，可以在任何 地方被访问（外界既可以访问，又可以继承);@package作用范围在某个框架内</p>\n<p>###3、线程是什么？进程是什么？二者有什么区别和联系？</p>\n<p>答案：线程是CPU独立运行和对立调度的基本单位（可以理解为一个进程中执行的代码片段），进程是资源分配的基本单位（进程是一块包含了某些资源的内存区域）。进程是线程的容器，真正完成代码执行的是线程，而进程则作为线程的执行环境。一个程序至少包含一个进程，一个进程至少包含一个线程，一个进程中的多个线程共享当前进程所拥有的资源。</p>\n<p>###4、谈谈你对多线程开发的理解？ios中有几种实现多线程的方法？</p>\n<p>答案：好处：<br>1.使用线程可以把程序中占据时间长的任务放到后台去处理，如图片、视频的下载。<br>2.发挥多核处理器的优势，并发执行，让系统运行的更快更流畅，用户体验更好<br>缺点：<br>1.大量线程降低代码可读性<br>2.更多的线程需要更多的内存空间<br>3.当多个线程对同一个资源出现争夺的时候要注意线程安全的问题。<br>iOS有三种多线程编程技术：</p>\n<blockquote>\n<p>1、NSThread（两种创建方式）<br>[NSThread detachNewThreadSelector:@Seletor(doSomething:) toTarget:self withObject:nil];<br>NSThread *myThread  = [[NSThread alloc]initWithTarget:self selector:@slecteor(doSomething:)Object:nil];<br>[myThread start];</p>\n</blockquote>\n<blockquote>\n<p>2、NSOperationQueue<br>NSoperatuionQueue* oprationQueue = [[NsoperrationQueue alloc]init];<br>operationQueue addOperationWithBlock:^{<br>//这个Block语句块在子线程中执行<br>}<br>3、Grand Central Dispatch （GCD）[Grand:盛大的意思，Central：中央、中间；dispatch：调度]<br>dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,0),{<br>//耗时操作PRIORITY：优先<br>dispatch_async(dispatch_get_main_queue(),^{</p>\n</blockquote>\n<p>//更新界面<br>})<br>})<br>PS：不显示创建线程的方法：用NSObject的类方法 performSelectorInBackground：withObject：创建一个线程：[Object PerformSelector:@selector(dosSomething:) withObject:nil];</p>\n<p>###5、线程同步和异步的区别？IOS中如何实现多线程的同步？<br>答案：<br> 同步：一个线程要等待上一个线程执行完才能执行当前的线程，生活中的例子（上厕所）。</p>\n<p> 异步：同时去做两件事或者多件事，比如边听歌边看报纸。</p>\n<p> 原子操作（atomic），加锁（NSLock，NSRecursive，NSConditionLock）、@synchronized</p>\n<p>###6、假设有一个字符串aabcad，请写一段程序，去掉字符串中不相邻的重复字符串，即上述字符串处理之后的输出结果为：aabcd<br>答案：本题的题意是以第一个出现的字母作为参照，只要之后出现相同的字母并且和第一个字母不相邻，那么就删除。为防止删除某些字符之后，把之前不相邻的重复字符串转化为相邻字符串，所以可以先用空格替换掉需要删除的字符，最后对数组里面的空格进行处理。</p>\n<p>方法一：</p>\n<pre><code>-(void)removeRepeat:(NSString *)aNum\n{\nNSMutableArray *mArr = [[NSMutableArray alloc]initWithCapacity:10];\nfor (int i = 0;i &lt; aNum.length;i++)\n{\n    [mArr addObject:[aNum substringWithRange:NSMakeRange(i,1)]];\n}\nNSLog(@&quot;- %@&quot;, mArr);\n[self compareNum:mArr];\n NSLog(@&quot;%@&quot;,mArr);\n     }\n</code></pre><p>//比较是否相等</p>\n<pre><code>-(NSMutableArray *)compareNum:(NSMutableArray *)mArr\n    {\n    int count = mArr.count;//重新定义了,count不会减一\nfor (int j = 0; j &lt; count - 1; j++)\n{\n    for (int i = j; i &lt; count - 1-1-1; i++)\n    {\n        NSLog(@&quot; %@  %@&quot;,[mArr objectAtIndex:j],[mArr objectAtIndex:i + 2]);\n        NSString *a = [mArr objectAtIndex:j];\n        NSString *b = [mArr objectAtIndex:i+2];\n\n if ([a isEqualToString:b])\n        {\n            [mArr replaceObjectAtIndex:i + 2 withObject:@&quot; &quot;];\n        }\n    }\n\n     }\n\nreturn mArr;\n\n}\n</code></pre><p> 方法二：</p>\n<pre><code>NSMutableString *str = [[NSMutableString alloc] initWithFormat: @&quot;aabcad&quot;];\n\n   for (int i = 0; i &lt; str.length - 1; i++) {\n\n       unsigned char s = [str characterAtIndex:i];\n\n       //从后面隔一个 开始\n\n       for (int j = i + 2; j &lt; str.length; j++) {\n\n           if (s == [str characterAtIndex:j]) {\n\n               [str deleteCharactersInRange:NSMakeRange(j, 1)];\n\n           }\n\n       }\n\n   }\n\n    NSLog(@&quot;删重后： %@&quot;,str);\n</code></pre><p>###7、    获取一台设备唯一标识的方法有哪些？<br>答案：</p>\n<p>一.UDID(Unique Device Identifier)</p>\n<p>二.UUID(Universally Unique Identifier)</p>\n<p>三.MAC Address</p>\n<p>四.OPEN UDID</p>\n<p>五.广告标示符（IDFA-identifierForIdentifier）</p>\n<p>六.Vindor标示符 (IDFV-identifierForVendor)</p>\n<p>七.推送token＋bundle_id<br>ios7之后用的时keychain（钥匙串）</p>\n<p>###8.ios类是否可以多继承？如果没有，那可以用其他方法实现吗？简述实现过程。<br>答案：不可以 Ios 不可以多继承.可以用代理 用catogory、extension来实现<br>Category也叫分类或类,主要作是为 没有源代码的类添加法 。通过Category添加的法会成为原类的部分。从达到扩展个类的功能。<br>Extension (延展)的主要作是管理类的“私有”法 </p>\n<p>###9.堆和栈的区别？<br>答案：堆需要用户手动释放内存，而栈则是编译器自动释放内存<br>堆栈的区别:<br>(1)管理方式:对于栈来讲,是由编译器自动管理,无需我们手工控制;对于堆来说,释放工作由程序员控制,容易产生 memory leak。<br>(2)申请大小:能从栈获得的空间较小,堆是向高地址扩展的数据结构,是不连续的内存区域。堆的大小受限于计算机系统中 有效的虚拟内存。由此可见,堆获得的空间比较灵活,也比较大。<br>(3)碎片问题:对于堆来讲,频繁的new/delete势必会造成内存空间的不连续,从而造成大量的碎片,使程序效率降低。 对于栈来讲,则不会存在这个问题,因为栈是先进后出的队列,他们是如此的一一对应,以至于永远都不可能有一个内存块 从栈中间弹出<br>(4)分配方式:堆都是动态分配的,没有静态分配的堆。栈有2种分配方式:静态分配和动态分配。静态分配是编译器完成 的,比如局部变量的分配。动态分配由 alloca函数进行分配,但是栈的动态分配和堆是不同的,他的动态分配是由编译器 进行释放,无需我们手工实现。<br>(5)分配效率:栈是机器系统提供的数据结构,计算机会在底层对栈提供支持:分配专门的寄存器存放栈的地址,压栈出栈 都有专门的指令执行,这就决定了栈的效率比较高。堆则是C/C++函数库提供的,它的机制是很复杂的。</p>\n<p>###10.ios本地数据存储都有哪几种方式？</p>\n<ol>\n<li>NSKeyedArchiver（归解档）：采用归档的形式来保存数据，该数据对象需要遵守NSCoding协议，并且该对象对应的类必须提供encodeWithCoder:和initWithCoder:方法。</li>\n<li>NSUserDefaults：用来保存应用程序设置和属性、用户保存的数据。用户再次打开程序或开机后这些数据仍然存在。NSUserDefaults可以存储的数据类型包括：NSData、NSString、NSNumber、NSDate、NSArray、NSDictionary。</li>\n<li>Write写入方式 ：永久保存在磁盘中。<br>NSCoding + NSKeyedArchiver实现复杂对象的存储</li>\n<li>SQLite3</li>\n<li>coredata</li>\n</ol>\n<p>###11. iOS动态类型和动态绑定、动态载入<br>iOS的动态性来自三个方面：动态类型、动态绑定、动态载入、SEL类型<br>1、动态类型&lt;弱类型&gt;（id）：在代码的运行阶段判断代码的类型，使用id类型可以让应用在“运行时”使用任何类型来替换。动态类型让程序更加灵活，但是会使数据的统一性降低和代码的可读性。我们常用静态类型&lt;强类型&gt;（如NSString）,使用静态类型编译器可以完全分析你的代码，这让代码的性能和可预知性更高。<br>2、动态绑定：让代码在运行时判断需要调用什么方法，而不是在编译时。    动态类型和动态绑定使得选择哪个接收者已经调用什么方法都放到运行<br>      时去完成。       3、动态载入：应用程序可以根据需要加载可执行代码以及资源，而不是<br>      在启动时就加载所有资源。<br>4、SEL类型 iOS在编译的时候会根据方法的名字（包括参数序列），生成一个用来区分这个方法的唯一的ID，这个ID是SEL类型的，SEL的本质就是类方法的编号[函数地址]。（类似C语言里面的函数指针，但是OC的类不能直接使用函数指针，这样只能做一个@selector语法来取。注意：@selector是查找当前类（含子类）的方法。）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#iOS面试题点集锦</p>\n<p>##第一部分</p>\n<p>###1、 简述OC中内存管理机制。与retain配对使用的方法是dealloc还是release，为什么？需要与alloc配对使用的方法是dealloc还是release，为什么？readwrite，readonly，assign，retain，copy，nonatomic 、atomic、strong、weak属性的作用？<br> 答案：OC使用一种叫做引用计数机制来管理对象，如果对一个对象使用了alloc、[Mutable]copy、retain，那么你必须使用相应的release或者autorelease。也可以理解为自己生成的对象自己持有。非自己生成的对象，自己也能持有。不再需要自己持有的对象时释放。非自己持有的对象无法释放。生成并持有对象&lt;alloc,new,copy,mutableCopy等&gt;，持有对象<retain>,释放对象<releatse>，废弃对象<dealloc>.readwrite(默认)：可读可写，表示既有getter方法也有setter方法。readonly：表示只有getter方法，没有sitter方法。nonatomic：不考虑线程安全。atomic（默认）：线程操作安全。strong（默认）：ARC下和MRC下的retain一样，weak（ARC下）：和（MRC下）assign类似，区别是当weak指向的内存释放掉后自动置为nil，防止野指针。<br> unsafe_unretained声明一个弱引用，但是不会自动置为nil，可能会出现野指针<br> 线程安全下的setter和getter方法：</dealloc></releatse></retain></p>\n<pre><code>- (NSString*)value{\n@synchronized(self){\nreturen [[_value retain]autorelease];\n}\n\n}\n- (void)setValue:(NSString*)aValue\n{\n@synchronized(self)\n{\n[aValue retain];\n[_value release];\n_value = aValue;\n}\n\n}\n</code></pre><p>###2、类变量的@protected ,@private,@public,@package，声明各有什么含义？</p>\n<p>  答案：上面的几个声明表明的是成员的作用域，@private作用范围只能在自身类（外界及不可访问、也不可继承）；@protected作用范围在自身类和子类，如果什么都不加修饰，默认是@protected（外界不可访问，但是可以继承）；@pubilc作用范围最大，可以在任何 地方被访问（外界既可以访问，又可以继承);@package作用范围在某个框架内</p>\n<p>###3、线程是什么？进程是什么？二者有什么区别和联系？</p>\n<p>答案：线程是CPU独立运行和对立调度的基本单位（可以理解为一个进程中执行的代码片段），进程是资源分配的基本单位（进程是一块包含了某些资源的内存区域）。进程是线程的容器，真正完成代码执行的是线程，而进程则作为线程的执行环境。一个程序至少包含一个进程，一个进程至少包含一个线程，一个进程中的多个线程共享当前进程所拥有的资源。</p>\n<p>###4、谈谈你对多线程开发的理解？ios中有几种实现多线程的方法？</p>\n<p>答案：好处：<br>1.使用线程可以把程序中占据时间长的任务放到后台去处理，如图片、视频的下载。<br>2.发挥多核处理器的优势，并发执行，让系统运行的更快更流畅，用户体验更好<br>缺点：<br>1.大量线程降低代码可读性<br>2.更多的线程需要更多的内存空间<br>3.当多个线程对同一个资源出现争夺的时候要注意线程安全的问题。<br>iOS有三种多线程编程技术：</p>\n<blockquote>\n<p>1、NSThread（两种创建方式）<br>[NSThread detachNewThreadSelector:@Seletor(doSomething:) toTarget:self withObject:nil];<br>NSThread *myThread  = [[NSThread alloc]initWithTarget:self selector:@slecteor(doSomething:)Object:nil];<br>[myThread start];</p>\n</blockquote>\n<blockquote>\n<p>2、NSOperationQueue<br>NSoperatuionQueue* oprationQueue = [[NsoperrationQueue alloc]init];<br>operationQueue addOperationWithBlock:^{<br>//这个Block语句块在子线程中执行<br>}<br>3、Grand Central Dispatch （GCD）[Grand:盛大的意思，Central：中央、中间；dispatch：调度]<br>dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,0),{<br>//耗时操作PRIORITY：优先<br>dispatch_async(dispatch_get_main_queue(),^{</p>\n</blockquote>\n<p>//更新界面<br>})<br>})<br>PS：不显示创建线程的方法：用NSObject的类方法 performSelectorInBackground：withObject：创建一个线程：[Object PerformSelector:@selector(dosSomething:) withObject:nil];</p>\n<p>###5、线程同步和异步的区别？IOS中如何实现多线程的同步？<br>答案：<br> 同步：一个线程要等待上一个线程执行完才能执行当前的线程，生活中的例子（上厕所）。</p>\n<p> 异步：同时去做两件事或者多件事，比如边听歌边看报纸。</p>\n<p> 原子操作（atomic），加锁（NSLock，NSRecursive，NSConditionLock）、@synchronized</p>\n<p>###6、假设有一个字符串aabcad，请写一段程序，去掉字符串中不相邻的重复字符串，即上述字符串处理之后的输出结果为：aabcd<br>答案：本题的题意是以第一个出现的字母作为参照，只要之后出现相同的字母并且和第一个字母不相邻，那么就删除。为防止删除某些字符之后，把之前不相邻的重复字符串转化为相邻字符串，所以可以先用空格替换掉需要删除的字符，最后对数组里面的空格进行处理。</p>\n<p>方法一：</p>\n<pre><code>-(void)removeRepeat:(NSString *)aNum\n{\nNSMutableArray *mArr = [[NSMutableArray alloc]initWithCapacity:10];\nfor (int i = 0;i &lt; aNum.length;i++)\n{\n    [mArr addObject:[aNum substringWithRange:NSMakeRange(i,1)]];\n}\nNSLog(@&quot;- %@&quot;, mArr);\n[self compareNum:mArr];\n NSLog(@&quot;%@&quot;,mArr);\n     }\n</code></pre><p>//比较是否相等</p>\n<pre><code>-(NSMutableArray *)compareNum:(NSMutableArray *)mArr\n    {\n    int count = mArr.count;//重新定义了,count不会减一\nfor (int j = 0; j &lt; count - 1; j++)\n{\n    for (int i = j; i &lt; count - 1-1-1; i++)\n    {\n        NSLog(@&quot; %@  %@&quot;,[mArr objectAtIndex:j],[mArr objectAtIndex:i + 2]);\n        NSString *a = [mArr objectAtIndex:j];\n        NSString *b = [mArr objectAtIndex:i+2];\n\n if ([a isEqualToString:b])\n        {\n            [mArr replaceObjectAtIndex:i + 2 withObject:@&quot; &quot;];\n        }\n    }\n\n     }\n\nreturn mArr;\n\n}\n</code></pre><p> 方法二：</p>\n<pre><code>NSMutableString *str = [[NSMutableString alloc] initWithFormat: @&quot;aabcad&quot;];\n\n   for (int i = 0; i &lt; str.length - 1; i++) {\n\n       unsigned char s = [str characterAtIndex:i];\n\n       //从后面隔一个 开始\n\n       for (int j = i + 2; j &lt; str.length; j++) {\n\n           if (s == [str characterAtIndex:j]) {\n\n               [str deleteCharactersInRange:NSMakeRange(j, 1)];\n\n           }\n\n       }\n\n   }\n\n    NSLog(@&quot;删重后： %@&quot;,str);\n</code></pre><p>###7、    获取一台设备唯一标识的方法有哪些？<br>答案：</p>\n<p>一.UDID(Unique Device Identifier)</p>\n<p>二.UUID(Universally Unique Identifier)</p>\n<p>三.MAC Address</p>\n<p>四.OPEN UDID</p>\n<p>五.广告标示符（IDFA-identifierForIdentifier）</p>\n<p>六.Vindor标示符 (IDFV-identifierForVendor)</p>\n<p>七.推送token＋bundle_id<br>ios7之后用的时keychain（钥匙串）</p>\n<p>###8.ios类是否可以多继承？如果没有，那可以用其他方法实现吗？简述实现过程。<br>答案：不可以 Ios 不可以多继承.可以用代理 用catogory、extension来实现<br>Category也叫分类或类,主要作是为 没有源代码的类添加法 。通过Category添加的法会成为原类的部分。从达到扩展个类的功能。<br>Extension (延展)的主要作是管理类的“私有”法 </p>\n<p>###9.堆和栈的区别？<br>答案：堆需要用户手动释放内存，而栈则是编译器自动释放内存<br>堆栈的区别:<br>(1)管理方式:对于栈来讲,是由编译器自动管理,无需我们手工控制;对于堆来说,释放工作由程序员控制,容易产生 memory leak。<br>(2)申请大小:能从栈获得的空间较小,堆是向高地址扩展的数据结构,是不连续的内存区域。堆的大小受限于计算机系统中 有效的虚拟内存。由此可见,堆获得的空间比较灵活,也比较大。<br>(3)碎片问题:对于堆来讲,频繁的new/delete势必会造成内存空间的不连续,从而造成大量的碎片,使程序效率降低。 对于栈来讲,则不会存在这个问题,因为栈是先进后出的队列,他们是如此的一一对应,以至于永远都不可能有一个内存块 从栈中间弹出<br>(4)分配方式:堆都是动态分配的,没有静态分配的堆。栈有2种分配方式:静态分配和动态分配。静态分配是编译器完成 的,比如局部变量的分配。动态分配由 alloca函数进行分配,但是栈的动态分配和堆是不同的,他的动态分配是由编译器 进行释放,无需我们手工实现。<br>(5)分配效率:栈是机器系统提供的数据结构,计算机会在底层对栈提供支持:分配专门的寄存器存放栈的地址,压栈出栈 都有专门的指令执行,这就决定了栈的效率比较高。堆则是C/C++函数库提供的,它的机制是很复杂的。</p>\n<p>###10.ios本地数据存储都有哪几种方式？</p>\n<ol>\n<li>NSKeyedArchiver（归解档）：采用归档的形式来保存数据，该数据对象需要遵守NSCoding协议，并且该对象对应的类必须提供encodeWithCoder:和initWithCoder:方法。</li>\n<li>NSUserDefaults：用来保存应用程序设置和属性、用户保存的数据。用户再次打开程序或开机后这些数据仍然存在。NSUserDefaults可以存储的数据类型包括：NSData、NSString、NSNumber、NSDate、NSArray、NSDictionary。</li>\n<li>Write写入方式 ：永久保存在磁盘中。<br>NSCoding + NSKeyedArchiver实现复杂对象的存储</li>\n<li>SQLite3</li>\n<li>coredata</li>\n</ol>\n<p>###11. iOS动态类型和动态绑定、动态载入<br>iOS的动态性来自三个方面：动态类型、动态绑定、动态载入、SEL类型<br>1、动态类型&lt;弱类型&gt;（id）：在代码的运行阶段判断代码的类型，使用id类型可以让应用在“运行时”使用任何类型来替换。动态类型让程序更加灵活，但是会使数据的统一性降低和代码的可读性。我们常用静态类型&lt;强类型&gt;（如NSString）,使用静态类型编译器可以完全分析你的代码，这让代码的性能和可预知性更高。<br>2、动态绑定：让代码在运行时判断需要调用什么方法，而不是在编译时。    动态类型和动态绑定使得选择哪个接收者已经调用什么方法都放到运行<br>      时去完成。       3、动态载入：应用程序可以根据需要加载可执行代码以及资源，而不是<br>      在启动时就加载所有资源。<br>4、SEL类型 iOS在编译的时候会根据方法的名字（包括参数序列），生成一个用来区分这个方法的唯一的ID，这个ID是SEL类型的，SEL的本质就是类方法的编号[函数地址]。（类似C语言里面的函数指针，但是OC的类不能直接使用函数指针，这样只能做一个@selector语法来取。注意：@selector是查找当前类（含子类）的方法。）</p>\n"},{"title":"面试的自我总结","_content":"\n\n\r\r\r\r\r\r# 面试的自我总结\r\r\r### 1、堆和栈的区别？\r答：管理方式：对于栈来讲，是由编译器自动管理的，无需我们手动控制；对于堆来说，释放工作由程序员控制，容易产生memory leak。\r\r### 2、数组和链表的区别？\r答：数组是将元素在内存中连续存放，由于每个元素占用内存相同，可以通过下标迅速访问数组中的任何元素。\r\r链表恰恰相反，链表中的元素在内存\u000f中不是顺序存储的，而是通过存在元素的指针联系到一起。\r\r### 3、delegate和notification什么区别，，什么情况使用？\r答：delegate：消息发送者（sender）告知接收者（receiver）某个事件将要发生，delegate同意然后发送响应者响应事件，delegate机制使得接收者可以可以改变发送者的行为。\r通常发送者和接收者是一对多的关系。\r\rNOtification：消息的发送者告知接收者事件已经发生或者将要发送，仅此而已，接收者并不能反过来影响发送者的行为。\r通常发送者和接收者的关系是间接的多对多关系\r\r\r\r### 4、什么是MVC，为什么使用MVC，有什么好处？\r答： 分别为： 模型(Model),视图(View)和控制Controller)。\r          模型（Model） “数据模型”（Model）用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法。\r        “模型”有对数据直接访问的权力，例如对数据库的访问。\r          视图（View） 视图层能够实现数据有目的显示。\r          控制器（Controller） 控制器起到不同层面间的组织作用，用于控制应用程序的流程\r          \r          \r### 5、从一个数组中找出重复的元素打印出来\r\t\t\t\t\t\r     NSArray *arr = [NSArrayarrayWithObjects:@\"1\",@\"2\",@\"1\",nil];\r     NSSet *set = [NSSetsetWithArray:arr];\r     NSLog(@\"%@\",[setallObjects]);\r     \r### 6、UITableView能否绑定多个数据源？\r答：不能\r\r### 7、一个UIViewController能否管理多个UITableView ?\r答：可以\r\r#### 9、同步请求和异步请求什么区别？\r答：发送同步请求，程序将停止用户交互，直至服务器返回数据完成，才可以进行下一步操作，\r异步请求不会阻塞主线程，而会建立一个新的线程来操作，用户发出异步请求后，依然可以对UI进行操作，程序可以继续运行\r### 10、iOS中的多线程操作、多线程方式\r答：iOS提供了方便的多线程调用机制:NSOperation和NSOperationQueue。它的使用方法也很简单，一般都是将NSOperation对象加入到NSOperationQueue队列中，加入后队列就开始处理，知道任务操作完成。\r###11、UIViewController的生命周期\r答：当一个视图控制器被创建，并在屏幕上显示的时候。 代码的执行顺序\r      // 视图显示在屏幕上的顺序\r     1、 alloc                    创建对象，分配空间。\r    2、init (initWithNibName)    初始化对象,初始化数据。\r    3、loadView                   从nib载入视图, 这一步不需要去干涉。除非没有使用xib文件创建视图。\r    4、viewDidLoad                加载完毕，可以进行自定义数据以及动态创建其他控件。\r    5、viewWillAppear             视图将出现在屏幕之前，马上这个视图即将显示在屏幕上。\r   6、viewDidAppear              视图已在屏幕上渲染完成。\r\r   // 视图将被从屏幕上移除的顺序\r    1、viewWillDisappear          视图将被从屏幕上移除之前执行。\r    2、viewDidDisappear           视图已经被从屏幕上移除。\r    3、dealloc                    视图被销毁，此时需要在init和viewDidLoad中创建的对象进行释放。\r    4、viewDidUnload              出现内存警告在内存不足时执行，并对所有非当前显示的controller执行。\r     本视图的所有子视图将被销毁，以释放内存,此时开发者需要手动对viewLoad、viewDidLoad中创建的对象释放内存。\r因为当这个视图再次显示在屏幕上的时候，viewLoad、viewDidLoad 再次被调用，以便再次构造视图\r\r#### 12、Autorerelease对象什么时候释放？\r答：autorelease实际上只是把对release的调用延迟了，对于每一个Autorelease，系统只是把该Object放入了当前的Autorelease pool中，当该pool被释放时，该pool中的所有Object会被调用Release。\r\r###13、iOS数据持久化方式\r  答：四种：属性列表、对象归档、SQLite3和Core Data、NSUserdefault。\r  \r###14、Object－c的类可以多重继承么？可以实现多个接口么？Category是什么？重写一个类的方式用继承好还是分类好？为什么？\r 答：Object-c的类不可以多重继承；可以实现多个接口，通过实现多个接口可以完成C++的多重继承；Category是类别，一般情况用分类好，用Category去重写类的方法，仅对本Category有效，不会影响到其他类与原有类的关系。\r \r### 15. #import 跟#include 又什么区别，@class呢, ＃import<> 跟 #import”\"又什么区别？\r答：#import是Objective-C导入头文件的关键字，#include是C/C++导入头文件的关键字,使 用#import头文件会自动只导入一次，不会重复导入，相当于#include和#pragma once；@class告诉编译器某个类的声明，当执行时，才去查看类的实现文件，可以解决头文件的相互包含；#import<>用来包含系 统的头文件，#import””用来包含用户头文件。\r\r","source":"_drafts/面试的自我总结.md","raw":"---\ntitle: 面试的自我总结\ntags:\n---\n\n\n\r\r\r\r\r\r# 面试的自我总结\r\r\r### 1、堆和栈的区别？\r答：管理方式：对于栈来讲，是由编译器自动管理的，无需我们手动控制；对于堆来说，释放工作由程序员控制，容易产生memory leak。\r\r### 2、数组和链表的区别？\r答：数组是将元素在内存中连续存放，由于每个元素占用内存相同，可以通过下标迅速访问数组中的任何元素。\r\r链表恰恰相反，链表中的元素在内存\u000f中不是顺序存储的，而是通过存在元素的指针联系到一起。\r\r### 3、delegate和notification什么区别，，什么情况使用？\r答：delegate：消息发送者（sender）告知接收者（receiver）某个事件将要发生，delegate同意然后发送响应者响应事件，delegate机制使得接收者可以可以改变发送者的行为。\r通常发送者和接收者是一对多的关系。\r\rNOtification：消息的发送者告知接收者事件已经发生或者将要发送，仅此而已，接收者并不能反过来影响发送者的行为。\r通常发送者和接收者的关系是间接的多对多关系\r\r\r\r### 4、什么是MVC，为什么使用MVC，有什么好处？\r答： 分别为： 模型(Model),视图(View)和控制Controller)。\r          模型（Model） “数据模型”（Model）用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法。\r        “模型”有对数据直接访问的权力，例如对数据库的访问。\r          视图（View） 视图层能够实现数据有目的显示。\r          控制器（Controller） 控制器起到不同层面间的组织作用，用于控制应用程序的流程\r          \r          \r### 5、从一个数组中找出重复的元素打印出来\r\t\t\t\t\t\r     NSArray *arr = [NSArrayarrayWithObjects:@\"1\",@\"2\",@\"1\",nil];\r     NSSet *set = [NSSetsetWithArray:arr];\r     NSLog(@\"%@\",[setallObjects]);\r     \r### 6、UITableView能否绑定多个数据源？\r答：不能\r\r### 7、一个UIViewController能否管理多个UITableView ?\r答：可以\r\r#### 9、同步请求和异步请求什么区别？\r答：发送同步请求，程序将停止用户交互，直至服务器返回数据完成，才可以进行下一步操作，\r异步请求不会阻塞主线程，而会建立一个新的线程来操作，用户发出异步请求后，依然可以对UI进行操作，程序可以继续运行\r### 10、iOS中的多线程操作、多线程方式\r答：iOS提供了方便的多线程调用机制:NSOperation和NSOperationQueue。它的使用方法也很简单，一般都是将NSOperation对象加入到NSOperationQueue队列中，加入后队列就开始处理，知道任务操作完成。\r###11、UIViewController的生命周期\r答：当一个视图控制器被创建，并在屏幕上显示的时候。 代码的执行顺序\r      // 视图显示在屏幕上的顺序\r     1、 alloc                    创建对象，分配空间。\r    2、init (initWithNibName)    初始化对象,初始化数据。\r    3、loadView                   从nib载入视图, 这一步不需要去干涉。除非没有使用xib文件创建视图。\r    4、viewDidLoad                加载完毕，可以进行自定义数据以及动态创建其他控件。\r    5、viewWillAppear             视图将出现在屏幕之前，马上这个视图即将显示在屏幕上。\r   6、viewDidAppear              视图已在屏幕上渲染完成。\r\r   // 视图将被从屏幕上移除的顺序\r    1、viewWillDisappear          视图将被从屏幕上移除之前执行。\r    2、viewDidDisappear           视图已经被从屏幕上移除。\r    3、dealloc                    视图被销毁，此时需要在init和viewDidLoad中创建的对象进行释放。\r    4、viewDidUnload              出现内存警告在内存不足时执行，并对所有非当前显示的controller执行。\r     本视图的所有子视图将被销毁，以释放内存,此时开发者需要手动对viewLoad、viewDidLoad中创建的对象释放内存。\r因为当这个视图再次显示在屏幕上的时候，viewLoad、viewDidLoad 再次被调用，以便再次构造视图\r\r#### 12、Autorerelease对象什么时候释放？\r答：autorelease实际上只是把对release的调用延迟了，对于每一个Autorelease，系统只是把该Object放入了当前的Autorelease pool中，当该pool被释放时，该pool中的所有Object会被调用Release。\r\r###13、iOS数据持久化方式\r  答：四种：属性列表、对象归档、SQLite3和Core Data、NSUserdefault。\r  \r###14、Object－c的类可以多重继承么？可以实现多个接口么？Category是什么？重写一个类的方式用继承好还是分类好？为什么？\r 答：Object-c的类不可以多重继承；可以实现多个接口，通过实现多个接口可以完成C++的多重继承；Category是类别，一般情况用分类好，用Category去重写类的方法，仅对本Category有效，不会影响到其他类与原有类的关系。\r \r### 15. #import 跟#include 又什么区别，@class呢, ＃import<> 跟 #import”\"又什么区别？\r答：#import是Objective-C导入头文件的关键字，#include是C/C++导入头文件的关键字,使 用#import头文件会自动只导入一次，不会重复导入，相当于#include和#pragma once；@class告诉编译器某个类的声明，当执行时，才去查看类的实现文件，可以解决头文件的相互包含；#import<>用来包含系 统的头文件，#import””用来包含用户头文件。\r\r","slug":"面试的自我总结","published":0,"date":"2016-05-25T03:16:59.000Z","updated":"2016-05-25T03:20:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9cq0007rb0utekegni7","content":"<h1 id=\"面试的自我总结\"><a href=\"#面试的自我总结\" class=\"headerlink\" title=\"面试的自我总结\"></a>面试的自我总结</h1><h3 id=\"1、堆和栈的区别？\"><a href=\"#1、堆和栈的区别？\" class=\"headerlink\" title=\"1、堆和栈的区别？\"></a>1、堆和栈的区别？</h3><p>答：管理方式：对于栈来讲，是由编译器自动管理的，无需我们手动控制；对于堆来说，释放工作由程序员控制，容易产生memory leak。</p>\n<h3 id=\"2、数组和链表的区别？\"><a href=\"#2、数组和链表的区别？\" class=\"headerlink\" title=\"2、数组和链表的区别？\"></a>2、数组和链表的区别？</h3><p>答：数组是将元素在内存中连续存放，由于每个元素占用内存相同，可以通过下标迅速访问数组中的任何元素。</p>\n<p>链表恰恰相反，链表中的元素在内存\u000f中不是顺序存储的，而是通过存在元素的指针联系到一起。</p>\n<h3 id=\"3、delegate和notification什么区别，，什么情况使用？\"><a href=\"#3、delegate和notification什么区别，，什么情况使用？\" class=\"headerlink\" title=\"3、delegate和notification什么区别，，什么情况使用？\"></a>3、delegate和notification什么区别，，什么情况使用？</h3><p>答：delegate：消息发送者（sender）告知接收者（receiver）某个事件将要发生，delegate同意然后发送响应者响应事件，delegate机制使得接收者可以可以改变发送者的行为。<br>通常发送者和接收者是一对多的关系。</p>\n<p>NOtification：消息的发送者告知接收者事件已经发生或者将要发送，仅此而已，接收者并不能反过来影响发送者的行为。<br>通常发送者和接收者的关系是间接的多对多关系</p>\n<h3 id=\"4、什么是MVC，为什么使用MVC，有什么好处？\"><a href=\"#4、什么是MVC，为什么使用MVC，有什么好处？\" class=\"headerlink\" title=\"4、什么是MVC，为什么使用MVC，有什么好处？\"></a>4、什么是MVC，为什么使用MVC，有什么好处？</h3><p>答： 分别为： 模型(Model),视图(View)和控制Controller)。<br>          模型（Model） “数据模型”（Model）用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法。<br>        “模型”有对数据直接访问的权力，例如对数据库的访问。<br>          视图（View） 视图层能够实现数据有目的显示。<br>          控制器（Controller） 控制器起到不同层面间的组织作用，用于控制应用程序的流程</p>\n<h3 id=\"5、从一个数组中找出重复的元素打印出来\"><a href=\"#5、从一个数组中找出重复的元素打印出来\" class=\"headerlink\" title=\"5、从一个数组中找出重复的元素打印出来\"></a>5、从一个数组中找出重复的元素打印出来</h3><pre><code>NSArray *arr = [NSArrayarrayWithObjects:@&quot;1&quot;,@&quot;2&quot;,@&quot;1&quot;,nil];\nNSSet *set = [NSSetsetWithArray:arr];\nNSLog(@&quot;%@&quot;,[setallObjects]);\n</code></pre><h3 id=\"6、UITableView能否绑定多个数据源？\"><a href=\"#6、UITableView能否绑定多个数据源？\" class=\"headerlink\" title=\"6、UITableView能否绑定多个数据源？\"></a>6、UITableView能否绑定多个数据源？</h3><p>答：不能</p>\n<h3 id=\"7、一个UIViewController能否管理多个UITableView\"><a href=\"#7、一个UIViewController能否管理多个UITableView\" class=\"headerlink\" title=\"7、一个UIViewController能否管理多个UITableView ?\"></a>7、一个UIViewController能否管理多个UITableView ?</h3><p>答：可以</p>\n<h4 id=\"9、同步请求和异步请求什么区别？\"><a href=\"#9、同步请求和异步请求什么区别？\" class=\"headerlink\" title=\"9、同步请求和异步请求什么区别？\"></a>9、同步请求和异步请求什么区别？</h4><p>答：发送同步请求，程序将停止用户交互，直至服务器返回数据完成，才可以进行下一步操作，<br>异步请求不会阻塞主线程，而会建立一个新的线程来操作，用户发出异步请求后，依然可以对UI进行操作，程序可以继续运行</p>\n<h3 id=\"10、iOS中的多线程操作、多线程方式\"><a href=\"#10、iOS中的多线程操作、多线程方式\" class=\"headerlink\" title=\"10、iOS中的多线程操作、多线程方式\"></a>10、iOS中的多线程操作、多线程方式</h3><p>答：iOS提供了方便的多线程调用机制:NSOperation和NSOperationQueue。它的使用方法也很简单，一般都是将NSOperation对象加入到NSOperationQueue队列中，加入后队列就开始处理，知道任务操作完成。</p>\n<p>###11、UIViewController的生命周期<br>答：当一个视图控制器被创建，并在屏幕上显示的时候。 代码的执行顺序<br>      // 视图显示在屏幕上的顺序<br>     1、 alloc                    创建对象，分配空间。<br>    2、init (initWithNibName)    初始化对象,初始化数据。<br>    3、loadView                   从nib载入视图, 这一步不需要去干涉。除非没有使用xib文件创建视图。<br>    4、viewDidLoad                加载完毕，可以进行自定义数据以及动态创建其他控件。<br>    5、viewWillAppear             视图将出现在屏幕之前，马上这个视图即将显示在屏幕上。<br>   6、viewDidAppear              视图已在屏幕上渲染完成。</p>\n<p>   // 视图将被从屏幕上移除的顺序<br>    1、viewWillDisappear          视图将被从屏幕上移除之前执行。<br>    2、viewDidDisappear           视图已经被从屏幕上移除。<br>    3、dealloc                    视图被销毁，此时需要在init和viewDidLoad中创建的对象进行释放。<br>    4、viewDidUnload              出现内存警告在内存不足时执行，并对所有非当前显示的controller执行。<br>     本视图的所有子视图将被销毁，以释放内存,此时开发者需要手动对viewLoad、viewDidLoad中创建的对象释放内存。<br>因为当这个视图再次显示在屏幕上的时候，viewLoad、viewDidLoad 再次被调用，以便再次构造视图</p>\n<h4 id=\"12、Autorerelease对象什么时候释放？\"><a href=\"#12、Autorerelease对象什么时候释放？\" class=\"headerlink\" title=\"12、Autorerelease对象什么时候释放？\"></a>12、Autorerelease对象什么时候释放？</h4><p>答：autorelease实际上只是把对release的调用延迟了，对于每一个Autorelease，系统只是把该Object放入了当前的Autorelease pool中，当该pool被释放时，该pool中的所有Object会被调用Release。</p>\n<p>###13、iOS数据持久化方式<br>  答：四种：属性列表、对象归档、SQLite3和Core Data、NSUserdefault。</p>\n<p>###14、Object－c的类可以多重继承么？可以实现多个接口么？Category是什么？重写一个类的方式用继承好还是分类好？为什么？<br> 答：Object-c的类不可以多重继承；可以实现多个接口，通过实现多个接口可以完成C++的多重继承；Category是类别，一般情况用分类好，用Category去重写类的方法，仅对本Category有效，不会影响到其他类与原有类的关系。</p>\n<h3 id=\"15-import-跟-include-又什么区别，-class呢-＃import-lt-gt-跟-import””又什么区别？\"><a href=\"#15-import-跟-include-又什么区别，-class呢-＃import-lt-gt-跟-import””又什么区别？\" class=\"headerlink\" title=\"15. #import 跟#include 又什么区别，@class呢, ＃import&lt;&gt; 跟 #import””又什么区别？\"></a>15. #import 跟#include 又什么区别，@class呢, ＃import&lt;&gt; 跟 #import””又什么区别？</h3><p>答：#import是Objective-C导入头文件的关键字，#include是C/C++导入头文件的关键字,使 用#import头文件会自动只导入一次，不会重复导入，相当于#include和#pragma once；@class告诉编译器某个类的声明，当执行时，才去查看类的实现文件，可以解决头文件的相互包含；#import&lt;&gt;用来包含系 统的头文件，#import””用来包含用户头文件。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"面试的自我总结\"><a href=\"#面试的自我总结\" class=\"headerlink\" title=\"面试的自我总结\"></a>面试的自我总结</h1><h3 id=\"1、堆和栈的区别？\"><a href=\"#1、堆和栈的区别？\" class=\"headerlink\" title=\"1、堆和栈的区别？\"></a>1、堆和栈的区别？</h3><p>答：管理方式：对于栈来讲，是由编译器自动管理的，无需我们手动控制；对于堆来说，释放工作由程序员控制，容易产生memory leak。</p>\n<h3 id=\"2、数组和链表的区别？\"><a href=\"#2、数组和链表的区别？\" class=\"headerlink\" title=\"2、数组和链表的区别？\"></a>2、数组和链表的区别？</h3><p>答：数组是将元素在内存中连续存放，由于每个元素占用内存相同，可以通过下标迅速访问数组中的任何元素。</p>\n<p>链表恰恰相反，链表中的元素在内存\u000f中不是顺序存储的，而是通过存在元素的指针联系到一起。</p>\n<h3 id=\"3、delegate和notification什么区别，，什么情况使用？\"><a href=\"#3、delegate和notification什么区别，，什么情况使用？\" class=\"headerlink\" title=\"3、delegate和notification什么区别，，什么情况使用？\"></a>3、delegate和notification什么区别，，什么情况使用？</h3><p>答：delegate：消息发送者（sender）告知接收者（receiver）某个事件将要发生，delegate同意然后发送响应者响应事件，delegate机制使得接收者可以可以改变发送者的行为。<br>通常发送者和接收者是一对多的关系。</p>\n<p>NOtification：消息的发送者告知接收者事件已经发生或者将要发送，仅此而已，接收者并不能反过来影响发送者的行为。<br>通常发送者和接收者的关系是间接的多对多关系</p>\n<h3 id=\"4、什么是MVC，为什么使用MVC，有什么好处？\"><a href=\"#4、什么是MVC，为什么使用MVC，有什么好处？\" class=\"headerlink\" title=\"4、什么是MVC，为什么使用MVC，有什么好处？\"></a>4、什么是MVC，为什么使用MVC，有什么好处？</h3><p>答： 分别为： 模型(Model),视图(View)和控制Controller)。<br>          模型（Model） “数据模型”（Model）用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法。<br>        “模型”有对数据直接访问的权力，例如对数据库的访问。<br>          视图（View） 视图层能够实现数据有目的显示。<br>          控制器（Controller） 控制器起到不同层面间的组织作用，用于控制应用程序的流程</p>\n<h3 id=\"5、从一个数组中找出重复的元素打印出来\"><a href=\"#5、从一个数组中找出重复的元素打印出来\" class=\"headerlink\" title=\"5、从一个数组中找出重复的元素打印出来\"></a>5、从一个数组中找出重复的元素打印出来</h3><pre><code>NSArray *arr = [NSArrayarrayWithObjects:@&quot;1&quot;,@&quot;2&quot;,@&quot;1&quot;,nil];\nNSSet *set = [NSSetsetWithArray:arr];\nNSLog(@&quot;%@&quot;,[setallObjects]);\n</code></pre><h3 id=\"6、UITableView能否绑定多个数据源？\"><a href=\"#6、UITableView能否绑定多个数据源？\" class=\"headerlink\" title=\"6、UITableView能否绑定多个数据源？\"></a>6、UITableView能否绑定多个数据源？</h3><p>答：不能</p>\n<h3 id=\"7、一个UIViewController能否管理多个UITableView\"><a href=\"#7、一个UIViewController能否管理多个UITableView\" class=\"headerlink\" title=\"7、一个UIViewController能否管理多个UITableView ?\"></a>7、一个UIViewController能否管理多个UITableView ?</h3><p>答：可以</p>\n<h4 id=\"9、同步请求和异步请求什么区别？\"><a href=\"#9、同步请求和异步请求什么区别？\" class=\"headerlink\" title=\"9、同步请求和异步请求什么区别？\"></a>9、同步请求和异步请求什么区别？</h4><p>答：发送同步请求，程序将停止用户交互，直至服务器返回数据完成，才可以进行下一步操作，<br>异步请求不会阻塞主线程，而会建立一个新的线程来操作，用户发出异步请求后，依然可以对UI进行操作，程序可以继续运行</p>\n<h3 id=\"10、iOS中的多线程操作、多线程方式\"><a href=\"#10、iOS中的多线程操作、多线程方式\" class=\"headerlink\" title=\"10、iOS中的多线程操作、多线程方式\"></a>10、iOS中的多线程操作、多线程方式</h3><p>答：iOS提供了方便的多线程调用机制:NSOperation和NSOperationQueue。它的使用方法也很简单，一般都是将NSOperation对象加入到NSOperationQueue队列中，加入后队列就开始处理，知道任务操作完成。</p>\n<p>###11、UIViewController的生命周期<br>答：当一个视图控制器被创建，并在屏幕上显示的时候。 代码的执行顺序<br>      // 视图显示在屏幕上的顺序<br>     1、 alloc                    创建对象，分配空间。<br>    2、init (initWithNibName)    初始化对象,初始化数据。<br>    3、loadView                   从nib载入视图, 这一步不需要去干涉。除非没有使用xib文件创建视图。<br>    4、viewDidLoad                加载完毕，可以进行自定义数据以及动态创建其他控件。<br>    5、viewWillAppear             视图将出现在屏幕之前，马上这个视图即将显示在屏幕上。<br>   6、viewDidAppear              视图已在屏幕上渲染完成。</p>\n<p>   // 视图将被从屏幕上移除的顺序<br>    1、viewWillDisappear          视图将被从屏幕上移除之前执行。<br>    2、viewDidDisappear           视图已经被从屏幕上移除。<br>    3、dealloc                    视图被销毁，此时需要在init和viewDidLoad中创建的对象进行释放。<br>    4、viewDidUnload              出现内存警告在内存不足时执行，并对所有非当前显示的controller执行。<br>     本视图的所有子视图将被销毁，以释放内存,此时开发者需要手动对viewLoad、viewDidLoad中创建的对象释放内存。<br>因为当这个视图再次显示在屏幕上的时候，viewLoad、viewDidLoad 再次被调用，以便再次构造视图</p>\n<h4 id=\"12、Autorerelease对象什么时候释放？\"><a href=\"#12、Autorerelease对象什么时候释放？\" class=\"headerlink\" title=\"12、Autorerelease对象什么时候释放？\"></a>12、Autorerelease对象什么时候释放？</h4><p>答：autorelease实际上只是把对release的调用延迟了，对于每一个Autorelease，系统只是把该Object放入了当前的Autorelease pool中，当该pool被释放时，该pool中的所有Object会被调用Release。</p>\n<p>###13、iOS数据持久化方式<br>  答：四种：属性列表、对象归档、SQLite3和Core Data、NSUserdefault。</p>\n<p>###14、Object－c的类可以多重继承么？可以实现多个接口么？Category是什么？重写一个类的方式用继承好还是分类好？为什么？<br> 答：Object-c的类不可以多重继承；可以实现多个接口，通过实现多个接口可以完成C++的多重继承；Category是类别，一般情况用分类好，用Category去重写类的方法，仅对本Category有效，不会影响到其他类与原有类的关系。</p>\n<h3 id=\"15-import-跟-include-又什么区别，-class呢-＃import-lt-gt-跟-import””又什么区别？\"><a href=\"#15-import-跟-include-又什么区别，-class呢-＃import-lt-gt-跟-import””又什么区别？\" class=\"headerlink\" title=\"15. #import 跟#include 又什么区别，@class呢, ＃import&lt;&gt; 跟 #import””又什么区别？\"></a>15. #import 跟#include 又什么区别，@class呢, ＃import&lt;&gt; 跟 #import””又什么区别？</h3><p>答：#import是Objective-C导入头文件的关键字，#include是C/C++导入头文件的关键字,使 用#import头文件会自动只导入一次，不会重复导入，相当于#include和#pragma once；@class告诉编译器某个类的声明，当执行时，才去查看类的实现文件，可以解决头文件的相互包含；#import&lt;&gt;用来包含系 统的头文件，#import””用来包含用户头文件。</p>\n"},{"title":"Git Pull Refusing to Merge Unrelated Histories","date":"2018-08-20T03:02:09.000Z","_content":"如果合并了两个不同开始提交的仓库的时候，在2.9.2之后的git会发现这两个仓库可能不是同一个，为了防止开发者上传错误，于是给出如下的提示\n>fatal: refusing to merge unrelated histories\n\n如果我在github新建了一个仓库 写了readme ，让后再把本地的一个已经存在的仓库上传到github的时候。会发现github的仓库和本地的仓库没有共同的commit 所以不让提交，认为是写错了origin 如果开发者确定就是要用的origin就可以使用--allow-unrelated-histories告诉git自己是确定的\n 遇到无法提交的问题最好是先pull一下使用\n ```git pull origin master``` 发现无法pull git 输出\n ```refusing to merge unrelated histories ```\n我们就需要把两个不同的项目合并git pull 之后需要添加 --allow-unrelated-histories告诉git需要不相关的历史合并如果我们的源是origin， 分支是master那么我们就需要这么写\n```git pull origin master --allow-unrelated-histories```\n 如果设置过了默认的分支就可以\n ```git pull --allow--unrelated--histories```\n 这样就解决问题了bingo!","source":"_posts/git-pull-refusing-to-merge-unrelated-histories.md","raw":"---\ntitle: git pull refusing to merge unrelated histories\ndate: 2018-08-20 11:02:09\ntags: git\n---\n如果合并了两个不同开始提交的仓库的时候，在2.9.2之后的git会发现这两个仓库可能不是同一个，为了防止开发者上传错误，于是给出如下的提示\n>fatal: refusing to merge unrelated histories\n\n如果我在github新建了一个仓库 写了readme ，让后再把本地的一个已经存在的仓库上传到github的时候。会发现github的仓库和本地的仓库没有共同的commit 所以不让提交，认为是写错了origin 如果开发者确定就是要用的origin就可以使用--allow-unrelated-histories告诉git自己是确定的\n 遇到无法提交的问题最好是先pull一下使用\n ```git pull origin master``` 发现无法pull git 输出\n ```refusing to merge unrelated histories ```\n我们就需要把两个不同的项目合并git pull 之后需要添加 --allow-unrelated-histories告诉git需要不相关的历史合并如果我们的源是origin， 分支是master那么我们就需要这么写\n```git pull origin master --allow-unrelated-histories```\n 如果设置过了默认的分支就可以\n ```git pull --allow--unrelated--histories```\n 这样就解决问题了bingo!","slug":"git-pull-refusing-to-merge-unrelated-histories","published":1,"updated":"2018-08-20T03:36:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9cs0009rb0ultrchur1","content":"<p>如果合并了两个不同开始提交的仓库的时候，在2.9.2之后的git会发现这两个仓库可能不是同一个，为了防止开发者上传错误，于是给出如下的提示</p>\n<blockquote>\n<p>fatal: refusing to merge unrelated histories</p>\n</blockquote>\n<p>如果我在github新建了一个仓库 写了readme ，让后再把本地的一个已经存在的仓库上传到github的时候。会发现github的仓库和本地的仓库没有共同的commit 所以不让提交，认为是写错了origin 如果开发者确定就是要用的origin就可以使用–allow-unrelated-histories告诉git自己是确定的<br> 遇到无法提交的问题最好是先pull一下使用<br> <figure class=\"highlight plain\"><figcaption><span>pull origin master``` 发现无法pull git 输出</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```refusing to merge unrelated histories</span><br></pre></td></tr></table></figure></p>\n<p>我们就需要把两个不同的项目合并git pull 之后需要添加 –allow-unrelated-histories告诉git需要不相关的历史合并如果我们的源是origin， 分支是master那么我们就需要这么写<br><figure class=\"highlight plain\"><figcaption><span>pull origin master --allow-unrelated-histories```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果设置过了默认的分支就可以</span><br><span class=\"line\">```git pull --allow--unrelated--histories</span><br></pre></td></tr></table></figure></p>\n<p> 这样就解决问题了bingo!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果合并了两个不同开始提交的仓库的时候，在2.9.2之后的git会发现这两个仓库可能不是同一个，为了防止开发者上传错误，于是给出如下的提示</p>\n<blockquote>\n<p>fatal: refusing to merge unrelated histories</p>\n</blockquote>\n<p>如果我在github新建了一个仓库 写了readme ，让后再把本地的一个已经存在的仓库上传到github的时候。会发现github的仓库和本地的仓库没有共同的commit 所以不让提交，认为是写错了origin 如果开发者确定就是要用的origin就可以使用–allow-unrelated-histories告诉git自己是确定的<br> 遇到无法提交的问题最好是先pull一下使用<br> <figure class=\"highlight plain\"><figcaption><span>pull origin master``` 发现无法pull git 输出</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```refusing to merge unrelated histories</span><br></pre></td></tr></table></figure></p>\n<p>我们就需要把两个不同的项目合并git pull 之后需要添加 –allow-unrelated-histories告诉git需要不相关的历史合并如果我们的源是origin， 分支是master那么我们就需要这么写<br><figure class=\"highlight plain\"><figcaption><span>pull origin master --allow-unrelated-histories```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果设置过了默认的分支就可以</span><br><span class=\"line\">```git pull --allow--unrelated--histories</span><br></pre></td></tr></table></figure></p>\n<p> 这样就解决问题了bingo!</p>\n"},{"title":"HTTP和FTP协议的区别","date":"2016-05-25T01:47:34.000Z","_content":"\n\n# HTTP和FTP协议的区别\n\n 1. HTTP协议是用来浏览网站的，而FTP时候hi用来访问和传输文件的，例如有些博客系统中允许用户上传下载文件\n 2. HTTP和FTP客户端：通常HTTP客户端就是浏览器，而FTP服务可以通过命令行或者用户自有图形界面客户端\n 3. HTTP头：HTTP头包含了metadata，比如说最后更改的日期，编码方式，服务器名称版本还有其他的一些信息，而这些在FTP头重视不存在的。\n 4. FTP要比HTTP早出现先十年左右\n 5. 数据格式：FTP能够传输ACSII数据或者是二进制格式的数据，而HTTP只能使用二进制格式的数据\n 6. HTTP流水线：HTTP支持流水线，这就意味着客户端可以在一个请求处理完之前，发出下一个请求，其结果就是多次请求数据之前省掉了部分服务器端往返时延，而FTP没有这个支持\n 7. HTTP中的动态端口：FTP一个最大的问题就是它使用两个链接，第一个链接用来发送控制指令，当接受或发送数据的时候，又打开第二个TCP链接，而HTTP在双向传输中使用动态端口\n 8. HTTP中的持久链接：对一个HTTP会话来讲，客户端可以维护一个单个链接并使用它进行任意数量的数据传输。FTP每次有数据的需要时都创建一个新连接，重复创建新连接带来的体验并不好，因为每次创建链接都必须让双方握手验证，这消耗了很多的时间。\n 9. HTTP中的压缩算法：HTTP中提供了一个压缩的算法在客户端中和服务器之间共同协商选择的办法。其中gzip可以说是最具有影响力的一种，而FTP中并不存在这种复杂的算法\n 10. HTTP支持代理：HTTP一个很大的特点是支持代理，这种功能在构建协议里的，而FTP并不支持，\n 11. 而FTP也能脱颖而出的一点是直接面向文件级别的，这意味着FTP有例如可以通过命令行列出服务器上的目录列表，而HTTP没有这个概念\n 12. 速度：可能最通常的一个问题了？\n \n##### 什么使FTP服务更快？\n\n1、没有在发出的数据中加入meta-data，仅传输原二进制文件。\n\n2、没有过度的分块编码\n\n##### 什么使HTTP服务更快？\n\n1、重用已存在的持久连接，从而有更好的TCP表现。\n\n2、流水线的支持使得从同一个服务器上请求多个文件更快。\n\n3、自动的压缩机制使得传输的数据更少。\n\n4、没有命令/应答机制最大限度的减少了往返时延。\n\n总结：当然最终的结果会因具体的情况而异，但我想说的是，单次传输一个静态的文件，很难衡量两者的区别对单个的小文件来说，FTP传输更快，当传输多个文件时，HTTP更快。\n \n ","source":"_posts/2015/2015-10-29-HTTP和FTP协议的区别.md","raw":"---\ntitle: HTTP和FTP协议的区别\ndate: 2016-05-25 09:47:34\ntags:\n---\n\n\n# HTTP和FTP协议的区别\n\n 1. HTTP协议是用来浏览网站的，而FTP时候hi用来访问和传输文件的，例如有些博客系统中允许用户上传下载文件\n 2. HTTP和FTP客户端：通常HTTP客户端就是浏览器，而FTP服务可以通过命令行或者用户自有图形界面客户端\n 3. HTTP头：HTTP头包含了metadata，比如说最后更改的日期，编码方式，服务器名称版本还有其他的一些信息，而这些在FTP头重视不存在的。\n 4. FTP要比HTTP早出现先十年左右\n 5. 数据格式：FTP能够传输ACSII数据或者是二进制格式的数据，而HTTP只能使用二进制格式的数据\n 6. HTTP流水线：HTTP支持流水线，这就意味着客户端可以在一个请求处理完之前，发出下一个请求，其结果就是多次请求数据之前省掉了部分服务器端往返时延，而FTP没有这个支持\n 7. HTTP中的动态端口：FTP一个最大的问题就是它使用两个链接，第一个链接用来发送控制指令，当接受或发送数据的时候，又打开第二个TCP链接，而HTTP在双向传输中使用动态端口\n 8. HTTP中的持久链接：对一个HTTP会话来讲，客户端可以维护一个单个链接并使用它进行任意数量的数据传输。FTP每次有数据的需要时都创建一个新连接，重复创建新连接带来的体验并不好，因为每次创建链接都必须让双方握手验证，这消耗了很多的时间。\n 9. HTTP中的压缩算法：HTTP中提供了一个压缩的算法在客户端中和服务器之间共同协商选择的办法。其中gzip可以说是最具有影响力的一种，而FTP中并不存在这种复杂的算法\n 10. HTTP支持代理：HTTP一个很大的特点是支持代理，这种功能在构建协议里的，而FTP并不支持，\n 11. 而FTP也能脱颖而出的一点是直接面向文件级别的，这意味着FTP有例如可以通过命令行列出服务器上的目录列表，而HTTP没有这个概念\n 12. 速度：可能最通常的一个问题了？\n \n##### 什么使FTP服务更快？\n\n1、没有在发出的数据中加入meta-data，仅传输原二进制文件。\n\n2、没有过度的分块编码\n\n##### 什么使HTTP服务更快？\n\n1、重用已存在的持久连接，从而有更好的TCP表现。\n\n2、流水线的支持使得从同一个服务器上请求多个文件更快。\n\n3、自动的压缩机制使得传输的数据更少。\n\n4、没有命令/应答机制最大限度的减少了往返时延。\n\n总结：当然最终的结果会因具体的情况而异，但我想说的是，单次传输一个静态的文件，很难衡量两者的区别对单个的小文件来说，FTP传输更快，当传输多个文件时，HTTP更快。\n \n ","slug":"2015-2015-10-29-HTTP和FTP协议的区别","published":1,"updated":"2016-05-25T02:09:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9kz000drb0uvzppr7ec","content":"<h1 id=\"HTTP和FTP协议的区别\"><a href=\"#HTTP和FTP协议的区别\" class=\"headerlink\" title=\"HTTP和FTP协议的区别\"></a>HTTP和FTP协议的区别</h1><ol>\n<li>HTTP协议是用来浏览网站的，而FTP时候hi用来访问和传输文件的，例如有些博客系统中允许用户上传下载文件</li>\n<li>HTTP和FTP客户端：通常HTTP客户端就是浏览器，而FTP服务可以通过命令行或者用户自有图形界面客户端</li>\n<li>HTTP头：HTTP头包含了metadata，比如说最后更改的日期，编码方式，服务器名称版本还有其他的一些信息，而这些在FTP头重视不存在的。</li>\n<li>FTP要比HTTP早出现先十年左右</li>\n<li>数据格式：FTP能够传输ACSII数据或者是二进制格式的数据，而HTTP只能使用二进制格式的数据</li>\n<li>HTTP流水线：HTTP支持流水线，这就意味着客户端可以在一个请求处理完之前，发出下一个请求，其结果就是多次请求数据之前省掉了部分服务器端往返时延，而FTP没有这个支持</li>\n<li>HTTP中的动态端口：FTP一个最大的问题就是它使用两个链接，第一个链接用来发送控制指令，当接受或发送数据的时候，又打开第二个TCP链接，而HTTP在双向传输中使用动态端口</li>\n<li>HTTP中的持久链接：对一个HTTP会话来讲，客户端可以维护一个单个链接并使用它进行任意数量的数据传输。FTP每次有数据的需要时都创建一个新连接，重复创建新连接带来的体验并不好，因为每次创建链接都必须让双方握手验证，这消耗了很多的时间。</li>\n<li>HTTP中的压缩算法：HTTP中提供了一个压缩的算法在客户端中和服务器之间共同协商选择的办法。其中gzip可以说是最具有影响力的一种，而FTP中并不存在这种复杂的算法</li>\n<li>HTTP支持代理：HTTP一个很大的特点是支持代理，这种功能在构建协议里的，而FTP并不支持，</li>\n<li>而FTP也能脱颖而出的一点是直接面向文件级别的，这意味着FTP有例如可以通过命令行列出服务器上的目录列表，而HTTP没有这个概念</li>\n<li>速度：可能最通常的一个问题了？</li>\n</ol>\n<h5 id=\"什么使FTP服务更快？\"><a href=\"#什么使FTP服务更快？\" class=\"headerlink\" title=\"什么使FTP服务更快？\"></a>什么使FTP服务更快？</h5><p>1、没有在发出的数据中加入meta-data，仅传输原二进制文件。</p>\n<p>2、没有过度的分块编码</p>\n<h5 id=\"什么使HTTP服务更快？\"><a href=\"#什么使HTTP服务更快？\" class=\"headerlink\" title=\"什么使HTTP服务更快？\"></a>什么使HTTP服务更快？</h5><p>1、重用已存在的持久连接，从而有更好的TCP表现。</p>\n<p>2、流水线的支持使得从同一个服务器上请求多个文件更快。</p>\n<p>3、自动的压缩机制使得传输的数据更少。</p>\n<p>4、没有命令/应答机制最大限度的减少了往返时延。</p>\n<p>总结：当然最终的结果会因具体的情况而异，但我想说的是，单次传输一个静态的文件，很难衡量两者的区别对单个的小文件来说，FTP传输更快，当传输多个文件时，HTTP更快。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"HTTP和FTP协议的区别\"><a href=\"#HTTP和FTP协议的区别\" class=\"headerlink\" title=\"HTTP和FTP协议的区别\"></a>HTTP和FTP协议的区别</h1><ol>\n<li>HTTP协议是用来浏览网站的，而FTP时候hi用来访问和传输文件的，例如有些博客系统中允许用户上传下载文件</li>\n<li>HTTP和FTP客户端：通常HTTP客户端就是浏览器，而FTP服务可以通过命令行或者用户自有图形界面客户端</li>\n<li>HTTP头：HTTP头包含了metadata，比如说最后更改的日期，编码方式，服务器名称版本还有其他的一些信息，而这些在FTP头重视不存在的。</li>\n<li>FTP要比HTTP早出现先十年左右</li>\n<li>数据格式：FTP能够传输ACSII数据或者是二进制格式的数据，而HTTP只能使用二进制格式的数据</li>\n<li>HTTP流水线：HTTP支持流水线，这就意味着客户端可以在一个请求处理完之前，发出下一个请求，其结果就是多次请求数据之前省掉了部分服务器端往返时延，而FTP没有这个支持</li>\n<li>HTTP中的动态端口：FTP一个最大的问题就是它使用两个链接，第一个链接用来发送控制指令，当接受或发送数据的时候，又打开第二个TCP链接，而HTTP在双向传输中使用动态端口</li>\n<li>HTTP中的持久链接：对一个HTTP会话来讲，客户端可以维护一个单个链接并使用它进行任意数量的数据传输。FTP每次有数据的需要时都创建一个新连接，重复创建新连接带来的体验并不好，因为每次创建链接都必须让双方握手验证，这消耗了很多的时间。</li>\n<li>HTTP中的压缩算法：HTTP中提供了一个压缩的算法在客户端中和服务器之间共同协商选择的办法。其中gzip可以说是最具有影响力的一种，而FTP中并不存在这种复杂的算法</li>\n<li>HTTP支持代理：HTTP一个很大的特点是支持代理，这种功能在构建协议里的，而FTP并不支持，</li>\n<li>而FTP也能脱颖而出的一点是直接面向文件级别的，这意味着FTP有例如可以通过命令行列出服务器上的目录列表，而HTTP没有这个概念</li>\n<li>速度：可能最通常的一个问题了？</li>\n</ol>\n<h5 id=\"什么使FTP服务更快？\"><a href=\"#什么使FTP服务更快？\" class=\"headerlink\" title=\"什么使FTP服务更快？\"></a>什么使FTP服务更快？</h5><p>1、没有在发出的数据中加入meta-data，仅传输原二进制文件。</p>\n<p>2、没有过度的分块编码</p>\n<h5 id=\"什么使HTTP服务更快？\"><a href=\"#什么使HTTP服务更快？\" class=\"headerlink\" title=\"什么使HTTP服务更快？\"></a>什么使HTTP服务更快？</h5><p>1、重用已存在的持久连接，从而有更好的TCP表现。</p>\n<p>2、流水线的支持使得从同一个服务器上请求多个文件更快。</p>\n<p>3、自动的压缩机制使得传输的数据更少。</p>\n<p>4、没有命令/应答机制最大限度的减少了往返时延。</p>\n<p>总结：当然最终的结果会因具体的情况而异，但我想说的是，单次传输一个静态的文件，很难衡量两者的区别对单个的小文件来说，FTP传输更快，当传输多个文件时，HTTP更快。</p>\n"},{"layout":"post","title":"iOS中获取各种文件的目录路径的方法","description":"精选","_content":"\n\n# IOS中获取各种文件的目录路径的方法\n\n### iphone沙箱模型的有四个文件夹，分别是什么，永久数据存储一般放在什么位置，得到模拟器的路径的简单方式是什么.\n\ndocuments，tmp，app，Library。\n\n（NSHomeDirectory()），\n\n手动保存的文件在documents文件里\n\nNsuserdefaults保存的文件在tmp文件夹里\n\n\n#### 1、Documents 目录：您应该将所有de应用程序数据文件写入到这个目录下。这个目录用于存储用户数据或其它应该定期备份的信息。\n\n#####2、AppName.app 目录：这是应用程序的程序包目录，包含应用程序的本身。由于应用程序必须经过签名，所以您在运行时不能对这个目录中的内容进行修改，否则可能会使应用程序无法启动。\n\n#####3、Library 目录：这个目录下有两个子目录：Caches 和 Preferences\nPreferences 目录：包含应用程序的偏好设置文件。您不应该直接创建偏好设置文件，而是应该使用NSUserDefaults类来取得和设置应用程序的偏好.\nCaches 目录：用于存放应用程序专用的支持文件，保存应用程序再次启动过程中需要的信息。\n\n#####4、tmp 目录：这个目录用于存放临时文件，保存应用程序再次启动过程中不需要的信息。\n\n\n### 获取这些目录路径的方法：\n##### 1，获取家目录路径的函数：\nNSString *homeDir = NSHomeDirectory();\n##### 2，获取Documents目录路径的方法：\nNSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\nNSString *docDir = [paths objectAtIndex:0];\n##### 3，获取Caches目录路径的方法：\nNSArray *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);\nNSString *cachesDir = [paths objectAtIndex:0];\n##### 4，获取tmp目录路径的方法：\nNSString *tmpDir = NSTemporaryDirectory();\n##### 5，获取应用程序程序包中资源文件路径的方法：\n例如获取程序包中一个图片资源（apple.png）路径的方法：\nNSString *imagePath = [[NSBundle mainBundle] pathForResource:@”apple” ofType:@”png”];\nUIImage *appleImage = [[UIImage alloc] initWithContentsOfFile:imagePath];\n代码中的mainBundle类方法用于返回一个代表应用程序包的对象。\niphone沙盒(sandbox)中的几个目录获取方式：\n\n\n\t   [cpp] view plaincopy\n\t\t// 获取沙盒主目录路径  \n\t\tNSString *homeDir = NSHomeDirectory();  \n\t\t// 获取Documents目录路径  \n\t\tNSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);  \n\t\tNSString *docDir = [paths objectAtIndex:0];  \n\t\t// 获取Caches目录路径  \n\t\tNSArray *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);  \n\t\tNSString *cachesDir = [paths objectAtIndex:0];  \n\t\t// 获取tmp目录路径  \n\t\tNSString *tmpDir =  NSTemporaryDirectory();  \n\t\t[cpp] view plaincopy\n\t\t// 获取当前程序包中一个图片资源（apple.png）路径  \n\t\tNSString *imagePath = [[NSBundle mainBundle] pathForResource:@\"apple\" ofType:@\"png\"];  \n\t\tUIImage *appleImage = [[UIImage alloc] initWithContentsOfFile:imagePath];  \n\t\t例子：\n\t\t\n\t\tNSFileManager* fm=[NSFileManager defaultManager];\n\t\tif(![fm fileExistsAtPath:[self dataFilePath]]){\n\t\t\n\t\t//下面是对该文件进行制定路径的保存\n\t\t[fm createDirectoryAtPath:[self dataFilePath] withIntermediateDirectories:YES attributes:nil error:nil];\n\t\t\n\t\t//取得一个目录下得所有文件名\n\t\tNSArray *files = [fm subpathsAtPath: [self dataFilePath] ];\n\t\t\n\t\t//读取某个文件\n\t\tNSData *data = [fm contentsAtPath:[self dataFilePath]];\n\t\t\n\t\t//或者\n\t\tNSData *data = [NSData dataWithContentOfPath:[self dataFilePath]];\n\t\t}","source":"_posts/2015/2015-10-31-IOS中获取各种文件的目录路径的方法.md","raw":"---\nlayout: post\ntitle: iOS中获取各种文件的目录路径的方法\ndescription: \"精选\"\ncategory : iOS\ntags: \n---\n\n\n# IOS中获取各种文件的目录路径的方法\n\n### iphone沙箱模型的有四个文件夹，分别是什么，永久数据存储一般放在什么位置，得到模拟器的路径的简单方式是什么.\n\ndocuments，tmp，app，Library。\n\n（NSHomeDirectory()），\n\n手动保存的文件在documents文件里\n\nNsuserdefaults保存的文件在tmp文件夹里\n\n\n#### 1、Documents 目录：您应该将所有de应用程序数据文件写入到这个目录下。这个目录用于存储用户数据或其它应该定期备份的信息。\n\n#####2、AppName.app 目录：这是应用程序的程序包目录，包含应用程序的本身。由于应用程序必须经过签名，所以您在运行时不能对这个目录中的内容进行修改，否则可能会使应用程序无法启动。\n\n#####3、Library 目录：这个目录下有两个子目录：Caches 和 Preferences\nPreferences 目录：包含应用程序的偏好设置文件。您不应该直接创建偏好设置文件，而是应该使用NSUserDefaults类来取得和设置应用程序的偏好.\nCaches 目录：用于存放应用程序专用的支持文件，保存应用程序再次启动过程中需要的信息。\n\n#####4、tmp 目录：这个目录用于存放临时文件，保存应用程序再次启动过程中不需要的信息。\n\n\n### 获取这些目录路径的方法：\n##### 1，获取家目录路径的函数：\nNSString *homeDir = NSHomeDirectory();\n##### 2，获取Documents目录路径的方法：\nNSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\nNSString *docDir = [paths objectAtIndex:0];\n##### 3，获取Caches目录路径的方法：\nNSArray *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);\nNSString *cachesDir = [paths objectAtIndex:0];\n##### 4，获取tmp目录路径的方法：\nNSString *tmpDir = NSTemporaryDirectory();\n##### 5，获取应用程序程序包中资源文件路径的方法：\n例如获取程序包中一个图片资源（apple.png）路径的方法：\nNSString *imagePath = [[NSBundle mainBundle] pathForResource:@”apple” ofType:@”png”];\nUIImage *appleImage = [[UIImage alloc] initWithContentsOfFile:imagePath];\n代码中的mainBundle类方法用于返回一个代表应用程序包的对象。\niphone沙盒(sandbox)中的几个目录获取方式：\n\n\n\t   [cpp] view plaincopy\n\t\t// 获取沙盒主目录路径  \n\t\tNSString *homeDir = NSHomeDirectory();  \n\t\t// 获取Documents目录路径  \n\t\tNSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);  \n\t\tNSString *docDir = [paths objectAtIndex:0];  \n\t\t// 获取Caches目录路径  \n\t\tNSArray *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);  \n\t\tNSString *cachesDir = [paths objectAtIndex:0];  \n\t\t// 获取tmp目录路径  \n\t\tNSString *tmpDir =  NSTemporaryDirectory();  \n\t\t[cpp] view plaincopy\n\t\t// 获取当前程序包中一个图片资源（apple.png）路径  \n\t\tNSString *imagePath = [[NSBundle mainBundle] pathForResource:@\"apple\" ofType:@\"png\"];  \n\t\tUIImage *appleImage = [[UIImage alloc] initWithContentsOfFile:imagePath];  \n\t\t例子：\n\t\t\n\t\tNSFileManager* fm=[NSFileManager defaultManager];\n\t\tif(![fm fileExistsAtPath:[self dataFilePath]]){\n\t\t\n\t\t//下面是对该文件进行制定路径的保存\n\t\t[fm createDirectoryAtPath:[self dataFilePath] withIntermediateDirectories:YES attributes:nil error:nil];\n\t\t\n\t\t//取得一个目录下得所有文件名\n\t\tNSArray *files = [fm subpathsAtPath: [self dataFilePath] ];\n\t\t\n\t\t//读取某个文件\n\t\tNSData *data = [fm contentsAtPath:[self dataFilePath]];\n\t\t\n\t\t//或者\n\t\tNSData *data = [NSData dataWithContentOfPath:[self dataFilePath]];\n\t\t}","slug":"2015-2015-10-31-IOS中获取各种文件的目录路径的方法","published":1,"date":"2015-12-29T08:27:58.000Z","updated":"2016-05-25T02:17:03.000Z","comments":1,"photos":[],"link":"","_id":"ckeb5g9l1000erb0usjd34im1","content":"<h1 id=\"IOS中获取各种文件的目录路径的方法\"><a href=\"#IOS中获取各种文件的目录路径的方法\" class=\"headerlink\" title=\"IOS中获取各种文件的目录路径的方法\"></a>IOS中获取各种文件的目录路径的方法</h1><h3 id=\"iphone沙箱模型的有四个文件夹，分别是什么，永久数据存储一般放在什么位置，得到模拟器的路径的简单方式是什么\"><a href=\"#iphone沙箱模型的有四个文件夹，分别是什么，永久数据存储一般放在什么位置，得到模拟器的路径的简单方式是什么\" class=\"headerlink\" title=\"iphone沙箱模型的有四个文件夹，分别是什么，永久数据存储一般放在什么位置，得到模拟器的路径的简单方式是什么.\"></a>iphone沙箱模型的有四个文件夹，分别是什么，永久数据存储一般放在什么位置，得到模拟器的路径的简单方式是什么.</h3><p>documents，tmp，app，Library。</p>\n<p>（NSHomeDirectory()），</p>\n<p>手动保存的文件在documents文件里</p>\n<p>Nsuserdefaults保存的文件在tmp文件夹里</p>\n<h4 id=\"1、Documents-目录：您应该将所有de应用程序数据文件写入到这个目录下。这个目录用于存储用户数据或其它应该定期备份的信息。\"><a href=\"#1、Documents-目录：您应该将所有de应用程序数据文件写入到这个目录下。这个目录用于存储用户数据或其它应该定期备份的信息。\" class=\"headerlink\" title=\"1、Documents 目录：您应该将所有de应用程序数据文件写入到这个目录下。这个目录用于存储用户数据或其它应该定期备份的信息。\"></a>1、Documents 目录：您应该将所有de应用程序数据文件写入到这个目录下。这个目录用于存储用户数据或其它应该定期备份的信息。</h4><p>#####2、AppName.app 目录：这是应用程序的程序包目录，包含应用程序的本身。由于应用程序必须经过签名，所以您在运行时不能对这个目录中的内容进行修改，否则可能会使应用程序无法启动。</p>\n<p>#####3、Library 目录：这个目录下有两个子目录：Caches 和 Preferences<br>Preferences 目录：包含应用程序的偏好设置文件。您不应该直接创建偏好设置文件，而是应该使用NSUserDefaults类来取得和设置应用程序的偏好.<br>Caches 目录：用于存放应用程序专用的支持文件，保存应用程序再次启动过程中需要的信息。</p>\n<p>#####4、tmp 目录：这个目录用于存放临时文件，保存应用程序再次启动过程中不需要的信息。</p>\n<h3 id=\"获取这些目录路径的方法：\"><a href=\"#获取这些目录路径的方法：\" class=\"headerlink\" title=\"获取这些目录路径的方法：\"></a>获取这些目录路径的方法：</h3><h5 id=\"1，获取家目录路径的函数：\"><a href=\"#1，获取家目录路径的函数：\" class=\"headerlink\" title=\"1，获取家目录路径的函数：\"></a>1，获取家目录路径的函数：</h5><p>NSString *homeDir = NSHomeDirectory();</p>\n<h5 id=\"2，获取Documents目录路径的方法：\"><a href=\"#2，获取Documents目录路径的方法：\" class=\"headerlink\" title=\"2，获取Documents目录路径的方法：\"></a>2，获取Documents目录路径的方法：</h5><p>NSArray <em>paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);<br>NSString </em>docDir = [paths objectAtIndex:0];</p>\n<h5 id=\"3，获取Caches目录路径的方法：\"><a href=\"#3，获取Caches目录路径的方法：\" class=\"headerlink\" title=\"3，获取Caches目录路径的方法：\"></a>3，获取Caches目录路径的方法：</h5><p>NSArray <em>paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);<br>NSString </em>cachesDir = [paths objectAtIndex:0];</p>\n<h5 id=\"4，获取tmp目录路径的方法：\"><a href=\"#4，获取tmp目录路径的方法：\" class=\"headerlink\" title=\"4，获取tmp目录路径的方法：\"></a>4，获取tmp目录路径的方法：</h5><p>NSString *tmpDir = NSTemporaryDirectory();</p>\n<h5 id=\"5，获取应用程序程序包中资源文件路径的方法：\"><a href=\"#5，获取应用程序程序包中资源文件路径的方法：\" class=\"headerlink\" title=\"5，获取应用程序程序包中资源文件路径的方法：\"></a>5，获取应用程序程序包中资源文件路径的方法：</h5><p>例如获取程序包中一个图片资源（apple.png）路径的方法：<br>NSString <em>imagePath = [[NSBundle mainBundle] pathForResource:@”apple” ofType:@”png”];<br>UIImage </em>appleImage = [[UIImage alloc] initWithContentsOfFile:imagePath];<br>代码中的mainBundle类方法用于返回一个代表应用程序包的对象。<br>iphone沙盒(sandbox)中的几个目录获取方式：</p>\n<pre><code>[cpp] view plaincopy\n // 获取沙盒主目录路径  \n NSString *homeDir = NSHomeDirectory();  \n // 获取Documents目录路径  \n NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);  \n NSString *docDir = [paths objectAtIndex:0];  \n // 获取Caches目录路径  \n NSArray *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);  \n NSString *cachesDir = [paths objectAtIndex:0];  \n // 获取tmp目录路径  \n NSString *tmpDir =  NSTemporaryDirectory();  \n [cpp] view plaincopy\n // 获取当前程序包中一个图片资源（apple.png）路径  \n NSString *imagePath = [[NSBundle mainBundle] pathForResource:@&quot;apple&quot; ofType:@&quot;png&quot;];  \n UIImage *appleImage = [[UIImage alloc] initWithContentsOfFile:imagePath];  \n 例子：\n\n NSFileManager* fm=[NSFileManager defaultManager];\n if(![fm fileExistsAtPath:[self dataFilePath]]){\n\n //下面是对该文件进行制定路径的保存\n [fm createDirectoryAtPath:[self dataFilePath] withIntermediateDirectories:YES attributes:nil error:nil];\n\n //取得一个目录下得所有文件名\n NSArray *files = [fm subpathsAtPath: [self dataFilePath] ];\n\n //读取某个文件\n NSData *data = [fm contentsAtPath:[self dataFilePath]];\n\n //或者\n NSData *data = [NSData dataWithContentOfPath:[self dataFilePath]];\n }\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"IOS中获取各种文件的目录路径的方法\"><a href=\"#IOS中获取各种文件的目录路径的方法\" class=\"headerlink\" title=\"IOS中获取各种文件的目录路径的方法\"></a>IOS中获取各种文件的目录路径的方法</h1><h3 id=\"iphone沙箱模型的有四个文件夹，分别是什么，永久数据存储一般放在什么位置，得到模拟器的路径的简单方式是什么\"><a href=\"#iphone沙箱模型的有四个文件夹，分别是什么，永久数据存储一般放在什么位置，得到模拟器的路径的简单方式是什么\" class=\"headerlink\" title=\"iphone沙箱模型的有四个文件夹，分别是什么，永久数据存储一般放在什么位置，得到模拟器的路径的简单方式是什么.\"></a>iphone沙箱模型的有四个文件夹，分别是什么，永久数据存储一般放在什么位置，得到模拟器的路径的简单方式是什么.</h3><p>documents，tmp，app，Library。</p>\n<p>（NSHomeDirectory()），</p>\n<p>手动保存的文件在documents文件里</p>\n<p>Nsuserdefaults保存的文件在tmp文件夹里</p>\n<h4 id=\"1、Documents-目录：您应该将所有de应用程序数据文件写入到这个目录下。这个目录用于存储用户数据或其它应该定期备份的信息。\"><a href=\"#1、Documents-目录：您应该将所有de应用程序数据文件写入到这个目录下。这个目录用于存储用户数据或其它应该定期备份的信息。\" class=\"headerlink\" title=\"1、Documents 目录：您应该将所有de应用程序数据文件写入到这个目录下。这个目录用于存储用户数据或其它应该定期备份的信息。\"></a>1、Documents 目录：您应该将所有de应用程序数据文件写入到这个目录下。这个目录用于存储用户数据或其它应该定期备份的信息。</h4><p>#####2、AppName.app 目录：这是应用程序的程序包目录，包含应用程序的本身。由于应用程序必须经过签名，所以您在运行时不能对这个目录中的内容进行修改，否则可能会使应用程序无法启动。</p>\n<p>#####3、Library 目录：这个目录下有两个子目录：Caches 和 Preferences<br>Preferences 目录：包含应用程序的偏好设置文件。您不应该直接创建偏好设置文件，而是应该使用NSUserDefaults类来取得和设置应用程序的偏好.<br>Caches 目录：用于存放应用程序专用的支持文件，保存应用程序再次启动过程中需要的信息。</p>\n<p>#####4、tmp 目录：这个目录用于存放临时文件，保存应用程序再次启动过程中不需要的信息。</p>\n<h3 id=\"获取这些目录路径的方法：\"><a href=\"#获取这些目录路径的方法：\" class=\"headerlink\" title=\"获取这些目录路径的方法：\"></a>获取这些目录路径的方法：</h3><h5 id=\"1，获取家目录路径的函数：\"><a href=\"#1，获取家目录路径的函数：\" class=\"headerlink\" title=\"1，获取家目录路径的函数：\"></a>1，获取家目录路径的函数：</h5><p>NSString *homeDir = NSHomeDirectory();</p>\n<h5 id=\"2，获取Documents目录路径的方法：\"><a href=\"#2，获取Documents目录路径的方法：\" class=\"headerlink\" title=\"2，获取Documents目录路径的方法：\"></a>2，获取Documents目录路径的方法：</h5><p>NSArray <em>paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);<br>NSString </em>docDir = [paths objectAtIndex:0];</p>\n<h5 id=\"3，获取Caches目录路径的方法：\"><a href=\"#3，获取Caches目录路径的方法：\" class=\"headerlink\" title=\"3，获取Caches目录路径的方法：\"></a>3，获取Caches目录路径的方法：</h5><p>NSArray <em>paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);<br>NSString </em>cachesDir = [paths objectAtIndex:0];</p>\n<h5 id=\"4，获取tmp目录路径的方法：\"><a href=\"#4，获取tmp目录路径的方法：\" class=\"headerlink\" title=\"4，获取tmp目录路径的方法：\"></a>4，获取tmp目录路径的方法：</h5><p>NSString *tmpDir = NSTemporaryDirectory();</p>\n<h5 id=\"5，获取应用程序程序包中资源文件路径的方法：\"><a href=\"#5，获取应用程序程序包中资源文件路径的方法：\" class=\"headerlink\" title=\"5，获取应用程序程序包中资源文件路径的方法：\"></a>5，获取应用程序程序包中资源文件路径的方法：</h5><p>例如获取程序包中一个图片资源（apple.png）路径的方法：<br>NSString <em>imagePath = [[NSBundle mainBundle] pathForResource:@”apple” ofType:@”png”];<br>UIImage </em>appleImage = [[UIImage alloc] initWithContentsOfFile:imagePath];<br>代码中的mainBundle类方法用于返回一个代表应用程序包的对象。<br>iphone沙盒(sandbox)中的几个目录获取方式：</p>\n<pre><code>[cpp] view plaincopy\n // 获取沙盒主目录路径  \n NSString *homeDir = NSHomeDirectory();  \n // 获取Documents目录路径  \n NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);  \n NSString *docDir = [paths objectAtIndex:0];  \n // 获取Caches目录路径  \n NSArray *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);  \n NSString *cachesDir = [paths objectAtIndex:0];  \n // 获取tmp目录路径  \n NSString *tmpDir =  NSTemporaryDirectory();  \n [cpp] view plaincopy\n // 获取当前程序包中一个图片资源（apple.png）路径  \n NSString *imagePath = [[NSBundle mainBundle] pathForResource:@&quot;apple&quot; ofType:@&quot;png&quot;];  \n UIImage *appleImage = [[UIImage alloc] initWithContentsOfFile:imagePath];  \n 例子：\n\n NSFileManager* fm=[NSFileManager defaultManager];\n if(![fm fileExistsAtPath:[self dataFilePath]]){\n\n //下面是对该文件进行制定路径的保存\n [fm createDirectoryAtPath:[self dataFilePath] withIntermediateDirectories:YES attributes:nil error:nil];\n\n //取得一个目录下得所有文件名\n NSArray *files = [fm subpathsAtPath: [self dataFilePath] ];\n\n //读取某个文件\n NSData *data = [fm contentsAtPath:[self dataFilePath]];\n\n //或者\n NSData *data = [NSData dataWithContentOfPath:[self dataFilePath]];\n }\n</code></pre>"},{"title":"关于TCP/IP还有socket详解原创","date":"2015-10-10T01:47:00.000Z","_content":"\n\n# 关于TCP/IP还有socket详解（原创）\n\n### 1、熟悉TCP/UDP/HTTP？\n![原理图](http://wiki.mbalib.com/w/images/a/ac/TCP%EF%BC%8FIP%E5%8D%8F%E8%AE%AE%E6%97%8F%E4%B8%AD%E5%90%84%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.jpg)\n\n\n详细原理请参照[这里](http://wiki.mbalib.com/wiki/TCP/IP)\n\n\nTCP支持的应用协议主要有：Telnet、FTP、SMTP等；\n\nUDP支持的应用层协议主要有：NFS（网络文件系统）、SNMP（简单网络管理协议）、DNS（主域名称系统）、TFTP（通用文件传输协议）等\n\n\n答：TCP：全称是Transmission Control Protocol ，中文名位传输控制协议，它可以提供可靠的、面向连接的网络数据传递服务。传输控制协议主要包括下列任务和功能：\n\n 1. 确保ip数据报的成功传递\n 2. 对程序发送的大块数据进行分段和重组。\n 3. 确保正确排序及按顺序传递分段的数据。\n 4. 通过计算校验和，进行传输数据的完整性检查。\n \nUDP:全称是：User Datagram Protocol又称使用者资料包协定，是一个简单的面向数据报的传输层协议\n在TCP/IP模型中，UDP为网络层以上和应用层以下提供了一个简单的接口。UDP只提供数据的不可靠传递，它一旦把应用程序发给网络层的数据发送出去，就不保留数据备份（所以UDP有时候也被认为是不可靠的数据报协议）。UDP在IP数据报的头部仅仅加入了复用和数据校验（字段）。\n\nHTTP是客户端用http协议进行请求，发送请求时候需要封装http请求头，并绑定请求的数据，服务器一般有web服务器配合（当然也非绝 对）。 http请求方式为客户端主动发起请求，服务器才能给响应，一次请求完毕后则断开连接，以节省资源。服务器不能主动给客户端响应（除非采取http长连接 技术）。iphone主要使用类是NSUrlConnection。\n\nUDP应用场景：\n\n1，实时音视频是可以而且应该用 UDP 的，一方面因为它常常涉及到网络穿透，另外一方面它不需要重传。——我需要实时的看到你的图像跟声音，至于中间丢一帧什么的完全不重要。而为了重传往往会造成延迟与不同步，考虑一下，某一帧因为重传，导致0.5秒以后才到，那么整个音视频就延迟了0.5秒。\n著作权归作者所有。\n\n2，网络真的非常非常可靠，以至于你完全不需要考虑 UDP 丢包问题的情况。典型的例子应该是专门为有线局域网设计的协议。\n\n3，另外一个问题是 TCP 是纯粹的流式数据，所以制定传输协议的时候，接受方需要自行判定一个包的开始和结束，因为你完全可能接受到半个包或者两个包。——如果数据报的起止判定对你具体的程序会成为大问题，也可以考虑 UDP\n\nwhen in doubt, use tcp\n\n### 什么是socket？\n答：scoket是客户端跟服务器直接使用socket“套接字”进行连接，并没有规定连接后断开，所以客户端和服务器可以保持连接通道，双方 都可以主动发送数据。一般在游戏开发或股票开发这种要求即时性很强并且保持发送数据量比较大的场合使用。主要使用类是CFSocketRef。\n用到socket的第三方：AsyncSocket\n\n### 网络访问的OSI七层模型：从上到下依次是：应用层、表示层、会话层、传输层 、网络层、数据链路层、物理层。\n### 七层简述 \n.1. 物理层:主要定义物理设备标准,如网线的接口类型、各种传输介质的传 输速率等。主要作用是传输比特流(就是由1、0转化为电流强弱来进行传 输,到达目的地后再转化为1、0,也就是常说的数模与模数转换)。这一 层的数据叫做比特(bit),主要设备:集线器 \n\n.2. 数据链路层:主要将从物理层接收的数据进行MAC地址的封装与解封装。 常把这一层的数据叫做帧,主要设备:交换机 \n\n.3. 网络层:选择合适的网间路由和交换结点, 确保数据及时传送,将从下层 接收到的数据进行IP地址的封装与解封装。常把这一层数据叫做数据包,主 要设备:路由器。 \n\n.4. 传输层:定义了一些传输数据的协议和端口,如TCP、UDP协议,主要将从 下层接收的数据进行分段和传输,到达目的地址后再进行重组,以往把这 一层数据叫做段。 \n\n.5. 会话层:通过传输层建立数据传输通路。在系统之间发起会话或者接受会 话请求(设备之间需要互相认识) \n\n.6. 表示层:主要是进行对接收的数据进行解释、压缩与解压缩等,即把计算 机能够识别的东西转化成人能够识别的东西(如图片、声音等) \n\n.7. 应用层:主要是一些终端的应用,比如说FTP(各种文件下载)、浏览器、 QQ等,可以将其理解为在电脑屏幕上可以看到的东西,也就是终端应用。 \n### tcp/ip四层模型：从上到下依次：应用层、传输层、网际层、主机至网络层\n![网络参考模型](http://i5.tietuku.com/7df4467aa74a7720.png)\n\n1.  网络中各节点都有相同的层次\n2.  不同节点相同层次具有相同的功能\n3.  同一节点相邻层间通过接口通信\n4. 每一层可以使用下层提供的服务\n5. 不同节点的同层间通过协议来实现对等层间的通信\n\n\n ![插图](http://i5.tietuku.com/d8a23048330df782.png)\n\n#### 网络通讯要素 \n• IP地址(唯一标示网络设备的0~255 2^32 = 4G): - 网络中设备的标示- 不易记忆,可以用主机名-本地回环地址:127.0.0.1 主机名:localhost \n• 端口号(定位程序) \n- 用于标示进程的逻辑地址,不同进程的标示 \n- 有效端口:0~65535,其中0~1024由系统使用或者保留端口,开发 中不要使用1024以下的端口 \n• 传输协议(用什么样的方式进行交互) - 通讯的规则 \n- 常见协议:TCP、UDP \n• http://ip:80/文件路径 => URL(统一资源定位) \n• 资源类型是通过MimeType来区分的,告诉客户端是什么类型的 资源\nURL(确定要访问的资源) •Request=》要访问了• Connect=》开始访问• ....\n• 返回结果\n\n## TCP & UDP \n• UDP(用户数据报协议)- 将数据及源和目的封装成数据包中,不需要建立连接 - 每个数据报的大小限制在64K之内- 因为无需连接,因此是不可靠协议- 不需要建立连接,速度快\n\n• TCP(传输控制协议)- 建立连接,形成传输数据的通道- 在连接中进行大数据传输(数据大小不收限制) - 通过三次握手完成连接,是可靠协议,安全送达 - 必须建立连接,效率会稍低 \n## Socket(套接字层、插座--AT&T) \n• Socket就是为网络服务提供的一种机制 - 在Unix中,网络既是Socket,并不局限在TCP/UDP - Socket可以用于自定义协议 QQ\n\n• 通信的两端都是Socket\n\n• 网络通信其实就是Socket间的通信• 数据在两个Socket间通过IO传输 \n\n原理图\n\n![原理图](http://i12.tietuku.com/9a28f7b80752179a.png)\n\nSocket通讯流程图 \n\n![Socket通讯流程图](http://i5.tietuku.com/6a59569c051567db.jpg)\n\n使用Socket开发网络通讯 \n• 在Web服务(WebServices=>XML)大行其道的今天,调用Web服 务的代价是高昂的,尤其是仅仅是抓取少量数据的时候尤其如 此。而使用Socket,可以只传送数据本身而不用进行XML封装, 大大降低数据传输的开销(JSON)\n• Socket允许使用长连接,允许应用程序运行在异步模式(提高 效率),只有在需要的时候才接收数据 \n\n#### iOS中常用的两种Socket类型 \n流式Socket(SOCK_STREAM):流式是一种面向连接的\nSocket,针对于面向连接的TCP服务应用\n数据报式Socket(SOCK_DGRAM):数据报式Socket是一 种无连接的Socket,对应于无连接的UDP服务应用\n\n在iOS中流式Socket连接的方法 \n-  在iOS中以NSStream(流)来发送和接收数据• 可以设置流的代理,对流状态的变化做出相应\n- 连接建立- 接收到数据 - 连接关闭\n\n1. NSStream:数据流的父类,用于定义抽象特性,例如:打开、关闭 代理,NSStream继承自CFStream(Core Foundation)\n2. NSInputStream:NSStream的子类,用于读取输入 \n3. NSOutputStream:NSSTream的子类,用于写输出 \n\n#### 开发步骤 \n\n1. 网络连接设置1. 设置网络连接,绑定到主机和端口2. 设置输入流和输出流的代理,监听数据流的状态 3. 将输入输出流添加至运行循环4. 打开输入流和输出流\n2. 发送消息给服务器\n3. 有可读取字节时,读取服务器返回的内容\n4. 到达流末尾时,关闭流,同时并从主运行循环中删除\n\n设置网络通讯 \n\n\t\t\n\t\tCFReadStreamRef readStream;!\n\t\tCFWriteStreamRef writeStream;!\n\t\t!\n\t\tCFStreamCreatePairWithSocketToHost(NULL, (CFStringRef)@\"localhost\", 12345, &readStream, &writeStream);!\n\t\t!\n\t\t  _inputStream = (__bridge NSInputStream *)readStream;!_outputStream = (__bridge NSOutputStream*)writeStream;!\n\t\t  \n\t\t  \n说明:CFStreamCreatePairWithSocketToHost函数用于将输入流和输出流 绑定到指定主机的对应端口,连接建立之后,既可以像输入流写入数据, 或者从输出流读取数据\n\t\t\n\t\t\n\t\t设置流代理并添加至运行循环 \n\t\t_inputStream.delegate = self;!\n\t\t_outputStream.delegate = self;!\n\t\t!\n\t\t// 将输入、输出流添加至运行循环!\n\t\t[_inputStream scheduleInRunLoop:[NSRunLoop mainRunLoop]forMode:NSDefaultRunLoopMode];!\n\t\t[_outputStream scheduleInRunLoop:[NSRunLoop mainRunLoop]forMode:NSDefaultRunLoopMode];!\n\t\t!\n\t\t// 打开输入、输出流 [_inputStream open];! [_outputStream open]; \n\t\t\n发送登录请求给服务器 \n\n\n     // 1. 创建要发送的字符串 NSString *sendMsg = [NSStringstringWithFormat:@\"iam:%@\",\n\t\t\t\t_userNameText.text];!\n\t\t\t\t// 2. 将字符串转换成NSData NSData *sendData = [sendMsgdataUsingEncoding:NSUTF8StringEncoding];! !\n\t\t\t\t// 3. 写入数据 [_outputStream write:[sendData bytes]maxLength:[sendData length]]; \n\t\t\n数据流事件响应 \n\n\t\tswitch (eventCode) {!\n\t\tcase NSStreamEventOpenCompleted:!\n\t\tNSLog(@\"数据流打开完成\");!\n\t\tbreak;!\n\t\tcase NSStreamEventHasBytesAvailable:!\n\t\tNSLog(@\"有字节读取\");!\n\t\tbreak;!\n\t\tcase NSStreamEventHasSpaceAvailable:!\n\t\tNSLog(@\"可以写入数据\");!\n\t\tbreak;!\n\t\tcase NSStreamEventErrorOccurred:!\n\t\tNSLog(@\"无法连接到服务器\");!\n\t\tbreak;!\n\t\tcase NSStreamEventEndEncountered:!\n\t\tNSLog(@“到达流末尾,需要关闭流\");!\n\t\tbreak;! default:!\n\t\tNSLog(@\"未知\");!\n\t\tbreak;! } \n\t\t\n有字节读取,则读取从服务器返回消息 \n\n\t\t// 服务器返回数据,从输入流中读取数据 // 定义一个字符串缓冲数组,用于接收数据 uint8_t buffer[1024];!\n\t\t// 送输入流中读取数据,并获得读取内容的长度 int len = [_inputStream read:buffermaxLength:sizeof(buffer)];! !\n\t\t// 判断是否有读入的内容 if (len > 0) {!\n\t\t// 将读入的数据转换成字符串 NSString *str = [[NSString alloc] initWithBytes:buffer\n\t\tlength:len encoding:NSUTF8StringEncoding];!NSLog(@\"=======> %@\", str);!\n\t\t} \n\t\t\n\t\t到达流末尾,关闭流并且从运行循环中删除 • [aStreamclose];!\n\t\t• [aStreamremoveFromRunLoop:[NSRunLoopmainRunLoop]forMode:NSDefaultRunLoopMode];!\n\n回顾 \n• Socket就是为网络服务提供的一种机制•Socket允许使用长连接,允许应用程序运行在异步模式,\n只有在需要的时候才接收数据\n• 流式Socket(SOCK_STREAM):流式是一种面向连接的 Socket,针对于面向连接的TCP服务应用\n\n### QQ用到的是什么传输协议？\n答：QQ登陆采用TCP协议和HTTP协议，QQ都会有一个TCP连接来保持在线状态 。你和好友之间发送消息，主要采用UDP协议，内网传文件采用了P2P技术。\n\n总来的说：1.登陆过程，客户端client 采用TCP协议向服务器server发送信息，HTTP协议下载信息。登陆之后，会有一个TCP连接来保持在线状态。2.和好友发消息，客户端client采用UDP协议，但是需要通过服务器转发。腾讯为了确保传输消息的可靠，采用上层协议来保证可靠传输。如果消息发送失败，客户端会提示消息发送失败，并可重新发送。3.如果是在内网里面的两个客户端传文件，QQ采用的是P2P技术，不需要服务器中转。\n","source":"_posts/2015/2015-11-1-关于TCP&%IP和socket详解.md","raw":"---\ntitle: 关于TCP/IP还有socket详解原创\ndate: 2015-10-10 09:47:00\n\ntags: [lessons]\n---\n\n\n# 关于TCP/IP还有socket详解（原创）\n\n### 1、熟悉TCP/UDP/HTTP？\n![原理图](http://wiki.mbalib.com/w/images/a/ac/TCP%EF%BC%8FIP%E5%8D%8F%E8%AE%AE%E6%97%8F%E4%B8%AD%E5%90%84%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.jpg)\n\n\n详细原理请参照[这里](http://wiki.mbalib.com/wiki/TCP/IP)\n\n\nTCP支持的应用协议主要有：Telnet、FTP、SMTP等；\n\nUDP支持的应用层协议主要有：NFS（网络文件系统）、SNMP（简单网络管理协议）、DNS（主域名称系统）、TFTP（通用文件传输协议）等\n\n\n答：TCP：全称是Transmission Control Protocol ，中文名位传输控制协议，它可以提供可靠的、面向连接的网络数据传递服务。传输控制协议主要包括下列任务和功能：\n\n 1. 确保ip数据报的成功传递\n 2. 对程序发送的大块数据进行分段和重组。\n 3. 确保正确排序及按顺序传递分段的数据。\n 4. 通过计算校验和，进行传输数据的完整性检查。\n \nUDP:全称是：User Datagram Protocol又称使用者资料包协定，是一个简单的面向数据报的传输层协议\n在TCP/IP模型中，UDP为网络层以上和应用层以下提供了一个简单的接口。UDP只提供数据的不可靠传递，它一旦把应用程序发给网络层的数据发送出去，就不保留数据备份（所以UDP有时候也被认为是不可靠的数据报协议）。UDP在IP数据报的头部仅仅加入了复用和数据校验（字段）。\n\nHTTP是客户端用http协议进行请求，发送请求时候需要封装http请求头，并绑定请求的数据，服务器一般有web服务器配合（当然也非绝 对）。 http请求方式为客户端主动发起请求，服务器才能给响应，一次请求完毕后则断开连接，以节省资源。服务器不能主动给客户端响应（除非采取http长连接 技术）。iphone主要使用类是NSUrlConnection。\n\nUDP应用场景：\n\n1，实时音视频是可以而且应该用 UDP 的，一方面因为它常常涉及到网络穿透，另外一方面它不需要重传。——我需要实时的看到你的图像跟声音，至于中间丢一帧什么的完全不重要。而为了重传往往会造成延迟与不同步，考虑一下，某一帧因为重传，导致0.5秒以后才到，那么整个音视频就延迟了0.5秒。\n著作权归作者所有。\n\n2，网络真的非常非常可靠，以至于你完全不需要考虑 UDP 丢包问题的情况。典型的例子应该是专门为有线局域网设计的协议。\n\n3，另外一个问题是 TCP 是纯粹的流式数据，所以制定传输协议的时候，接受方需要自行判定一个包的开始和结束，因为你完全可能接受到半个包或者两个包。——如果数据报的起止判定对你具体的程序会成为大问题，也可以考虑 UDP\n\nwhen in doubt, use tcp\n\n### 什么是socket？\n答：scoket是客户端跟服务器直接使用socket“套接字”进行连接，并没有规定连接后断开，所以客户端和服务器可以保持连接通道，双方 都可以主动发送数据。一般在游戏开发或股票开发这种要求即时性很强并且保持发送数据量比较大的场合使用。主要使用类是CFSocketRef。\n用到socket的第三方：AsyncSocket\n\n### 网络访问的OSI七层模型：从上到下依次是：应用层、表示层、会话层、传输层 、网络层、数据链路层、物理层。\n### 七层简述 \n.1. 物理层:主要定义物理设备标准,如网线的接口类型、各种传输介质的传 输速率等。主要作用是传输比特流(就是由1、0转化为电流强弱来进行传 输,到达目的地后再转化为1、0,也就是常说的数模与模数转换)。这一 层的数据叫做比特(bit),主要设备:集线器 \n\n.2. 数据链路层:主要将从物理层接收的数据进行MAC地址的封装与解封装。 常把这一层的数据叫做帧,主要设备:交换机 \n\n.3. 网络层:选择合适的网间路由和交换结点, 确保数据及时传送,将从下层 接收到的数据进行IP地址的封装与解封装。常把这一层数据叫做数据包,主 要设备:路由器。 \n\n.4. 传输层:定义了一些传输数据的协议和端口,如TCP、UDP协议,主要将从 下层接收的数据进行分段和传输,到达目的地址后再进行重组,以往把这 一层数据叫做段。 \n\n.5. 会话层:通过传输层建立数据传输通路。在系统之间发起会话或者接受会 话请求(设备之间需要互相认识) \n\n.6. 表示层:主要是进行对接收的数据进行解释、压缩与解压缩等,即把计算 机能够识别的东西转化成人能够识别的东西(如图片、声音等) \n\n.7. 应用层:主要是一些终端的应用,比如说FTP(各种文件下载)、浏览器、 QQ等,可以将其理解为在电脑屏幕上可以看到的东西,也就是终端应用。 \n### tcp/ip四层模型：从上到下依次：应用层、传输层、网际层、主机至网络层\n![网络参考模型](http://i5.tietuku.com/7df4467aa74a7720.png)\n\n1.  网络中各节点都有相同的层次\n2.  不同节点相同层次具有相同的功能\n3.  同一节点相邻层间通过接口通信\n4. 每一层可以使用下层提供的服务\n5. 不同节点的同层间通过协议来实现对等层间的通信\n\n\n ![插图](http://i5.tietuku.com/d8a23048330df782.png)\n\n#### 网络通讯要素 \n• IP地址(唯一标示网络设备的0~255 2^32 = 4G): - 网络中设备的标示- 不易记忆,可以用主机名-本地回环地址:127.0.0.1 主机名:localhost \n• 端口号(定位程序) \n- 用于标示进程的逻辑地址,不同进程的标示 \n- 有效端口:0~65535,其中0~1024由系统使用或者保留端口,开发 中不要使用1024以下的端口 \n• 传输协议(用什么样的方式进行交互) - 通讯的规则 \n- 常见协议:TCP、UDP \n• http://ip:80/文件路径 => URL(统一资源定位) \n• 资源类型是通过MimeType来区分的,告诉客户端是什么类型的 资源\nURL(确定要访问的资源) •Request=》要访问了• Connect=》开始访问• ....\n• 返回结果\n\n## TCP & UDP \n• UDP(用户数据报协议)- 将数据及源和目的封装成数据包中,不需要建立连接 - 每个数据报的大小限制在64K之内- 因为无需连接,因此是不可靠协议- 不需要建立连接,速度快\n\n• TCP(传输控制协议)- 建立连接,形成传输数据的通道- 在连接中进行大数据传输(数据大小不收限制) - 通过三次握手完成连接,是可靠协议,安全送达 - 必须建立连接,效率会稍低 \n## Socket(套接字层、插座--AT&T) \n• Socket就是为网络服务提供的一种机制 - 在Unix中,网络既是Socket,并不局限在TCP/UDP - Socket可以用于自定义协议 QQ\n\n• 通信的两端都是Socket\n\n• 网络通信其实就是Socket间的通信• 数据在两个Socket间通过IO传输 \n\n原理图\n\n![原理图](http://i12.tietuku.com/9a28f7b80752179a.png)\n\nSocket通讯流程图 \n\n![Socket通讯流程图](http://i5.tietuku.com/6a59569c051567db.jpg)\n\n使用Socket开发网络通讯 \n• 在Web服务(WebServices=>XML)大行其道的今天,调用Web服 务的代价是高昂的,尤其是仅仅是抓取少量数据的时候尤其如 此。而使用Socket,可以只传送数据本身而不用进行XML封装, 大大降低数据传输的开销(JSON)\n• Socket允许使用长连接,允许应用程序运行在异步模式(提高 效率),只有在需要的时候才接收数据 \n\n#### iOS中常用的两种Socket类型 \n流式Socket(SOCK_STREAM):流式是一种面向连接的\nSocket,针对于面向连接的TCP服务应用\n数据报式Socket(SOCK_DGRAM):数据报式Socket是一 种无连接的Socket,对应于无连接的UDP服务应用\n\n在iOS中流式Socket连接的方法 \n-  在iOS中以NSStream(流)来发送和接收数据• 可以设置流的代理,对流状态的变化做出相应\n- 连接建立- 接收到数据 - 连接关闭\n\n1. NSStream:数据流的父类,用于定义抽象特性,例如:打开、关闭 代理,NSStream继承自CFStream(Core Foundation)\n2. NSInputStream:NSStream的子类,用于读取输入 \n3. NSOutputStream:NSSTream的子类,用于写输出 \n\n#### 开发步骤 \n\n1. 网络连接设置1. 设置网络连接,绑定到主机和端口2. 设置输入流和输出流的代理,监听数据流的状态 3. 将输入输出流添加至运行循环4. 打开输入流和输出流\n2. 发送消息给服务器\n3. 有可读取字节时,读取服务器返回的内容\n4. 到达流末尾时,关闭流,同时并从主运行循环中删除\n\n设置网络通讯 \n\n\t\t\n\t\tCFReadStreamRef readStream;!\n\t\tCFWriteStreamRef writeStream;!\n\t\t!\n\t\tCFStreamCreatePairWithSocketToHost(NULL, (CFStringRef)@\"localhost\", 12345, &readStream, &writeStream);!\n\t\t!\n\t\t  _inputStream = (__bridge NSInputStream *)readStream;!_outputStream = (__bridge NSOutputStream*)writeStream;!\n\t\t  \n\t\t  \n说明:CFStreamCreatePairWithSocketToHost函数用于将输入流和输出流 绑定到指定主机的对应端口,连接建立之后,既可以像输入流写入数据, 或者从输出流读取数据\n\t\t\n\t\t\n\t\t设置流代理并添加至运行循环 \n\t\t_inputStream.delegate = self;!\n\t\t_outputStream.delegate = self;!\n\t\t!\n\t\t// 将输入、输出流添加至运行循环!\n\t\t[_inputStream scheduleInRunLoop:[NSRunLoop mainRunLoop]forMode:NSDefaultRunLoopMode];!\n\t\t[_outputStream scheduleInRunLoop:[NSRunLoop mainRunLoop]forMode:NSDefaultRunLoopMode];!\n\t\t!\n\t\t// 打开输入、输出流 [_inputStream open];! [_outputStream open]; \n\t\t\n发送登录请求给服务器 \n\n\n     // 1. 创建要发送的字符串 NSString *sendMsg = [NSStringstringWithFormat:@\"iam:%@\",\n\t\t\t\t_userNameText.text];!\n\t\t\t\t// 2. 将字符串转换成NSData NSData *sendData = [sendMsgdataUsingEncoding:NSUTF8StringEncoding];! !\n\t\t\t\t// 3. 写入数据 [_outputStream write:[sendData bytes]maxLength:[sendData length]]; \n\t\t\n数据流事件响应 \n\n\t\tswitch (eventCode) {!\n\t\tcase NSStreamEventOpenCompleted:!\n\t\tNSLog(@\"数据流打开完成\");!\n\t\tbreak;!\n\t\tcase NSStreamEventHasBytesAvailable:!\n\t\tNSLog(@\"有字节读取\");!\n\t\tbreak;!\n\t\tcase NSStreamEventHasSpaceAvailable:!\n\t\tNSLog(@\"可以写入数据\");!\n\t\tbreak;!\n\t\tcase NSStreamEventErrorOccurred:!\n\t\tNSLog(@\"无法连接到服务器\");!\n\t\tbreak;!\n\t\tcase NSStreamEventEndEncountered:!\n\t\tNSLog(@“到达流末尾,需要关闭流\");!\n\t\tbreak;! default:!\n\t\tNSLog(@\"未知\");!\n\t\tbreak;! } \n\t\t\n有字节读取,则读取从服务器返回消息 \n\n\t\t// 服务器返回数据,从输入流中读取数据 // 定义一个字符串缓冲数组,用于接收数据 uint8_t buffer[1024];!\n\t\t// 送输入流中读取数据,并获得读取内容的长度 int len = [_inputStream read:buffermaxLength:sizeof(buffer)];! !\n\t\t// 判断是否有读入的内容 if (len > 0) {!\n\t\t// 将读入的数据转换成字符串 NSString *str = [[NSString alloc] initWithBytes:buffer\n\t\tlength:len encoding:NSUTF8StringEncoding];!NSLog(@\"=======> %@\", str);!\n\t\t} \n\t\t\n\t\t到达流末尾,关闭流并且从运行循环中删除 • [aStreamclose];!\n\t\t• [aStreamremoveFromRunLoop:[NSRunLoopmainRunLoop]forMode:NSDefaultRunLoopMode];!\n\n回顾 \n• Socket就是为网络服务提供的一种机制•Socket允许使用长连接,允许应用程序运行在异步模式,\n只有在需要的时候才接收数据\n• 流式Socket(SOCK_STREAM):流式是一种面向连接的 Socket,针对于面向连接的TCP服务应用\n\n### QQ用到的是什么传输协议？\n答：QQ登陆采用TCP协议和HTTP协议，QQ都会有一个TCP连接来保持在线状态 。你和好友之间发送消息，主要采用UDP协议，内网传文件采用了P2P技术。\n\n总来的说：1.登陆过程，客户端client 采用TCP协议向服务器server发送信息，HTTP协议下载信息。登陆之后，会有一个TCP连接来保持在线状态。2.和好友发消息，客户端client采用UDP协议，但是需要通过服务器转发。腾讯为了确保传输消息的可靠，采用上层协议来保证可靠传输。如果消息发送失败，客户端会提示消息发送失败，并可重新发送。3.如果是在内网里面的两个客户端传文件，QQ采用的是P2P技术，不需要服务器中转。\n","slug":"2015-2015-11-1-关于TCP-IP和socket详解","published":1,"updated":"2016-05-25T02:20:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9l2000frb0uua3a5xnd","content":"<h1 id=\"关于TCP-IP还有socket详解（原创）\"><a href=\"#关于TCP-IP还有socket详解（原创）\" class=\"headerlink\" title=\"关于TCP/IP还有socket详解（原创）\"></a>关于TCP/IP还有socket详解（原创）</h1><h3 id=\"1、熟悉TCP-UDP-HTTP？\"><a href=\"#1、熟悉TCP-UDP-HTTP？\" class=\"headerlink\" title=\"1、熟悉TCP/UDP/HTTP？\"></a>1、熟悉TCP/UDP/HTTP？</h3><p><img src=\"http://wiki.mbalib.com/w/images/a/ac/TCP%EF%BC%8FIP%E5%8D%8F%E8%AE%AE%E6%97%8F%E4%B8%AD%E5%90%84%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.jpg\" alt=\"原理图\"></p>\n<p>详细原理请参照<a href=\"http://wiki.mbalib.com/wiki/TCP/IP\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>TCP支持的应用协议主要有：Telnet、FTP、SMTP等；</p>\n<p>UDP支持的应用层协议主要有：NFS（网络文件系统）、SNMP（简单网络管理协议）、DNS（主域名称系统）、TFTP（通用文件传输协议）等</p>\n<p>答：TCP：全称是Transmission Control Protocol ，中文名位传输控制协议，它可以提供可靠的、面向连接的网络数据传递服务。传输控制协议主要包括下列任务和功能：</p>\n<ol>\n<li>确保ip数据报的成功传递</li>\n<li>对程序发送的大块数据进行分段和重组。</li>\n<li>确保正确排序及按顺序传递分段的数据。</li>\n<li>通过计算校验和，进行传输数据的完整性检查。</li>\n</ol>\n<p>UDP:全称是：User Datagram Protocol又称使用者资料包协定，是一个简单的面向数据报的传输层协议<br>在TCP/IP模型中，UDP为网络层以上和应用层以下提供了一个简单的接口。UDP只提供数据的不可靠传递，它一旦把应用程序发给网络层的数据发送出去，就不保留数据备份（所以UDP有时候也被认为是不可靠的数据报协议）。UDP在IP数据报的头部仅仅加入了复用和数据校验（字段）。</p>\n<p>HTTP是客户端用http协议进行请求，发送请求时候需要封装http请求头，并绑定请求的数据，服务器一般有web服务器配合（当然也非绝 对）。 http请求方式为客户端主动发起请求，服务器才能给响应，一次请求完毕后则断开连接，以节省资源。服务器不能主动给客户端响应（除非采取http长连接 技术）。iphone主要使用类是NSUrlConnection。</p>\n<p>UDP应用场景：</p>\n<p>1，实时音视频是可以而且应该用 UDP 的，一方面因为它常常涉及到网络穿透，另外一方面它不需要重传。——我需要实时的看到你的图像跟声音，至于中间丢一帧什么的完全不重要。而为了重传往往会造成延迟与不同步，考虑一下，某一帧因为重传，导致0.5秒以后才到，那么整个音视频就延迟了0.5秒。<br>著作权归作者所有。</p>\n<p>2，网络真的非常非常可靠，以至于你完全不需要考虑 UDP 丢包问题的情况。典型的例子应该是专门为有线局域网设计的协议。</p>\n<p>3，另外一个问题是 TCP 是纯粹的流式数据，所以制定传输协议的时候，接受方需要自行判定一个包的开始和结束，因为你完全可能接受到半个包或者两个包。——如果数据报的起止判定对你具体的程序会成为大问题，也可以考虑 UDP</p>\n<p>when in doubt, use tcp</p>\n<h3 id=\"什么是socket？\"><a href=\"#什么是socket？\" class=\"headerlink\" title=\"什么是socket？\"></a>什么是socket？</h3><p>答：scoket是客户端跟服务器直接使用socket“套接字”进行连接，并没有规定连接后断开，所以客户端和服务器可以保持连接通道，双方 都可以主动发送数据。一般在游戏开发或股票开发这种要求即时性很强并且保持发送数据量比较大的场合使用。主要使用类是CFSocketRef。<br>用到socket的第三方：AsyncSocket</p>\n<h3 id=\"网络访问的OSI七层模型：从上到下依次是：应用层、表示层、会话层、传输层-、网络层、数据链路层、物理层。\"><a href=\"#网络访问的OSI七层模型：从上到下依次是：应用层、表示层、会话层、传输层-、网络层、数据链路层、物理层。\" class=\"headerlink\" title=\"网络访问的OSI七层模型：从上到下依次是：应用层、表示层、会话层、传输层 、网络层、数据链路层、物理层。\"></a>网络访问的OSI七层模型：从上到下依次是：应用层、表示层、会话层、传输层 、网络层、数据链路层、物理层。</h3><h3 id=\"七层简述\"><a href=\"#七层简述\" class=\"headerlink\" title=\"七层简述\"></a>七层简述</h3><p>.1. 物理层:主要定义物理设备标准,如网线的接口类型、各种传输介质的传 输速率等。主要作用是传输比特流(就是由1、0转化为电流强弱来进行传 输,到达目的地后再转化为1、0,也就是常说的数模与模数转换)。这一 层的数据叫做比特(bit),主要设备:集线器 </p>\n<p>.2. 数据链路层:主要将从物理层接收的数据进行MAC地址的封装与解封装。 常把这一层的数据叫做帧,主要设备:交换机 </p>\n<p>.3. 网络层:选择合适的网间路由和交换结点, 确保数据及时传送,将从下层 接收到的数据进行IP地址的封装与解封装。常把这一层数据叫做数据包,主 要设备:路由器。 </p>\n<p>.4. 传输层:定义了一些传输数据的协议和端口,如TCP、UDP协议,主要将从 下层接收的数据进行分段和传输,到达目的地址后再进行重组,以往把这 一层数据叫做段。 </p>\n<p>.5. 会话层:通过传输层建立数据传输通路。在系统之间发起会话或者接受会 话请求(设备之间需要互相认识) </p>\n<p>.6. 表示层:主要是进行对接收的数据进行解释、压缩与解压缩等,即把计算 机能够识别的东西转化成人能够识别的东西(如图片、声音等) </p>\n<p>.7. 应用层:主要是一些终端的应用,比如说FTP(各种文件下载)、浏览器、 QQ等,可以将其理解为在电脑屏幕上可以看到的东西,也就是终端应用。 </p>\n<h3 id=\"tcp-ip四层模型：从上到下依次：应用层、传输层、网际层、主机至网络层\"><a href=\"#tcp-ip四层模型：从上到下依次：应用层、传输层、网际层、主机至网络层\" class=\"headerlink\" title=\"tcp/ip四层模型：从上到下依次：应用层、传输层、网际层、主机至网络层\"></a>tcp/ip四层模型：从上到下依次：应用层、传输层、网际层、主机至网络层</h3><p><img src=\"http://i5.tietuku.com/7df4467aa74a7720.png\" alt=\"网络参考模型\"></p>\n<ol>\n<li>网络中各节点都有相同的层次</li>\n<li>不同节点相同层次具有相同的功能</li>\n<li>同一节点相邻层间通过接口通信</li>\n<li>每一层可以使用下层提供的服务</li>\n<li>不同节点的同层间通过协议来实现对等层间的通信</li>\n</ol>\n<p> <img src=\"http://i5.tietuku.com/d8a23048330df782.png\" alt=\"插图\"></p>\n<h4 id=\"网络通讯要素\"><a href=\"#网络通讯要素\" class=\"headerlink\" title=\"网络通讯要素\"></a>网络通讯要素</h4><p>• IP地址(唯一标示网络设备的0~255 2^32 = 4G): - 网络中设备的标示- 不易记忆,可以用主机名-本地回环地址:127.0.0.1 主机名:localhost<br>• 端口号(定位程序) </p>\n<ul>\n<li>用于标示进程的逻辑地址,不同进程的标示 </li>\n<li>有效端口:0~65535,其中0~1024由系统使用或者保留端口,开发 中不要使用1024以下的端口<br>• 传输协议(用什么样的方式进行交互) - 通讯的规则 </li>\n<li>常见协议:TCP、UDP<br>• <a href=\"http://ip:80/文件路径\" target=\"_blank\" rel=\"noopener\">http://ip:80/文件路径</a> =&gt; URL(统一资源定位)<br>• 资源类型是通过MimeType来区分的,告诉客户端是什么类型的 资源<br>URL(确定要访问的资源) •Request=》要访问了• Connect=》开始访问• ….<br>• 返回结果</li>\n</ul>\n<h2 id=\"TCP-amp-UDP\"><a href=\"#TCP-amp-UDP\" class=\"headerlink\" title=\"TCP &amp; UDP\"></a>TCP &amp; UDP</h2><p>• UDP(用户数据报协议)- 将数据及源和目的封装成数据包中,不需要建立连接 - 每个数据报的大小限制在64K之内- 因为无需连接,因此是不可靠协议- 不需要建立连接,速度快</p>\n<p>• TCP(传输控制协议)- 建立连接,形成传输数据的通道- 在连接中进行大数据传输(数据大小不收限制) - 通过三次握手完成连接,是可靠协议,安全送达 - 必须建立连接,效率会稍低 </p>\n<h2 id=\"Socket-套接字层、插座–AT-amp-T\"><a href=\"#Socket-套接字层、插座–AT-amp-T\" class=\"headerlink\" title=\"Socket(套接字层、插座–AT&amp;T)\"></a>Socket(套接字层、插座–AT&amp;T)</h2><p>• Socket就是为网络服务提供的一种机制 - 在Unix中,网络既是Socket,并不局限在TCP/UDP - Socket可以用于自定义协议 QQ</p>\n<p>• 通信的两端都是Socket</p>\n<p>• 网络通信其实就是Socket间的通信• 数据在两个Socket间通过IO传输 </p>\n<p>原理图</p>\n<p><img src=\"http://i12.tietuku.com/9a28f7b80752179a.png\" alt=\"原理图\"></p>\n<p>Socket通讯流程图 </p>\n<p><img src=\"http://i5.tietuku.com/6a59569c051567db.jpg\" alt=\"Socket通讯流程图\"></p>\n<p>使用Socket开发网络通讯<br>• 在Web服务(WebServices=&gt;XML)大行其道的今天,调用Web服 务的代价是高昂的,尤其是仅仅是抓取少量数据的时候尤其如 此。而使用Socket,可以只传送数据本身而不用进行XML封装, 大大降低数据传输的开销(JSON)<br>• Socket允许使用长连接,允许应用程序运行在异步模式(提高 效率),只有在需要的时候才接收数据 </p>\n<h4 id=\"iOS中常用的两种Socket类型\"><a href=\"#iOS中常用的两种Socket类型\" class=\"headerlink\" title=\"iOS中常用的两种Socket类型\"></a>iOS中常用的两种Socket类型</h4><p>流式Socket(SOCK_STREAM):流式是一种面向连接的<br>Socket,针对于面向连接的TCP服务应用<br>数据报式Socket(SOCK_DGRAM):数据报式Socket是一 种无连接的Socket,对应于无连接的UDP服务应用</p>\n<p>在iOS中流式Socket连接的方法 </p>\n<ul>\n<li>在iOS中以NSStream(流)来发送和接收数据• 可以设置流的代理,对流状态的变化做出相应</li>\n<li>连接建立- 接收到数据 - 连接关闭</li>\n</ul>\n<ol>\n<li>NSStream:数据流的父类,用于定义抽象特性,例如:打开、关闭 代理,NSStream继承自CFStream(Core Foundation)</li>\n<li>NSInputStream:NSStream的子类,用于读取输入 </li>\n<li>NSOutputStream:NSSTream的子类,用于写输出 </li>\n</ol>\n<h4 id=\"开发步骤\"><a href=\"#开发步骤\" class=\"headerlink\" title=\"开发步骤\"></a>开发步骤</h4><ol>\n<li>网络连接设置1. 设置网络连接,绑定到主机和端口2. 设置输入流和输出流的代理,监听数据流的状态 3. 将输入输出流添加至运行循环4. 打开输入流和输出流</li>\n<li>发送消息给服务器</li>\n<li>有可读取字节时,读取服务器返回的内容</li>\n<li>到达流末尾时,关闭流,同时并从主运行循环中删除</li>\n</ol>\n<p>设置网络通讯 </p>\n<pre><code>CFReadStreamRef readStream;!\nCFWriteStreamRef writeStream;!\n!\nCFStreamCreatePairWithSocketToHost(NULL, (CFStringRef)@&quot;localhost&quot;, 12345, &amp;readStream, &amp;writeStream);!\n!\n  _inputStream = (__bridge NSInputStream *)readStream;!_outputStream = (__bridge NSOutputStream*)writeStream;!\n</code></pre><p>说明:CFStreamCreatePairWithSocketToHost函数用于将输入流和输出流 绑定到指定主机的对应端口,连接建立之后,既可以像输入流写入数据, 或者从输出流读取数据</p>\n<pre><code>设置流代理并添加至运行循环 \n_inputStream.delegate = self;!\n_outputStream.delegate = self;!\n!\n// 将输入、输出流添加至运行循环!\n[_inputStream scheduleInRunLoop:[NSRunLoop mainRunLoop]forMode:NSDefaultRunLoopMode];!\n[_outputStream scheduleInRunLoop:[NSRunLoop mainRunLoop]forMode:NSDefaultRunLoopMode];!\n!\n// 打开输入、输出流 [_inputStream open];! [_outputStream open]; \n</code></pre><p>发送登录请求给服务器 </p>\n<pre><code>// 1. 创建要发送的字符串 NSString *sendMsg = [NSStringstringWithFormat:@&quot;iam:%@&quot;,\n           _userNameText.text];!\n           // 2. 将字符串转换成NSData NSData *sendData = [sendMsgdataUsingEncoding:NSUTF8StringEncoding];! !\n           // 3. 写入数据 [_outputStream write:[sendData bytes]maxLength:[sendData length]]; \n</code></pre><p>数据流事件响应 </p>\n<pre><code>switch (eventCode) {!\ncase NSStreamEventOpenCompleted:!\nNSLog(@&quot;数据流打开完成&quot;);!\nbreak;!\ncase NSStreamEventHasBytesAvailable:!\nNSLog(@&quot;有字节读取&quot;);!\nbreak;!\ncase NSStreamEventHasSpaceAvailable:!\nNSLog(@&quot;可以写入数据&quot;);!\nbreak;!\ncase NSStreamEventErrorOccurred:!\nNSLog(@&quot;无法连接到服务器&quot;);!\nbreak;!\ncase NSStreamEventEndEncountered:!\nNSLog(@“到达流末尾,需要关闭流&quot;);!\nbreak;! default:!\nNSLog(@&quot;未知&quot;);!\nbreak;! } \n</code></pre><p>有字节读取,则读取从服务器返回消息 </p>\n<pre><code>// 服务器返回数据,从输入流中读取数据 // 定义一个字符串缓冲数组,用于接收数据 uint8_t buffer[1024];!\n// 送输入流中读取数据,并获得读取内容的长度 int len = [_inputStream read:buffermaxLength:sizeof(buffer)];! !\n// 判断是否有读入的内容 if (len &gt; 0) {!\n// 将读入的数据转换成字符串 NSString *str = [[NSString alloc] initWithBytes:buffer\nlength:len encoding:NSUTF8StringEncoding];!NSLog(@&quot;=======&gt; %@&quot;, str);!\n} \n\n到达流末尾,关闭流并且从运行循环中删除 • [aStreamclose];!\n• [aStreamremoveFromRunLoop:[NSRunLoopmainRunLoop]forMode:NSDefaultRunLoopMode];!\n</code></pre><p>回顾<br>• Socket就是为网络服务提供的一种机制•Socket允许使用长连接,允许应用程序运行在异步模式,<br>只有在需要的时候才接收数据<br>• 流式Socket(SOCK_STREAM):流式是一种面向连接的 Socket,针对于面向连接的TCP服务应用</p>\n<h3 id=\"QQ用到的是什么传输协议？\"><a href=\"#QQ用到的是什么传输协议？\" class=\"headerlink\" title=\"QQ用到的是什么传输协议？\"></a>QQ用到的是什么传输协议？</h3><p>答：QQ登陆采用TCP协议和HTTP协议，QQ都会有一个TCP连接来保持在线状态 。你和好友之间发送消息，主要采用UDP协议，内网传文件采用了P2P技术。</p>\n<p>总来的说：1.登陆过程，客户端client 采用TCP协议向服务器server发送信息，HTTP协议下载信息。登陆之后，会有一个TCP连接来保持在线状态。2.和好友发消息，客户端client采用UDP协议，但是需要通过服务器转发。腾讯为了确保传输消息的可靠，采用上层协议来保证可靠传输。如果消息发送失败，客户端会提示消息发送失败，并可重新发送。3.如果是在内网里面的两个客户端传文件，QQ采用的是P2P技术，不需要服务器中转。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于TCP-IP还有socket详解（原创）\"><a href=\"#关于TCP-IP还有socket详解（原创）\" class=\"headerlink\" title=\"关于TCP/IP还有socket详解（原创）\"></a>关于TCP/IP还有socket详解（原创）</h1><h3 id=\"1、熟悉TCP-UDP-HTTP？\"><a href=\"#1、熟悉TCP-UDP-HTTP？\" class=\"headerlink\" title=\"1、熟悉TCP/UDP/HTTP？\"></a>1、熟悉TCP/UDP/HTTP？</h3><p><img src=\"http://wiki.mbalib.com/w/images/a/ac/TCP%EF%BC%8FIP%E5%8D%8F%E8%AE%AE%E6%97%8F%E4%B8%AD%E5%90%84%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.jpg\" alt=\"原理图\"></p>\n<p>详细原理请参照<a href=\"http://wiki.mbalib.com/wiki/TCP/IP\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>TCP支持的应用协议主要有：Telnet、FTP、SMTP等；</p>\n<p>UDP支持的应用层协议主要有：NFS（网络文件系统）、SNMP（简单网络管理协议）、DNS（主域名称系统）、TFTP（通用文件传输协议）等</p>\n<p>答：TCP：全称是Transmission Control Protocol ，中文名位传输控制协议，它可以提供可靠的、面向连接的网络数据传递服务。传输控制协议主要包括下列任务和功能：</p>\n<ol>\n<li>确保ip数据报的成功传递</li>\n<li>对程序发送的大块数据进行分段和重组。</li>\n<li>确保正确排序及按顺序传递分段的数据。</li>\n<li>通过计算校验和，进行传输数据的完整性检查。</li>\n</ol>\n<p>UDP:全称是：User Datagram Protocol又称使用者资料包协定，是一个简单的面向数据报的传输层协议<br>在TCP/IP模型中，UDP为网络层以上和应用层以下提供了一个简单的接口。UDP只提供数据的不可靠传递，它一旦把应用程序发给网络层的数据发送出去，就不保留数据备份（所以UDP有时候也被认为是不可靠的数据报协议）。UDP在IP数据报的头部仅仅加入了复用和数据校验（字段）。</p>\n<p>HTTP是客户端用http协议进行请求，发送请求时候需要封装http请求头，并绑定请求的数据，服务器一般有web服务器配合（当然也非绝 对）。 http请求方式为客户端主动发起请求，服务器才能给响应，一次请求完毕后则断开连接，以节省资源。服务器不能主动给客户端响应（除非采取http长连接 技术）。iphone主要使用类是NSUrlConnection。</p>\n<p>UDP应用场景：</p>\n<p>1，实时音视频是可以而且应该用 UDP 的，一方面因为它常常涉及到网络穿透，另外一方面它不需要重传。——我需要实时的看到你的图像跟声音，至于中间丢一帧什么的完全不重要。而为了重传往往会造成延迟与不同步，考虑一下，某一帧因为重传，导致0.5秒以后才到，那么整个音视频就延迟了0.5秒。<br>著作权归作者所有。</p>\n<p>2，网络真的非常非常可靠，以至于你完全不需要考虑 UDP 丢包问题的情况。典型的例子应该是专门为有线局域网设计的协议。</p>\n<p>3，另外一个问题是 TCP 是纯粹的流式数据，所以制定传输协议的时候，接受方需要自行判定一个包的开始和结束，因为你完全可能接受到半个包或者两个包。——如果数据报的起止判定对你具体的程序会成为大问题，也可以考虑 UDP</p>\n<p>when in doubt, use tcp</p>\n<h3 id=\"什么是socket？\"><a href=\"#什么是socket？\" class=\"headerlink\" title=\"什么是socket？\"></a>什么是socket？</h3><p>答：scoket是客户端跟服务器直接使用socket“套接字”进行连接，并没有规定连接后断开，所以客户端和服务器可以保持连接通道，双方 都可以主动发送数据。一般在游戏开发或股票开发这种要求即时性很强并且保持发送数据量比较大的场合使用。主要使用类是CFSocketRef。<br>用到socket的第三方：AsyncSocket</p>\n<h3 id=\"网络访问的OSI七层模型：从上到下依次是：应用层、表示层、会话层、传输层-、网络层、数据链路层、物理层。\"><a href=\"#网络访问的OSI七层模型：从上到下依次是：应用层、表示层、会话层、传输层-、网络层、数据链路层、物理层。\" class=\"headerlink\" title=\"网络访问的OSI七层模型：从上到下依次是：应用层、表示层、会话层、传输层 、网络层、数据链路层、物理层。\"></a>网络访问的OSI七层模型：从上到下依次是：应用层、表示层、会话层、传输层 、网络层、数据链路层、物理层。</h3><h3 id=\"七层简述\"><a href=\"#七层简述\" class=\"headerlink\" title=\"七层简述\"></a>七层简述</h3><p>.1. 物理层:主要定义物理设备标准,如网线的接口类型、各种传输介质的传 输速率等。主要作用是传输比特流(就是由1、0转化为电流强弱来进行传 输,到达目的地后再转化为1、0,也就是常说的数模与模数转换)。这一 层的数据叫做比特(bit),主要设备:集线器 </p>\n<p>.2. 数据链路层:主要将从物理层接收的数据进行MAC地址的封装与解封装。 常把这一层的数据叫做帧,主要设备:交换机 </p>\n<p>.3. 网络层:选择合适的网间路由和交换结点, 确保数据及时传送,将从下层 接收到的数据进行IP地址的封装与解封装。常把这一层数据叫做数据包,主 要设备:路由器。 </p>\n<p>.4. 传输层:定义了一些传输数据的协议和端口,如TCP、UDP协议,主要将从 下层接收的数据进行分段和传输,到达目的地址后再进行重组,以往把这 一层数据叫做段。 </p>\n<p>.5. 会话层:通过传输层建立数据传输通路。在系统之间发起会话或者接受会 话请求(设备之间需要互相认识) </p>\n<p>.6. 表示层:主要是进行对接收的数据进行解释、压缩与解压缩等,即把计算 机能够识别的东西转化成人能够识别的东西(如图片、声音等) </p>\n<p>.7. 应用层:主要是一些终端的应用,比如说FTP(各种文件下载)、浏览器、 QQ等,可以将其理解为在电脑屏幕上可以看到的东西,也就是终端应用。 </p>\n<h3 id=\"tcp-ip四层模型：从上到下依次：应用层、传输层、网际层、主机至网络层\"><a href=\"#tcp-ip四层模型：从上到下依次：应用层、传输层、网际层、主机至网络层\" class=\"headerlink\" title=\"tcp/ip四层模型：从上到下依次：应用层、传输层、网际层、主机至网络层\"></a>tcp/ip四层模型：从上到下依次：应用层、传输层、网际层、主机至网络层</h3><p><img src=\"http://i5.tietuku.com/7df4467aa74a7720.png\" alt=\"网络参考模型\"></p>\n<ol>\n<li>网络中各节点都有相同的层次</li>\n<li>不同节点相同层次具有相同的功能</li>\n<li>同一节点相邻层间通过接口通信</li>\n<li>每一层可以使用下层提供的服务</li>\n<li>不同节点的同层间通过协议来实现对等层间的通信</li>\n</ol>\n<p> <img src=\"http://i5.tietuku.com/d8a23048330df782.png\" alt=\"插图\"></p>\n<h4 id=\"网络通讯要素\"><a href=\"#网络通讯要素\" class=\"headerlink\" title=\"网络通讯要素\"></a>网络通讯要素</h4><p>• IP地址(唯一标示网络设备的0~255 2^32 = 4G): - 网络中设备的标示- 不易记忆,可以用主机名-本地回环地址:127.0.0.1 主机名:localhost<br>• 端口号(定位程序) </p>\n<ul>\n<li>用于标示进程的逻辑地址,不同进程的标示 </li>\n<li>有效端口:0~65535,其中0~1024由系统使用或者保留端口,开发 中不要使用1024以下的端口<br>• 传输协议(用什么样的方式进行交互) - 通讯的规则 </li>\n<li>常见协议:TCP、UDP<br>• <a href=\"http://ip:80/文件路径\" target=\"_blank\" rel=\"noopener\">http://ip:80/文件路径</a> =&gt; URL(统一资源定位)<br>• 资源类型是通过MimeType来区分的,告诉客户端是什么类型的 资源<br>URL(确定要访问的资源) •Request=》要访问了• Connect=》开始访问• ….<br>• 返回结果</li>\n</ul>\n<h2 id=\"TCP-amp-UDP\"><a href=\"#TCP-amp-UDP\" class=\"headerlink\" title=\"TCP &amp; UDP\"></a>TCP &amp; UDP</h2><p>• UDP(用户数据报协议)- 将数据及源和目的封装成数据包中,不需要建立连接 - 每个数据报的大小限制在64K之内- 因为无需连接,因此是不可靠协议- 不需要建立连接,速度快</p>\n<p>• TCP(传输控制协议)- 建立连接,形成传输数据的通道- 在连接中进行大数据传输(数据大小不收限制) - 通过三次握手完成连接,是可靠协议,安全送达 - 必须建立连接,效率会稍低 </p>\n<h2 id=\"Socket-套接字层、插座–AT-amp-T\"><a href=\"#Socket-套接字层、插座–AT-amp-T\" class=\"headerlink\" title=\"Socket(套接字层、插座–AT&amp;T)\"></a>Socket(套接字层、插座–AT&amp;T)</h2><p>• Socket就是为网络服务提供的一种机制 - 在Unix中,网络既是Socket,并不局限在TCP/UDP - Socket可以用于自定义协议 QQ</p>\n<p>• 通信的两端都是Socket</p>\n<p>• 网络通信其实就是Socket间的通信• 数据在两个Socket间通过IO传输 </p>\n<p>原理图</p>\n<p><img src=\"http://i12.tietuku.com/9a28f7b80752179a.png\" alt=\"原理图\"></p>\n<p>Socket通讯流程图 </p>\n<p><img src=\"http://i5.tietuku.com/6a59569c051567db.jpg\" alt=\"Socket通讯流程图\"></p>\n<p>使用Socket开发网络通讯<br>• 在Web服务(WebServices=&gt;XML)大行其道的今天,调用Web服 务的代价是高昂的,尤其是仅仅是抓取少量数据的时候尤其如 此。而使用Socket,可以只传送数据本身而不用进行XML封装, 大大降低数据传输的开销(JSON)<br>• Socket允许使用长连接,允许应用程序运行在异步模式(提高 效率),只有在需要的时候才接收数据 </p>\n<h4 id=\"iOS中常用的两种Socket类型\"><a href=\"#iOS中常用的两种Socket类型\" class=\"headerlink\" title=\"iOS中常用的两种Socket类型\"></a>iOS中常用的两种Socket类型</h4><p>流式Socket(SOCK_STREAM):流式是一种面向连接的<br>Socket,针对于面向连接的TCP服务应用<br>数据报式Socket(SOCK_DGRAM):数据报式Socket是一 种无连接的Socket,对应于无连接的UDP服务应用</p>\n<p>在iOS中流式Socket连接的方法 </p>\n<ul>\n<li>在iOS中以NSStream(流)来发送和接收数据• 可以设置流的代理,对流状态的变化做出相应</li>\n<li>连接建立- 接收到数据 - 连接关闭</li>\n</ul>\n<ol>\n<li>NSStream:数据流的父类,用于定义抽象特性,例如:打开、关闭 代理,NSStream继承自CFStream(Core Foundation)</li>\n<li>NSInputStream:NSStream的子类,用于读取输入 </li>\n<li>NSOutputStream:NSSTream的子类,用于写输出 </li>\n</ol>\n<h4 id=\"开发步骤\"><a href=\"#开发步骤\" class=\"headerlink\" title=\"开发步骤\"></a>开发步骤</h4><ol>\n<li>网络连接设置1. 设置网络连接,绑定到主机和端口2. 设置输入流和输出流的代理,监听数据流的状态 3. 将输入输出流添加至运行循环4. 打开输入流和输出流</li>\n<li>发送消息给服务器</li>\n<li>有可读取字节时,读取服务器返回的内容</li>\n<li>到达流末尾时,关闭流,同时并从主运行循环中删除</li>\n</ol>\n<p>设置网络通讯 </p>\n<pre><code>CFReadStreamRef readStream;!\nCFWriteStreamRef writeStream;!\n!\nCFStreamCreatePairWithSocketToHost(NULL, (CFStringRef)@&quot;localhost&quot;, 12345, &amp;readStream, &amp;writeStream);!\n!\n  _inputStream = (__bridge NSInputStream *)readStream;!_outputStream = (__bridge NSOutputStream*)writeStream;!\n</code></pre><p>说明:CFStreamCreatePairWithSocketToHost函数用于将输入流和输出流 绑定到指定主机的对应端口,连接建立之后,既可以像输入流写入数据, 或者从输出流读取数据</p>\n<pre><code>设置流代理并添加至运行循环 \n_inputStream.delegate = self;!\n_outputStream.delegate = self;!\n!\n// 将输入、输出流添加至运行循环!\n[_inputStream scheduleInRunLoop:[NSRunLoop mainRunLoop]forMode:NSDefaultRunLoopMode];!\n[_outputStream scheduleInRunLoop:[NSRunLoop mainRunLoop]forMode:NSDefaultRunLoopMode];!\n!\n// 打开输入、输出流 [_inputStream open];! [_outputStream open]; \n</code></pre><p>发送登录请求给服务器 </p>\n<pre><code>// 1. 创建要发送的字符串 NSString *sendMsg = [NSStringstringWithFormat:@&quot;iam:%@&quot;,\n           _userNameText.text];!\n           // 2. 将字符串转换成NSData NSData *sendData = [sendMsgdataUsingEncoding:NSUTF8StringEncoding];! !\n           // 3. 写入数据 [_outputStream write:[sendData bytes]maxLength:[sendData length]]; \n</code></pre><p>数据流事件响应 </p>\n<pre><code>switch (eventCode) {!\ncase NSStreamEventOpenCompleted:!\nNSLog(@&quot;数据流打开完成&quot;);!\nbreak;!\ncase NSStreamEventHasBytesAvailable:!\nNSLog(@&quot;有字节读取&quot;);!\nbreak;!\ncase NSStreamEventHasSpaceAvailable:!\nNSLog(@&quot;可以写入数据&quot;);!\nbreak;!\ncase NSStreamEventErrorOccurred:!\nNSLog(@&quot;无法连接到服务器&quot;);!\nbreak;!\ncase NSStreamEventEndEncountered:!\nNSLog(@“到达流末尾,需要关闭流&quot;);!\nbreak;! default:!\nNSLog(@&quot;未知&quot;);!\nbreak;! } \n</code></pre><p>有字节读取,则读取从服务器返回消息 </p>\n<pre><code>// 服务器返回数据,从输入流中读取数据 // 定义一个字符串缓冲数组,用于接收数据 uint8_t buffer[1024];!\n// 送输入流中读取数据,并获得读取内容的长度 int len = [_inputStream read:buffermaxLength:sizeof(buffer)];! !\n// 判断是否有读入的内容 if (len &gt; 0) {!\n// 将读入的数据转换成字符串 NSString *str = [[NSString alloc] initWithBytes:buffer\nlength:len encoding:NSUTF8StringEncoding];!NSLog(@&quot;=======&gt; %@&quot;, str);!\n} \n\n到达流末尾,关闭流并且从运行循环中删除 • [aStreamclose];!\n• [aStreamremoveFromRunLoop:[NSRunLoopmainRunLoop]forMode:NSDefaultRunLoopMode];!\n</code></pre><p>回顾<br>• Socket就是为网络服务提供的一种机制•Socket允许使用长连接,允许应用程序运行在异步模式,<br>只有在需要的时候才接收数据<br>• 流式Socket(SOCK_STREAM):流式是一种面向连接的 Socket,针对于面向连接的TCP服务应用</p>\n<h3 id=\"QQ用到的是什么传输协议？\"><a href=\"#QQ用到的是什么传输协议？\" class=\"headerlink\" title=\"QQ用到的是什么传输协议？\"></a>QQ用到的是什么传输协议？</h3><p>答：QQ登陆采用TCP协议和HTTP协议，QQ都会有一个TCP连接来保持在线状态 。你和好友之间发送消息，主要采用UDP协议，内网传文件采用了P2P技术。</p>\n<p>总来的说：1.登陆过程，客户端client 采用TCP协议向服务器server发送信息，HTTP协议下载信息。登陆之后，会有一个TCP连接来保持在线状态。2.和好友发消息，客户端client采用UDP协议，但是需要通过服务器转发。腾讯为了确保传输消息的可靠，采用上层协议来保证可靠传输。如果消息发送失败，客户端会提示消息发送失败，并可重新发送。3.如果是在内网里面的两个客户端传文件，QQ采用的是P2P技术，不需要服务器中转。</p>\n"},{"layout":"post","title":"iOS学习之Socket使用简明教程－ AsyncSocket","description":"iOS学习之Socket使用简明教程－ AsyncSocket","_content":"\n\n\n\n#iOS学习之Socket使用简明教程－ AsyncSocket\n\n如果需要在项目中像QQ微信一样做到即时通讯，必须使用socket通讯，本人也是刚学习，分享一下，有什么不对的地方希望大家指正\n\nios原生的socket用起来不是很直观，所以我用的是AsyncSocket这个第三方库，对socket的封装比较好，只是好像没有带外传输（out—of-band） 如果你的服务器需要发送带外数据，可能得想下别的办法\n\n环境\n\n下载AsyncSockethttps://github.com/robbiehanson/CocoaAsyncSocket类库，将RunLoop文件夹下的AsyncSocket.h, AsyncSocket.m, AsyncUdpSocket.h, AsyncUdpSocket.m 文件拷贝到自己的project中\n\n添加CFNetwork.framework, 在使用socket的文件头\n\n\t #import <sys/socket.h>\n\t #import <netinet/in.h>\n\t #import <arpa/inet.h>\n\t #import <unistd.h>\n使用\n\n1. socket 连接\n\n即时通讯最大的特点就是实时性，基本感觉不到延时或是掉线，所以必须对socket的连接进行监视与检测，在断线时进行重新连接，如果用户退出登录，要将socket手动关闭，否则对服务器会造成一定的负荷。\n\n一般来说，一个用户（对于ios来说也就是我们的项目中）只能有一个正在连接的socket，所以这个socket变量必须是全局的，这里可以考虑使用单例或是AppDelegate进行数据共享，本文使用单例。如果对一个已经连接的socket对象再次进行连接操作，会抛出异常（不可对已经连接的socket进行连接）程序崩溃，所以在连接socket之前要对socket对象的连接状态进行判断\n\n使用socket进行即时通讯还有一个必须的操作，即对服务器发送心跳包，每隔一段时间对服务器发送长连接指令（指令不唯一，由服务器端指定，包括使用socket发送消息，发送的数据和格式都是由服务器指定），如果没有收到服务器的返回消息，AsyncSocket会得到失去连接的消息，我们可以在失去连接的回调方法里进行重新连接。\n\n先创建一个单例，命名为Singleton\n\n\t  Singleton.h\n\t\n\t// Singleton.h\n\t #import \"AsyncSocket.h\"\n\n\t #define DEFINE_SHARED_INSTANCE_USING_BLOCK(block) \\\n\tstatic dispatch_once_t onceToken = 0; \\\n\t__strong static id sharedInstance = nil; \\\n\tdispatch_once(&onceToken, ^{ \\\n\tsharedInstance = block(); \\\n\t}); \\\n\treturn sharedInstance; \\\n\t\n\t@interface Singleton : NSObject\n\t\n\t+ (Singleton *)sharedInstance;\n\t\n\t@end\n\tSingleton.m\n\t\n\t+(Singleton *) sharedInstance\n\t{\n\t\n\tstatic Singleton *sharedInstace = nil;\n\tstatic dispatch_once_t onceToken;\n\tdispatch_once(&onceToken, ^{\n\t\n\t    sharedInstace = [[self alloc] init];\n\t});\n\t\n\treturn sharedInstace;\n\t}\n这样一个单例就创建好了\n\n在.h文件中生命socket变量\n\n\t@property (nonatomic, strong) AsyncSocket    *socket;       // socket\n\t@property (nonatomic, copy  ) NSString       *socketHost;   // socket的Host\n\t@property (nonatomic, assign) UInt16         socketPort;    // socket的prot\n下面是连接，心跳，失去连接后重连\n\n连接(长连接)\n\n\t在.h文件中声明方法，并声明代理<AsyncSocketDelegate>\n\t\n\t-(void)socketConnectHost;// socket连接\n\t在.m中实现，连接时host与port都是由服务器指定，如果不是自己写的服务器，请与服务器端开发人员交流\n\t\n\t// socket连接\n\t-(void)socketConnectHost{\n\t\n\t    self.socket    = [[AsyncSocket alloc] initWithDelegate:self];\n\t\n\t    NSError *error = nil;\n\t\n\t    [self.socket connectToHost:self.socketHost onPort:self.socketPort withTimeout:3 error:&error];\n\t\n\t}\n心跳\n\n心跳通过计时器来实现 \n在singleton.h中声明一个定时器\n\n    @property (nonatomic, retain) NSTimer        *connectTimer; // 计时器\n在.m中实现连接成功回调方法，并在此方法中初始化定时器，发送心跳在后文向服务器发送数据时说明\n\n    #pragma mark  - 连接成功回调\n    -(void)onSocket:(AsyncSocket *)sock didConnectToHost:(NSString  *)host port:(UInt16)port\n{\n    NSLog(@\"socket连接成功\");\n\n    // 每隔30s像服务器发送心跳包\n    self.connectTimer = [NSTimer scheduledTimerWithTimeInterval:30 target:self selector:@selector(longConnectToSocket) userInfo:nil repeats:YES];// 在longConnectToSocket方法中进行长连接需要向服务器发送的讯息\n\n    [self.connectTimer fire];\n\n}\n2. socket 断开连接与重连\n\n断开连接\n\n失去连接有几种情况，服务器断开，用户主动cut，还可能有如QQ其他设备登录被掉线的情况，不管那种情况，我们都能收到socket回调方法返回给我们的讯息，如果是用户退出登录或是程序退出而需要手动cut，我们在cut前对socket的userData赋予一个值来标记为用户退出，这样我们可以在收到断开信息时判断究竟是什么原因导致的掉线\n\n在.h文件中声明一个枚举类型\n \n   \n     enum{\n    SocketOfflineByServer,// 服务器掉线，默认为0\n    SocketOfflineByUser,  // 用户主动cut\n    };\n声明断开连接方法\n\n\t-(void)cutOffSocket; // 断开socket连接\n.m\n\n\t// 切断socket\n\t-(void)cutOffSocket{\n\n    self.socket.userData = SocketOfflineByUser;// 声明是由用户主动切断\n\n    [self.connectTimer invalidate];\n\n    [self.socket disconnect];\n\t}\n重连\n\n实现代理方法\n\n\t-(void)onSocketDidDisconnect:(AsyncSocket *)sock\n\t{\n\t    NSLog(@\"sorry the connect is failure %ld\",sock.userData);\n\t    if (sock.userData == SocketOfflineByServer) {\n\t        // 服务器掉线，重连\n\t        [self socketConnectHost];\n\t    }\n\t    else if (sock.userData == SocketOfflineByUser) {\n\t        // 如果由用户断开，不进行重连\n\t        return;\n\t    }\n\t\n\t}\n3. socket 发送与接收数据\n\n发送数据 \n我们补充上文心跳连接未完成的方法\n\n\t// 心跳连接\n\t-(void)longConnectToSocket{\n\t\n    // 根据服务器要求发送固定格式的数据，假设为指令@\"longConnect\"，但是一般不会是这么简单的指令\n\n    NSString *longConnect = @\"longConnect\";\n\n    NSData   *dataStream  = [longConnect dataUsingEncoding:NSUTF8StringEncoding];\n\n    [self.socket writeData:dataStream withTimeout:1 tag:1];\n\n}\nsocket发送数据是以栈的形式存放，所有数据放在一个栈中，存取时会出现粘包的现象，所以很多时候服务器在收发数据时是以先发送内容字节长度，再发送内容的形式，得到数据时也是先得到一个长度，再根据这个长度在栈中读取这个长度的字节流，如果是这种情况，发送数据时只需在发送内容前发送一个长度，发送方法与发送内容一样，假设长度为8\n\n\tNSData   *dataStream  = [@8 dataUsingEncoding:NSUTF8StringEncoding];\n\t\n\t[self.socket writeData:dataStream withTimeout:1 tag:1];\n\t接收数据 \n\t为了能时刻接收到socket的消息，我们在长连接方法中进行读取数据\n\t\n\t [self.socket readDataWithTimeout:30 tag:0];\n\t如果得到数据，会调用回调方法\n\t\n\t-(void)onSocket:(AsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag\n\t{\n    // 对得到的data值进行解析与转换即可\n\n    [self.socket readDataWithTimeout:30 tag:0];\n\n\t}\n4. 简单使用说明\n\n我们在用户登录后的第一个界面进行socket的初始化连接操作，在得到数据后，将所需要显示的数据放在singleton中，对变量进行监听后做出相应的操作即可，延伸起来比较复杂，没有真实数据也不太方便说明，大家自己进行探索吧，有问题请在下方留言\n\n    [Singleton sharedInstance].socketHost = @\"192.186.100.21\";// host设定\n    [Singleton sharedInstance].socketPort = 10045;// port设定\n\n    // 在连接前先进行手动断开\n    [Singleton sharedInstance].socket.userData = SocketOfflineByUser;\n    [[Singleton sharedInstance] cutOffSocket];\n\n    // 确保断开后再连，如果对一个正处于连接状态的socket进行连接，会出现崩溃\n    [Singleton sharedInstance].socket.userData = SocketOfflineByServer;\n    [[Singleton sharedInstance] socketConnectHost];\n    \n    \n    \n    \n    \n 本文转自[这里](http://my.oschina.net/joanfen/blog/287238)本文涉及到的代码在[这里](http://www.oschina.net/code/snippet_735123_36974)","source":"_posts/2015/2015-11-2-iOS学习之Socket使用简明教程－ AsyncSocket.md","raw":"---\nlayout: post\ntitle: \"iOS学习之Socket使用简明教程－ AsyncSocket\"\ndescription: \"iOS学习之Socket使用简明教程－ AsyncSocket\"\ncategory : lessons\ntags: []\n---\n\n\n\n\n#iOS学习之Socket使用简明教程－ AsyncSocket\n\n如果需要在项目中像QQ微信一样做到即时通讯，必须使用socket通讯，本人也是刚学习，分享一下，有什么不对的地方希望大家指正\n\nios原生的socket用起来不是很直观，所以我用的是AsyncSocket这个第三方库，对socket的封装比较好，只是好像没有带外传输（out—of-band） 如果你的服务器需要发送带外数据，可能得想下别的办法\n\n环境\n\n下载AsyncSockethttps://github.com/robbiehanson/CocoaAsyncSocket类库，将RunLoop文件夹下的AsyncSocket.h, AsyncSocket.m, AsyncUdpSocket.h, AsyncUdpSocket.m 文件拷贝到自己的project中\n\n添加CFNetwork.framework, 在使用socket的文件头\n\n\t #import <sys/socket.h>\n\t #import <netinet/in.h>\n\t #import <arpa/inet.h>\n\t #import <unistd.h>\n使用\n\n1. socket 连接\n\n即时通讯最大的特点就是实时性，基本感觉不到延时或是掉线，所以必须对socket的连接进行监视与检测，在断线时进行重新连接，如果用户退出登录，要将socket手动关闭，否则对服务器会造成一定的负荷。\n\n一般来说，一个用户（对于ios来说也就是我们的项目中）只能有一个正在连接的socket，所以这个socket变量必须是全局的，这里可以考虑使用单例或是AppDelegate进行数据共享，本文使用单例。如果对一个已经连接的socket对象再次进行连接操作，会抛出异常（不可对已经连接的socket进行连接）程序崩溃，所以在连接socket之前要对socket对象的连接状态进行判断\n\n使用socket进行即时通讯还有一个必须的操作，即对服务器发送心跳包，每隔一段时间对服务器发送长连接指令（指令不唯一，由服务器端指定，包括使用socket发送消息，发送的数据和格式都是由服务器指定），如果没有收到服务器的返回消息，AsyncSocket会得到失去连接的消息，我们可以在失去连接的回调方法里进行重新连接。\n\n先创建一个单例，命名为Singleton\n\n\t  Singleton.h\n\t\n\t// Singleton.h\n\t #import \"AsyncSocket.h\"\n\n\t #define DEFINE_SHARED_INSTANCE_USING_BLOCK(block) \\\n\tstatic dispatch_once_t onceToken = 0; \\\n\t__strong static id sharedInstance = nil; \\\n\tdispatch_once(&onceToken, ^{ \\\n\tsharedInstance = block(); \\\n\t}); \\\n\treturn sharedInstance; \\\n\t\n\t@interface Singleton : NSObject\n\t\n\t+ (Singleton *)sharedInstance;\n\t\n\t@end\n\tSingleton.m\n\t\n\t+(Singleton *) sharedInstance\n\t{\n\t\n\tstatic Singleton *sharedInstace = nil;\n\tstatic dispatch_once_t onceToken;\n\tdispatch_once(&onceToken, ^{\n\t\n\t    sharedInstace = [[self alloc] init];\n\t});\n\t\n\treturn sharedInstace;\n\t}\n这样一个单例就创建好了\n\n在.h文件中生命socket变量\n\n\t@property (nonatomic, strong) AsyncSocket    *socket;       // socket\n\t@property (nonatomic, copy  ) NSString       *socketHost;   // socket的Host\n\t@property (nonatomic, assign) UInt16         socketPort;    // socket的prot\n下面是连接，心跳，失去连接后重连\n\n连接(长连接)\n\n\t在.h文件中声明方法，并声明代理<AsyncSocketDelegate>\n\t\n\t-(void)socketConnectHost;// socket连接\n\t在.m中实现，连接时host与port都是由服务器指定，如果不是自己写的服务器，请与服务器端开发人员交流\n\t\n\t// socket连接\n\t-(void)socketConnectHost{\n\t\n\t    self.socket    = [[AsyncSocket alloc] initWithDelegate:self];\n\t\n\t    NSError *error = nil;\n\t\n\t    [self.socket connectToHost:self.socketHost onPort:self.socketPort withTimeout:3 error:&error];\n\t\n\t}\n心跳\n\n心跳通过计时器来实现 \n在singleton.h中声明一个定时器\n\n    @property (nonatomic, retain) NSTimer        *connectTimer; // 计时器\n在.m中实现连接成功回调方法，并在此方法中初始化定时器，发送心跳在后文向服务器发送数据时说明\n\n    #pragma mark  - 连接成功回调\n    -(void)onSocket:(AsyncSocket *)sock didConnectToHost:(NSString  *)host port:(UInt16)port\n{\n    NSLog(@\"socket连接成功\");\n\n    // 每隔30s像服务器发送心跳包\n    self.connectTimer = [NSTimer scheduledTimerWithTimeInterval:30 target:self selector:@selector(longConnectToSocket) userInfo:nil repeats:YES];// 在longConnectToSocket方法中进行长连接需要向服务器发送的讯息\n\n    [self.connectTimer fire];\n\n}\n2. socket 断开连接与重连\n\n断开连接\n\n失去连接有几种情况，服务器断开，用户主动cut，还可能有如QQ其他设备登录被掉线的情况，不管那种情况，我们都能收到socket回调方法返回给我们的讯息，如果是用户退出登录或是程序退出而需要手动cut，我们在cut前对socket的userData赋予一个值来标记为用户退出，这样我们可以在收到断开信息时判断究竟是什么原因导致的掉线\n\n在.h文件中声明一个枚举类型\n \n   \n     enum{\n    SocketOfflineByServer,// 服务器掉线，默认为0\n    SocketOfflineByUser,  // 用户主动cut\n    };\n声明断开连接方法\n\n\t-(void)cutOffSocket; // 断开socket连接\n.m\n\n\t// 切断socket\n\t-(void)cutOffSocket{\n\n    self.socket.userData = SocketOfflineByUser;// 声明是由用户主动切断\n\n    [self.connectTimer invalidate];\n\n    [self.socket disconnect];\n\t}\n重连\n\n实现代理方法\n\n\t-(void)onSocketDidDisconnect:(AsyncSocket *)sock\n\t{\n\t    NSLog(@\"sorry the connect is failure %ld\",sock.userData);\n\t    if (sock.userData == SocketOfflineByServer) {\n\t        // 服务器掉线，重连\n\t        [self socketConnectHost];\n\t    }\n\t    else if (sock.userData == SocketOfflineByUser) {\n\t        // 如果由用户断开，不进行重连\n\t        return;\n\t    }\n\t\n\t}\n3. socket 发送与接收数据\n\n发送数据 \n我们补充上文心跳连接未完成的方法\n\n\t// 心跳连接\n\t-(void)longConnectToSocket{\n\t\n    // 根据服务器要求发送固定格式的数据，假设为指令@\"longConnect\"，但是一般不会是这么简单的指令\n\n    NSString *longConnect = @\"longConnect\";\n\n    NSData   *dataStream  = [longConnect dataUsingEncoding:NSUTF8StringEncoding];\n\n    [self.socket writeData:dataStream withTimeout:1 tag:1];\n\n}\nsocket发送数据是以栈的形式存放，所有数据放在一个栈中，存取时会出现粘包的现象，所以很多时候服务器在收发数据时是以先发送内容字节长度，再发送内容的形式，得到数据时也是先得到一个长度，再根据这个长度在栈中读取这个长度的字节流，如果是这种情况，发送数据时只需在发送内容前发送一个长度，发送方法与发送内容一样，假设长度为8\n\n\tNSData   *dataStream  = [@8 dataUsingEncoding:NSUTF8StringEncoding];\n\t\n\t[self.socket writeData:dataStream withTimeout:1 tag:1];\n\t接收数据 \n\t为了能时刻接收到socket的消息，我们在长连接方法中进行读取数据\n\t\n\t [self.socket readDataWithTimeout:30 tag:0];\n\t如果得到数据，会调用回调方法\n\t\n\t-(void)onSocket:(AsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag\n\t{\n    // 对得到的data值进行解析与转换即可\n\n    [self.socket readDataWithTimeout:30 tag:0];\n\n\t}\n4. 简单使用说明\n\n我们在用户登录后的第一个界面进行socket的初始化连接操作，在得到数据后，将所需要显示的数据放在singleton中，对变量进行监听后做出相应的操作即可，延伸起来比较复杂，没有真实数据也不太方便说明，大家自己进行探索吧，有问题请在下方留言\n\n    [Singleton sharedInstance].socketHost = @\"192.186.100.21\";// host设定\n    [Singleton sharedInstance].socketPort = 10045;// port设定\n\n    // 在连接前先进行手动断开\n    [Singleton sharedInstance].socket.userData = SocketOfflineByUser;\n    [[Singleton sharedInstance] cutOffSocket];\n\n    // 确保断开后再连，如果对一个正处于连接状态的socket进行连接，会出现崩溃\n    [Singleton sharedInstance].socket.userData = SocketOfflineByServer;\n    [[Singleton sharedInstance] socketConnectHost];\n    \n    \n    \n    \n    \n 本文转自[这里](http://my.oschina.net/joanfen/blog/287238)本文涉及到的代码在[这里](http://www.oschina.net/code/snippet_735123_36974)","slug":"2015-2015-11-2-iOS学习之Socket使用简明教程－-AsyncSocket","published":1,"date":"2015-12-29T08:27:58.000Z","updated":"2016-05-25T02:21:22.000Z","comments":1,"photos":[],"link":"","_id":"ckeb5g9l5000hrb0u40kotbkr","content":"<p>#iOS学习之Socket使用简明教程－ AsyncSocket</p>\n<p>如果需要在项目中像QQ微信一样做到即时通讯，必须使用socket通讯，本人也是刚学习，分享一下，有什么不对的地方希望大家指正</p>\n<p>ios原生的socket用起来不是很直观，所以我用的是AsyncSocket这个第三方库，对socket的封装比较好，只是好像没有带外传输（out—of-band） 如果你的服务器需要发送带外数据，可能得想下别的办法</p>\n<p>环境</p>\n<p>下载AsyncSocket<a href=\"https://github.com/robbiehanson/CocoaAsyncSocket类库，将RunLoop文件夹下的AsyncSocket.h\" target=\"_blank\" rel=\"noopener\">https://github.com/robbiehanson/CocoaAsyncSocket类库，将RunLoop文件夹下的AsyncSocket.h</a>, AsyncSocket.m, AsyncUdpSocket.h, AsyncUdpSocket.m 文件拷贝到自己的project中</p>\n<p>添加CFNetwork.framework, 在使用socket的文件头</p>\n<pre><code>#import &lt;sys/socket.h&gt;\n#import &lt;netinet/in.h&gt;\n#import &lt;arpa/inet.h&gt;\n#import &lt;unistd.h&gt;\n</code></pre><p>使用</p>\n<ol>\n<li>socket 连接</li>\n</ol>\n<p>即时通讯最大的特点就是实时性，基本感觉不到延时或是掉线，所以必须对socket的连接进行监视与检测，在断线时进行重新连接，如果用户退出登录，要将socket手动关闭，否则对服务器会造成一定的负荷。</p>\n<p>一般来说，一个用户（对于ios来说也就是我们的项目中）只能有一个正在连接的socket，所以这个socket变量必须是全局的，这里可以考虑使用单例或是AppDelegate进行数据共享，本文使用单例。如果对一个已经连接的socket对象再次进行连接操作，会抛出异常（不可对已经连接的socket进行连接）程序崩溃，所以在连接socket之前要对socket对象的连接状态进行判断</p>\n<p>使用socket进行即时通讯还有一个必须的操作，即对服务器发送心跳包，每隔一段时间对服务器发送长连接指令（指令不唯一，由服务器端指定，包括使用socket发送消息，发送的数据和格式都是由服务器指定），如果没有收到服务器的返回消息，AsyncSocket会得到失去连接的消息，我们可以在失去连接的回调方法里进行重新连接。</p>\n<p>先创建一个单例，命名为Singleton</p>\n<pre><code>  Singleton.h\n\n// Singleton.h\n #import &quot;AsyncSocket.h&quot;\n\n #define DEFINE_SHARED_INSTANCE_USING_BLOCK(block) \\\nstatic dispatch_once_t onceToken = 0; \\\n__strong static id sharedInstance = nil; \\\ndispatch_once(&amp;onceToken, ^{ \\\nsharedInstance = block(); \\\n}); \\\nreturn sharedInstance; \\\n\n@interface Singleton : NSObject\n\n+ (Singleton *)sharedInstance;\n\n@end\nSingleton.m\n\n+(Singleton *) sharedInstance\n{\n\nstatic Singleton *sharedInstace = nil;\nstatic dispatch_once_t onceToken;\ndispatch_once(&amp;onceToken, ^{\n\n    sharedInstace = [[self alloc] init];\n});\n\nreturn sharedInstace;\n}\n</code></pre><p>这样一个单例就创建好了</p>\n<p>在.h文件中生命socket变量</p>\n<pre><code>@property (nonatomic, strong) AsyncSocket    *socket;       // socket\n@property (nonatomic, copy  ) NSString       *socketHost;   // socket的Host\n@property (nonatomic, assign) UInt16         socketPort;    // socket的prot\n</code></pre><p>下面是连接，心跳，失去连接后重连</p>\n<p>连接(长连接)</p>\n<pre><code>在.h文件中声明方法，并声明代理&lt;AsyncSocketDelegate&gt;\n\n-(void)socketConnectHost;// socket连接\n在.m中实现，连接时host与port都是由服务器指定，如果不是自己写的服务器，请与服务器端开发人员交流\n\n// socket连接\n-(void)socketConnectHost{\n\n    self.socket    = [[AsyncSocket alloc] initWithDelegate:self];\n\n    NSError *error = nil;\n\n    [self.socket connectToHost:self.socketHost onPort:self.socketPort withTimeout:3 error:&amp;error];\n\n}\n</code></pre><p>心跳</p>\n<p>心跳通过计时器来实现<br>在singleton.h中声明一个定时器</p>\n<pre><code>@property (nonatomic, retain) NSTimer        *connectTimer; // 计时器\n</code></pre><p>在.m中实现连接成功回调方法，并在此方法中初始化定时器，发送心跳在后文向服务器发送数据时说明</p>\n<pre><code>#pragma mark  - 连接成功回调\n-(void)onSocket:(AsyncSocket *)sock didConnectToHost:(NSString  *)host port:(UInt16)port\n</code></pre><p>{<br>    NSLog(@”socket连接成功”);</p>\n<pre><code>// 每隔30s像服务器发送心跳包\nself.connectTimer = [NSTimer scheduledTimerWithTimeInterval:30 target:self selector:@selector(longConnectToSocket) userInfo:nil repeats:YES];// 在longConnectToSocket方法中进行长连接需要向服务器发送的讯息\n\n[self.connectTimer fire];\n</code></pre><p>}</p>\n<ol start=\"2\">\n<li>socket 断开连接与重连</li>\n</ol>\n<p>断开连接</p>\n<p>失去连接有几种情况，服务器断开，用户主动cut，还可能有如QQ其他设备登录被掉线的情况，不管那种情况，我们都能收到socket回调方法返回给我们的讯息，如果是用户退出登录或是程序退出而需要手动cut，我们在cut前对socket的userData赋予一个值来标记为用户退出，这样我们可以在收到断开信息时判断究竟是什么原因导致的掉线</p>\n<p>在.h文件中声明一个枚举类型</p>\n<pre><code> enum{\nSocketOfflineByServer,// 服务器掉线，默认为0\nSocketOfflineByUser,  // 用户主动cut\n};\n</code></pre><p>声明断开连接方法</p>\n<pre><code>-(void)cutOffSocket; // 断开socket连接\n</code></pre><p>.m</p>\n<pre><code>// 切断socket\n-(void)cutOffSocket{\n\nself.socket.userData = SocketOfflineByUser;// 声明是由用户主动切断\n\n[self.connectTimer invalidate];\n\n[self.socket disconnect];\n}\n</code></pre><p>重连</p>\n<p>实现代理方法</p>\n<pre><code>-(void)onSocketDidDisconnect:(AsyncSocket *)sock\n{\n    NSLog(@&quot;sorry the connect is failure %ld&quot;,sock.userData);\n    if (sock.userData == SocketOfflineByServer) {\n        // 服务器掉线，重连\n        [self socketConnectHost];\n    }\n    else if (sock.userData == SocketOfflineByUser) {\n        // 如果由用户断开，不进行重连\n        return;\n    }\n\n}\n</code></pre><ol start=\"3\">\n<li>socket 发送与接收数据</li>\n</ol>\n<p>发送数据<br>我们补充上文心跳连接未完成的方法</p>\n<pre><code>// 心跳连接\n-(void)longConnectToSocket{\n\n// 根据服务器要求发送固定格式的数据，假设为指令@&quot;longConnect&quot;，但是一般不会是这么简单的指令\n\nNSString *longConnect = @&quot;longConnect&quot;;\n\nNSData   *dataStream  = [longConnect dataUsingEncoding:NSUTF8StringEncoding];\n\n[self.socket writeData:dataStream withTimeout:1 tag:1];\n</code></pre><p>}<br>socket发送数据是以栈的形式存放，所有数据放在一个栈中，存取时会出现粘包的现象，所以很多时候服务器在收发数据时是以先发送内容字节长度，再发送内容的形式，得到数据时也是先得到一个长度，再根据这个长度在栈中读取这个长度的字节流，如果是这种情况，发送数据时只需在发送内容前发送一个长度，发送方法与发送内容一样，假设长度为8</p>\n<pre><code>NSData   *dataStream  = [@8 dataUsingEncoding:NSUTF8StringEncoding];\n\n[self.socket writeData:dataStream withTimeout:1 tag:1];\n接收数据 \n为了能时刻接收到socket的消息，我们在长连接方法中进行读取数据\n\n [self.socket readDataWithTimeout:30 tag:0];\n如果得到数据，会调用回调方法\n\n-(void)onSocket:(AsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag\n{\n// 对得到的data值进行解析与转换即可\n\n[self.socket readDataWithTimeout:30 tag:0];\n\n}\n</code></pre><ol start=\"4\">\n<li>简单使用说明</li>\n</ol>\n<p>我们在用户登录后的第一个界面进行socket的初始化连接操作，在得到数据后，将所需要显示的数据放在singleton中，对变量进行监听后做出相应的操作即可，延伸起来比较复杂，没有真实数据也不太方便说明，大家自己进行探索吧，有问题请在下方留言</p>\n<pre><code>[Singleton sharedInstance].socketHost = @&quot;192.186.100.21&quot;;// host设定\n[Singleton sharedInstance].socketPort = 10045;// port设定\n\n// 在连接前先进行手动断开\n[Singleton sharedInstance].socket.userData = SocketOfflineByUser;\n[[Singleton sharedInstance] cutOffSocket];\n\n// 确保断开后再连，如果对一个正处于连接状态的socket进行连接，会出现崩溃\n[Singleton sharedInstance].socket.userData = SocketOfflineByServer;\n[[Singleton sharedInstance] socketConnectHost];\n</code></pre><p> 本文转自<a href=\"http://my.oschina.net/joanfen/blog/287238\" target=\"_blank\" rel=\"noopener\">这里</a>本文涉及到的代码在<a href=\"http://www.oschina.net/code/snippet_735123_36974\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>#iOS学习之Socket使用简明教程－ AsyncSocket</p>\n<p>如果需要在项目中像QQ微信一样做到即时通讯，必须使用socket通讯，本人也是刚学习，分享一下，有什么不对的地方希望大家指正</p>\n<p>ios原生的socket用起来不是很直观，所以我用的是AsyncSocket这个第三方库，对socket的封装比较好，只是好像没有带外传输（out—of-band） 如果你的服务器需要发送带外数据，可能得想下别的办法</p>\n<p>环境</p>\n<p>下载AsyncSocket<a href=\"https://github.com/robbiehanson/CocoaAsyncSocket类库，将RunLoop文件夹下的AsyncSocket.h\" target=\"_blank\" rel=\"noopener\">https://github.com/robbiehanson/CocoaAsyncSocket类库，将RunLoop文件夹下的AsyncSocket.h</a>, AsyncSocket.m, AsyncUdpSocket.h, AsyncUdpSocket.m 文件拷贝到自己的project中</p>\n<p>添加CFNetwork.framework, 在使用socket的文件头</p>\n<pre><code>#import &lt;sys/socket.h&gt;\n#import &lt;netinet/in.h&gt;\n#import &lt;arpa/inet.h&gt;\n#import &lt;unistd.h&gt;\n</code></pre><p>使用</p>\n<ol>\n<li>socket 连接</li>\n</ol>\n<p>即时通讯最大的特点就是实时性，基本感觉不到延时或是掉线，所以必须对socket的连接进行监视与检测，在断线时进行重新连接，如果用户退出登录，要将socket手动关闭，否则对服务器会造成一定的负荷。</p>\n<p>一般来说，一个用户（对于ios来说也就是我们的项目中）只能有一个正在连接的socket，所以这个socket变量必须是全局的，这里可以考虑使用单例或是AppDelegate进行数据共享，本文使用单例。如果对一个已经连接的socket对象再次进行连接操作，会抛出异常（不可对已经连接的socket进行连接）程序崩溃，所以在连接socket之前要对socket对象的连接状态进行判断</p>\n<p>使用socket进行即时通讯还有一个必须的操作，即对服务器发送心跳包，每隔一段时间对服务器发送长连接指令（指令不唯一，由服务器端指定，包括使用socket发送消息，发送的数据和格式都是由服务器指定），如果没有收到服务器的返回消息，AsyncSocket会得到失去连接的消息，我们可以在失去连接的回调方法里进行重新连接。</p>\n<p>先创建一个单例，命名为Singleton</p>\n<pre><code>  Singleton.h\n\n// Singleton.h\n #import &quot;AsyncSocket.h&quot;\n\n #define DEFINE_SHARED_INSTANCE_USING_BLOCK(block) \\\nstatic dispatch_once_t onceToken = 0; \\\n__strong static id sharedInstance = nil; \\\ndispatch_once(&amp;onceToken, ^{ \\\nsharedInstance = block(); \\\n}); \\\nreturn sharedInstance; \\\n\n@interface Singleton : NSObject\n\n+ (Singleton *)sharedInstance;\n\n@end\nSingleton.m\n\n+(Singleton *) sharedInstance\n{\n\nstatic Singleton *sharedInstace = nil;\nstatic dispatch_once_t onceToken;\ndispatch_once(&amp;onceToken, ^{\n\n    sharedInstace = [[self alloc] init];\n});\n\nreturn sharedInstace;\n}\n</code></pre><p>这样一个单例就创建好了</p>\n<p>在.h文件中生命socket变量</p>\n<pre><code>@property (nonatomic, strong) AsyncSocket    *socket;       // socket\n@property (nonatomic, copy  ) NSString       *socketHost;   // socket的Host\n@property (nonatomic, assign) UInt16         socketPort;    // socket的prot\n</code></pre><p>下面是连接，心跳，失去连接后重连</p>\n<p>连接(长连接)</p>\n<pre><code>在.h文件中声明方法，并声明代理&lt;AsyncSocketDelegate&gt;\n\n-(void)socketConnectHost;// socket连接\n在.m中实现，连接时host与port都是由服务器指定，如果不是自己写的服务器，请与服务器端开发人员交流\n\n// socket连接\n-(void)socketConnectHost{\n\n    self.socket    = [[AsyncSocket alloc] initWithDelegate:self];\n\n    NSError *error = nil;\n\n    [self.socket connectToHost:self.socketHost onPort:self.socketPort withTimeout:3 error:&amp;error];\n\n}\n</code></pre><p>心跳</p>\n<p>心跳通过计时器来实现<br>在singleton.h中声明一个定时器</p>\n<pre><code>@property (nonatomic, retain) NSTimer        *connectTimer; // 计时器\n</code></pre><p>在.m中实现连接成功回调方法，并在此方法中初始化定时器，发送心跳在后文向服务器发送数据时说明</p>\n<pre><code>#pragma mark  - 连接成功回调\n-(void)onSocket:(AsyncSocket *)sock didConnectToHost:(NSString  *)host port:(UInt16)port\n</code></pre><p>{<br>    NSLog(@”socket连接成功”);</p>\n<pre><code>// 每隔30s像服务器发送心跳包\nself.connectTimer = [NSTimer scheduledTimerWithTimeInterval:30 target:self selector:@selector(longConnectToSocket) userInfo:nil repeats:YES];// 在longConnectToSocket方法中进行长连接需要向服务器发送的讯息\n\n[self.connectTimer fire];\n</code></pre><p>}</p>\n<ol start=\"2\">\n<li>socket 断开连接与重连</li>\n</ol>\n<p>断开连接</p>\n<p>失去连接有几种情况，服务器断开，用户主动cut，还可能有如QQ其他设备登录被掉线的情况，不管那种情况，我们都能收到socket回调方法返回给我们的讯息，如果是用户退出登录或是程序退出而需要手动cut，我们在cut前对socket的userData赋予一个值来标记为用户退出，这样我们可以在收到断开信息时判断究竟是什么原因导致的掉线</p>\n<p>在.h文件中声明一个枚举类型</p>\n<pre><code> enum{\nSocketOfflineByServer,// 服务器掉线，默认为0\nSocketOfflineByUser,  // 用户主动cut\n};\n</code></pre><p>声明断开连接方法</p>\n<pre><code>-(void)cutOffSocket; // 断开socket连接\n</code></pre><p>.m</p>\n<pre><code>// 切断socket\n-(void)cutOffSocket{\n\nself.socket.userData = SocketOfflineByUser;// 声明是由用户主动切断\n\n[self.connectTimer invalidate];\n\n[self.socket disconnect];\n}\n</code></pre><p>重连</p>\n<p>实现代理方法</p>\n<pre><code>-(void)onSocketDidDisconnect:(AsyncSocket *)sock\n{\n    NSLog(@&quot;sorry the connect is failure %ld&quot;,sock.userData);\n    if (sock.userData == SocketOfflineByServer) {\n        // 服务器掉线，重连\n        [self socketConnectHost];\n    }\n    else if (sock.userData == SocketOfflineByUser) {\n        // 如果由用户断开，不进行重连\n        return;\n    }\n\n}\n</code></pre><ol start=\"3\">\n<li>socket 发送与接收数据</li>\n</ol>\n<p>发送数据<br>我们补充上文心跳连接未完成的方法</p>\n<pre><code>// 心跳连接\n-(void)longConnectToSocket{\n\n// 根据服务器要求发送固定格式的数据，假设为指令@&quot;longConnect&quot;，但是一般不会是这么简单的指令\n\nNSString *longConnect = @&quot;longConnect&quot;;\n\nNSData   *dataStream  = [longConnect dataUsingEncoding:NSUTF8StringEncoding];\n\n[self.socket writeData:dataStream withTimeout:1 tag:1];\n</code></pre><p>}<br>socket发送数据是以栈的形式存放，所有数据放在一个栈中，存取时会出现粘包的现象，所以很多时候服务器在收发数据时是以先发送内容字节长度，再发送内容的形式，得到数据时也是先得到一个长度，再根据这个长度在栈中读取这个长度的字节流，如果是这种情况，发送数据时只需在发送内容前发送一个长度，发送方法与发送内容一样，假设长度为8</p>\n<pre><code>NSData   *dataStream  = [@8 dataUsingEncoding:NSUTF8StringEncoding];\n\n[self.socket writeData:dataStream withTimeout:1 tag:1];\n接收数据 \n为了能时刻接收到socket的消息，我们在长连接方法中进行读取数据\n\n [self.socket readDataWithTimeout:30 tag:0];\n如果得到数据，会调用回调方法\n\n-(void)onSocket:(AsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag\n{\n// 对得到的data值进行解析与转换即可\n\n[self.socket readDataWithTimeout:30 tag:0];\n\n}\n</code></pre><ol start=\"4\">\n<li>简单使用说明</li>\n</ol>\n<p>我们在用户登录后的第一个界面进行socket的初始化连接操作，在得到数据后，将所需要显示的数据放在singleton中，对变量进行监听后做出相应的操作即可，延伸起来比较复杂，没有真实数据也不太方便说明，大家自己进行探索吧，有问题请在下方留言</p>\n<pre><code>[Singleton sharedInstance].socketHost = @&quot;192.186.100.21&quot;;// host设定\n[Singleton sharedInstance].socketPort = 10045;// port设定\n\n// 在连接前先进行手动断开\n[Singleton sharedInstance].socket.userData = SocketOfflineByUser;\n[[Singleton sharedInstance] cutOffSocket];\n\n// 确保断开后再连，如果对一个正处于连接状态的socket进行连接，会出现崩溃\n[Singleton sharedInstance].socket.userData = SocketOfflineByServer;\n[[Singleton sharedInstance] socketConnectHost];\n</code></pre><p> 本文转自<a href=\"http://my.oschina.net/joanfen/blog/287238\" target=\"_blank\" rel=\"noopener\">这里</a>本文涉及到的代码在<a href=\"http://www.oschina.net/code/snippet_735123_36974\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n"},{"layout":"post","title":"Blocks 详解","description":"Block深度解析","_content":"\n\n\n# Blocks 详解\n\n## 什么是 Block？\n- block是能够截获自动变量(局部变量)的匿名函数\n\n## Blocks 模式\n### Block 语法\n- 完整形式的Block语法与一般的C语言定义相比，仅有两点不同\n 1. 没有函数名\n 2. 带有托字符：‘^’\n \n- 通用说明\n> ^返回值类型（void 可省略）参数列表(void 可省略)表达式\n\n\t\t^int (int count){\n\n\t\treturn count + 1;\n\t\t\n\t\t\n\t\t}\n\t\t^{printf(\"blocks\\n\");\n\t\t}\n\t\t\n## Block变量类型\n- C语言可以将定义的函数地址赋值给函数指针类型变量中\n          \n        int func(int count)\n        {\n        return count +1;\n        }\n        int (*funcptr) (int) = &func;\n- 同样的Block语法下，可将Block语法生成的值赋值给Block类型的变量中\n  \n        int(^blk)(int);\n- 和C语言相比，仅仅是把*变成'^'，可以作为以下用途：\n1. 自动变量\n2. 函数参数\n3. 静态变量\n4. 静态全局变量\n5. 全局变量\n\n\n        //赋值\n        int (^blk1)(int) = ^int(int count){\n          return count + 1;\n        };\n        int (^blk2)(int) = blk1;\n        blk = blk2;\n        \n        //参数传递\n        void func (int (^blk) (int)) \n\t\t   {\n\t\t    //do something\n\t\t    }\n- 在函数参数和返回值中使用Block类型的变量时，记述的方式十分复杂，这时使用typedef来简化\n         \n        typedef int (^someBlk)(int);\n        \n        //原来的记述方式\n        //void func (int (^blk)(int))\n        void func (someBlk blk)\n        {\n        //这样调用\n        blk(10);\n        }\n - Block类型变量可以像C语言中的其他类型变量一样使用。\n## 截获自动变量值\n 一开始我有说明Block是带有“自动变量的匿名函数”，那什么是带有自动变量值呢？举个例子\n \n            int main（）\n\t\t\t{\n\t\t\t    int dmy = 256；\n\t\t\t    int val = 10；\n\t\t\t    const char *fmt =“val = %d \\n”；\n\t\t\t    void（^blk）（void）= ^{printf（fmt，val）；}；\n\t\t\t    val = 2；\n\t\t\t    fmt =“These values were changed val = %d \\n”；\n\t\t\t    blk（）；\n\t\t\t    return 0；\n\t\t\t}\n执行结果会是 val = 10\n\n执行结果并不是改写后的值，而是执行Block语法时的自动变量的瞬间值。该Block语法在执行时，字符串指标“cal = %d \\n”被赋值到自动变量fmt中，int值被赋值到val中，因此这边值被保存（即被截获），而在执行时被使用。\n这就是自动变量值的截获。\n __block说明符\n 实际上，截获变量只能保存Block 语法的瞬间值，保存后就不能改写该值。\n 这时，若想在Block语法的表达式中将值赋给Block语法外声明的自动变量，需要在该自动变量上附加__block。\n \n 使用附有block说明符的自动变量可在Block中赋值，该变量称为block变量。\n## Blocks 的实现\n### Block 本质\n\n- 定义一个最简单block 打印hello world\n \n\t\t int main(int argc, const char * argv[]) {\n\t\t\n\t\t    void (^block)() = ^{printf(\"Hello World!\");};\n\t\t    block();\n\t\t\n\t\t    return 0;\n\t    }\n使用clang指令\n>clang -rewrite-objc main.m\n\n\n\t\tstruct __main_block_impl_0 {\n\t\t  struct __block_impl impl;\n\t\t  struct __main_block_desc_0* Desc;\n\t\t  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags=0) {\n\t\t    impl.isa = &_NSConcreteStackBlock;\n\t\t    impl.Flags = flags;\n\t\t    impl.FuncPtr = fp;\n\t\t    Desc = desc;\n\t\t  }\n\t\t};\n\t\tstatic void __main_block_func_0(struct __main_block_impl_0 *__cself) {\n\t\tprintf(\"Hello World!\");}\n\t\t\n 你定义完block之后，其实是创建了一个函数，在创建结构体的时候把函数的指针一起传给了block，所以之后可以拿出来调用。\n\n   其实，Block 是转化为 Block 结构体类型的自动变量，类型定义如下。通过void *isa;,可以知道 Block 也是一个 OC 的对象，这就是Block  的本质。\n\n\t\tstruct Block_descriptor {\n\t\t    unsigned long int reserved;    \n\t\t    unsigned long int size;\n\t\t    void (*copy)(void *dst, void *src);\n\t\t    void (*dispose)(void *);\n\t\t};\n\t\t\n\t\t\n\t\tstruct Block_layout {\n\t\t    void *isa;\n\t\t    int flags;\n\t\t    int reserved; \n\t\t    void (*invoke)(void *, ...);\n\t\t    struct Block_descriptor *descriptor;\n\t\t    /* Imported variables. */\n\t\t};\n\t\t\n\t\t\n## 值捕获的问题\n\n\t\tint main(int argc, const char * argv[]) {\n\t\t    __block int a = 10;\n\t\t\n\t\t    void (^block)() = ^{printf(\"a = %d\", a);};\n\t\t    block();\n\t\t\n\t\t    return 0;\n\t    }\n\t    \n\t    \n\t\t\t\t    struct __Block_byref_a_0 {\n\t\t\t  void *__isa;\n\t\t\t__Block_byref_a_0 *__forwarding;\n\t\t\t int __flags;\n\t\t\t int __size;\n\t\t\t int a;\n\t\t\t};\n\t\t\t\n\t\t\tstruct __main_block_impl_0 {\n\t\t\t  struct __block_impl impl;\n\t\t\t  struct __main_block_desc_0* Desc;\n\t\t\t  __Block_byref_a_0 *a; // by ref\n\t\t\t  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_a_0 *_a, int flags=0) : a(_a->__forwarding) {\n\t\t\t    impl.isa = &_NSConcreteStackBlock;\n\t\t\t    impl.Flags = flags;\n\t\t\t    impl.FuncPtr = fp;\n\t\t\t    Desc = desc;\n\t\t\t  }\n\t\t\t};\n\t\t\tstatic void __main_block_func_0(struct __main_block_impl_0 *__cself) {\n\t\t\t  __Block_byref_a_0 *a = __cself->a; // bound by ref\n\t\t\tprintf(\"a = %d\", (a->__forwarding->a));}\n\t\t\t\n\t\t\t\nblock 说明符类似于 static、auto 和 register 说明符，加了 block 说明符以后，变量 a 变成了一个结构体实例，该结构体持有相当于原自动变量的成员变量，在像 block 内传递时把a->forwarding->a 的地址传过去了，所以在block内部便可以修改到外面的变量了。\n\n## Block 存储域\n在之前的 C++ 的代码中有一行 ``` impl.isa = &_NSConcreteStackBlock;\n\n\n> 根据isa指针，block一共有3种类型的block\n* _NSConcreteGlobalBlock 全局静态，保存在数据.data 区域\n* _NSConcreteStackBlock 保存在栈中，出函数作用域就销毁\n* _NSConcreteMallocBlock 保存在堆中，retainCount == 0销毁\n\t\n>到现在的例子中都是使用的 _NSConcreteStackBlock 类，且都设置在栈上。\n\t\n\t\n【要点1】如果是定义在函数外面的block是global的，另外如果函数内部的block但是，没有捕获任何自动变量，那么它也是全局的。比如下面这样的代码：\n\n\t\t\ttypedef int (^blk_t)(int);\n\t\t\tfor(...){\n\t\t\tblk_t blk = ^(int count) {return count;};\n\t\t\t}\n\t\t\t\n>这是因为：block捕获了栈上的rate自动变量，此时rate已经变成了一个结构体，而block中拥有这个结构体的指针。即如果返回block的话就是返回局部变量的指针。而这一点恰是编译器已经断定了。在ARC下没有这个问题，是因为ARC使用了autorelease了。\n\n【要点3】有时候我们需要调用block 的copy函数，将block拷贝到堆上。看下面的代码：\n\n\t\t\t-(id) getBlockArray{\n\t\t\tint val =10;\n\t\t\treturn [[NSArray alloc]initWithObjects:\n\t\t\t^{NSLog(@\"blk0:%d\",val);},\n\t\t\t^{NSLog(@\"blk1:%d\",val);},nil];\n\t\t\t}\n\t\t\t\n\t\t\tid obj = getBlockArray();\n\t\t\ttypedef void (^blk_t)(void);\n\t\t\tblk_t blk = (blk_t){obj objectAtIndex:0};\n\t\t\tblk();\n\t\t\t\n\t>这段代码在最后一行blk()会异常，因为数组中的block是栈上的。因为val是栈上的。解决办法就是调用copy方法。\n 【要点4】不管block配置在何处，用copy方法复制都不会引起任何问题。在ARC环境下，如果不确定是否要copy block尽管copy即可。ARC会打扫战场。\n\n注意：在栈上调用copy那么复制到堆上，在全局block调用copy什么也不做，在堆上调用block 引用计数增加\n\n【注意】本人用Xcode 5.1.1 iOS sdk 7.1 编译发现：并非《Objective-C》高级编程这本书中描述的那样\n\nint val肯定是在栈上的，我保存了val的地址，看看block调用前后是否变化。输出一致说明是栈上，不一致说明是堆上。\n\n\n\t\ttypedef int (^blkt1)(void) ;\n\t\t-(void) stackOrHeap{\n\t\t__block int val =10;\n\t\tint valPtr = &val;//使用int的指针，来检测block到底在栈上，还是堆上\n\t\tblkt1 s= ^{\n\t\tNSLog(@\"val_block = %d\",++val);\n\t\treturn val;};\n\t\ts();\n\t\tNSLog(@\"valPointer = %d\",valPtr);\n\t\t}\n>在ARC下——block捕获了自动变量，那么block就被会直接生成到堆上了。  val_block = 11 valPointer = 10\n\n>在非ARC下——block捕获了自动变量，该block还是在栈上的。  val_block = 11 valPointer = 11\n调用copy之后的结果呢：\n\n\t-(void) stackOrHeap{\n\t__block int val =10;\n\tint valPtr = &val;//使用int的指针，来检测block到底在栈上，还是堆上\n\tblkt1 s= ^{\n\tNSLog(@\"val_block = %d\",++val);\n\treturn val;};\n\tblkt1 h = [s copy];\n\th();\n\tNSLog(@\"valPointer = %d\",valPtr);\n\t}\n----------------在ARC下>>>>>>>>>>>无效果。 val_block = 11 valPointer = 10\n\n----------------在非ARC下>>>>>>>>>确实复制到堆上了。 val_block = 11 valPointer = 10\n\n\t用这个表格来表示，当block捕获了自动变量时候\n\t\n\t|     where  block stay  |       ARC     |       非ARC   |\n\t|------------------------|----------------|-------------| \n\t|                 copy          |       heap     |     heap         |\n\t|             no copy         |      heap     |      stack        |\n\t\n\t### __block变量存储区域\n\t当block被复制到堆上时，他所捕获的对象、变量也全部复制到堆上。\n\t\n\t回忆一下block捕获自动变量的时候，自动变量将编程一个结构体，结构体中有一个字段叫```__forwarding```，用于指向自动这个结构体。那么有了这个__forwarding指针，无论是栈上的block还是被拷贝到堆上，那么都会正确的访问自动变量的值。\n\t\n\t### 截获对象\n\tblock会持有捕获的对象。编译器为了区分自动变量和对象，有一个类型来区分。\n>\n\n\t\tstatic void main_block_copy_0(struct main_block_impl_0 dst, struct __main_block_impl_0 src){\n\t\t_Block_objct_assign(&dst->val,src->val,BLOCK_FIELD_IS_BYREF);\n\t\t}\n\t\tstatic void main_block_dispose_0(struct main_block_impl_0 *src){\n\t\t_block_object_dispose(src->val,BLOCK_FIELD_IS_BYREF);\n\t\t}\n\t\t\n\t\tBLOCK_FIELD_IS_BYREF代表是变量。BLOCK_FIELD_IS_OBJECT代表是对象\n\n__block修饰符可用于任何类型的自动变量\n\n## 循环引用\n根据上面讲的内容，block在持有对象的时候，对象如果持有block，会造成循环引用。解决办法有两种：\n\n 1.使用weak修饰符。id weak obj = obj_\n\n 2.使用block修饰符。block id tmp = self;然后在block中tmp = nil；这样就打破循环了。这个办法需要记得将tmp=nil。不推荐！","source":"_posts/2015/2015-11-17-Block详解.md","raw":"---\nlayout: post\ntitle: \"Blocks 详解\"\ndescription: \"Block深度解析\"\ncategory : lessons\ntags: []\n---\n\n\n\n# Blocks 详解\n\n## 什么是 Block？\n- block是能够截获自动变量(局部变量)的匿名函数\n\n## Blocks 模式\n### Block 语法\n- 完整形式的Block语法与一般的C语言定义相比，仅有两点不同\n 1. 没有函数名\n 2. 带有托字符：‘^’\n \n- 通用说明\n> ^返回值类型（void 可省略）参数列表(void 可省略)表达式\n\n\t\t^int (int count){\n\n\t\treturn count + 1;\n\t\t\n\t\t\n\t\t}\n\t\t^{printf(\"blocks\\n\");\n\t\t}\n\t\t\n## Block变量类型\n- C语言可以将定义的函数地址赋值给函数指针类型变量中\n          \n        int func(int count)\n        {\n        return count +1;\n        }\n        int (*funcptr) (int) = &func;\n- 同样的Block语法下，可将Block语法生成的值赋值给Block类型的变量中\n  \n        int(^blk)(int);\n- 和C语言相比，仅仅是把*变成'^'，可以作为以下用途：\n1. 自动变量\n2. 函数参数\n3. 静态变量\n4. 静态全局变量\n5. 全局变量\n\n\n        //赋值\n        int (^blk1)(int) = ^int(int count){\n          return count + 1;\n        };\n        int (^blk2)(int) = blk1;\n        blk = blk2;\n        \n        //参数传递\n        void func (int (^blk) (int)) \n\t\t   {\n\t\t    //do something\n\t\t    }\n- 在函数参数和返回值中使用Block类型的变量时，记述的方式十分复杂，这时使用typedef来简化\n         \n        typedef int (^someBlk)(int);\n        \n        //原来的记述方式\n        //void func (int (^blk)(int))\n        void func (someBlk blk)\n        {\n        //这样调用\n        blk(10);\n        }\n - Block类型变量可以像C语言中的其他类型变量一样使用。\n## 截获自动变量值\n 一开始我有说明Block是带有“自动变量的匿名函数”，那什么是带有自动变量值呢？举个例子\n \n            int main（）\n\t\t\t{\n\t\t\t    int dmy = 256；\n\t\t\t    int val = 10；\n\t\t\t    const char *fmt =“val = %d \\n”；\n\t\t\t    void（^blk）（void）= ^{printf（fmt，val）；}；\n\t\t\t    val = 2；\n\t\t\t    fmt =“These values were changed val = %d \\n”；\n\t\t\t    blk（）；\n\t\t\t    return 0；\n\t\t\t}\n执行结果会是 val = 10\n\n执行结果并不是改写后的值，而是执行Block语法时的自动变量的瞬间值。该Block语法在执行时，字符串指标“cal = %d \\n”被赋值到自动变量fmt中，int值被赋值到val中，因此这边值被保存（即被截获），而在执行时被使用。\n这就是自动变量值的截获。\n __block说明符\n 实际上，截获变量只能保存Block 语法的瞬间值，保存后就不能改写该值。\n 这时，若想在Block语法的表达式中将值赋给Block语法外声明的自动变量，需要在该自动变量上附加__block。\n \n 使用附有block说明符的自动变量可在Block中赋值，该变量称为block变量。\n## Blocks 的实现\n### Block 本质\n\n- 定义一个最简单block 打印hello world\n \n\t\t int main(int argc, const char * argv[]) {\n\t\t\n\t\t    void (^block)() = ^{printf(\"Hello World!\");};\n\t\t    block();\n\t\t\n\t\t    return 0;\n\t    }\n使用clang指令\n>clang -rewrite-objc main.m\n\n\n\t\tstruct __main_block_impl_0 {\n\t\t  struct __block_impl impl;\n\t\t  struct __main_block_desc_0* Desc;\n\t\t  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags=0) {\n\t\t    impl.isa = &_NSConcreteStackBlock;\n\t\t    impl.Flags = flags;\n\t\t    impl.FuncPtr = fp;\n\t\t    Desc = desc;\n\t\t  }\n\t\t};\n\t\tstatic void __main_block_func_0(struct __main_block_impl_0 *__cself) {\n\t\tprintf(\"Hello World!\");}\n\t\t\n 你定义完block之后，其实是创建了一个函数，在创建结构体的时候把函数的指针一起传给了block，所以之后可以拿出来调用。\n\n   其实，Block 是转化为 Block 结构体类型的自动变量，类型定义如下。通过void *isa;,可以知道 Block 也是一个 OC 的对象，这就是Block  的本质。\n\n\t\tstruct Block_descriptor {\n\t\t    unsigned long int reserved;    \n\t\t    unsigned long int size;\n\t\t    void (*copy)(void *dst, void *src);\n\t\t    void (*dispose)(void *);\n\t\t};\n\t\t\n\t\t\n\t\tstruct Block_layout {\n\t\t    void *isa;\n\t\t    int flags;\n\t\t    int reserved; \n\t\t    void (*invoke)(void *, ...);\n\t\t    struct Block_descriptor *descriptor;\n\t\t    /* Imported variables. */\n\t\t};\n\t\t\n\t\t\n## 值捕获的问题\n\n\t\tint main(int argc, const char * argv[]) {\n\t\t    __block int a = 10;\n\t\t\n\t\t    void (^block)() = ^{printf(\"a = %d\", a);};\n\t\t    block();\n\t\t\n\t\t    return 0;\n\t    }\n\t    \n\t    \n\t\t\t\t    struct __Block_byref_a_0 {\n\t\t\t  void *__isa;\n\t\t\t__Block_byref_a_0 *__forwarding;\n\t\t\t int __flags;\n\t\t\t int __size;\n\t\t\t int a;\n\t\t\t};\n\t\t\t\n\t\t\tstruct __main_block_impl_0 {\n\t\t\t  struct __block_impl impl;\n\t\t\t  struct __main_block_desc_0* Desc;\n\t\t\t  __Block_byref_a_0 *a; // by ref\n\t\t\t  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_a_0 *_a, int flags=0) : a(_a->__forwarding) {\n\t\t\t    impl.isa = &_NSConcreteStackBlock;\n\t\t\t    impl.Flags = flags;\n\t\t\t    impl.FuncPtr = fp;\n\t\t\t    Desc = desc;\n\t\t\t  }\n\t\t\t};\n\t\t\tstatic void __main_block_func_0(struct __main_block_impl_0 *__cself) {\n\t\t\t  __Block_byref_a_0 *a = __cself->a; // bound by ref\n\t\t\tprintf(\"a = %d\", (a->__forwarding->a));}\n\t\t\t\n\t\t\t\nblock 说明符类似于 static、auto 和 register 说明符，加了 block 说明符以后，变量 a 变成了一个结构体实例，该结构体持有相当于原自动变量的成员变量，在像 block 内传递时把a->forwarding->a 的地址传过去了，所以在block内部便可以修改到外面的变量了。\n\n## Block 存储域\n在之前的 C++ 的代码中有一行 ``` impl.isa = &_NSConcreteStackBlock;\n\n\n> 根据isa指针，block一共有3种类型的block\n* _NSConcreteGlobalBlock 全局静态，保存在数据.data 区域\n* _NSConcreteStackBlock 保存在栈中，出函数作用域就销毁\n* _NSConcreteMallocBlock 保存在堆中，retainCount == 0销毁\n\t\n>到现在的例子中都是使用的 _NSConcreteStackBlock 类，且都设置在栈上。\n\t\n\t\n【要点1】如果是定义在函数外面的block是global的，另外如果函数内部的block但是，没有捕获任何自动变量，那么它也是全局的。比如下面这样的代码：\n\n\t\t\ttypedef int (^blk_t)(int);\n\t\t\tfor(...){\n\t\t\tblk_t blk = ^(int count) {return count;};\n\t\t\t}\n\t\t\t\n>这是因为：block捕获了栈上的rate自动变量，此时rate已经变成了一个结构体，而block中拥有这个结构体的指针。即如果返回block的话就是返回局部变量的指针。而这一点恰是编译器已经断定了。在ARC下没有这个问题，是因为ARC使用了autorelease了。\n\n【要点3】有时候我们需要调用block 的copy函数，将block拷贝到堆上。看下面的代码：\n\n\t\t\t-(id) getBlockArray{\n\t\t\tint val =10;\n\t\t\treturn [[NSArray alloc]initWithObjects:\n\t\t\t^{NSLog(@\"blk0:%d\",val);},\n\t\t\t^{NSLog(@\"blk1:%d\",val);},nil];\n\t\t\t}\n\t\t\t\n\t\t\tid obj = getBlockArray();\n\t\t\ttypedef void (^blk_t)(void);\n\t\t\tblk_t blk = (blk_t){obj objectAtIndex:0};\n\t\t\tblk();\n\t\t\t\n\t>这段代码在最后一行blk()会异常，因为数组中的block是栈上的。因为val是栈上的。解决办法就是调用copy方法。\n 【要点4】不管block配置在何处，用copy方法复制都不会引起任何问题。在ARC环境下，如果不确定是否要copy block尽管copy即可。ARC会打扫战场。\n\n注意：在栈上调用copy那么复制到堆上，在全局block调用copy什么也不做，在堆上调用block 引用计数增加\n\n【注意】本人用Xcode 5.1.1 iOS sdk 7.1 编译发现：并非《Objective-C》高级编程这本书中描述的那样\n\nint val肯定是在栈上的，我保存了val的地址，看看block调用前后是否变化。输出一致说明是栈上，不一致说明是堆上。\n\n\n\t\ttypedef int (^blkt1)(void) ;\n\t\t-(void) stackOrHeap{\n\t\t__block int val =10;\n\t\tint valPtr = &val;//使用int的指针，来检测block到底在栈上，还是堆上\n\t\tblkt1 s= ^{\n\t\tNSLog(@\"val_block = %d\",++val);\n\t\treturn val;};\n\t\ts();\n\t\tNSLog(@\"valPointer = %d\",valPtr);\n\t\t}\n>在ARC下——block捕获了自动变量，那么block就被会直接生成到堆上了。  val_block = 11 valPointer = 10\n\n>在非ARC下——block捕获了自动变量，该block还是在栈上的。  val_block = 11 valPointer = 11\n调用copy之后的结果呢：\n\n\t-(void) stackOrHeap{\n\t__block int val =10;\n\tint valPtr = &val;//使用int的指针，来检测block到底在栈上，还是堆上\n\tblkt1 s= ^{\n\tNSLog(@\"val_block = %d\",++val);\n\treturn val;};\n\tblkt1 h = [s copy];\n\th();\n\tNSLog(@\"valPointer = %d\",valPtr);\n\t}\n----------------在ARC下>>>>>>>>>>>无效果。 val_block = 11 valPointer = 10\n\n----------------在非ARC下>>>>>>>>>确实复制到堆上了。 val_block = 11 valPointer = 10\n\n\t用这个表格来表示，当block捕获了自动变量时候\n\t\n\t|     where  block stay  |       ARC     |       非ARC   |\n\t|------------------------|----------------|-------------| \n\t|                 copy          |       heap     |     heap         |\n\t|             no copy         |      heap     |      stack        |\n\t\n\t### __block变量存储区域\n\t当block被复制到堆上时，他所捕获的对象、变量也全部复制到堆上。\n\t\n\t回忆一下block捕获自动变量的时候，自动变量将编程一个结构体，结构体中有一个字段叫```__forwarding```，用于指向自动这个结构体。那么有了这个__forwarding指针，无论是栈上的block还是被拷贝到堆上，那么都会正确的访问自动变量的值。\n\t\n\t### 截获对象\n\tblock会持有捕获的对象。编译器为了区分自动变量和对象，有一个类型来区分。\n>\n\n\t\tstatic void main_block_copy_0(struct main_block_impl_0 dst, struct __main_block_impl_0 src){\n\t\t_Block_objct_assign(&dst->val,src->val,BLOCK_FIELD_IS_BYREF);\n\t\t}\n\t\tstatic void main_block_dispose_0(struct main_block_impl_0 *src){\n\t\t_block_object_dispose(src->val,BLOCK_FIELD_IS_BYREF);\n\t\t}\n\t\t\n\t\tBLOCK_FIELD_IS_BYREF代表是变量。BLOCK_FIELD_IS_OBJECT代表是对象\n\n__block修饰符可用于任何类型的自动变量\n\n## 循环引用\n根据上面讲的内容，block在持有对象的时候，对象如果持有block，会造成循环引用。解决办法有两种：\n\n 1.使用weak修饰符。id weak obj = obj_\n\n 2.使用block修饰符。block id tmp = self;然后在block中tmp = nil；这样就打破循环了。这个办法需要记得将tmp=nil。不推荐！","slug":"2015-2015-11-17-Block详解","published":1,"date":"2015-12-29T08:27:58.000Z","updated":"2016-05-25T02:22:12.000Z","comments":1,"photos":[],"link":"","_id":"ckeb5g9l7000jrb0u7yfbkge7","content":"<h1 id=\"Blocks-详解\"><a href=\"#Blocks-详解\" class=\"headerlink\" title=\"Blocks 详解\"></a>Blocks 详解</h1><h2 id=\"什么是-Block？\"><a href=\"#什么是-Block？\" class=\"headerlink\" title=\"什么是 Block？\"></a>什么是 Block？</h2><ul>\n<li>block是能够截获自动变量(局部变量)的匿名函数</li>\n</ul>\n<h2 id=\"Blocks-模式\"><a href=\"#Blocks-模式\" class=\"headerlink\" title=\"Blocks 模式\"></a>Blocks 模式</h2><h3 id=\"Block-语法\"><a href=\"#Block-语法\" class=\"headerlink\" title=\"Block 语法\"></a>Block 语法</h3><ul>\n<li><p>完整形式的Block语法与一般的C语言定义相比，仅有两点不同</p>\n<ol>\n<li>没有函数名</li>\n<li>带有托字符：‘^’</li>\n</ol>\n</li>\n<li><p>通用说明</p>\n<blockquote>\n<p>^返回值类型（void 可省略）参数列表(void 可省略)表达式</p>\n</blockquote>\n<pre><code>^int (int count){\n\nreturn count + 1;\n</code></pre></li>\n</ul>\n<pre><code>}\n^{printf(&quot;blocks\\n&quot;);\n}\n</code></pre><h2 id=\"Block变量类型\"><a href=\"#Block变量类型\" class=\"headerlink\" title=\"Block变量类型\"></a>Block变量类型</h2><ul>\n<li><p>C语言可以将定义的函数地址赋值给函数指针类型变量中</p>\n<pre><code>int func(int count)\n{\nreturn count +1;\n}\nint (*funcptr) (int) = &amp;func;\n</code></pre></li>\n<li><p>同样的Block语法下，可将Block语法生成的值赋值给Block类型的变量中</p>\n<pre><code>int(^blk)(int);\n</code></pre></li>\n<li>和C语言相比，仅仅是把*变成’^’，可以作为以下用途：</li>\n</ul>\n<ol>\n<li>自动变量</li>\n<li>函数参数</li>\n<li>静态变量</li>\n<li>静态全局变量</li>\n<li>全局变量</li>\n</ol>\n<pre><code>//赋值\nint (^blk1)(int) = ^int(int count){\n  return count + 1;\n};\nint (^blk2)(int) = blk1;\nblk = blk2;\n\n//参数传递\nvoid func (int (^blk) (int)) \n   {\n    //do something\n    }\n</code></pre><ul>\n<li><p>在函数参数和返回值中使用Block类型的变量时，记述的方式十分复杂，这时使用typedef来简化</p>\n<pre><code>typedef int (^someBlk)(int);\n\n//原来的记述方式\n//void func (int (^blk)(int))\nvoid func (someBlk blk)\n{\n//这样调用\nblk(10);\n}\n</code></pre><ul>\n<li><p>Block类型变量可以像C语言中的其他类型变量一样使用。</p>\n<h2 id=\"截获自动变量值\"><a href=\"#截获自动变量值\" class=\"headerlink\" title=\"截获自动变量值\"></a>截获自动变量值</h2><p>一开始我有说明Block是带有“自动变量的匿名函数”，那什么是带有自动变量值呢？举个例子</p>\n<pre><code>int main（）\n{\n    int dmy = 256；\n    int val = 10；\n    const char *fmt =“val = %d \\n”；\n    void（^blk）（void）= ^{printf（fmt，val）；}；\n    val = 2；\n    fmt =“These values were changed val = %d \\n”；\n    blk（）；\n    return 0；\n}\n</code></pre><p>执行结果会是 val = 10</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>执行结果并不是改写后的值，而是执行Block语法时的自动变量的瞬间值。该Block语法在执行时，字符串指标“cal = %d \\n”被赋值到自动变量fmt中，int值被赋值到val中，因此这边值被保存（即被截获），而在执行时被使用。<br>这就是自动变量值的截获。<br> <strong>block说明符<br> 实际上，截获变量只能保存Block 语法的瞬间值，保存后就不能改写该值。<br> 这时，若想在Block语法的表达式中将值赋给Block语法外声明的自动变量，需要在该自动变量上附加</strong>block。</p>\n<p> 使用附有block说明符的自动变量可在Block中赋值，该变量称为block变量。</p>\n<h2 id=\"Blocks-的实现\"><a href=\"#Blocks-的实现\" class=\"headerlink\" title=\"Blocks 的实现\"></a>Blocks 的实现</h2><h3 id=\"Block-本质\"><a href=\"#Block-本质\" class=\"headerlink\" title=\"Block 本质\"></a>Block 本质</h3><ul>\n<li><p>定义一个最简单block 打印hello world</p>\n<pre><code> int main(int argc, const char * argv[]) {\n\n    void (^block)() = ^{printf(&quot;Hello World!&quot;);};\n    block();\n\n    return 0;\n}\n</code></pre><p>使用clang指令</p>\n<blockquote>\n<p>clang -rewrite-objc main.m</p>\n</blockquote>\n</li>\n</ul>\n<pre><code>struct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags=0) {\n    impl.isa = &amp;_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\nstatic void __main_block_func_0(struct __main_block_impl_0 *__cself) {\nprintf(&quot;Hello World!&quot;);}\n</code></pre><p> 你定义完block之后，其实是创建了一个函数，在创建结构体的时候把函数的指针一起传给了block，所以之后可以拿出来调用。</p>\n<p>   其实，Block 是转化为 Block 结构体类型的自动变量，类型定义如下。通过void *isa;,可以知道 Block 也是一个 OC 的对象，这就是Block  的本质。</p>\n<pre><code>struct Block_descriptor {\n    unsigned long int reserved;    \n    unsigned long int size;\n    void (*copy)(void *dst, void *src);\n    void (*dispose)(void *);\n};\n\n\nstruct Block_layout {\n    void *isa;\n    int flags;\n    int reserved; \n    void (*invoke)(void *, ...);\n    struct Block_descriptor *descriptor;\n    /* Imported variables. */\n};\n</code></pre><h2 id=\"值捕获的问题\"><a href=\"#值捕获的问题\" class=\"headerlink\" title=\"值捕获的问题\"></a>值捕获的问题</h2><pre><code>int main(int argc, const char * argv[]) {\n    __block int a = 10;\n\n    void (^block)() = ^{printf(&quot;a = %d&quot;, a);};\n    block();\n\n    return 0;\n}\n\n\n            struct __Block_byref_a_0 {\n      void *__isa;\n    __Block_byref_a_0 *__forwarding;\n     int __flags;\n     int __size;\n     int a;\n    };\n\n    struct __main_block_impl_0 {\n      struct __block_impl impl;\n      struct __main_block_desc_0* Desc;\n      __Block_byref_a_0 *a; // by ref\n      __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_a_0 *_a, int flags=0) : a(_a-&gt;__forwarding) {\n        impl.isa = &amp;_NSConcreteStackBlock;\n        impl.Flags = flags;\n        impl.FuncPtr = fp;\n        Desc = desc;\n      }\n    };\n    static void __main_block_func_0(struct __main_block_impl_0 *__cself) {\n      __Block_byref_a_0 *a = __cself-&gt;a; // bound by ref\n    printf(&quot;a = %d&quot;, (a-&gt;__forwarding-&gt;a));}\n</code></pre><p>block 说明符类似于 static、auto 和 register 说明符，加了 block 说明符以后，变量 a 变成了一个结构体实例，该结构体持有相当于原自动变量的成员变量，在像 block 内传递时把a-&gt;forwarding-&gt;a 的地址传过去了，所以在block内部便可以修改到外面的变量了。</p>\n<h2 id=\"Block-存储域\"><a href=\"#Block-存储域\" class=\"headerlink\" title=\"Block 存储域\"></a>Block 存储域</h2><p>在之前的 C++ 的代码中有一行 <code>`</code> impl.isa = &amp;_NSConcreteStackBlock;</p>\n<blockquote>\n<p>根据isa指针，block一共有3种类型的block</p>\n<ul>\n<li>_NSConcreteGlobalBlock 全局静态，保存在数据.data 区域</li>\n<li>_NSConcreteStackBlock 保存在栈中，出函数作用域就销毁</li>\n<li>_NSConcreteMallocBlock 保存在堆中，retainCount == 0销毁</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>到现在的例子中都是使用的 _NSConcreteStackBlock 类，且都设置在栈上。</p>\n</blockquote>\n<p>【要点1】如果是定义在函数外面的block是global的，另外如果函数内部的block但是，没有捕获任何自动变量，那么它也是全局的。比如下面这样的代码：</p>\n<pre><code>typedef int (^blk_t)(int);\nfor(...){\nblk_t blk = ^(int count) {return count;};\n}\n</code></pre><blockquote>\n<p>这是因为：block捕获了栈上的rate自动变量，此时rate已经变成了一个结构体，而block中拥有这个结构体的指针。即如果返回block的话就是返回局部变量的指针。而这一点恰是编译器已经断定了。在ARC下没有这个问题，是因为ARC使用了autorelease了。</p>\n</blockquote>\n<p>【要点3】有时候我们需要调用block 的copy函数，将block拷贝到堆上。看下面的代码：</p>\n<pre><code>        -(id) getBlockArray{\n        int val =10;\n        return [[NSArray alloc]initWithObjects:\n        ^{NSLog(@&quot;blk0:%d&quot;,val);},\n        ^{NSLog(@&quot;blk1:%d&quot;,val);},nil];\n        }\n\n        id obj = getBlockArray();\n        typedef void (^blk_t)(void);\n        blk_t blk = (blk_t){obj objectAtIndex:0};\n        blk();\n\n&gt;这段代码在最后一行blk()会异常，因为数组中的block是栈上的。因为val是栈上的。解决办法就是调用copy方法。\n</code></pre><p> 【要点4】不管block配置在何处，用copy方法复制都不会引起任何问题。在ARC环境下，如果不确定是否要copy block尽管copy即可。ARC会打扫战场。</p>\n<p>注意：在栈上调用copy那么复制到堆上，在全局block调用copy什么也不做，在堆上调用block 引用计数增加</p>\n<p>【注意】本人用Xcode 5.1.1 iOS sdk 7.1 编译发现：并非《Objective-C》高级编程这本书中描述的那样</p>\n<p>int val肯定是在栈上的，我保存了val的地址，看看block调用前后是否变化。输出一致说明是栈上，不一致说明是堆上。</p>\n<pre><code>typedef int (^blkt1)(void) ;\n-(void) stackOrHeap{\n__block int val =10;\nint valPtr = &amp;val;//使用int的指针，来检测block到底在栈上，还是堆上\nblkt1 s= ^{\nNSLog(@&quot;val_block = %d&quot;,++val);\nreturn val;};\ns();\nNSLog(@&quot;valPointer = %d&quot;,valPtr);\n}\n</code></pre><blockquote>\n<p>在ARC下——block捕获了自动变量，那么block就被会直接生成到堆上了。  val_block = 11 valPointer = 10</p>\n</blockquote>\n<blockquote>\n<p>在非ARC下——block捕获了自动变量，该block还是在栈上的。  val_block = 11 valPointer = 11<br>调用copy之后的结果呢：</p>\n</blockquote>\n<pre><code>-(void) stackOrHeap{\n__block int val =10;\nint valPtr = &amp;val;//使用int的指针，来检测block到底在栈上，还是堆上\nblkt1 s= ^{\nNSLog(@&quot;val_block = %d&quot;,++val);\nreturn val;};\nblkt1 h = [s copy];\nh();\nNSLog(@&quot;valPointer = %d&quot;,valPtr);\n}\n</code></pre><p>—————-在ARC下&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;无效果。 val_block = 11 valPointer = 10</p>\n<p>—————-在非ARC下&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;确实复制到堆上了。 val_block = 11 valPointer = 10</p>\n<pre><code>用这个表格来表示，当block捕获了自动变量时候\n\n|     where  block stay  |       ARC     |       非ARC   |\n|------------------------|----------------|-------------| \n|                 copy          |       heap     |     heap         |\n|             no copy         |      heap     |      stack        |\n\n### __block变量存储区域\n当block被复制到堆上时，他所捕获的对象、变量也全部复制到堆上。\n\n回忆一下block捕获自动变量的时候，自动变量将编程一个结构体，结构体中有一个字段叫```__forwarding```，用于指向自动这个结构体。那么有了这个__forwarding指针，无论是栈上的block还是被拷贝到堆上，那么都会正确的访问自动变量的值。\n\n### 截获对象\nblock会持有捕获的对象。编译器为了区分自动变量和对象，有一个类型来区分。\n</code></pre><blockquote>\n</blockquote>\n<pre><code>static void main_block_copy_0(struct main_block_impl_0 dst, struct __main_block_impl_0 src){\n_Block_objct_assign(&amp;dst-&gt;val,src-&gt;val,BLOCK_FIELD_IS_BYREF);\n}\nstatic void main_block_dispose_0(struct main_block_impl_0 *src){\n_block_object_dispose(src-&gt;val,BLOCK_FIELD_IS_BYREF);\n}\n\nBLOCK_FIELD_IS_BYREF代表是变量。BLOCK_FIELD_IS_OBJECT代表是对象\n</code></pre><p>__block修饰符可用于任何类型的自动变量</p>\n<h2 id=\"循环引用\"><a href=\"#循环引用\" class=\"headerlink\" title=\"循环引用\"></a>循环引用</h2><p>根据上面讲的内容，block在持有对象的时候，对象如果持有block，会造成循环引用。解决办法有两种：</p>\n<p> 1.使用weak修饰符。id weak obj = obj_</p>\n<p> 2.使用block修饰符。block id tmp = self;然后在block中tmp = nil；这样就打破循环了。这个办法需要记得将tmp=nil。不推荐！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Blocks-详解\"><a href=\"#Blocks-详解\" class=\"headerlink\" title=\"Blocks 详解\"></a>Blocks 详解</h1><h2 id=\"什么是-Block？\"><a href=\"#什么是-Block？\" class=\"headerlink\" title=\"什么是 Block？\"></a>什么是 Block？</h2><ul>\n<li>block是能够截获自动变量(局部变量)的匿名函数</li>\n</ul>\n<h2 id=\"Blocks-模式\"><a href=\"#Blocks-模式\" class=\"headerlink\" title=\"Blocks 模式\"></a>Blocks 模式</h2><h3 id=\"Block-语法\"><a href=\"#Block-语法\" class=\"headerlink\" title=\"Block 语法\"></a>Block 语法</h3><ul>\n<li><p>完整形式的Block语法与一般的C语言定义相比，仅有两点不同</p>\n<ol>\n<li>没有函数名</li>\n<li>带有托字符：‘^’</li>\n</ol>\n</li>\n<li><p>通用说明</p>\n<blockquote>\n<p>^返回值类型（void 可省略）参数列表(void 可省略)表达式</p>\n</blockquote>\n<pre><code>^int (int count){\n\nreturn count + 1;\n</code></pre></li>\n</ul>\n<pre><code>}\n^{printf(&quot;blocks\\n&quot;);\n}\n</code></pre><h2 id=\"Block变量类型\"><a href=\"#Block变量类型\" class=\"headerlink\" title=\"Block变量类型\"></a>Block变量类型</h2><ul>\n<li><p>C语言可以将定义的函数地址赋值给函数指针类型变量中</p>\n<pre><code>int func(int count)\n{\nreturn count +1;\n}\nint (*funcptr) (int) = &amp;func;\n</code></pre></li>\n<li><p>同样的Block语法下，可将Block语法生成的值赋值给Block类型的变量中</p>\n<pre><code>int(^blk)(int);\n</code></pre></li>\n<li>和C语言相比，仅仅是把*变成’^’，可以作为以下用途：</li>\n</ul>\n<ol>\n<li>自动变量</li>\n<li>函数参数</li>\n<li>静态变量</li>\n<li>静态全局变量</li>\n<li>全局变量</li>\n</ol>\n<pre><code>//赋值\nint (^blk1)(int) = ^int(int count){\n  return count + 1;\n};\nint (^blk2)(int) = blk1;\nblk = blk2;\n\n//参数传递\nvoid func (int (^blk) (int)) \n   {\n    //do something\n    }\n</code></pre><ul>\n<li><p>在函数参数和返回值中使用Block类型的变量时，记述的方式十分复杂，这时使用typedef来简化</p>\n<pre><code>typedef int (^someBlk)(int);\n\n//原来的记述方式\n//void func (int (^blk)(int))\nvoid func (someBlk blk)\n{\n//这样调用\nblk(10);\n}\n</code></pre><ul>\n<li><p>Block类型变量可以像C语言中的其他类型变量一样使用。</p>\n<h2 id=\"截获自动变量值\"><a href=\"#截获自动变量值\" class=\"headerlink\" title=\"截获自动变量值\"></a>截获自动变量值</h2><p>一开始我有说明Block是带有“自动变量的匿名函数”，那什么是带有自动变量值呢？举个例子</p>\n<pre><code>int main（）\n{\n    int dmy = 256；\n    int val = 10；\n    const char *fmt =“val = %d \\n”；\n    void（^blk）（void）= ^{printf（fmt，val）；}；\n    val = 2；\n    fmt =“These values were changed val = %d \\n”；\n    blk（）；\n    return 0；\n}\n</code></pre><p>执行结果会是 val = 10</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>执行结果并不是改写后的值，而是执行Block语法时的自动变量的瞬间值。该Block语法在执行时，字符串指标“cal = %d \\n”被赋值到自动变量fmt中，int值被赋值到val中，因此这边值被保存（即被截获），而在执行时被使用。<br>这就是自动变量值的截获。<br> <strong>block说明符<br> 实际上，截获变量只能保存Block 语法的瞬间值，保存后就不能改写该值。<br> 这时，若想在Block语法的表达式中将值赋给Block语法外声明的自动变量，需要在该自动变量上附加</strong>block。</p>\n<p> 使用附有block说明符的自动变量可在Block中赋值，该变量称为block变量。</p>\n<h2 id=\"Blocks-的实现\"><a href=\"#Blocks-的实现\" class=\"headerlink\" title=\"Blocks 的实现\"></a>Blocks 的实现</h2><h3 id=\"Block-本质\"><a href=\"#Block-本质\" class=\"headerlink\" title=\"Block 本质\"></a>Block 本质</h3><ul>\n<li><p>定义一个最简单block 打印hello world</p>\n<pre><code> int main(int argc, const char * argv[]) {\n\n    void (^block)() = ^{printf(&quot;Hello World!&quot;);};\n    block();\n\n    return 0;\n}\n</code></pre><p>使用clang指令</p>\n<blockquote>\n<p>clang -rewrite-objc main.m</p>\n</blockquote>\n</li>\n</ul>\n<pre><code>struct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags=0) {\n    impl.isa = &amp;_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\nstatic void __main_block_func_0(struct __main_block_impl_0 *__cself) {\nprintf(&quot;Hello World!&quot;);}\n</code></pre><p> 你定义完block之后，其实是创建了一个函数，在创建结构体的时候把函数的指针一起传给了block，所以之后可以拿出来调用。</p>\n<p>   其实，Block 是转化为 Block 结构体类型的自动变量，类型定义如下。通过void *isa;,可以知道 Block 也是一个 OC 的对象，这就是Block  的本质。</p>\n<pre><code>struct Block_descriptor {\n    unsigned long int reserved;    \n    unsigned long int size;\n    void (*copy)(void *dst, void *src);\n    void (*dispose)(void *);\n};\n\n\nstruct Block_layout {\n    void *isa;\n    int flags;\n    int reserved; \n    void (*invoke)(void *, ...);\n    struct Block_descriptor *descriptor;\n    /* Imported variables. */\n};\n</code></pre><h2 id=\"值捕获的问题\"><a href=\"#值捕获的问题\" class=\"headerlink\" title=\"值捕获的问题\"></a>值捕获的问题</h2><pre><code>int main(int argc, const char * argv[]) {\n    __block int a = 10;\n\n    void (^block)() = ^{printf(&quot;a = %d&quot;, a);};\n    block();\n\n    return 0;\n}\n\n\n            struct __Block_byref_a_0 {\n      void *__isa;\n    __Block_byref_a_0 *__forwarding;\n     int __flags;\n     int __size;\n     int a;\n    };\n\n    struct __main_block_impl_0 {\n      struct __block_impl impl;\n      struct __main_block_desc_0* Desc;\n      __Block_byref_a_0 *a; // by ref\n      __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_a_0 *_a, int flags=0) : a(_a-&gt;__forwarding) {\n        impl.isa = &amp;_NSConcreteStackBlock;\n        impl.Flags = flags;\n        impl.FuncPtr = fp;\n        Desc = desc;\n      }\n    };\n    static void __main_block_func_0(struct __main_block_impl_0 *__cself) {\n      __Block_byref_a_0 *a = __cself-&gt;a; // bound by ref\n    printf(&quot;a = %d&quot;, (a-&gt;__forwarding-&gt;a));}\n</code></pre><p>block 说明符类似于 static、auto 和 register 说明符，加了 block 说明符以后，变量 a 变成了一个结构体实例，该结构体持有相当于原自动变量的成员变量，在像 block 内传递时把a-&gt;forwarding-&gt;a 的地址传过去了，所以在block内部便可以修改到外面的变量了。</p>\n<h2 id=\"Block-存储域\"><a href=\"#Block-存储域\" class=\"headerlink\" title=\"Block 存储域\"></a>Block 存储域</h2><p>在之前的 C++ 的代码中有一行 <code>`</code> impl.isa = &amp;_NSConcreteStackBlock;</p>\n<blockquote>\n<p>根据isa指针，block一共有3种类型的block</p>\n<ul>\n<li>_NSConcreteGlobalBlock 全局静态，保存在数据.data 区域</li>\n<li>_NSConcreteStackBlock 保存在栈中，出函数作用域就销毁</li>\n<li>_NSConcreteMallocBlock 保存在堆中，retainCount == 0销毁</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>到现在的例子中都是使用的 _NSConcreteStackBlock 类，且都设置在栈上。</p>\n</blockquote>\n<p>【要点1】如果是定义在函数外面的block是global的，另外如果函数内部的block但是，没有捕获任何自动变量，那么它也是全局的。比如下面这样的代码：</p>\n<pre><code>typedef int (^blk_t)(int);\nfor(...){\nblk_t blk = ^(int count) {return count;};\n}\n</code></pre><blockquote>\n<p>这是因为：block捕获了栈上的rate自动变量，此时rate已经变成了一个结构体，而block中拥有这个结构体的指针。即如果返回block的话就是返回局部变量的指针。而这一点恰是编译器已经断定了。在ARC下没有这个问题，是因为ARC使用了autorelease了。</p>\n</blockquote>\n<p>【要点3】有时候我们需要调用block 的copy函数，将block拷贝到堆上。看下面的代码：</p>\n<pre><code>        -(id) getBlockArray{\n        int val =10;\n        return [[NSArray alloc]initWithObjects:\n        ^{NSLog(@&quot;blk0:%d&quot;,val);},\n        ^{NSLog(@&quot;blk1:%d&quot;,val);},nil];\n        }\n\n        id obj = getBlockArray();\n        typedef void (^blk_t)(void);\n        blk_t blk = (blk_t){obj objectAtIndex:0};\n        blk();\n\n&gt;这段代码在最后一行blk()会异常，因为数组中的block是栈上的。因为val是栈上的。解决办法就是调用copy方法。\n</code></pre><p> 【要点4】不管block配置在何处，用copy方法复制都不会引起任何问题。在ARC环境下，如果不确定是否要copy block尽管copy即可。ARC会打扫战场。</p>\n<p>注意：在栈上调用copy那么复制到堆上，在全局block调用copy什么也不做，在堆上调用block 引用计数增加</p>\n<p>【注意】本人用Xcode 5.1.1 iOS sdk 7.1 编译发现：并非《Objective-C》高级编程这本书中描述的那样</p>\n<p>int val肯定是在栈上的，我保存了val的地址，看看block调用前后是否变化。输出一致说明是栈上，不一致说明是堆上。</p>\n<pre><code>typedef int (^blkt1)(void) ;\n-(void) stackOrHeap{\n__block int val =10;\nint valPtr = &amp;val;//使用int的指针，来检测block到底在栈上，还是堆上\nblkt1 s= ^{\nNSLog(@&quot;val_block = %d&quot;,++val);\nreturn val;};\ns();\nNSLog(@&quot;valPointer = %d&quot;,valPtr);\n}\n</code></pre><blockquote>\n<p>在ARC下——block捕获了自动变量，那么block就被会直接生成到堆上了。  val_block = 11 valPointer = 10</p>\n</blockquote>\n<blockquote>\n<p>在非ARC下——block捕获了自动变量，该block还是在栈上的。  val_block = 11 valPointer = 11<br>调用copy之后的结果呢：</p>\n</blockquote>\n<pre><code>-(void) stackOrHeap{\n__block int val =10;\nint valPtr = &amp;val;//使用int的指针，来检测block到底在栈上，还是堆上\nblkt1 s= ^{\nNSLog(@&quot;val_block = %d&quot;,++val);\nreturn val;};\nblkt1 h = [s copy];\nh();\nNSLog(@&quot;valPointer = %d&quot;,valPtr);\n}\n</code></pre><p>—————-在ARC下&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;无效果。 val_block = 11 valPointer = 10</p>\n<p>—————-在非ARC下&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;确实复制到堆上了。 val_block = 11 valPointer = 10</p>\n<pre><code>用这个表格来表示，当block捕获了自动变量时候\n\n|     where  block stay  |       ARC     |       非ARC   |\n|------------------------|----------------|-------------| \n|                 copy          |       heap     |     heap         |\n|             no copy         |      heap     |      stack        |\n\n### __block变量存储区域\n当block被复制到堆上时，他所捕获的对象、变量也全部复制到堆上。\n\n回忆一下block捕获自动变量的时候，自动变量将编程一个结构体，结构体中有一个字段叫```__forwarding```，用于指向自动这个结构体。那么有了这个__forwarding指针，无论是栈上的block还是被拷贝到堆上，那么都会正确的访问自动变量的值。\n\n### 截获对象\nblock会持有捕获的对象。编译器为了区分自动变量和对象，有一个类型来区分。\n</code></pre><blockquote>\n</blockquote>\n<pre><code>static void main_block_copy_0(struct main_block_impl_0 dst, struct __main_block_impl_0 src){\n_Block_objct_assign(&amp;dst-&gt;val,src-&gt;val,BLOCK_FIELD_IS_BYREF);\n}\nstatic void main_block_dispose_0(struct main_block_impl_0 *src){\n_block_object_dispose(src-&gt;val,BLOCK_FIELD_IS_BYREF);\n}\n\nBLOCK_FIELD_IS_BYREF代表是变量。BLOCK_FIELD_IS_OBJECT代表是对象\n</code></pre><p>__block修饰符可用于任何类型的自动变量</p>\n<h2 id=\"循环引用\"><a href=\"#循环引用\" class=\"headerlink\" title=\"循环引用\"></a>循环引用</h2><p>根据上面讲的内容，block在持有对象的时候，对象如果持有block，会造成循环引用。解决办法有两种：</p>\n<p> 1.使用weak修饰符。id weak obj = obj_</p>\n<p> 2.使用block修饰符。block id tmp = self;然后在block中tmp = nil；这样就打破循环了。这个办法需要记得将tmp=nil。不推荐！</p>\n"},{"layout":"post","title":"分享一个Mac的小技巧","description":"分享一个mac的小技巧","_content":"\n\n#分享一个mac的小技巧\n\n今天在整理下载的文件夹的时候发现想要把下载的文件存入不同的文件夹就想着把文件夹剪切了。但是没有发现  只有拖拽和复制粘贴再删除非常麻烦，于是乎在网上搜索下 使用的是（Google哦）\n\n---------\n- CMD + C 复制就可以了 \n- 粘贴的时候选择option + CMD + V 就是剪切粘贴了。是不是非常的方便呢。\n\n","source":"_posts/2016/2016-03-30mac技巧.md","raw":"---\nlayout: post\ntitle: 分享一个mac的小技巧\ndescription: \"分享一个mac的小技巧\"\ncategory : Mac\ntags: []\n---\n\n\n#分享一个mac的小技巧\n\n今天在整理下载的文件夹的时候发现想要把下载的文件存入不同的文件夹就想着把文件夹剪切了。但是没有发现  只有拖拽和复制粘贴再删除非常麻烦，于是乎在网上搜索下 使用的是（Google哦）\n\n---------\n- CMD + C 复制就可以了 \n- 粘贴的时候选择option + CMD + V 就是剪切粘贴了。是不是非常的方便呢。\n\n","slug":"2016-2016-03-30mac技巧","published":1,"date":"2016-03-30T08:10:57.000Z","updated":"2016-05-25T02:22:58.000Z","comments":1,"photos":[],"link":"","_id":"ckeb5g9l8000krb0u8qs3cv2q","content":"<p>#分享一个mac的小技巧</p>\n<p>今天在整理下载的文件夹的时候发现想要把下载的文件存入不同的文件夹就想着把文件夹剪切了。但是没有发现  只有拖拽和复制粘贴再删除非常麻烦，于是乎在网上搜索下 使用的是（Google哦）</p>\n<hr>\n<ul>\n<li>CMD + C 复制就可以了 </li>\n<li>粘贴的时候选择option + CMD + V 就是剪切粘贴了。是不是非常的方便呢。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>#分享一个mac的小技巧</p>\n<p>今天在整理下载的文件夹的时候发现想要把下载的文件存入不同的文件夹就想着把文件夹剪切了。但是没有发现  只有拖拽和复制粘贴再删除非常麻烦，于是乎在网上搜索下 使用的是（Google哦）</p>\n<hr>\n<ul>\n<li>CMD + C 复制就可以了 </li>\n<li>粘贴的时候选择option + CMD + V 就是剪切粘贴了。是不是非常的方便呢。</li>\n</ul>\n"},{"title":"iTerm2 快捷键大全","date":"2016-05-25T01:47:34.000Z","_content":"\n\n\n## iTerm2 快捷键大全\n\n![img](http://ww3.sinaimg.cn/mw690/78f9859egw1et95qq4cg8j20kt073aaq.jpg)\n\n### 标签\n\n\n\n\t新建标签：command + t\n\t\n\t关闭标签：command + w\n\t\n\t切换标签：command + 数字 command + 左右方向键\n\t\n\t切换全屏：command + enter\n\t\n\t查找：command + f\n\t\n### 分屏\n \n \n\t垂直分屏：command + d\n\t\n\t水平分屏：command + shift + d\n\t\n\t切换屏幕：command + option + 方向键 command + [ 或 command + ]\n\t\n\t查看历史命令：command + ;\n\t\n\t查看剪贴板历史：command + shift + h\n\t\n\t\n\t\n\t\n### 其他\n\n\n\t清除当前行：ctrl + u\n\t\n\t到行首：ctrl + a\n\t\n\t到行尾：ctrl + e\n\t\n\t前进后退：ctrl + f/b (相当于左右方向键)\n\t\n\t上一条命令：ctrl + p\n\t\n\t搜索命令历史：ctrl + r\n\t\n\t删除当前光标的字符：ctrl + d\n\t\n\t删除光标之前的字符：ctrl + h\n\t\n\t删除光标之前的单词：ctrl + w\n\t\n\t删除到文本末尾：ctrl + k\n\t\n\t交换光标处文本：ctrl + t\n\t\n\t清屏1：command + r\n\t\n\t清屏2：ctrl + l\n\t\n\t自带有哪些很实用的功能/快捷键\n\t\n\t⌘ + 数字在各 tab 标签直接来回切换\n\t\n\t选择即复制 + 鼠标中键粘贴，这个很实用\n\t\n\t⌘ + f 所查找的内容会被自动复制\n\t\n\t⌘ + d 横着分屏 / ⌘ + shift + d 竖着分屏\n\t\n\t⌘ + r = clear，而且只是换到新一屏，不会想 clear 一样创建一个空屏\n\t\n\tctrl + u 清空当前行，无论光标在什么位置\n\t\n\t输入开头命令后 按 ⌘ + ; 会自动列出输入过的命令\n\t\n\t⌘ + shift + h 会列出剪切板历史\n\t\n\t可以在 Preferences > keys 设置全局快捷键调出 iterm，这个也可以用过 Alfred 实现\n\t\n### 常用的一些快捷键 \n\n\t⌘ + 1 / 2 左右 tab 之间来回切换，这个在 前面 已经介绍过了\n\t\n\t⌘← / ⌘→ 到一行命令最左边/最右边 ，这个功能同 C+a / C+e\n\t\n\t⌥← / ⌥→ 按单词前移/后移，相当与 C+f / C+b，其实这个功能在Iterm中已经预定义好了，⌥f / ⌥b，看个人习惯了\n\t\n\t好像就这几个\n\t\n\t设置方法如下\n\t\n\t当然除了这些可以自定义的也不能忘了 linux 下那些好用的组合\n\t\n\tC+a / C+e 这个几乎在哪都可以使用\n\t\n\tC+p / !! 上一条命令\n\t\n\tC+k 从光标处删至命令行尾 (本来 C+u 是删至命令行首，但iterm中是删掉整行)\n\t\n\tC+w A+d 从光标处删至字首/尾\n\t\n\tC+h C+d 删掉光标前后的自负\n\t\n\tC+y 粘贴至光标后\n\t\n\tC+r 搜索命令历史，这个较常用\n\n## 选中即复制\n\n- iterm2 有 2 种好用的选中即复制模式。\n\n- 一种是用鼠标，在 iterm2 中，选中某个路径或者某个词汇，那么，iterm2 就自 动复制了。 　　\n另一种是无鼠标模式，command+f,弹出 iterm2 的查找模式，输入要查找并复制的内容的前几个字母，确认找到的是自己的内容之后，输入 tab，查找窗口将自动变化内容，并将其复制。如果输入的是 shift+tab，则自动将查找内容的左边选中并复制。\n自动完成\n输入打头几个字母，然后输入 command+; iterm2 将自动列出之前输入过的类似命令。 　　\n\n## 剪切历史\n\n- 输入 command+shift+h，iterm2 将自动列出剪切板的历史记录。如果需要将剪切板的历史记录保存到磁盘，在 Preferences > General > Save copy/paste history to disk 中设置。\n\n\n\n","source":"_posts/2016/iterm2_快捷键大全.md","raw":"---\ntitle: iTerm2 快捷键大全\ndate: 2016-05-25 09:47:34\ntags:\n---\n\n\n\n## iTerm2 快捷键大全\n\n![img](http://ww3.sinaimg.cn/mw690/78f9859egw1et95qq4cg8j20kt073aaq.jpg)\n\n### 标签\n\n\n\n\t新建标签：command + t\n\t\n\t关闭标签：command + w\n\t\n\t切换标签：command + 数字 command + 左右方向键\n\t\n\t切换全屏：command + enter\n\t\n\t查找：command + f\n\t\n### 分屏\n \n \n\t垂直分屏：command + d\n\t\n\t水平分屏：command + shift + d\n\t\n\t切换屏幕：command + option + 方向键 command + [ 或 command + ]\n\t\n\t查看历史命令：command + ;\n\t\n\t查看剪贴板历史：command + shift + h\n\t\n\t\n\t\n\t\n### 其他\n\n\n\t清除当前行：ctrl + u\n\t\n\t到行首：ctrl + a\n\t\n\t到行尾：ctrl + e\n\t\n\t前进后退：ctrl + f/b (相当于左右方向键)\n\t\n\t上一条命令：ctrl + p\n\t\n\t搜索命令历史：ctrl + r\n\t\n\t删除当前光标的字符：ctrl + d\n\t\n\t删除光标之前的字符：ctrl + h\n\t\n\t删除光标之前的单词：ctrl + w\n\t\n\t删除到文本末尾：ctrl + k\n\t\n\t交换光标处文本：ctrl + t\n\t\n\t清屏1：command + r\n\t\n\t清屏2：ctrl + l\n\t\n\t自带有哪些很实用的功能/快捷键\n\t\n\t⌘ + 数字在各 tab 标签直接来回切换\n\t\n\t选择即复制 + 鼠标中键粘贴，这个很实用\n\t\n\t⌘ + f 所查找的内容会被自动复制\n\t\n\t⌘ + d 横着分屏 / ⌘ + shift + d 竖着分屏\n\t\n\t⌘ + r = clear，而且只是换到新一屏，不会想 clear 一样创建一个空屏\n\t\n\tctrl + u 清空当前行，无论光标在什么位置\n\t\n\t输入开头命令后 按 ⌘ + ; 会自动列出输入过的命令\n\t\n\t⌘ + shift + h 会列出剪切板历史\n\t\n\t可以在 Preferences > keys 设置全局快捷键调出 iterm，这个也可以用过 Alfred 实现\n\t\n### 常用的一些快捷键 \n\n\t⌘ + 1 / 2 左右 tab 之间来回切换，这个在 前面 已经介绍过了\n\t\n\t⌘← / ⌘→ 到一行命令最左边/最右边 ，这个功能同 C+a / C+e\n\t\n\t⌥← / ⌥→ 按单词前移/后移，相当与 C+f / C+b，其实这个功能在Iterm中已经预定义好了，⌥f / ⌥b，看个人习惯了\n\t\n\t好像就这几个\n\t\n\t设置方法如下\n\t\n\t当然除了这些可以自定义的也不能忘了 linux 下那些好用的组合\n\t\n\tC+a / C+e 这个几乎在哪都可以使用\n\t\n\tC+p / !! 上一条命令\n\t\n\tC+k 从光标处删至命令行尾 (本来 C+u 是删至命令行首，但iterm中是删掉整行)\n\t\n\tC+w A+d 从光标处删至字首/尾\n\t\n\tC+h C+d 删掉光标前后的自负\n\t\n\tC+y 粘贴至光标后\n\t\n\tC+r 搜索命令历史，这个较常用\n\n## 选中即复制\n\n- iterm2 有 2 种好用的选中即复制模式。\n\n- 一种是用鼠标，在 iterm2 中，选中某个路径或者某个词汇，那么，iterm2 就自 动复制了。 　　\n另一种是无鼠标模式，command+f,弹出 iterm2 的查找模式，输入要查找并复制的内容的前几个字母，确认找到的是自己的内容之后，输入 tab，查找窗口将自动变化内容，并将其复制。如果输入的是 shift+tab，则自动将查找内容的左边选中并复制。\n自动完成\n输入打头几个字母，然后输入 command+; iterm2 将自动列出之前输入过的类似命令。 　　\n\n## 剪切历史\n\n- 输入 command+shift+h，iterm2 将自动列出剪切板的历史记录。如果需要将剪切板的历史记录保存到磁盘，在 Preferences > General > Save copy/paste history to disk 中设置。\n\n\n\n","slug":"2016-iterm2-快捷键大全","published":1,"updated":"2016-05-25T01:52:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9l9000mrb0uiep1n43k","content":"<h2 id=\"iTerm2-快捷键大全\"><a href=\"#iTerm2-快捷键大全\" class=\"headerlink\" title=\"iTerm2 快捷键大全\"></a>iTerm2 快捷键大全</h2><p><img src=\"http://ww3.sinaimg.cn/mw690/78f9859egw1et95qq4cg8j20kt073aaq.jpg\" alt=\"img\"></p>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><pre><code>新建标签：command + t\n\n关闭标签：command + w\n\n切换标签：command + 数字 command + 左右方向键\n\n切换全屏：command + enter\n\n查找：command + f\n</code></pre><h3 id=\"分屏\"><a href=\"#分屏\" class=\"headerlink\" title=\"分屏\"></a>分屏</h3><pre><code>垂直分屏：command + d\n\n水平分屏：command + shift + d\n\n切换屏幕：command + option + 方向键 command + [ 或 command + ]\n\n查看历史命令：command + ;\n\n查看剪贴板历史：command + shift + h\n</code></pre><h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><pre><code>清除当前行：ctrl + u\n\n到行首：ctrl + a\n\n到行尾：ctrl + e\n\n前进后退：ctrl + f/b (相当于左右方向键)\n\n上一条命令：ctrl + p\n\n搜索命令历史：ctrl + r\n\n删除当前光标的字符：ctrl + d\n\n删除光标之前的字符：ctrl + h\n\n删除光标之前的单词：ctrl + w\n\n删除到文本末尾：ctrl + k\n\n交换光标处文本：ctrl + t\n\n清屏1：command + r\n\n清屏2：ctrl + l\n\n自带有哪些很实用的功能/快捷键\n\n⌘ + 数字在各 tab 标签直接来回切换\n\n选择即复制 + 鼠标中键粘贴，这个很实用\n\n⌘ + f 所查找的内容会被自动复制\n\n⌘ + d 横着分屏 / ⌘ + shift + d 竖着分屏\n\n⌘ + r = clear，而且只是换到新一屏，不会想 clear 一样创建一个空屏\n\nctrl + u 清空当前行，无论光标在什么位置\n\n输入开头命令后 按 ⌘ + ; 会自动列出输入过的命令\n\n⌘ + shift + h 会列出剪切板历史\n\n可以在 Preferences &gt; keys 设置全局快捷键调出 iterm，这个也可以用过 Alfred 实现\n</code></pre><h3 id=\"常用的一些快捷键\"><a href=\"#常用的一些快捷键\" class=\"headerlink\" title=\"常用的一些快捷键\"></a>常用的一些快捷键</h3><pre><code>⌘ + 1 / 2 左右 tab 之间来回切换，这个在 前面 已经介绍过了\n\n⌘← / ⌘→ 到一行命令最左边/最右边 ，这个功能同 C+a / C+e\n\n⌥← / ⌥→ 按单词前移/后移，相当与 C+f / C+b，其实这个功能在Iterm中已经预定义好了，⌥f / ⌥b，看个人习惯了\n\n好像就这几个\n\n设置方法如下\n\n当然除了这些可以自定义的也不能忘了 linux 下那些好用的组合\n\nC+a / C+e 这个几乎在哪都可以使用\n\nC+p / !! 上一条命令\n\nC+k 从光标处删至命令行尾 (本来 C+u 是删至命令行首，但iterm中是删掉整行)\n\nC+w A+d 从光标处删至字首/尾\n\nC+h C+d 删掉光标前后的自负\n\nC+y 粘贴至光标后\n\nC+r 搜索命令历史，这个较常用\n</code></pre><h2 id=\"选中即复制\"><a href=\"#选中即复制\" class=\"headerlink\" title=\"选中即复制\"></a>选中即复制</h2><ul>\n<li><p>iterm2 有 2 种好用的选中即复制模式。</p>\n</li>\n<li><p>一种是用鼠标，在 iterm2 中，选中某个路径或者某个词汇，那么，iterm2 就自 动复制了。 　　<br>另一种是无鼠标模式，command+f,弹出 iterm2 的查找模式，输入要查找并复制的内容的前几个字母，确认找到的是自己的内容之后，输入 tab，查找窗口将自动变化内容，并将其复制。如果输入的是 shift+tab，则自动将查找内容的左边选中并复制。<br>自动完成<br>输入打头几个字母，然后输入 command+; iterm2 将自动列出之前输入过的类似命令。 　　</p>\n</li>\n</ul>\n<h2 id=\"剪切历史\"><a href=\"#剪切历史\" class=\"headerlink\" title=\"剪切历史\"></a>剪切历史</h2><ul>\n<li>输入 command+shift+h，iterm2 将自动列出剪切板的历史记录。如果需要将剪切板的历史记录保存到磁盘，在 Preferences &gt; General &gt; Save copy/paste history to disk 中设置。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"iTerm2-快捷键大全\"><a href=\"#iTerm2-快捷键大全\" class=\"headerlink\" title=\"iTerm2 快捷键大全\"></a>iTerm2 快捷键大全</h2><p><img src=\"http://ww3.sinaimg.cn/mw690/78f9859egw1et95qq4cg8j20kt073aaq.jpg\" alt=\"img\"></p>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><pre><code>新建标签：command + t\n\n关闭标签：command + w\n\n切换标签：command + 数字 command + 左右方向键\n\n切换全屏：command + enter\n\n查找：command + f\n</code></pre><h3 id=\"分屏\"><a href=\"#分屏\" class=\"headerlink\" title=\"分屏\"></a>分屏</h3><pre><code>垂直分屏：command + d\n\n水平分屏：command + shift + d\n\n切换屏幕：command + option + 方向键 command + [ 或 command + ]\n\n查看历史命令：command + ;\n\n查看剪贴板历史：command + shift + h\n</code></pre><h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><pre><code>清除当前行：ctrl + u\n\n到行首：ctrl + a\n\n到行尾：ctrl + e\n\n前进后退：ctrl + f/b (相当于左右方向键)\n\n上一条命令：ctrl + p\n\n搜索命令历史：ctrl + r\n\n删除当前光标的字符：ctrl + d\n\n删除光标之前的字符：ctrl + h\n\n删除光标之前的单词：ctrl + w\n\n删除到文本末尾：ctrl + k\n\n交换光标处文本：ctrl + t\n\n清屏1：command + r\n\n清屏2：ctrl + l\n\n自带有哪些很实用的功能/快捷键\n\n⌘ + 数字在各 tab 标签直接来回切换\n\n选择即复制 + 鼠标中键粘贴，这个很实用\n\n⌘ + f 所查找的内容会被自动复制\n\n⌘ + d 横着分屏 / ⌘ + shift + d 竖着分屏\n\n⌘ + r = clear，而且只是换到新一屏，不会想 clear 一样创建一个空屏\n\nctrl + u 清空当前行，无论光标在什么位置\n\n输入开头命令后 按 ⌘ + ; 会自动列出输入过的命令\n\n⌘ + shift + h 会列出剪切板历史\n\n可以在 Preferences &gt; keys 设置全局快捷键调出 iterm，这个也可以用过 Alfred 实现\n</code></pre><h3 id=\"常用的一些快捷键\"><a href=\"#常用的一些快捷键\" class=\"headerlink\" title=\"常用的一些快捷键\"></a>常用的一些快捷键</h3><pre><code>⌘ + 1 / 2 左右 tab 之间来回切换，这个在 前面 已经介绍过了\n\n⌘← / ⌘→ 到一行命令最左边/最右边 ，这个功能同 C+a / C+e\n\n⌥← / ⌥→ 按单词前移/后移，相当与 C+f / C+b，其实这个功能在Iterm中已经预定义好了，⌥f / ⌥b，看个人习惯了\n\n好像就这几个\n\n设置方法如下\n\n当然除了这些可以自定义的也不能忘了 linux 下那些好用的组合\n\nC+a / C+e 这个几乎在哪都可以使用\n\nC+p / !! 上一条命令\n\nC+k 从光标处删至命令行尾 (本来 C+u 是删至命令行首，但iterm中是删掉整行)\n\nC+w A+d 从光标处删至字首/尾\n\nC+h C+d 删掉光标前后的自负\n\nC+y 粘贴至光标后\n\nC+r 搜索命令历史，这个较常用\n</code></pre><h2 id=\"选中即复制\"><a href=\"#选中即复制\" class=\"headerlink\" title=\"选中即复制\"></a>选中即复制</h2><ul>\n<li><p>iterm2 有 2 种好用的选中即复制模式。</p>\n</li>\n<li><p>一种是用鼠标，在 iterm2 中，选中某个路径或者某个词汇，那么，iterm2 就自 动复制了。 　　<br>另一种是无鼠标模式，command+f,弹出 iterm2 的查找模式，输入要查找并复制的内容的前几个字母，确认找到的是自己的内容之后，输入 tab，查找窗口将自动变化内容，并将其复制。如果输入的是 shift+tab，则自动将查找内容的左边选中并复制。<br>自动完成<br>输入打头几个字母，然后输入 command+; iterm2 将自动列出之前输入过的类似命令。 　　</p>\n</li>\n</ul>\n<h2 id=\"剪切历史\"><a href=\"#剪切历史\" class=\"headerlink\" title=\"剪切历史\"></a>剪切历史</h2><ul>\n<li>输入 command+shift+h，iterm2 将自动列出剪切板的历史记录。如果需要将剪切板的历史记录保存到磁盘，在 Preferences &gt; General &gt; Save copy/paste history to disk 中设置。</li>\n</ul>\n"},{"title":"My Frist Post","date":"2016-05-24T15:28:22.000Z","_content":"\n###这是我的第一篇博客必须纪念一下哈非常的艰辛：看了很多的网站才学会是不是自己太笨了呢\n\n\n - 第一个介绍的很详细：[原文](http://ibruce.info/2013/11/22/hexo-your-blog/)但是太繁琐\n \n - 其实 主要用的是第二个：[原文](http://www.jianshu.com/p/821fe67e712b)\n","source":"_posts/2016/my-frist-post.md","raw":"---\ntitle: my frist post\ndate: 2016-05-24 23:28:22\ntags:\n---\n\n###这是我的第一篇博客必须纪念一下哈非常的艰辛：看了很多的网站才学会是不是自己太笨了呢\n\n\n - 第一个介绍的很详细：[原文](http://ibruce.info/2013/11/22/hexo-your-blog/)但是太繁琐\n \n - 其实 主要用的是第二个：[原文](http://www.jianshu.com/p/821fe67e712b)\n","slug":"2016-my-frist-post","published":1,"updated":"2016-05-24T15:34:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9lc000orb0u045ntxae","content":"<p>###这是我的第一篇博客必须纪念一下哈非常的艰辛：看了很多的网站才学会是不是自己太笨了呢</p>\n<ul>\n<li><p>第一个介绍的很详细：<a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"noopener\">原文</a>但是太繁琐</p>\n</li>\n<li><p>其实 主要用的是第二个：<a href=\"http://www.jianshu.com/p/821fe67e712b\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>###这是我的第一篇博客必须纪念一下哈非常的艰辛：看了很多的网站才学会是不是自己太笨了呢</p>\n<ul>\n<li><p>第一个介绍的很详细：<a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"noopener\">原文</a>但是太繁琐</p>\n</li>\n<li><p>其实 主要用的是第二个：<a href=\"http://www.jianshu.com/p/821fe67e712b\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n</li>\n</ul>\n"},{"title":"关于tableView数组越界的问题处理","date":"2016-05-24T15:28:22.000Z","_content":"\n#关于tableView数组越界的问题处理\n\n###使用懒加载\n- 使用懒加载的数组只创建一次刷新数据的时候要记得移除所有的数组元素\n\n      [self.dataArray removeAllObjects];\n      \n      \n- 判断数组为空时候的越界问题当首次数据没有请求完毕的时候[tableVIew reloadData];就会导致crash这个时候需要做一次判断：\n\n      if(self.dataArray.count != 0){\n       \n       MOdel * model = self.dataArray[indexPath.row];\n      }\n      \n      \n - 有时候会出现上拉加载更多后点击下拉出现crash 这个时候提示数组越界但是并不是真的越界 因为这个时候的indexpath.row > 数组的元素个数的。所以需要以下处理：\n\t \n\t     if(!indexpath.row > self.dataArray.count){\n\t     \n\t     Model* model = slef.dataArray[indexpath.row];\n\t     \n\t     }","source":"_posts/2016/关于tableview数组越界的问题处理.md","raw":"---\ntitle: 关于tableView数组越界的问题处理\ndate: 2016-05-24 23:28:22\n\ntags: tableview\n---\n\n#关于tableView数组越界的问题处理\n\n###使用懒加载\n- 使用懒加载的数组只创建一次刷新数据的时候要记得移除所有的数组元素\n\n      [self.dataArray removeAllObjects];\n      \n      \n- 判断数组为空时候的越界问题当首次数据没有请求完毕的时候[tableVIew reloadData];就会导致crash这个时候需要做一次判断：\n\n      if(self.dataArray.count != 0){\n       \n       MOdel * model = self.dataArray[indexPath.row];\n      }\n      \n      \n - 有时候会出现上拉加载更多后点击下拉出现crash 这个时候提示数组越界但是并不是真的越界 因为这个时候的indexpath.row > 数组的元素个数的。所以需要以下处理：\n\t \n\t     if(!indexpath.row > self.dataArray.count){\n\t     \n\t     Model* model = slef.dataArray[indexpath.row];\n\t     \n\t     }","slug":"2016-关于tableview数组越界的问题处理","published":1,"updated":"2016-05-25T02:24:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9lg000rrb0upxjet797","content":"<p>#关于tableView数组越界的问题处理</p>\n<p>###使用懒加载</p>\n<ul>\n<li><p>使用懒加载的数组只创建一次刷新数据的时候要记得移除所有的数组元素</p>\n<pre><code>[self.dataArray removeAllObjects];\n</code></pre></li>\n</ul>\n<ul>\n<li><p>判断数组为空时候的越界问题当首次数据没有请求完毕的时候[tableVIew reloadData];就会导致crash这个时候需要做一次判断：</p>\n<pre><code>if(self.dataArray.count != 0){\n\n MOdel * model = self.dataArray[indexPath.row];\n}\n</code></pre></li>\n</ul>\n<ul>\n<li><p>有时候会出现上拉加载更多后点击下拉出现crash 这个时候提示数组越界但是并不是真的越界 因为这个时候的indexpath.row &gt; 数组的元素个数的。所以需要以下处理：</p>\n<pre><code>if(!indexpath.row &gt; self.dataArray.count){\n\nModel* model = slef.dataArray[indexpath.row];\n\n}\n</code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>#关于tableView数组越界的问题处理</p>\n<p>###使用懒加载</p>\n<ul>\n<li><p>使用懒加载的数组只创建一次刷新数据的时候要记得移除所有的数组元素</p>\n<pre><code>[self.dataArray removeAllObjects];\n</code></pre></li>\n</ul>\n<ul>\n<li><p>判断数组为空时候的越界问题当首次数据没有请求完毕的时候[tableVIew reloadData];就会导致crash这个时候需要做一次判断：</p>\n<pre><code>if(self.dataArray.count != 0){\n\n MOdel * model = self.dataArray[indexPath.row];\n}\n</code></pre></li>\n</ul>\n<ul>\n<li><p>有时候会出现上拉加载更多后点击下拉出现crash 这个时候提示数组越界但是并不是真的越界 因为这个时候的indexpath.row &gt; 数组的元素个数的。所以需要以下处理：</p>\n<pre><code>if(!indexpath.row &gt; self.dataArray.count){\n\nModel* model = slef.dataArray[indexpath.row];\n\n}\n</code></pre></li>\n</ul>\n"},{"title":"关于博客的Markdown语法","date":"2016-05-25T01:47:34.000Z","_content":"## 一直发现以前写的文章都是#+标题的所有的markdown软件都可以识别唯独博客的不行，搜了一下，原来是必须##+空格+文字\n### 看来以后要改掉这个坏习惯了，哈哈。记录下轨迹","source":"_posts/2016/关于博客的markdown语法.md","raw":"---\ntitle: 关于博客的markdown语法\ndate: 2016-05-25 09:47:34\ntags:\n---\n## 一直发现以前写的文章都是#+标题的所有的markdown软件都可以识别唯独博客的不行，搜了一下，原来是必须##+空格+文字\n### 看来以后要改掉这个坏习惯了，哈哈。记录下轨迹","slug":"2016-关于博客的markdown语法","published":1,"updated":"2016-05-25T01:49:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9li000srb0u0badhq6d","content":"<h2 id=\"一直发现以前写的文章都是-标题的所有的markdown软件都可以识别唯独博客的不行，搜了一下，原来是必须-空格-文字\"><a href=\"#一直发现以前写的文章都是-标题的所有的markdown软件都可以识别唯独博客的不行，搜了一下，原来是必须-空格-文字\" class=\"headerlink\" title=\"一直发现以前写的文章都是#+标题的所有的markdown软件都可以识别唯独博客的不行，搜了一下，原来是必须##+空格+文字\"></a>一直发现以前写的文章都是#+标题的所有的markdown软件都可以识别唯独博客的不行，搜了一下，原来是必须##+空格+文字</h2><h3 id=\"看来以后要改掉这个坏习惯了，哈哈。记录下轨迹\"><a href=\"#看来以后要改掉这个坏习惯了，哈哈。记录下轨迹\" class=\"headerlink\" title=\"看来以后要改掉这个坏习惯了，哈哈。记录下轨迹\"></a>看来以后要改掉这个坏习惯了，哈哈。记录下轨迹</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一直发现以前写的文章都是-标题的所有的markdown软件都可以识别唯独博客的不行，搜了一下，原来是必须-空格-文字\"><a href=\"#一直发现以前写的文章都是-标题的所有的markdown软件都可以识别唯独博客的不行，搜了一下，原来是必须-空格-文字\" class=\"headerlink\" title=\"一直发现以前写的文章都是#+标题的所有的markdown软件都可以识别唯独博客的不行，搜了一下，原来是必须##+空格+文字\"></a>一直发现以前写的文章都是#+标题的所有的markdown软件都可以识别唯独博客的不行，搜了一下，原来是必须##+空格+文字</h2><h3 id=\"看来以后要改掉这个坏习惯了，哈哈。记录下轨迹\"><a href=\"#看来以后要改掉这个坏习惯了，哈哈。记录下轨迹\" class=\"headerlink\" title=\"看来以后要改掉这个坏习惯了，哈哈。记录下轨迹\"></a>看来以后要改掉这个坏习惯了，哈哈。记录下轨迹</h3>"},{"title":"处理耗时任务","date":"2016-05-24T15:28:22.000Z","_content":"\n\n\n##处理耗时任务\n###两个同步搞定\n- 一般处理数据花费时间较长，但是最后刷新ui在主线程 处理代码如下：\n\n\t\t    dispatch_sync(dispatch_get_global_queue(0, 0), ^{\n\t\t        NSArray * array = @[\n\t\t                            @{@\"img\": @\"https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966\", @\"intro\": @\"如果再看到关于纯代码,xib或storyboard,使用哪种方式进行UI布局更合适的讨论,请推荐他们先试用下 Masonry. Masonry,像xib一样快速,同时拥有作为纯代码方式的灵活性 — github关注度 7800 + 是有原因的!\"},\n\t\t                            @{@\"img\": @\"https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966\", @\"intro\": @\"无论如何,你总是需要一个提示框.\"},\n\t\t                            @{@\"img\": @\"https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966\", @\"intro\": @\"SVProgressHUD是简单易用的显示器,用于指示一个持续进行的任务的进度.\"},\n\t\t                            @{@\"img\": @\"https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966\", @\"intro\": @\"RestKit 是一个用于更好支持RESTful风格服务器接口的iOS库,可直接将联网获取的json/xml数据转换为iOS对象.\"},\n\t\t                            @{@\"img\": @\"https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966\", @\"intro\": @\"FMDB 是SQLite的Objective-C封装库.\"},\n\t\t                            @{@\"img\": @\"https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966\", @\"intro\": @\"Pop 是一个可扩展的动画引擎,可用于实现任意iOS对象的任意属性的动态变化,支持一般动画,弹性动画和渐变动画三种类型.\"},\n\t\t                            @{@\"img\": @\"https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966\", @\"intro\": @\"高度可定制的应用欢迎页通用解决方案,可高度定制,不要仅限于现有的demo\"},\n\t\t                            @{@\"img\": @\"https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966\", @\"intro\": @\"JVFloatLabeledTextField 是注重用户体验的”浮动标签模式”(Float Label Patter)的第一个实现,可以有效解决移动设备上进行表单输入时,无法边看表单提示边进行输入的困境,用户体验非常好.\"},\n\t\t                            @{@\"img\": @\"https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966\", @\"intro\": @\"用于为应用添加常用的上拉加载更多与下拉刷新效果,适用 UIScrollView、UITableView、UICollectionView、UIWebView.\"},\n\t\t                            @{@\"img\": @\"https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966\", @\"intro\": @\"iOS-blur使用一种巧妙的方式,为任意视图添加一种非常奇妙的模糊效果.\"}\n\t\t                            \n\t\t                            ];\n\t\t        \n\t\t        [array enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n\t\t            LPModel * model = [LPModel new];\n\t\t            model.imgUrl = @\"https://raw.githubusercontent.com/ealeksandrov/EAIntroView/master/Screenshot02.png\";\n\t\t            model.content = [obj objectForKey:@\"intro\"];\n\t\t            [self.dataList addObject:model];\n\t\t            \n\t\t        }];\n\t\t\n\t\t        dispatch_async(dispatch_get_main_queue(), ^{\n\t\t           \n\t\t            [self.tableView reloadData];\n\t\t        });\n\t\t    });","source":"_posts/2016/处理耗时任务.md","raw":"---\ntitle: 处理耗时任务\ndate: 2016-05-24 23:28:22\n\ntags: 多线程\n---\n\n\n\n##处理耗时任务\n###两个同步搞定\n- 一般处理数据花费时间较长，但是最后刷新ui在主线程 处理代码如下：\n\n\t\t    dispatch_sync(dispatch_get_global_queue(0, 0), ^{\n\t\t        NSArray * array = @[\n\t\t                            @{@\"img\": @\"https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966\", @\"intro\": @\"如果再看到关于纯代码,xib或storyboard,使用哪种方式进行UI布局更合适的讨论,请推荐他们先试用下 Masonry. Masonry,像xib一样快速,同时拥有作为纯代码方式的灵活性 — github关注度 7800 + 是有原因的!\"},\n\t\t                            @{@\"img\": @\"https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966\", @\"intro\": @\"无论如何,你总是需要一个提示框.\"},\n\t\t                            @{@\"img\": @\"https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966\", @\"intro\": @\"SVProgressHUD是简单易用的显示器,用于指示一个持续进行的任务的进度.\"},\n\t\t                            @{@\"img\": @\"https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966\", @\"intro\": @\"RestKit 是一个用于更好支持RESTful风格服务器接口的iOS库,可直接将联网获取的json/xml数据转换为iOS对象.\"},\n\t\t                            @{@\"img\": @\"https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966\", @\"intro\": @\"FMDB 是SQLite的Objective-C封装库.\"},\n\t\t                            @{@\"img\": @\"https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966\", @\"intro\": @\"Pop 是一个可扩展的动画引擎,可用于实现任意iOS对象的任意属性的动态变化,支持一般动画,弹性动画和渐变动画三种类型.\"},\n\t\t                            @{@\"img\": @\"https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966\", @\"intro\": @\"高度可定制的应用欢迎页通用解决方案,可高度定制,不要仅限于现有的demo\"},\n\t\t                            @{@\"img\": @\"https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966\", @\"intro\": @\"JVFloatLabeledTextField 是注重用户体验的”浮动标签模式”(Float Label Patter)的第一个实现,可以有效解决移动设备上进行表单输入时,无法边看表单提示边进行输入的困境,用户体验非常好.\"},\n\t\t                            @{@\"img\": @\"https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966\", @\"intro\": @\"用于为应用添加常用的上拉加载更多与下拉刷新效果,适用 UIScrollView、UITableView、UICollectionView、UIWebView.\"},\n\t\t                            @{@\"img\": @\"https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966\", @\"intro\": @\"iOS-blur使用一种巧妙的方式,为任意视图添加一种非常奇妙的模糊效果.\"}\n\t\t                            \n\t\t                            ];\n\t\t        \n\t\t        [array enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n\t\t            LPModel * model = [LPModel new];\n\t\t            model.imgUrl = @\"https://raw.githubusercontent.com/ealeksandrov/EAIntroView/master/Screenshot02.png\";\n\t\t            model.content = [obj objectForKey:@\"intro\"];\n\t\t            [self.dataList addObject:model];\n\t\t            \n\t\t        }];\n\t\t\n\t\t        dispatch_async(dispatch_get_main_queue(), ^{\n\t\t           \n\t\t            [self.tableView reloadData];\n\t\t        });\n\t\t    });","slug":"2016-处理耗时任务","published":1,"updated":"2016-05-25T02:51:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9lm000wrb0uz48d45b5","content":"<p>##处理耗时任务</p>\n<p>###两个同步搞定</p>\n<ul>\n<li><p>一般处理数据花费时间较长，但是最后刷新ui在主线程 处理代码如下：</p>\n<pre><code>dispatch_sync(dispatch_get_global_queue(0, 0), ^{\n    NSArray * array = @[\n                        @{@&quot;img&quot;: @&quot;https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966&quot;, @&quot;intro&quot;: @&quot;如果再看到关于纯代码,xib或storyboard,使用哪种方式进行UI布局更合适的讨论,请推荐他们先试用下 Masonry. Masonry,像xib一样快速,同时拥有作为纯代码方式的灵活性 — github关注度 7800 + 是有原因的!&quot;},\n                        @{@&quot;img&quot;: @&quot;https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966&quot;, @&quot;intro&quot;: @&quot;无论如何,你总是需要一个提示框.&quot;},\n                        @{@&quot;img&quot;: @&quot;https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966&quot;, @&quot;intro&quot;: @&quot;SVProgressHUD是简单易用的显示器,用于指示一个持续进行的任务的进度.&quot;},\n                        @{@&quot;img&quot;: @&quot;https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966&quot;, @&quot;intro&quot;: @&quot;RestKit 是一个用于更好支持RESTful风格服务器接口的iOS库,可直接将联网获取的json/xml数据转换为iOS对象.&quot;},\n                        @{@&quot;img&quot;: @&quot;https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966&quot;, @&quot;intro&quot;: @&quot;FMDB 是SQLite的Objective-C封装库.&quot;},\n                        @{@&quot;img&quot;: @&quot;https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966&quot;, @&quot;intro&quot;: @&quot;Pop 是一个可扩展的动画引擎,可用于实现任意iOS对象的任意属性的动态变化,支持一般动画,弹性动画和渐变动画三种类型.&quot;},\n                        @{@&quot;img&quot;: @&quot;https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966&quot;, @&quot;intro&quot;: @&quot;高度可定制的应用欢迎页通用解决方案,可高度定制,不要仅限于现有的demo&quot;},\n                        @{@&quot;img&quot;: @&quot;https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966&quot;, @&quot;intro&quot;: @&quot;JVFloatLabeledTextField 是注重用户体验的”浮动标签模式”(Float Label Patter)的第一个实现,可以有效解决移动设备上进行表单输入时,无法边看表单提示边进行输入的困境,用户体验非常好.&quot;},\n                        @{@&quot;img&quot;: @&quot;https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966&quot;, @&quot;intro&quot;: @&quot;用于为应用添加常用的上拉加载更多与下拉刷新效果,适用 UIScrollView、UITableView、UICollectionView、UIWebView.&quot;},\n                        @{@&quot;img&quot;: @&quot;https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966&quot;, @&quot;intro&quot;: @&quot;iOS-blur使用一种巧妙的方式,为任意视图添加一种非常奇妙的模糊效果.&quot;}\n\n                        ];\n\n    [array enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n        LPModel * model = [LPModel new];\n        model.imgUrl = @&quot;https://raw.githubusercontent.com/ealeksandrov/EAIntroView/master/Screenshot02.png&quot;;\n        model.content = [obj objectForKey:@&quot;intro&quot;];\n        [self.dataList addObject:model];\n\n    }];\n\n    dispatch_async(dispatch_get_main_queue(), ^{\n\n        [self.tableView reloadData];\n    });\n});\n</code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>##处理耗时任务</p>\n<p>###两个同步搞定</p>\n<ul>\n<li><p>一般处理数据花费时间较长，但是最后刷新ui在主线程 处理代码如下：</p>\n<pre><code>dispatch_sync(dispatch_get_global_queue(0, 0), ^{\n    NSArray * array = @[\n                        @{@&quot;img&quot;: @&quot;https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966&quot;, @&quot;intro&quot;: @&quot;如果再看到关于纯代码,xib或storyboard,使用哪种方式进行UI布局更合适的讨论,请推荐他们先试用下 Masonry. Masonry,像xib一样快速,同时拥有作为纯代码方式的灵活性 — github关注度 7800 + 是有原因的!&quot;},\n                        @{@&quot;img&quot;: @&quot;https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966&quot;, @&quot;intro&quot;: @&quot;无论如何,你总是需要一个提示框.&quot;},\n                        @{@&quot;img&quot;: @&quot;https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966&quot;, @&quot;intro&quot;: @&quot;SVProgressHUD是简单易用的显示器,用于指示一个持续进行的任务的进度.&quot;},\n                        @{@&quot;img&quot;: @&quot;https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966&quot;, @&quot;intro&quot;: @&quot;RestKit 是一个用于更好支持RESTful风格服务器接口的iOS库,可直接将联网获取的json/xml数据转换为iOS对象.&quot;},\n                        @{@&quot;img&quot;: @&quot;https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966&quot;, @&quot;intro&quot;: @&quot;FMDB 是SQLite的Objective-C封装库.&quot;},\n                        @{@&quot;img&quot;: @&quot;https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966&quot;, @&quot;intro&quot;: @&quot;Pop 是一个可扩展的动画引擎,可用于实现任意iOS对象的任意属性的动态变化,支持一般动画,弹性动画和渐变动画三种类型.&quot;},\n                        @{@&quot;img&quot;: @&quot;https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966&quot;, @&quot;intro&quot;: @&quot;高度可定制的应用欢迎页通用解决方案,可高度定制,不要仅限于现有的demo&quot;},\n                        @{@&quot;img&quot;: @&quot;https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966&quot;, @&quot;intro&quot;: @&quot;JVFloatLabeledTextField 是注重用户体验的”浮动标签模式”(Float Label Patter)的第一个实现,可以有效解决移动设备上进行表单输入时,无法边看表单提示边进行输入的困境,用户体验非常好.&quot;},\n                        @{@&quot;img&quot;: @&quot;https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966&quot;, @&quot;intro&quot;: @&quot;用于为应用添加常用的上拉加载更多与下拉刷新效果,适用 UIScrollView、UITableView、UICollectionView、UIWebView.&quot;},\n                        @{@&quot;img&quot;: @&quot;https://camo.githubusercontent.com/be57d040ec0ce5d6467fb73564c6bcb6c76d5a7b/687474703a2f2f6472696262626c652e73332e616d617a6f6e6177732e636f6d2f75736572732f363431302f73637265656e73686f74732f313235343433392f666f726d2d616e696d6174696f6e2d5f6769665f2e676966&quot;, @&quot;intro&quot;: @&quot;iOS-blur使用一种巧妙的方式,为任意视图添加一种非常奇妙的模糊效果.&quot;}\n\n                        ];\n\n    [array enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n        LPModel * model = [LPModel new];\n        model.imgUrl = @&quot;https://raw.githubusercontent.com/ealeksandrov/EAIntroView/master/Screenshot02.png&quot;;\n        model.content = [obj objectForKey:@&quot;intro&quot;];\n        [self.dataList addObject:model];\n\n    }];\n\n    dispatch_async(dispatch_get_main_queue(), ^{\n\n        [self.tableView reloadData];\n    });\n});\n</code></pre></li>\n</ul>\n"},{"title":"Nginx入门指南","date":"2018-05-25T14:43:28.000Z","_content":"### 基本操作指令\n\n- nginx -t 测试配置是否正确\n- nginx -s reload 加载最新配置\n- nginx -s stop 立即停止\n- nginx  -s quit 优雅停止（完成当前任务后再退出）\n- nginx -s reopen 重新打开日志\n\n\n\n#### Nginx 全局配置\n\nworker_processes  工作进程数 取决于CPU数量x核数\n\nevent: worker_connections  最大进程数\n\n##### 配置虚拟主机\n\n- 基于域名的虚拟主机\n\n- ```objective-c\n  server {\n      listen 80;#监听端口号\n      server_name mantou360.com;#监听域名 如有多个空格隔开\n          location / {\n          root html/dddd;\n          index index.html;\n      }\n  }\n  ```\n\n只用nginx -s reload 就可以加载新的配置了。如果是PHP页面需要单独配置解析的location\n\n##### 日志管理\n\n#### nginx的反向代理\n\n> 用正则表达式来匹配图片请求到另外一台服务器上去\n>\n> ```object \n> location ~ \\.(jpeg|jpg|png|gif)$ {\n>     proxy_pass http://baidu.com:80;\n> \tproxy_set_header  X-Forwarded-For $remote_addr;#把用户的真实ip带到被反向代理的服务器。服务器就能收到用户的真实ip了。\n> }\n>\n> ```\n\nnginx -s reload 就可以了\n\n","source":"_posts/2018/Nginx入门指南.md","raw":"---\ntitle: Nginx入门指南\ndate: 2018-05-25 22:43:28\ntags:\n---\n### 基本操作指令\n\n- nginx -t 测试配置是否正确\n- nginx -s reload 加载最新配置\n- nginx -s stop 立即停止\n- nginx  -s quit 优雅停止（完成当前任务后再退出）\n- nginx -s reopen 重新打开日志\n\n\n\n#### Nginx 全局配置\n\nworker_processes  工作进程数 取决于CPU数量x核数\n\nevent: worker_connections  最大进程数\n\n##### 配置虚拟主机\n\n- 基于域名的虚拟主机\n\n- ```objective-c\n  server {\n      listen 80;#监听端口号\n      server_name mantou360.com;#监听域名 如有多个空格隔开\n          location / {\n          root html/dddd;\n          index index.html;\n      }\n  }\n  ```\n\n只用nginx -s reload 就可以加载新的配置了。如果是PHP页面需要单独配置解析的location\n\n##### 日志管理\n\n#### nginx的反向代理\n\n> 用正则表达式来匹配图片请求到另外一台服务器上去\n>\n> ```object \n> location ~ \\.(jpeg|jpg|png|gif)$ {\n>     proxy_pass http://baidu.com:80;\n> \tproxy_set_header  X-Forwarded-For $remote_addr;#把用户的真实ip带到被反向代理的服务器。服务器就能收到用户的真实ip了。\n> }\n>\n> ```\n\nnginx -s reload 就可以了\n\n","slug":"2018-Nginx入门指南","published":1,"updated":"2018-05-25T14:44:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9ln000xrb0ueuo72ajf","content":"<h3 id=\"基本操作指令\"><a href=\"#基本操作指令\" class=\"headerlink\" title=\"基本操作指令\"></a>基本操作指令</h3><ul>\n<li>nginx -t 测试配置是否正确</li>\n<li>nginx -s reload 加载最新配置</li>\n<li>nginx -s stop 立即停止</li>\n<li>nginx  -s quit 优雅停止（完成当前任务后再退出）</li>\n<li>nginx -s reopen 重新打开日志</li>\n</ul>\n<h4 id=\"Nginx-全局配置\"><a href=\"#Nginx-全局配置\" class=\"headerlink\" title=\"Nginx 全局配置\"></a>Nginx 全局配置</h4><p>worker_processes  工作进程数 取决于CPU数量x核数</p>\n<p>event: worker_connections  最大进程数</p>\n<h5 id=\"配置虚拟主机\"><a href=\"#配置虚拟主机\" class=\"headerlink\" title=\"配置虚拟主机\"></a>配置虚拟主机</h5><ul>\n<li><p>基于域名的虚拟主机</p>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;#监听端口号</span><br><span class=\"line\">    server_name mantou360.com;#监听域名 如有多个空格隔开</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">        root html/dddd;</span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>只用nginx -s reload 就可以加载新的配置了。如果是PHP页面需要单独配置解析的location</p>\n<h5 id=\"日志管理\"><a href=\"#日志管理\" class=\"headerlink\" title=\"日志管理\"></a>日志管理</h5><h4 id=\"nginx的反向代理\"><a href=\"#nginx的反向代理\" class=\"headerlink\" title=\"nginx的反向代理\"></a>nginx的反向代理</h4><blockquote>\n<p>用正则表达式来匹配图片请求到另外一台服务器上去</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; location ~ \\.(jpeg|jpg|png|gif)$ &#123;</span><br><span class=\"line\">&gt;     proxy_pass http://baidu.com:80;</span><br><span class=\"line\">&gt; \tproxy_set_header  X-Forwarded-For $remote_addr;#把用户的真实ip带到被反向代理的服务器。服务器就能收到用户的真实ip了。</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>nginx -s reload 就可以了</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"基本操作指令\"><a href=\"#基本操作指令\" class=\"headerlink\" title=\"基本操作指令\"></a>基本操作指令</h3><ul>\n<li>nginx -t 测试配置是否正确</li>\n<li>nginx -s reload 加载最新配置</li>\n<li>nginx -s stop 立即停止</li>\n<li>nginx  -s quit 优雅停止（完成当前任务后再退出）</li>\n<li>nginx -s reopen 重新打开日志</li>\n</ul>\n<h4 id=\"Nginx-全局配置\"><a href=\"#Nginx-全局配置\" class=\"headerlink\" title=\"Nginx 全局配置\"></a>Nginx 全局配置</h4><p>worker_processes  工作进程数 取决于CPU数量x核数</p>\n<p>event: worker_connections  最大进程数</p>\n<h5 id=\"配置虚拟主机\"><a href=\"#配置虚拟主机\" class=\"headerlink\" title=\"配置虚拟主机\"></a>配置虚拟主机</h5><ul>\n<li><p>基于域名的虚拟主机</p>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;#监听端口号</span><br><span class=\"line\">    server_name mantou360.com;#监听域名 如有多个空格隔开</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">        root html/dddd;</span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>只用nginx -s reload 就可以加载新的配置了。如果是PHP页面需要单独配置解析的location</p>\n<h5 id=\"日志管理\"><a href=\"#日志管理\" class=\"headerlink\" title=\"日志管理\"></a>日志管理</h5><h4 id=\"nginx的反向代理\"><a href=\"#nginx的反向代理\" class=\"headerlink\" title=\"nginx的反向代理\"></a>nginx的反向代理</h4><blockquote>\n<p>用正则表达式来匹配图片请求到另外一台服务器上去</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; location ~ \\.(jpeg|jpg|png|gif)$ &#123;</span><br><span class=\"line\">&gt;     proxy_pass http://baidu.com:80;</span><br><span class=\"line\">&gt; \tproxy_set_header  X-Forwarded-For $remote_addr;#把用户的真实ip带到被反向代理的服务器。服务器就能收到用户的真实ip了。</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>nginx -s reload 就可以了</p>\n"},{"title":"Git-Rebase-I-命令使用详解","date":"2018-07-25T16:01:53.000Z","_content":"###  git 高级功能使用详解\n\n- rebase -i  提供交互式的 rebase 方法\n\n  **git rebase -i HEAD~4**\n\n  的含义就是在当前位置取前面的4个提交内容创建一个新的分支：提供可视化的方式 用鼠标拖拽排序通过**pick**按钮来来删除某个提交\n<!--more-->\n\n  提交前![5b58389e41ef7.png](https://i.loli.net/2018/07/25/5b58389e41ef7.png)\n\n提交选择并排序\n\n![5b5838d4aedf6.png](https://i.loli.net/2018/07/25/5b5838d4aedf6.png)\n\n提交后\n\n![5b583904d30fe.png](https://i.loli.net/2018/07/25/5b583904d30fe.png)","source":"_posts/2018/git-rebase-i-命令使用详解.md","raw":"---\ntitle: git-rebase-i-命令使用详解\ndate: 2018-07-26 00:01:53\ntags:\n---\n###  git 高级功能使用详解\n\n- rebase -i  提供交互式的 rebase 方法\n\n  **git rebase -i HEAD~4**\n\n  的含义就是在当前位置取前面的4个提交内容创建一个新的分支：提供可视化的方式 用鼠标拖拽排序通过**pick**按钮来来删除某个提交\n<!--more-->\n\n  提交前![5b58389e41ef7.png](https://i.loli.net/2018/07/25/5b58389e41ef7.png)\n\n提交选择并排序\n\n![5b5838d4aedf6.png](https://i.loli.net/2018/07/25/5b5838d4aedf6.png)\n\n提交后\n\n![5b583904d30fe.png](https://i.loli.net/2018/07/25/5b583904d30fe.png)","slug":"2018-git-rebase-i-命令使用详解","published":1,"updated":"2018-07-26T06:21:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9lp000zrb0ukxy0q45y","content":"<h3 id=\"git-高级功能使用详解\"><a href=\"#git-高级功能使用详解\" class=\"headerlink\" title=\"git 高级功能使用详解\"></a>git 高级功能使用详解</h3><ul>\n<li><p>rebase -i  提供交互式的 rebase 方法</p>\n<p><strong>git rebase -i HEAD~4</strong></p>\n<p>的含义就是在当前位置取前面的4个提交内容创建一个新的分支：提供可视化的方式 用鼠标拖拽排序通过<strong>pick</strong>按钮来来删除某个提交</p>\n<a id=\"more\"></a>\n<p>提交前<img src=\"https://i.loli.net/2018/07/25/5b58389e41ef7.png\" alt=\"5b58389e41ef7.png\"></p>\n</li>\n</ul>\n<p>提交选择并排序</p>\n<p><img src=\"https://i.loli.net/2018/07/25/5b5838d4aedf6.png\" alt=\"5b5838d4aedf6.png\"></p>\n<p>提交后</p>\n<p><img src=\"https://i.loli.net/2018/07/25/5b583904d30fe.png\" alt=\"5b583904d30fe.png\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"git-高级功能使用详解\"><a href=\"#git-高级功能使用详解\" class=\"headerlink\" title=\"git 高级功能使用详解\"></a>git 高级功能使用详解</h3><ul>\n<li><p>rebase -i  提供交互式的 rebase 方法</p>\n<p><strong>git rebase -i HEAD~4</strong></p>\n<p>的含义就是在当前位置取前面的4个提交内容创建一个新的分支：提供可视化的方式 用鼠标拖拽排序通过<strong>pick</strong>按钮来来删除某个提交</p>","more":"<p>提交前<img src=\"https://i.loli.net/2018/07/25/5b58389e41ef7.png\" alt=\"5b58389e41ef7.png\"></p>\n</li>\n</ul>\n<p>提交选择并排序</p>\n<p><img src=\"https://i.loli.net/2018/07/25/5b5838d4aedf6.png\" alt=\"5b5838d4aedf6.png\"></p>\n<p>提交后</p>\n<p><img src=\"https://i.loli.net/2018/07/25/5b583904d30fe.png\" alt=\"5b583904d30fe.png\"></p>"},{"title":"Git修改远端地址","date":"2018-07-26T06:37:29.000Z","_content":"\n> 在使用git的时候我们难免会修改或者添加错了远端的URL 这个时候就需要我们重新删除之后再添加这里有三种方法\n\n### 1.直接修改\n\ngit remote set-url origin [url]\n\n\n\n### 2.先删除在修改\n\n```  \n//删除\ngit remote rm origin\n//添加\ngit remote add origin [url]\n```\n\n<!--more-->\n\n### 3.简单粗暴 直接编辑config文件\n","source":"_posts/2018/git修改远端地址.md","raw":"---\ntitle: git修改远端地址\ndate: 2018-07-26 14:37:29\ntags: git\n---\n\n> 在使用git的时候我们难免会修改或者添加错了远端的URL 这个时候就需要我们重新删除之后再添加这里有三种方法\n\n### 1.直接修改\n\ngit remote set-url origin [url]\n\n\n\n### 2.先删除在修改\n\n```  \n//删除\ngit remote rm origin\n//添加\ngit remote add origin [url]\n```\n\n<!--more-->\n\n### 3.简单粗暴 直接编辑config文件\n","slug":"2018-git修改远端地址","published":1,"updated":"2018-07-26T06:43:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9lr0012rb0ujj6q7shj","content":"<blockquote>\n<p>在使用git的时候我们难免会修改或者添加错了远端的URL 这个时候就需要我们重新删除之后再添加这里有三种方法</p>\n</blockquote>\n<h3 id=\"1-直接修改\"><a href=\"#1-直接修改\" class=\"headerlink\" title=\"1.直接修改\"></a>1.直接修改</h3><p>git remote set-url origin [url]</p>\n<h3 id=\"2-先删除在修改\"><a href=\"#2-先删除在修改\" class=\"headerlink\" title=\"2.先删除在修改\"></a>2.先删除在修改</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除</span><br><span class=\"line\">git remote rm origin</span><br><span class=\"line\">//添加</span><br><span class=\"line\">git remote add origin [url]</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"3-简单粗暴-直接编辑config文件\"><a href=\"#3-简单粗暴-直接编辑config文件\" class=\"headerlink\" title=\"3.简单粗暴 直接编辑config文件\"></a>3.简单粗暴 直接编辑config文件</h3>","site":{"data":{}},"excerpt":"<blockquote>\n<p>在使用git的时候我们难免会修改或者添加错了远端的URL 这个时候就需要我们重新删除之后再添加这里有三种方法</p>\n</blockquote>\n<h3 id=\"1-直接修改\"><a href=\"#1-直接修改\" class=\"headerlink\" title=\"1.直接修改\"></a>1.直接修改</h3><p>git remote set-url origin [url]</p>\n<h3 id=\"2-先删除在修改\"><a href=\"#2-先删除在修改\" class=\"headerlink\" title=\"2.先删除在修改\"></a>2.先删除在修改</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除</span><br><span class=\"line\">git remote rm origin</span><br><span class=\"line\">//添加</span><br><span class=\"line\">git remote add origin [url]</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"3-简单粗暴-直接编辑config文件\"><a href=\"#3-简单粗暴-直接编辑config文件\" class=\"headerlink\" title=\"3.简单粗暴 直接编辑config文件\"></a>3.简单粗暴 直接编辑config文件</h3>"},{"title":"利用国内服务器进行Shadowsocks中转","date":"2018-07-30T06:03:42.000Z","_content":"> 说一下背景。本来是有两台香港的服务器的。但是不知道具体是什么原因。某些香港的ip段被youtube封了。\n- 这也不是个例讨论在[v2ex](https://www.v2ex.com/t/368608#reply85)上\n现在由于在国内洛杉矶的服务器带宽本来很高。但是网速还是很慢。于是乎就想着中转下。虽然我走了就很多的弯路。但是其实回头想想还是很简单的。\n主要就是两行代码的事儿。 \n\n*这里介绍的是centos6下的操作*\n- 安装socat 优点儿:支持UDP and TCP 端口转发。\n``` \nyum install -y socat ```\n\n#### Socat使用\n\n```\n  nohup socat TCP4-LISTEN:2333,reuseaddr,fork TCP4:233.233.233.233:6666 >> /root/socat.log 2>&1 & ```\n*nohup* 是后台运行\n* TCP4-LISTEN:2333*此处的端口是转发的服务器端口注意不是shadowsocks 服务器。后面的是shadowsocks服务器ipv4地址+ 端口号\n\n* fork TCP4:233.233.233.233:6666*这里需要填写的就是被转发的服务器的ip和端口也就是ss的sever_ip 和sever_port\n\n*/root/socat.log 2>&1 &*转发的日志记录 我就是看了日志发现自己的端口已经被占用了。另外需要注意的是ucloud的服务器需要在网站上配置防火墙才行。放行对应端口。\n\n** 转发UDP很简单，只要把 TCP4 改成 UDP4 就行了！**\n\n### 停止转发\n\n```  \nps -ef | grep socat\n#输入上面的命令找到socat程序的PID，然后用下面的命令KILL掉这个PID进程（PID是个数字，自己替换下面的\"pid\"）。\nkill -9 pid\n```\n\n### 卸载\n\n``` \nyum remove socat\n\n```\n\n### 防火墙\n\n####### 防火墙是最重要的一切问题其实都是防火墙的原因。\n\n如果你的是 centos7以上没有 iptable配置防火墙看[这里](http://linux.it.net.cn/CentOS/fast/2014/1102/7635.html)\n\n\n### 开机启动 \n\n还是CentOS \n```\nchmod +x /etc/rc.d/rc.local\nvi /etc/rc.d/rc.local \n```\n\n这篇文章只是做个记录。怕以后忘记。很感谢网上的大神们的分享。\n装逼就到这里。看详细原文的[走起](https://doub.io/ss-jc40/)(小心墙撞头。😄)","source":"_posts/2018/利用国内服务器进行Shadowsocks-中转.md","raw":"---\ntitle: 利用国内服务器进行Shadowsocks中转\ndate: 2018-07-30 14:03:42\ntags: ss\n---\n> 说一下背景。本来是有两台香港的服务器的。但是不知道具体是什么原因。某些香港的ip段被youtube封了。\n- 这也不是个例讨论在[v2ex](https://www.v2ex.com/t/368608#reply85)上\n现在由于在国内洛杉矶的服务器带宽本来很高。但是网速还是很慢。于是乎就想着中转下。虽然我走了就很多的弯路。但是其实回头想想还是很简单的。\n主要就是两行代码的事儿。 \n\n*这里介绍的是centos6下的操作*\n- 安装socat 优点儿:支持UDP and TCP 端口转发。\n``` \nyum install -y socat ```\n\n#### Socat使用\n\n```\n  nohup socat TCP4-LISTEN:2333,reuseaddr,fork TCP4:233.233.233.233:6666 >> /root/socat.log 2>&1 & ```\n*nohup* 是后台运行\n* TCP4-LISTEN:2333*此处的端口是转发的服务器端口注意不是shadowsocks 服务器。后面的是shadowsocks服务器ipv4地址+ 端口号\n\n* fork TCP4:233.233.233.233:6666*这里需要填写的就是被转发的服务器的ip和端口也就是ss的sever_ip 和sever_port\n\n*/root/socat.log 2>&1 &*转发的日志记录 我就是看了日志发现自己的端口已经被占用了。另外需要注意的是ucloud的服务器需要在网站上配置防火墙才行。放行对应端口。\n\n** 转发UDP很简单，只要把 TCP4 改成 UDP4 就行了！**\n\n### 停止转发\n\n```  \nps -ef | grep socat\n#输入上面的命令找到socat程序的PID，然后用下面的命令KILL掉这个PID进程（PID是个数字，自己替换下面的\"pid\"）。\nkill -9 pid\n```\n\n### 卸载\n\n``` \nyum remove socat\n\n```\n\n### 防火墙\n\n####### 防火墙是最重要的一切问题其实都是防火墙的原因。\n\n如果你的是 centos7以上没有 iptable配置防火墙看[这里](http://linux.it.net.cn/CentOS/fast/2014/1102/7635.html)\n\n\n### 开机启动 \n\n还是CentOS \n```\nchmod +x /etc/rc.d/rc.local\nvi /etc/rc.d/rc.local \n```\n\n这篇文章只是做个记录。怕以后忘记。很感谢网上的大神们的分享。\n装逼就到这里。看详细原文的[走起](https://doub.io/ss-jc40/)(小心墙撞头。😄)","slug":"2018-利用国内服务器进行Shadowsocks-中转","published":1,"updated":"2018-07-30T06:25:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9lu0014rb0u16bihm0n","content":"<blockquote>\n<p>说一下背景。本来是有两台香港的服务器的。但是不知道具体是什么原因。某些香港的ip段被youtube封了。</p>\n<ul>\n<li>这也不是个例讨论在<a href=\"https://www.v2ex.com/t/368608#reply85\" target=\"_blank\" rel=\"noopener\">v2ex</a>上<br>现在由于在国内洛杉矶的服务器带宽本来很高。但是网速还是很慢。于是乎就想着中转下。虽然我走了就很多的弯路。但是其实回头想想还是很简单的。<br>主要就是两行代码的事儿。 </li>\n</ul>\n</blockquote>\n<p><em>这里介绍的是centos6下的操作</em></p>\n<ul>\n<li>安装socat 优点儿:支持UDP and TCP 端口转发。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y socat</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Socat使用\"><a href=\"#Socat使用\" class=\"headerlink\" title=\"Socat使用\"></a>Socat使用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup socat TCP4-LISTEN:2333,reuseaddr,fork TCP4:233.233.233.233:6666 &gt;&gt; /root/socat.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n<p><em>nohup</em> 是后台运行</p>\n<ul>\n<li><p>TCP4-LISTEN:2333*此处的端口是转发的服务器端口注意不是shadowsocks 服务器。后面的是shadowsocks服务器ipv4地址+ 端口号</p>\n</li>\n<li><p>fork TCP4:233.233.233.233:6666*这里需要填写的就是被转发的服务器的ip和端口也就是ss的sever_ip 和sever_port</p>\n</li>\n</ul>\n<p><em>/root/socat.log 2&gt;&amp;1 &amp;</em>转发的日志记录 我就是看了日志发现自己的端口已经被占用了。另外需要注意的是ucloud的服务器需要在网站上配置防火墙才行。放行对应端口。</p>\n<p><strong> 转发UDP很简单，只要把 TCP4 改成 UDP4 就行了！</strong></p>\n<h3 id=\"停止转发\"><a href=\"#停止转发\" class=\"headerlink\" title=\"停止转发\"></a>停止转发</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep socat</span><br><span class=\"line\">#输入上面的命令找到socat程序的PID，然后用下面的命令KILL掉这个PID进程（PID是个数字，自己替换下面的&quot;pid&quot;）。</span><br><span class=\"line\">kill -9 pid</span><br></pre></td></tr></table></figure>\n<h3 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove socat</span><br></pre></td></tr></table></figure>\n<h3 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h3><p>####### 防火墙是最重要的一切问题其实都是防火墙的原因。</p>\n<p>如果你的是 centos7以上没有 iptable配置防火墙看<a href=\"http://linux.it.net.cn/CentOS/fast/2014/1102/7635.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h3 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h3><p>还是CentOS<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/rc.d/rc.local</span><br><span class=\"line\">vi /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure></p>\n<p>这篇文章只是做个记录。怕以后忘记。很感谢网上的大神们的分享。<br>装逼就到这里。看详细原文的<a href=\"https://doub.io/ss-jc40/\" target=\"_blank\" rel=\"noopener\">走起</a>(小心墙撞头。😄)</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>说一下背景。本来是有两台香港的服务器的。但是不知道具体是什么原因。某些香港的ip段被youtube封了。</p>\n<ul>\n<li>这也不是个例讨论在<a href=\"https://www.v2ex.com/t/368608#reply85\" target=\"_blank\" rel=\"noopener\">v2ex</a>上<br>现在由于在国内洛杉矶的服务器带宽本来很高。但是网速还是很慢。于是乎就想着中转下。虽然我走了就很多的弯路。但是其实回头想想还是很简单的。<br>主要就是两行代码的事儿。 </li>\n</ul>\n</blockquote>\n<p><em>这里介绍的是centos6下的操作</em></p>\n<ul>\n<li>安装socat 优点儿:支持UDP and TCP 端口转发。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y socat</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Socat使用\"><a href=\"#Socat使用\" class=\"headerlink\" title=\"Socat使用\"></a>Socat使用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup socat TCP4-LISTEN:2333,reuseaddr,fork TCP4:233.233.233.233:6666 &gt;&gt; /root/socat.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n<p><em>nohup</em> 是后台运行</p>\n<ul>\n<li><p>TCP4-LISTEN:2333*此处的端口是转发的服务器端口注意不是shadowsocks 服务器。后面的是shadowsocks服务器ipv4地址+ 端口号</p>\n</li>\n<li><p>fork TCP4:233.233.233.233:6666*这里需要填写的就是被转发的服务器的ip和端口也就是ss的sever_ip 和sever_port</p>\n</li>\n</ul>\n<p><em>/root/socat.log 2&gt;&amp;1 &amp;</em>转发的日志记录 我就是看了日志发现自己的端口已经被占用了。另外需要注意的是ucloud的服务器需要在网站上配置防火墙才行。放行对应端口。</p>\n<p><strong> 转发UDP很简单，只要把 TCP4 改成 UDP4 就行了！</strong></p>\n<h3 id=\"停止转发\"><a href=\"#停止转发\" class=\"headerlink\" title=\"停止转发\"></a>停止转发</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep socat</span><br><span class=\"line\">#输入上面的命令找到socat程序的PID，然后用下面的命令KILL掉这个PID进程（PID是个数字，自己替换下面的&quot;pid&quot;）。</span><br><span class=\"line\">kill -9 pid</span><br></pre></td></tr></table></figure>\n<h3 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove socat</span><br></pre></td></tr></table></figure>\n<h3 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h3><p>####### 防火墙是最重要的一切问题其实都是防火墙的原因。</p>\n<p>如果你的是 centos7以上没有 iptable配置防火墙看<a href=\"http://linux.it.net.cn/CentOS/fast/2014/1102/7635.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h3 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h3><p>还是CentOS<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/rc.d/rc.local</span><br><span class=\"line\">vi /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure></p>\n<p>这篇文章只是做个记录。怕以后忘记。很感谢网上的大神们的分享。<br>装逼就到这里。看详细原文的<a href=\"https://doub.io/ss-jc40/\" target=\"_blank\" rel=\"noopener\">走起</a>(小心墙撞头。😄)</p>\n"},{"title":"正确创建Pch文件","date":"2018-08-17T07:15:35.000Z","_content":">平时经常会在项目的初期创建pch文件这里我们详细的总结一下整个创建过程加深一下记忆\n\n### 1.创建pch文件 \n![5b7676f0d5e7d.png](https://i.loli.net/2018/08/17/5b7676f0d5e7d.png)\n\n\n### 2.打开预编译\n- 点击target 选择build settings \n- 搜索prefix\n- 设置precompile Prefix Header 为YES\n- ![5b767949e8a2a.png](https://i.loli.net/2018/08/17/5b767949e8a2a.png)\n\n### 3.添加pch路径\n未添加路径前是这样的\n![5b767e2a97571.png](https://i.loli.net/2018/08/17/5b767e2a97571.png)\n我们直接把项目工程中的pch拖拽到这个位置\n![5b767ed00f1ce.png](https://i.loli.net/2018/08/17/5b767ed00f1ce.png)\n>这里显示的就是绝对路径，但是我们的工程换个地方也是要运行的所以需要的是相对路径我们对比工程目录把工程的根目录替换为$(SRCROOT)/即可\n\n替换之后的路径是这样的\n![5b767f6e72a39.png](https://i.loli.net/2018/08/17/5b767f6e72a39.png)\n编译一下就成功了，我们可以随意的导入自己常用的类库和文件了。\nok over,是不是很easy.","source":"_posts/2018/正确创建pch文件.md","raw":"---\ntitle: 正确创建pch文件\ndate: 2018-08-17 15:15:35\ntags:\n---\n>平时经常会在项目的初期创建pch文件这里我们详细的总结一下整个创建过程加深一下记忆\n\n### 1.创建pch文件 \n![5b7676f0d5e7d.png](https://i.loli.net/2018/08/17/5b7676f0d5e7d.png)\n\n\n### 2.打开预编译\n- 点击target 选择build settings \n- 搜索prefix\n- 设置precompile Prefix Header 为YES\n- ![5b767949e8a2a.png](https://i.loli.net/2018/08/17/5b767949e8a2a.png)\n\n### 3.添加pch路径\n未添加路径前是这样的\n![5b767e2a97571.png](https://i.loli.net/2018/08/17/5b767e2a97571.png)\n我们直接把项目工程中的pch拖拽到这个位置\n![5b767ed00f1ce.png](https://i.loli.net/2018/08/17/5b767ed00f1ce.png)\n>这里显示的就是绝对路径，但是我们的工程换个地方也是要运行的所以需要的是相对路径我们对比工程目录把工程的根目录替换为$(SRCROOT)/即可\n\n替换之后的路径是这样的\n![5b767f6e72a39.png](https://i.loli.net/2018/08/17/5b767f6e72a39.png)\n编译一下就成功了，我们可以随意的导入自己常用的类库和文件了。\nok over,是不是很easy.","slug":"2018-正确创建pch文件","published":1,"updated":"2018-08-17T07:56:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9lw0016rb0ubnz6uk2t","content":"<blockquote>\n<p>平时经常会在项目的初期创建pch文件这里我们详细的总结一下整个创建过程加深一下记忆</p>\n</blockquote>\n<h3 id=\"1-创建pch文件\"><a href=\"#1-创建pch文件\" class=\"headerlink\" title=\"1.创建pch文件\"></a>1.创建pch文件</h3><p><img src=\"https://i.loli.net/2018/08/17/5b7676f0d5e7d.png\" alt=\"5b7676f0d5e7d.png\"></p>\n<h3 id=\"2-打开预编译\"><a href=\"#2-打开预编译\" class=\"headerlink\" title=\"2.打开预编译\"></a>2.打开预编译</h3><ul>\n<li>点击target 选择build settings </li>\n<li>搜索prefix</li>\n<li>设置precompile Prefix Header 为YES</li>\n<li><img src=\"https://i.loli.net/2018/08/17/5b767949e8a2a.png\" alt=\"5b767949e8a2a.png\"></li>\n</ul>\n<h3 id=\"3-添加pch路径\"><a href=\"#3-添加pch路径\" class=\"headerlink\" title=\"3.添加pch路径\"></a>3.添加pch路径</h3><p>未添加路径前是这样的<br><img src=\"https://i.loli.net/2018/08/17/5b767e2a97571.png\" alt=\"5b767e2a97571.png\"><br>我们直接把项目工程中的pch拖拽到这个位置<br><img src=\"https://i.loli.net/2018/08/17/5b767ed00f1ce.png\" alt=\"5b767ed00f1ce.png\"></p>\n<blockquote>\n<p>这里显示的就是绝对路径，但是我们的工程换个地方也是要运行的所以需要的是相对路径我们对比工程目录把工程的根目录替换为$(SRCROOT)/即可</p>\n</blockquote>\n<p>替换之后的路径是这样的<br><img src=\"https://i.loli.net/2018/08/17/5b767f6e72a39.png\" alt=\"5b767f6e72a39.png\"><br>编译一下就成功了，我们可以随意的导入自己常用的类库和文件了。<br>ok over,是不是很easy.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>平时经常会在项目的初期创建pch文件这里我们详细的总结一下整个创建过程加深一下记忆</p>\n</blockquote>\n<h3 id=\"1-创建pch文件\"><a href=\"#1-创建pch文件\" class=\"headerlink\" title=\"1.创建pch文件\"></a>1.创建pch文件</h3><p><img src=\"https://i.loli.net/2018/08/17/5b7676f0d5e7d.png\" alt=\"5b7676f0d5e7d.png\"></p>\n<h3 id=\"2-打开预编译\"><a href=\"#2-打开预编译\" class=\"headerlink\" title=\"2.打开预编译\"></a>2.打开预编译</h3><ul>\n<li>点击target 选择build settings </li>\n<li>搜索prefix</li>\n<li>设置precompile Prefix Header 为YES</li>\n<li><img src=\"https://i.loli.net/2018/08/17/5b767949e8a2a.png\" alt=\"5b767949e8a2a.png\"></li>\n</ul>\n<h3 id=\"3-添加pch路径\"><a href=\"#3-添加pch路径\" class=\"headerlink\" title=\"3.添加pch路径\"></a>3.添加pch路径</h3><p>未添加路径前是这样的<br><img src=\"https://i.loli.net/2018/08/17/5b767e2a97571.png\" alt=\"5b767e2a97571.png\"><br>我们直接把项目工程中的pch拖拽到这个位置<br><img src=\"https://i.loli.net/2018/08/17/5b767ed00f1ce.png\" alt=\"5b767ed00f1ce.png\"></p>\n<blockquote>\n<p>这里显示的就是绝对路径，但是我们的工程换个地方也是要运行的所以需要的是相对路径我们对比工程目录把工程的根目录替换为$(SRCROOT)/即可</p>\n</blockquote>\n<p>替换之后的路径是这样的<br><img src=\"https://i.loli.net/2018/08/17/5b767f6e72a39.png\" alt=\"5b767f6e72a39.png\"><br>编译一下就成功了，我们可以随意的导入自己常用的类库和文件了。<br>ok over,是不是很easy.</p>\n"},{"title":"Gitlab的安装，升级，以及汉化操作说明","date":"2016-12-25T15:28:22.000Z","_content":"\n\n# Gitlab的安装，升级，以及汉化操作说明\n\n注：仅指在CentOS6.5的64位版本上，进行Gitlab的相关安装，升级，汉化说明。\n\n<!--more-->\n\n## Gitlab的安装\n\n1. 按顺序执行以下命令：\n\n    sudo yum install curl openssh-server openssh-clients postfix cronie\n    \n    sudo service postfix start\n    \n    sudo chkconfig postfix on\n    \n    sudo lokkit -s http -s ssh\n\n2. 从清华镜像上下载rpm安装包。[下载页面](https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6/)\n\n3. 在服务器上的安装包所在目录执行安装命令。比如：8.14.0版本\n\n    sudo rpm -i gitlab-ce-8.14.0-ce.0.el6.x86_64.rpm\n\n4. 执行配置命令。\n\n    sudo gitlab-ctl reconfigure\n\n完成上述步骤即实现Gitlab的原版安装。\n\n注：如果服务器有专门的数据硬盘，用于存储版本库，请将该硬盘挂载在目录/var/opt下。并请在配置文件/etc/fstab中增加服务器启动自动挂载该数据盘。\n\n## Gitlab的升级\n\n1. 从清华镜像上下载rpm安装包。\n\n2. 停止unicorn、sidekiq：\n\n    sudo gitlab-ctl stop unicorn\n    \n    sudo gitlab-ctl stop sidekiq\n\n3. 备份数据：\n\n    sudo gitlab-rake gitlab:backup:create\n\n4. 升级安装新的rpm包：\n\n    sudo rpm -Uvh gitlab-ce-8.14.0-ce.0.el6.x86_64.rpm\n\n5. 执行配置命令。\n\n    sudo gitlab-ctl reconfigure\n\n完成上述步骤即实现Gitlab的升级。\n\n## Gitlab的汉化\n\n1. 下载汉化包后上传服务器后解压。[下载链接](https://github.com/marbleqi/gitlab-ce-zh/archive/8-14-0-zh-rel.zip)\n\n2. 停止Gitlab服务。\n\n    sudo gitlab-ctl stop\n    \n3. 备份服务器上的/opt/gitlab/embedded/service/gitlab-rails目录。\n注：该目录下的内容主要是web应用部分，也是当前项目仓库的起始版本，也是汉化包要覆盖的目录。\n    \n4. 将解压后的汉化包覆盖服务器上的/opt/gitlab/embedded/service/gitlab-rails目录。\n\n5. 启动Gitlab服务。\n\n    sudo gitlab-ctl start\n\n6. 重新执行配置命令。\n\n    sudo gitlab-ctl reconfigure\n\n完成上述步骤即实现汉化。","source":"_posts/2016/12月/Gitlab的安装升级以及汉化操作说明.md","raw":"---\ntitle: Gitlab的安装，升级，以及汉化操作说明\ndate: 2016-12-25 23:28:22\n\ntags: gitlab\n---\n\n\n# Gitlab的安装，升级，以及汉化操作说明\n\n注：仅指在CentOS6.5的64位版本上，进行Gitlab的相关安装，升级，汉化说明。\n\n<!--more-->\n\n## Gitlab的安装\n\n1. 按顺序执行以下命令：\n\n    sudo yum install curl openssh-server openssh-clients postfix cronie\n    \n    sudo service postfix start\n    \n    sudo chkconfig postfix on\n    \n    sudo lokkit -s http -s ssh\n\n2. 从清华镜像上下载rpm安装包。[下载页面](https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6/)\n\n3. 在服务器上的安装包所在目录执行安装命令。比如：8.14.0版本\n\n    sudo rpm -i gitlab-ce-8.14.0-ce.0.el6.x86_64.rpm\n\n4. 执行配置命令。\n\n    sudo gitlab-ctl reconfigure\n\n完成上述步骤即实现Gitlab的原版安装。\n\n注：如果服务器有专门的数据硬盘，用于存储版本库，请将该硬盘挂载在目录/var/opt下。并请在配置文件/etc/fstab中增加服务器启动自动挂载该数据盘。\n\n## Gitlab的升级\n\n1. 从清华镜像上下载rpm安装包。\n\n2. 停止unicorn、sidekiq：\n\n    sudo gitlab-ctl stop unicorn\n    \n    sudo gitlab-ctl stop sidekiq\n\n3. 备份数据：\n\n    sudo gitlab-rake gitlab:backup:create\n\n4. 升级安装新的rpm包：\n\n    sudo rpm -Uvh gitlab-ce-8.14.0-ce.0.el6.x86_64.rpm\n\n5. 执行配置命令。\n\n    sudo gitlab-ctl reconfigure\n\n完成上述步骤即实现Gitlab的升级。\n\n## Gitlab的汉化\n\n1. 下载汉化包后上传服务器后解压。[下载链接](https://github.com/marbleqi/gitlab-ce-zh/archive/8-14-0-zh-rel.zip)\n\n2. 停止Gitlab服务。\n\n    sudo gitlab-ctl stop\n    \n3. 备份服务器上的/opt/gitlab/embedded/service/gitlab-rails目录。\n注：该目录下的内容主要是web应用部分，也是当前项目仓库的起始版本，也是汉化包要覆盖的目录。\n    \n4. 将解压后的汉化包覆盖服务器上的/opt/gitlab/embedded/service/gitlab-rails目录。\n\n5. 启动Gitlab服务。\n\n    sudo gitlab-ctl start\n\n6. 重新执行配置命令。\n\n    sudo gitlab-ctl reconfigure\n\n完成上述步骤即实现汉化。","slug":"2016-12月-Gitlab的安装升级以及汉化操作说明","published":1,"updated":"2017-07-12T15:52:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9of001arb0uzg7vdrz3","content":"<h1 id=\"Gitlab的安装，升级，以及汉化操作说明\"><a href=\"#Gitlab的安装，升级，以及汉化操作说明\" class=\"headerlink\" title=\"Gitlab的安装，升级，以及汉化操作说明\"></a>Gitlab的安装，升级，以及汉化操作说明</h1><p>注：仅指在CentOS6.5的64位版本上，进行Gitlab的相关安装，升级，汉化说明。</p>\n<a id=\"more\"></a>\n<h2 id=\"Gitlab的安装\"><a href=\"#Gitlab的安装\" class=\"headerlink\" title=\"Gitlab的安装\"></a>Gitlab的安装</h2><ol>\n<li><p>按顺序执行以下命令：</p>\n<p> sudo yum install curl openssh-server openssh-clients postfix cronie</p>\n<p> sudo service postfix start</p>\n<p> sudo chkconfig postfix on</p>\n<p> sudo lokkit -s http -s ssh</p>\n</li>\n<li><p>从清华镜像上下载rpm安装包。<a href=\"https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6/\" target=\"_blank\" rel=\"noopener\">下载页面</a></p>\n</li>\n<li><p>在服务器上的安装包所在目录执行安装命令。比如：8.14.0版本</p>\n<p> sudo rpm -i gitlab-ce-8.14.0-ce.0.el6.x86_64.rpm</p>\n</li>\n<li><p>执行配置命令。</p>\n<p> sudo gitlab-ctl reconfigure</p>\n</li>\n</ol>\n<p>完成上述步骤即实现Gitlab的原版安装。</p>\n<p>注：如果服务器有专门的数据硬盘，用于存储版本库，请将该硬盘挂载在目录/var/opt下。并请在配置文件/etc/fstab中增加服务器启动自动挂载该数据盘。</p>\n<h2 id=\"Gitlab的升级\"><a href=\"#Gitlab的升级\" class=\"headerlink\" title=\"Gitlab的升级\"></a>Gitlab的升级</h2><ol>\n<li><p>从清华镜像上下载rpm安装包。</p>\n</li>\n<li><p>停止unicorn、sidekiq：</p>\n<p> sudo gitlab-ctl stop unicorn</p>\n<p> sudo gitlab-ctl stop sidekiq</p>\n</li>\n<li><p>备份数据：</p>\n<p> sudo gitlab-rake gitlab:backup:create</p>\n</li>\n<li><p>升级安装新的rpm包：</p>\n<p> sudo rpm -Uvh gitlab-ce-8.14.0-ce.0.el6.x86_64.rpm</p>\n</li>\n<li><p>执行配置命令。</p>\n<p> sudo gitlab-ctl reconfigure</p>\n</li>\n</ol>\n<p>完成上述步骤即实现Gitlab的升级。</p>\n<h2 id=\"Gitlab的汉化\"><a href=\"#Gitlab的汉化\" class=\"headerlink\" title=\"Gitlab的汉化\"></a>Gitlab的汉化</h2><ol>\n<li><p>下载汉化包后上传服务器后解压。<a href=\"https://github.com/marbleqi/gitlab-ce-zh/archive/8-14-0-zh-rel.zip\" target=\"_blank\" rel=\"noopener\">下载链接</a></p>\n</li>\n<li><p>停止Gitlab服务。</p>\n<p> sudo gitlab-ctl stop</p>\n</li>\n<li><p>备份服务器上的/opt/gitlab/embedded/service/gitlab-rails目录。<br>注：该目录下的内容主要是web应用部分，也是当前项目仓库的起始版本，也是汉化包要覆盖的目录。</p>\n</li>\n<li><p>将解压后的汉化包覆盖服务器上的/opt/gitlab/embedded/service/gitlab-rails目录。</p>\n</li>\n<li><p>启动Gitlab服务。</p>\n<p> sudo gitlab-ctl start</p>\n</li>\n<li><p>重新执行配置命令。</p>\n<p> sudo gitlab-ctl reconfigure</p>\n</li>\n</ol>\n<p>完成上述步骤即实现汉化。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Gitlab的安装，升级，以及汉化操作说明\"><a href=\"#Gitlab的安装，升级，以及汉化操作说明\" class=\"headerlink\" title=\"Gitlab的安装，升级，以及汉化操作说明\"></a>Gitlab的安装，升级，以及汉化操作说明</h1><p>注：仅指在CentOS6.5的64位版本上，进行Gitlab的相关安装，升级，汉化说明。</p>","more":"<h2 id=\"Gitlab的安装\"><a href=\"#Gitlab的安装\" class=\"headerlink\" title=\"Gitlab的安装\"></a>Gitlab的安装</h2><ol>\n<li><p>按顺序执行以下命令：</p>\n<p> sudo yum install curl openssh-server openssh-clients postfix cronie</p>\n<p> sudo service postfix start</p>\n<p> sudo chkconfig postfix on</p>\n<p> sudo lokkit -s http -s ssh</p>\n</li>\n<li><p>从清华镜像上下载rpm安装包。<a href=\"https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6/\" target=\"_blank\" rel=\"noopener\">下载页面</a></p>\n</li>\n<li><p>在服务器上的安装包所在目录执行安装命令。比如：8.14.0版本</p>\n<p> sudo rpm -i gitlab-ce-8.14.0-ce.0.el6.x86_64.rpm</p>\n</li>\n<li><p>执行配置命令。</p>\n<p> sudo gitlab-ctl reconfigure</p>\n</li>\n</ol>\n<p>完成上述步骤即实现Gitlab的原版安装。</p>\n<p>注：如果服务器有专门的数据硬盘，用于存储版本库，请将该硬盘挂载在目录/var/opt下。并请在配置文件/etc/fstab中增加服务器启动自动挂载该数据盘。</p>\n<h2 id=\"Gitlab的升级\"><a href=\"#Gitlab的升级\" class=\"headerlink\" title=\"Gitlab的升级\"></a>Gitlab的升级</h2><ol>\n<li><p>从清华镜像上下载rpm安装包。</p>\n</li>\n<li><p>停止unicorn、sidekiq：</p>\n<p> sudo gitlab-ctl stop unicorn</p>\n<p> sudo gitlab-ctl stop sidekiq</p>\n</li>\n<li><p>备份数据：</p>\n<p> sudo gitlab-rake gitlab:backup:create</p>\n</li>\n<li><p>升级安装新的rpm包：</p>\n<p> sudo rpm -Uvh gitlab-ce-8.14.0-ce.0.el6.x86_64.rpm</p>\n</li>\n<li><p>执行配置命令。</p>\n<p> sudo gitlab-ctl reconfigure</p>\n</li>\n</ol>\n<p>完成上述步骤即实现Gitlab的升级。</p>\n<h2 id=\"Gitlab的汉化\"><a href=\"#Gitlab的汉化\" class=\"headerlink\" title=\"Gitlab的汉化\"></a>Gitlab的汉化</h2><ol>\n<li><p>下载汉化包后上传服务器后解压。<a href=\"https://github.com/marbleqi/gitlab-ce-zh/archive/8-14-0-zh-rel.zip\" target=\"_blank\" rel=\"noopener\">下载链接</a></p>\n</li>\n<li><p>停止Gitlab服务。</p>\n<p> sudo gitlab-ctl stop</p>\n</li>\n<li><p>备份服务器上的/opt/gitlab/embedded/service/gitlab-rails目录。<br>注：该目录下的内容主要是web应用部分，也是当前项目仓库的起始版本，也是汉化包要覆盖的目录。</p>\n</li>\n<li><p>将解压后的汉化包覆盖服务器上的/opt/gitlab/embedded/service/gitlab-rails目录。</p>\n</li>\n<li><p>启动Gitlab服务。</p>\n<p> sudo gitlab-ctl start</p>\n</li>\n<li><p>重新执行配置命令。</p>\n<p> sudo gitlab-ctl reconfigure</p>\n</li>\n</ol>\n<p>完成上述步骤即实现汉化。</p>"},{"title":"Mac使用的奇淫巧计","date":"2016-05-26T02:37:41.000Z","_content":"\n - 隐藏显示系统文件 ：[http://blog.csdn.net/sinat_26790459/article/details/48912017](http://blog.csdn.net/sinat_26790459/article/details/48912017)","source":"_posts/2016/5月/Mac使用的奇淫巧计.md","raw":"---\ntitle: Mac使用的奇淫巧计\ndate: 2016-05-26 10:37:41\ntags:\n---\n\n - 隐藏显示系统文件 ：[http://blog.csdn.net/sinat_26790459/article/details/48912017](http://blog.csdn.net/sinat_26790459/article/details/48912017)","slug":"2016-5月-Mac使用的奇淫巧计","published":1,"updated":"2016-05-26T02:38:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9oh001brb0uf2chi4re","content":"<ul>\n<li>隐藏显示系统文件 ：<a href=\"http://blog.csdn.net/sinat_26790459/article/details/48912017\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/sinat_26790459/article/details/48912017</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>隐藏显示系统文件 ：<a href=\"http://blog.csdn.net/sinat_26790459/article/details/48912017\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/sinat_26790459/article/details/48912017</a></li>\n</ul>\n"},{"title":"iOS 仿射变换CGAffineTransform详解","date":"2016-05-25T06:36:49.000Z","_content":"\n\n# iOS 仿射变换CGAffineTransform详解\n\n-原文在[这里](http://www.jianshu.com/p/6c09d138b31d)根本看不懂\n\n但是我知道了 ：\n\n     self.view.transform=CGAffineTransformIdentity；\n     \n     \n     \n  这句话的 作用是 重新初始化（也就是重置 坐标系）要不然只能播放一次。不加这句的话，再点击播放也不会因为坐标系是改变过的，没有重置 而且  CGAffineTransformIdentity； 是系统给的固定值。暂时就知道这些。","source":"_posts/2016/5月/iOS-仿射变换CGAffineTransform详解.md","raw":"---\ntitle: iOS 仿射变换CGAffineTransform详解\ndate: 2016-05-25 14:36:49\ntags:\n---\n\n\n# iOS 仿射变换CGAffineTransform详解\n\n-原文在[这里](http://www.jianshu.com/p/6c09d138b31d)根本看不懂\n\n但是我知道了 ：\n\n     self.view.transform=CGAffineTransformIdentity；\n     \n     \n     \n  这句话的 作用是 重新初始化（也就是重置 坐标系）要不然只能播放一次。不加这句的话，再点击播放也不会因为坐标系是改变过的，没有重置 而且  CGAffineTransformIdentity； 是系统给的固定值。暂时就知道这些。","slug":"2016-5月-iOS-仿射变换CGAffineTransform详解","published":1,"updated":"2016-05-25T06:42:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9oi001drb0up287vmyh","content":"<h1 id=\"iOS-仿射变换CGAffineTransform详解\"><a href=\"#iOS-仿射变换CGAffineTransform详解\" class=\"headerlink\" title=\"iOS 仿射变换CGAffineTransform详解\"></a>iOS 仿射变换CGAffineTransform详解</h1><p>-原文在<a href=\"http://www.jianshu.com/p/6c09d138b31d\" target=\"_blank\" rel=\"noopener\">这里</a>根本看不懂</p>\n<p>但是我知道了 ：</p>\n<pre><code>self.view.transform=CGAffineTransformIdentity；\n</code></pre><p>  这句话的 作用是 重新初始化（也就是重置 坐标系）要不然只能播放一次。不加这句的话，再点击播放也不会因为坐标系是改变过的，没有重置 而且  CGAffineTransformIdentity； 是系统给的固定值。暂时就知道这些。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"iOS-仿射变换CGAffineTransform详解\"><a href=\"#iOS-仿射变换CGAffineTransform详解\" class=\"headerlink\" title=\"iOS 仿射变换CGAffineTransform详解\"></a>iOS 仿射变换CGAffineTransform详解</h1><p>-原文在<a href=\"http://www.jianshu.com/p/6c09d138b31d\" target=\"_blank\" rel=\"noopener\">这里</a>根本看不懂</p>\n<p>但是我知道了 ：</p>\n<pre><code>self.view.transform=CGAffineTransformIdentity；\n</code></pre><p>  这句话的 作用是 重新初始化（也就是重置 坐标系）要不然只能播放一次。不加这句的话，再点击播放也不会因为坐标系是改变过的，没有重置 而且  CGAffineTransformIdentity； 是系统给的固定值。暂时就知道这些。</p>\n"},{"title":"关于Xib的动态桥接","date":"2016-05-25T15:17:47.000Z","_content":" \n \n# 关于xib的动态桥接\n\n## xib作为一个轻量级的IB非常好用，但是有些场景下就显得有些尴尬了\n\n- 当一个xib创建的自定义视图用到了另外的一个自定义视图的时候就特别的麻烦了，还好看到了[这篇文章](http://blog.sunnyxx.com/2014/07/01/ios_ib_bridge/)，写的很好，等回头慢慢琢磨\n\n\n- 另外xib创建的自定义控件 加载的时候用一下方法：\n\n\n\t    NSArray* nibView = [[NSBundle mainBundle] loadNibNamed:@\"VisitView\" owner:nil options:nil];\n\t    VisitView * view = [nibView firstObject];\n\t    view.backgroundColor = [UIColor redColor];\n\t\n\t    return view;\n\n 这里的VisitView就是我用xib创建的自定义View。","source":"_posts/2016/5月/关于xib的动态桥接.md","raw":"---\ntitle: 关于xib的动态桥接\ndate: 2016-05-25 23:17:47\ntags:\n---\n \n \n# 关于xib的动态桥接\n\n## xib作为一个轻量级的IB非常好用，但是有些场景下就显得有些尴尬了\n\n- 当一个xib创建的自定义视图用到了另外的一个自定义视图的时候就特别的麻烦了，还好看到了[这篇文章](http://blog.sunnyxx.com/2014/07/01/ios_ib_bridge/)，写的很好，等回头慢慢琢磨\n\n\n- 另外xib创建的自定义控件 加载的时候用一下方法：\n\n\n\t    NSArray* nibView = [[NSBundle mainBundle] loadNibNamed:@\"VisitView\" owner:nil options:nil];\n\t    VisitView * view = [nibView firstObject];\n\t    view.backgroundColor = [UIColor redColor];\n\t\n\t    return view;\n\n 这里的VisitView就是我用xib创建的自定义View。","slug":"2016-5月-关于xib的动态桥接","published":1,"updated":"2016-05-25T15:22:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9oj001erb0uqcr7npgz","content":"<h1 id=\"关于xib的动态桥接\"><a href=\"#关于xib的动态桥接\" class=\"headerlink\" title=\"关于xib的动态桥接\"></a>关于xib的动态桥接</h1><h2 id=\"xib作为一个轻量级的IB非常好用，但是有些场景下就显得有些尴尬了\"><a href=\"#xib作为一个轻量级的IB非常好用，但是有些场景下就显得有些尴尬了\" class=\"headerlink\" title=\"xib作为一个轻量级的IB非常好用，但是有些场景下就显得有些尴尬了\"></a>xib作为一个轻量级的IB非常好用，但是有些场景下就显得有些尴尬了</h2><ul>\n<li>当一个xib创建的自定义视图用到了另外的一个自定义视图的时候就特别的麻烦了，还好看到了<a href=\"http://blog.sunnyxx.com/2014/07/01/ios_ib_bridge/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>，写的很好，等回头慢慢琢磨</li>\n</ul>\n<ul>\n<li>另外xib创建的自定义控件 加载的时候用一下方法：</li>\n</ul>\n<pre><code>NSArray* nibView = [[NSBundle mainBundle] loadNibNamed:@&quot;VisitView&quot; owner:nil options:nil];\nVisitView * view = [nibView firstObject];\nview.backgroundColor = [UIColor redColor];\n\nreturn view;\n</code></pre><p> 这里的VisitView就是我用xib创建的自定义View。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于xib的动态桥接\"><a href=\"#关于xib的动态桥接\" class=\"headerlink\" title=\"关于xib的动态桥接\"></a>关于xib的动态桥接</h1><h2 id=\"xib作为一个轻量级的IB非常好用，但是有些场景下就显得有些尴尬了\"><a href=\"#xib作为一个轻量级的IB非常好用，但是有些场景下就显得有些尴尬了\" class=\"headerlink\" title=\"xib作为一个轻量级的IB非常好用，但是有些场景下就显得有些尴尬了\"></a>xib作为一个轻量级的IB非常好用，但是有些场景下就显得有些尴尬了</h2><ul>\n<li>当一个xib创建的自定义视图用到了另外的一个自定义视图的时候就特别的麻烦了，还好看到了<a href=\"http://blog.sunnyxx.com/2014/07/01/ios_ib_bridge/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>，写的很好，等回头慢慢琢磨</li>\n</ul>\n<ul>\n<li>另外xib创建的自定义控件 加载的时候用一下方法：</li>\n</ul>\n<pre><code>NSArray* nibView = [[NSBundle mainBundle] loadNibNamed:@&quot;VisitView&quot; owner:nil options:nil];\nVisitView * view = [nibView firstObject];\nview.backgroundColor = [UIColor redColor];\n\nreturn view;\n</code></pre><p> 这里的VisitView就是我用xib创建的自定义View。</p>\n"},{"layout":"[2016]","title":"收集一些酷站","date":"2016-05-26T02:07:51.000Z","sticky":100,"_content":"\n\n#分享一些我收集的酷站\n\n|站名|链接|介绍|\n|----|----|----|\n|知笔墨|[http://zhibimo.com/](http://zhibimo.com/)|这是李笑来老师出的一个很好网站|\n","source":"_posts/2016/5月/收集一些酷站.md","raw":"layout: '[2016]'\ntitle: 收集一些酷站\ndate: 2016-05-26 10:07:51\nsticky: 100\ntags:\n---\n\n\n#分享一些我收集的酷站\n\n|站名|链接|介绍|\n|----|----|----|\n|知笔墨|[http://zhibimo.com/](http://zhibimo.com/)|这是李笑来老师出的一个很好网站|\n","slug":"2016-5月-收集一些酷站","published":1,"updated":"2016-05-26T02:46:20.000Z","comments":1,"photos":[],"link":"","_id":"ckeb5g9ok001frb0uq38ha5ux","content":"<p>#分享一些我收集的酷站</p>\n<table>\n<thead>\n<tr>\n<th>站名</th>\n<th>链接</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>知笔墨</td>\n<td><a href=\"http://zhibimo.com/\" target=\"_blank\" rel=\"noopener\">http://zhibimo.com/</a></td>\n<td>这是李笑来老师出的一个很好网站</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>#分享一些我收集的酷站</p>\n<table>\n<thead>\n<tr>\n<th>站名</th>\n<th>链接</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>知笔墨</td>\n<td><a href=\"http://zhibimo.com/\" target=\"_blank\" rel=\"noopener\">http://zhibimo.com/</a></td>\n<td>这是李笑来老师出的一个很好网站</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"用Charles抓ssl的包","date":"2016-06-04T03:15:57.000Z","_content":"\n\n# 我们都知道用ssl抓包非常麻烦很多的小伙伴不会，[这里](http://www.brianjcoleman.com/tutorial-testing-ssl-using-charles-proxy-on-an-ios-device/)有一个非常详细的教程，在这里做个标记，留着学习哈","source":"_posts/2016/6月/用Charles抓ssl的包.md","raw":"---\ntitle: 用Charles抓ssl的包\ndate: 2016-06-04 11:15:57\ntags:\n---\n\n\n# 我们都知道用ssl抓包非常麻烦很多的小伙伴不会，[这里](http://www.brianjcoleman.com/tutorial-testing-ssl-using-charles-proxy-on-an-ios-device/)有一个非常详细的教程，在这里做个标记，留着学习哈","slug":"2016-6月-用Charles抓ssl的包","published":1,"updated":"2016-06-04T03:17:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9ol001hrb0u6dsp2cg1","content":"<h1 id=\"我们都知道用ssl抓包非常麻烦很多的小伙伴不会，这里有一个非常详细的教程，在这里做个标记，留着学习哈\"><a href=\"#我们都知道用ssl抓包非常麻烦很多的小伙伴不会，这里有一个非常详细的教程，在这里做个标记，留着学习哈\" class=\"headerlink\" title=\"我们都知道用ssl抓包非常麻烦很多的小伙伴不会，这里有一个非常详细的教程，在这里做个标记，留着学习哈\"></a>我们都知道用ssl抓包非常麻烦很多的小伙伴不会，<a href=\"http://www.brianjcoleman.com/tutorial-testing-ssl-using-charles-proxy-on-an-ios-device/\" target=\"_blank\" rel=\"noopener\">这里</a>有一个非常详细的教程，在这里做个标记，留着学习哈</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"我们都知道用ssl抓包非常麻烦很多的小伙伴不会，这里有一个非常详细的教程，在这里做个标记，留着学习哈\"><a href=\"#我们都知道用ssl抓包非常麻烦很多的小伙伴不会，这里有一个非常详细的教程，在这里做个标记，留着学习哈\" class=\"headerlink\" title=\"我们都知道用ssl抓包非常麻烦很多的小伙伴不会，这里有一个非常详细的教程，在这里做个标记，留着学习哈\"></a>我们都知道用ssl抓包非常麻烦很多的小伙伴不会，<a href=\"http://www.brianjcoleman.com/tutorial-testing-ssl-using-charles-proxy-on-an-ios-device/\" target=\"_blank\" rel=\"noopener\">这里</a>有一个非常详细的教程，在这里做个标记，留着学习哈</h1>"},{"title":"NSString为何要用copy？而不是strong？","date":"2016-07-21T03:17:00.000Z","_content":"\n\n**  这里仅仅是一个备注。 **\n\n####   在一些model的属性中我们常常使用的是 copy而不是strong 这到底是为什么呢？平时用的时候倒是看不出来但是 到了关键时候可能就是一个大坑了。。这里我们来稍微的深究一下哈。。\n\n\n\n这里我们创建一个model类\n\n```objectivec\n\n     #import <Foundation/Foundation.h>\n     \n    \n\t   @interface Model : NSObject\n\t   @property(nonatomic,strong)NSString * name;\n\t   @end\n\n```\n\n<!-- more-->\n\n\n在我们的控制器中引入model 并对model 的name 属性进行赋值\n\n```objectivec\n\n\n\n     - (void)viewDidLoad {\n\t      [super viewDidLoad];\n\t    \n\t    NSMutableString * str  = [[NSMutableString alloc] init];\n\t    str.string = @\"张三\";\n\t    Model * model = [Model new];\n\t    \n\t    model.name = str;\n\t    NSLog(@\"model.name = %@\",model.name);\n\t    \n\t    \n\t    \n\t    [str appendString:@\"新增加的\"];\n\t    NSLog(@\"model.name = %@\",model.name);\n\t        \n\t}\n\t\n```\n 我们来看下打印结果：\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/67179-6885d05c13a76787.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n*你会看到两次的打印结果不一样 同个model的名字竟然会改变这显然是不科学的  也就是说 在strong相当于MRC下的Retain 只是对name指向的对象进行了引用计数+1.当原始的字符串发生改变的时候 model.name 也会随着改变。\n\n而copy 这里指的是深拷贝，也就是拷贝的是对象，并不是指针哈。\n\n无论原来的对象如何改变都不会影响到  model.name的。\n\n\n  > ** talk is cheap show my code  **\n\n   \n \n```objectivec\n \n \n\t  #import <Foundation/Foundation.h>\n\t\n\t @interface Model : NSObject\n\t @property(nonatomic,copy)NSString * name;\n\t \n\t @end\n\t \n```\n再次打印结果 ：\n\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/67179-835f5ce30bb7c731.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### OK 这次总算是弄明白了为什么要用copy了吧。哈哈  鼓掌。","source":"_posts/2016/7月/NSString为何要用copy？而不是strong？.md","raw":"---\ntitle: NSString为何要用copy？而不是strong？\ndate: 2016-07-21 11:17:00\ntags:\n---\n\n\n**  这里仅仅是一个备注。 **\n\n####   在一些model的属性中我们常常使用的是 copy而不是strong 这到底是为什么呢？平时用的时候倒是看不出来但是 到了关键时候可能就是一个大坑了。。这里我们来稍微的深究一下哈。。\n\n\n\n这里我们创建一个model类\n\n```objectivec\n\n     #import <Foundation/Foundation.h>\n     \n    \n\t   @interface Model : NSObject\n\t   @property(nonatomic,strong)NSString * name;\n\t   @end\n\n```\n\n<!-- more-->\n\n\n在我们的控制器中引入model 并对model 的name 属性进行赋值\n\n```objectivec\n\n\n\n     - (void)viewDidLoad {\n\t      [super viewDidLoad];\n\t    \n\t    NSMutableString * str  = [[NSMutableString alloc] init];\n\t    str.string = @\"张三\";\n\t    Model * model = [Model new];\n\t    \n\t    model.name = str;\n\t    NSLog(@\"model.name = %@\",model.name);\n\t    \n\t    \n\t    \n\t    [str appendString:@\"新增加的\"];\n\t    NSLog(@\"model.name = %@\",model.name);\n\t        \n\t}\n\t\n```\n 我们来看下打印结果：\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/67179-6885d05c13a76787.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n*你会看到两次的打印结果不一样 同个model的名字竟然会改变这显然是不科学的  也就是说 在strong相当于MRC下的Retain 只是对name指向的对象进行了引用计数+1.当原始的字符串发生改变的时候 model.name 也会随着改变。\n\n而copy 这里指的是深拷贝，也就是拷贝的是对象，并不是指针哈。\n\n无论原来的对象如何改变都不会影响到  model.name的。\n\n\n  > ** talk is cheap show my code  **\n\n   \n \n```objectivec\n \n \n\t  #import <Foundation/Foundation.h>\n\t\n\t @interface Model : NSObject\n\t @property(nonatomic,copy)NSString * name;\n\t \n\t @end\n\t \n```\n再次打印结果 ：\n\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/67179-835f5ce30bb7c731.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### OK 这次总算是弄明白了为什么要用copy了吧。哈哈  鼓掌。","slug":"2016-7月-NSString为何要用copy？而不是strong？","published":1,"updated":"2016-07-21T03:24:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9ph001irb0u7qq7g4z5","content":"<p><strong>  这里仅仅是一个备注。 </strong></p>\n<h4 id=\"在一些model的属性中我们常常使用的是-copy而不是strong-这到底是为什么呢？平时用的时候倒是看不出来但是-到了关键时候可能就是一个大坑了。。这里我们来稍微的深究一下哈。。\"><a href=\"#在一些model的属性中我们常常使用的是-copy而不是strong-这到底是为什么呢？平时用的时候倒是看不出来但是-到了关键时候可能就是一个大坑了。。这里我们来稍微的深究一下哈。。\" class=\"headerlink\" title=\"在一些model的属性中我们常常使用的是 copy而不是strong 这到底是为什么呢？平时用的时候倒是看不出来但是 到了关键时候可能就是一个大坑了。。这里我们来稍微的深究一下哈。。\"></a>在一些model的属性中我们常常使用的是 copy而不是strong 这到底是为什么呢？平时用的时候倒是看不出来但是 到了关键时候可能就是一个大坑了。。这里我们来稍微的深究一下哈。。</h4><p>这里我们创建一个model类</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Model</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>)<span class=\"built_in\">NSString</span> * name;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>在我们的控制器中引入model 并对model 的name 属性进行赋值</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    - (<span class=\"keyword\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">      [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">NSMutableString</span> * str  = [[<span class=\"built_in\">NSMutableString</span> alloc] init];</span><br><span class=\"line\">    str.string = <span class=\"string\">@\"张三\"</span>;</span><br><span class=\"line\">    Model * model = [Model new];</span><br><span class=\"line\">    </span><br><span class=\"line\">    model.name = str;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"model.name = %@\"</span>,model.name);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    [str appendString:<span class=\"string\">@\"新增加的\"</span>];</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"model.name = %@\"</span>,model.name);</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 我们来看下打印结果：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/67179-6885d05c13a76787.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<p>*你会看到两次的打印结果不一样 同个model的名字竟然会改变这显然是不科学的  也就是说 在strong相当于MRC下的Retain 只是对name指向的对象进行了引用计数+1.当原始的字符串发生改变的时候 model.name 也会随着改变。</p>\n<p>而copy 这里指的是深拷贝，也就是拷贝的是对象，并不是指针哈。</p>\n<p>无论原来的对象如何改变都不会影响到  model.name的。</p>\n<blockquote>\n<p><strong> talk is cheap show my code  </strong></p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Model</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">copy</span>)<span class=\"built_in\">NSString</span> * name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>再次打印结果 ：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/67179-835f5ce30bb7c731.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<h3 id=\"OK-这次总算是弄明白了为什么要用copy了吧。哈哈-鼓掌。\"><a href=\"#OK-这次总算是弄明白了为什么要用copy了吧。哈哈-鼓掌。\" class=\"headerlink\" title=\"OK 这次总算是弄明白了为什么要用copy了吧。哈哈  鼓掌。\"></a>OK 这次总算是弄明白了为什么要用copy了吧。哈哈  鼓掌。</h3>","site":{"data":{}},"excerpt":"<p><strong>  这里仅仅是一个备注。 </strong></p>\n<h4 id=\"在一些model的属性中我们常常使用的是-copy而不是strong-这到底是为什么呢？平时用的时候倒是看不出来但是-到了关键时候可能就是一个大坑了。。这里我们来稍微的深究一下哈。。\"><a href=\"#在一些model的属性中我们常常使用的是-copy而不是strong-这到底是为什么呢？平时用的时候倒是看不出来但是-到了关键时候可能就是一个大坑了。。这里我们来稍微的深究一下哈。。\" class=\"headerlink\" title=\"在一些model的属性中我们常常使用的是 copy而不是strong 这到底是为什么呢？平时用的时候倒是看不出来但是 到了关键时候可能就是一个大坑了。。这里我们来稍微的深究一下哈。。\"></a>在一些model的属性中我们常常使用的是 copy而不是strong 这到底是为什么呢？平时用的时候倒是看不出来但是 到了关键时候可能就是一个大坑了。。这里我们来稍微的深究一下哈。。</h4><p>这里我们创建一个model类</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Model</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">strong</span>)<span class=\"built_in\">NSString</span> * name;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>","more":"<p>在我们的控制器中引入model 并对model 的name 属性进行赋值</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    - (<span class=\"keyword\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">      [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">NSMutableString</span> * str  = [[<span class=\"built_in\">NSMutableString</span> alloc] init];</span><br><span class=\"line\">    str.string = <span class=\"string\">@\"张三\"</span>;</span><br><span class=\"line\">    Model * model = [Model new];</span><br><span class=\"line\">    </span><br><span class=\"line\">    model.name = str;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"model.name = %@\"</span>,model.name);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    [str appendString:<span class=\"string\">@\"新增加的\"</span>];</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"model.name = %@\"</span>,model.name);</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 我们来看下打印结果：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/67179-6885d05c13a76787.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<p>*你会看到两次的打印结果不一样 同个model的名字竟然会改变这显然是不科学的  也就是说 在strong相当于MRC下的Retain 只是对name指向的对象进行了引用计数+1.当原始的字符串发生改变的时候 model.name 也会随着改变。</p>\n<p>而copy 这里指的是深拷贝，也就是拷贝的是对象，并不是指针哈。</p>\n<p>无论原来的对象如何改变都不会影响到  model.name的。</p>\n<blockquote>\n<p><strong> talk is cheap show my code  </strong></p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Model</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">copy</span>)<span class=\"built_in\">NSString</span> * name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>再次打印结果 ：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/67179-835f5ce30bb7c731.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<h3 id=\"OK-这次总算是弄明白了为什么要用copy了吧。哈哈-鼓掌。\"><a href=\"#OK-这次总算是弄明白了为什么要用copy了吧。哈哈-鼓掌。\" class=\"headerlink\" title=\"OK 这次总算是弄明白了为什么要用copy了吧。哈哈  鼓掌。\"></a>OK 这次总算是弄明白了为什么要用copy了吧。哈哈  鼓掌。</h3>"},{"title":"iOS UITableView 的beginUpdates和endUpdates","date":"2016-07-29T08:21:04.000Z","_content":"#  iOS UITableView 的beginUpdates和endUpdates\n\n\n#### 今天在看大神写的代码的时候发现了这样的一段\n\n```objectivec\n\n    if (adapter.cellType == kShowTextCellNormalType) {\n        \n        adapter.cellType = kShowTextCellExpendType;\n        \n        adapter.cellHeight = model.expendStringHeight;\n        [self.tableView beginUpdates];\n        [self.tableView endUpdates];\n        [self expendState];\n        \n    } else {\n    \n        adapter.cellType = kShowTextCellNormalType;\n        \n        adapter.cellHeight = model.normalStringHeight;\n        [self.tableView beginUpdates];\n        [self.tableView endUpdates];\n        [self normalState];\n    }\n    \n```\n\n这里只看关键的两句\n```objectivec\n        \n        [self.tableView beginUpdates];\n        [self.tableView endUpdates];\n        \n```\n   第一次遇到这样的写法很是诧异看了一下苹果的官方文档是这样解释道的：\n   \n   > Call this method if you want subsequent insertions, deletion, and selection operations (for example, cellForRowAtIndexPath: andindexPathsForVisibleRows) to be animated simultaneously. This group of methods must conclude with an invocation ofendUpdates. These method pairs can be nested.\nIf you do not make the insertion, deletion, and selection calls inside this block, table attributes such as row count might become invalid. \nYou should not call reloadData within the group; if you call this method within the group, you will need to perform any animations yourself.\n\n** 一般当tableview需要同时执行多个动画时，才会用到beginUpdates函数，它的本质就是建立了CATransaction这个事务。我们可以通过以下的代码验证这个结论 **\n\n```objectivec\n\n        [CATransaction begin];\n\n\t\t[CATransaction setCompletionBlock:^{\n\t\t    // animation has finished\n\t\t}];\n\t\t\n\t\t[tableView beginUpdates];\n\t\t// do some work\n\t\t[tableView endUpdates];\n\t\t\n\t\t[CATransaction commit];\n\t\t\n\t\t\n\t\t\n######  这段代码来自stackoverflow，它的作用就是在tableview的动画结束后，执行需要的操作。这段代码好用的原因就是beginUpdates本质上就是添加了一个动画事务，即CATransaction，当然这个事务可能包含许多操作，比如会重新调整每个cell的高度（但是默认不会重新加载cell）。如果你仅仅更改了UITableView的cell的样式，那么应该试试能否通过调用beginUpdates 和 reloadRowsAtIndexPaths 来实现效果，而不是调用tableview的reloadData方法去重新加载全部的cell！\n\n\n带有动画效果重新加载cell的代码\n\n```objectivec\t\n\t\t[tableView beginUpdates];\n\t\t[tableView reloadRowsAtIndexPaths:[NSArray arrayWithObject:tmp] withRowAnimation:UITableViewRowAnimationAutomatic];\n\t\t[tableView endUpdates];```\n\n#### 一般的想要点击cell高度的时候可以在```didSelectRowAtIndexPath:```方法中\n改变cell的数据源然后调用 \n\n\n\n\n```objectivec\n\n\t  [tableView beginUpdates];\n\t  [tableView endUpdates];\n\t  \n```\n\n就会自动的调用```heightForRow```方法了\n\n![此图转自网络](http://images.cnitblog.com/blog/493542/201402/061151017595013.png)\n","source":"_posts/2016/7月/iOS-UITableView-的beginUpdates和endUpdates.md","raw":"---\ntitle: iOS UITableView 的beginUpdates和endUpdates\ndate: 2016-07-29 16:21:04\ntags:\n---\n#  iOS UITableView 的beginUpdates和endUpdates\n\n\n#### 今天在看大神写的代码的时候发现了这样的一段\n\n```objectivec\n\n    if (adapter.cellType == kShowTextCellNormalType) {\n        \n        adapter.cellType = kShowTextCellExpendType;\n        \n        adapter.cellHeight = model.expendStringHeight;\n        [self.tableView beginUpdates];\n        [self.tableView endUpdates];\n        [self expendState];\n        \n    } else {\n    \n        adapter.cellType = kShowTextCellNormalType;\n        \n        adapter.cellHeight = model.normalStringHeight;\n        [self.tableView beginUpdates];\n        [self.tableView endUpdates];\n        [self normalState];\n    }\n    \n```\n\n这里只看关键的两句\n```objectivec\n        \n        [self.tableView beginUpdates];\n        [self.tableView endUpdates];\n        \n```\n   第一次遇到这样的写法很是诧异看了一下苹果的官方文档是这样解释道的：\n   \n   > Call this method if you want subsequent insertions, deletion, and selection operations (for example, cellForRowAtIndexPath: andindexPathsForVisibleRows) to be animated simultaneously. This group of methods must conclude with an invocation ofendUpdates. These method pairs can be nested.\nIf you do not make the insertion, deletion, and selection calls inside this block, table attributes such as row count might become invalid. \nYou should not call reloadData within the group; if you call this method within the group, you will need to perform any animations yourself.\n\n** 一般当tableview需要同时执行多个动画时，才会用到beginUpdates函数，它的本质就是建立了CATransaction这个事务。我们可以通过以下的代码验证这个结论 **\n\n```objectivec\n\n        [CATransaction begin];\n\n\t\t[CATransaction setCompletionBlock:^{\n\t\t    // animation has finished\n\t\t}];\n\t\t\n\t\t[tableView beginUpdates];\n\t\t// do some work\n\t\t[tableView endUpdates];\n\t\t\n\t\t[CATransaction commit];\n\t\t\n\t\t\n\t\t\n######  这段代码来自stackoverflow，它的作用就是在tableview的动画结束后，执行需要的操作。这段代码好用的原因就是beginUpdates本质上就是添加了一个动画事务，即CATransaction，当然这个事务可能包含许多操作，比如会重新调整每个cell的高度（但是默认不会重新加载cell）。如果你仅仅更改了UITableView的cell的样式，那么应该试试能否通过调用beginUpdates 和 reloadRowsAtIndexPaths 来实现效果，而不是调用tableview的reloadData方法去重新加载全部的cell！\n\n\n带有动画效果重新加载cell的代码\n\n```objectivec\t\n\t\t[tableView beginUpdates];\n\t\t[tableView reloadRowsAtIndexPaths:[NSArray arrayWithObject:tmp] withRowAnimation:UITableViewRowAnimationAutomatic];\n\t\t[tableView endUpdates];```\n\n#### 一般的想要点击cell高度的时候可以在```didSelectRowAtIndexPath:```方法中\n改变cell的数据源然后调用 \n\n\n\n\n```objectivec\n\n\t  [tableView beginUpdates];\n\t  [tableView endUpdates];\n\t  \n```\n\n就会自动的调用```heightForRow```方法了\n\n![此图转自网络](http://images.cnitblog.com/blog/493542/201402/061151017595013.png)\n","slug":"2016-7月-iOS-UITableView-的beginUpdates和endUpdates","published":1,"updated":"2016-07-30T12:54:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9pm001jrb0u1a9za6bx","content":"<h1 id=\"iOS-UITableView-的beginUpdates和endUpdates\"><a href=\"#iOS-UITableView-的beginUpdates和endUpdates\" class=\"headerlink\" title=\"iOS UITableView 的beginUpdates和endUpdates\"></a>iOS UITableView 的beginUpdates和endUpdates</h1><h4 id=\"今天在看大神写的代码的时候发现了这样的一段\"><a href=\"#今天在看大神写的代码的时候发现了这样的一段\" class=\"headerlink\" title=\"今天在看大神写的代码的时候发现了这样的一段\"></a>今天在看大神写的代码的时候发现了这样的一段</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (adapter.cellType == kShowTextCellNormalType) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    adapter.cellType = kShowTextCellExpendType;</span><br><span class=\"line\">    </span><br><span class=\"line\">    adapter.cellHeight = model.expendStringHeight;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.tableView beginUpdates];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.tableView endUpdates];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> expendState];</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    adapter.cellType = kShowTextCellNormalType;</span><br><span class=\"line\">    </span><br><span class=\"line\">    adapter.cellHeight = model.normalStringHeight;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.tableView beginUpdates];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.tableView endUpdates];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> normalState];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里只看关键的两句<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">self</span>.tableView beginUpdates];</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.tableView endUpdates];</span><br></pre></td></tr></table></figure></p>\n<p>   第一次遇到这样的写法很是诧异看了一下苹果的官方文档是这样解释道的：</p>\n<blockquote>\n<p>Call this method if you want subsequent insertions, deletion, and selection operations (for example, cellForRowAtIndexPath: andindexPathsForVisibleRows) to be animated simultaneously. This group of methods must conclude with an invocation ofendUpdates. These method pairs can be nested.<br>If you do not make the insertion, deletion, and selection calls inside this block, table attributes such as row count might become invalid.<br>You should not call reloadData within the group; if you call this method within the group, you will need to perform any animations yourself.</p>\n</blockquote>\n<p><strong> 一般当tableview需要同时执行多个动画时，才会用到beginUpdates函数，它的本质就是建立了CATransaction这个事务。我们可以通过以下的代码验证这个结论 </strong></p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"built_in\">CATransaction</span> begin];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t[<span class=\"built_in\">CATransaction</span> setCompletionBlock:^&#123;</span><br><span class=\"line\">\t\t    <span class=\"comment\">// animation has finished</span></span><br><span class=\"line\">\t\t&#125;];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t[tableView beginUpdates];</span><br><span class=\"line\">\t\t<span class=\"comment\">// do some work</span></span><br><span class=\"line\">\t\t[tableView endUpdates];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t[<span class=\"built_in\">CATransaction</span> commit];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">######  这段代码来自stackoverflow，它的作用就是在tableview的动画结束后，执行需要的操作。这段代码好用的原因就是beginUpdates本质上就是添加了一个动画事务，即<span class=\"built_in\">CATransaction</span>，当然这个事务可能包含许多操作，比如会重新调整每个cell的高度（但是默认不会重新加载cell）。如果你仅仅更改了<span class=\"built_in\">UITableView</span>的cell的样式，那么应该试试能否通过调用beginUpdates 和 reloadRowsAtIndexPaths 来实现效果，而不是调用tableview的reloadData方法去重新加载全部的cell！</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">带有动画效果重新加载cell的代码</span><br><span class=\"line\"></span><br><span class=\"line\">```objectivec\t</span><br><span class=\"line\">\t\t[tableView beginUpdates];</span><br><span class=\"line\">\t\t[tableView reloadRowsAtIndexPaths:[<span class=\"built_in\">NSArray</span> arrayWithObject:tmp] withRowAnimation:<span class=\"built_in\">UITableViewRowAnimationAutomatic</span>];</span><br><span class=\"line\">\t\t[tableView endUpdates];</span><br></pre></td></tr></table></figure>\n<h4 id=\"一般的想要点击cell高度的时候可以在\"><a href=\"#一般的想要点击cell高度的时候可以在\" class=\"headerlink\" title=\"一般的想要点击cell高度的时候可以在\"></a>一般的想要点击cell高度的时候可以在<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">改变cell的数据源然后调用 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">```objectivec</span><br><span class=\"line\"></span><br><span class=\"line\">\t  [tableView beginUpdates];</span><br><span class=\"line\">\t  [tableView endUpdates];</span><br></pre></td></tr></table></figure></h4><p>就会自动的调用<code>heightForRow</code>方法了</p>\n<p><img src=\"http://images.cnitblog.com/blog/493542/201402/061151017595013.png\" alt=\"此图转自网络\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"iOS-UITableView-的beginUpdates和endUpdates\"><a href=\"#iOS-UITableView-的beginUpdates和endUpdates\" class=\"headerlink\" title=\"iOS UITableView 的beginUpdates和endUpdates\"></a>iOS UITableView 的beginUpdates和endUpdates</h1><h4 id=\"今天在看大神写的代码的时候发现了这样的一段\"><a href=\"#今天在看大神写的代码的时候发现了这样的一段\" class=\"headerlink\" title=\"今天在看大神写的代码的时候发现了这样的一段\"></a>今天在看大神写的代码的时候发现了这样的一段</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (adapter.cellType == kShowTextCellNormalType) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    adapter.cellType = kShowTextCellExpendType;</span><br><span class=\"line\">    </span><br><span class=\"line\">    adapter.cellHeight = model.expendStringHeight;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.tableView beginUpdates];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.tableView endUpdates];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> expendState];</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    adapter.cellType = kShowTextCellNormalType;</span><br><span class=\"line\">    </span><br><span class=\"line\">    adapter.cellHeight = model.normalStringHeight;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.tableView beginUpdates];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.tableView endUpdates];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> normalState];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里只看关键的两句<br><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">self</span>.tableView beginUpdates];</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.tableView endUpdates];</span><br></pre></td></tr></table></figure></p>\n<p>   第一次遇到这样的写法很是诧异看了一下苹果的官方文档是这样解释道的：</p>\n<blockquote>\n<p>Call this method if you want subsequent insertions, deletion, and selection operations (for example, cellForRowAtIndexPath: andindexPathsForVisibleRows) to be animated simultaneously. This group of methods must conclude with an invocation ofendUpdates. These method pairs can be nested.<br>If you do not make the insertion, deletion, and selection calls inside this block, table attributes such as row count might become invalid.<br>You should not call reloadData within the group; if you call this method within the group, you will need to perform any animations yourself.</p>\n</blockquote>\n<p><strong> 一般当tableview需要同时执行多个动画时，才会用到beginUpdates函数，它的本质就是建立了CATransaction这个事务。我们可以通过以下的代码验证这个结论 </strong></p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"built_in\">CATransaction</span> begin];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t[<span class=\"built_in\">CATransaction</span> setCompletionBlock:^&#123;</span><br><span class=\"line\">\t\t    <span class=\"comment\">// animation has finished</span></span><br><span class=\"line\">\t\t&#125;];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t[tableView beginUpdates];</span><br><span class=\"line\">\t\t<span class=\"comment\">// do some work</span></span><br><span class=\"line\">\t\t[tableView endUpdates];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t[<span class=\"built_in\">CATransaction</span> commit];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">######  这段代码来自stackoverflow，它的作用就是在tableview的动画结束后，执行需要的操作。这段代码好用的原因就是beginUpdates本质上就是添加了一个动画事务，即<span class=\"built_in\">CATransaction</span>，当然这个事务可能包含许多操作，比如会重新调整每个cell的高度（但是默认不会重新加载cell）。如果你仅仅更改了<span class=\"built_in\">UITableView</span>的cell的样式，那么应该试试能否通过调用beginUpdates 和 reloadRowsAtIndexPaths 来实现效果，而不是调用tableview的reloadData方法去重新加载全部的cell！</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">带有动画效果重新加载cell的代码</span><br><span class=\"line\"></span><br><span class=\"line\">```objectivec\t</span><br><span class=\"line\">\t\t[tableView beginUpdates];</span><br><span class=\"line\">\t\t[tableView reloadRowsAtIndexPaths:[<span class=\"built_in\">NSArray</span> arrayWithObject:tmp] withRowAnimation:<span class=\"built_in\">UITableViewRowAnimationAutomatic</span>];</span><br><span class=\"line\">\t\t[tableView endUpdates];</span><br></pre></td></tr></table></figure>\n<h4 id=\"一般的想要点击cell高度的时候可以在\"><a href=\"#一般的想要点击cell高度的时候可以在\" class=\"headerlink\" title=\"一般的想要点击cell高度的时候可以在\"></a>一般的想要点击cell高度的时候可以在<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">改变cell的数据源然后调用 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">```objectivec</span><br><span class=\"line\"></span><br><span class=\"line\">\t  [tableView beginUpdates];</span><br><span class=\"line\">\t  [tableView endUpdates];</span><br></pre></td></tr></table></figure></h4><p>就会自动的调用<code>heightForRow</code>方法了</p>\n<p><img src=\"http://images.cnitblog.com/blog/493542/201402/061151017595013.png\" alt=\"此图转自网络\"></p>\n"},{"layout":"tableview","title":"Tableview Cell上播放倒计时","date":"2016-07-07T08:09:53.000Z","_content":"\n# tableview cell 上播放倒计时\n\n## 项目中有用到cell上播放倒计时，遇到很多的坑，在这里总结一些以免下次再遇到\n\n- 1 第一条跟NStimer无关  只是平时项目中的细节问题，一定要注意block中的循环引用问题，这里有两种方法 \n\n```objectivec\n\n      // 第一种创建一个self弱引用\n      #define WS(weakSelf)  __weak __typeof(&*self)weakSelf = self;\n      //第二种就是如果项目中用到了reactivecocoa这个第三方的话 使用     @weakify（self）\n      @Strongify（self）\n       \n ```\n      \n       \n<!--more-->\n      \n### 这两个是成对出现的block外用@weakify block里面用@strongify（今天发现好多控制器请求数据的时候没有严格使用，导致很多控制器没有释放）\n\n- 2 这里只说我自己遇到的问题及解决办法，基本的介绍就不再说了 \n\n  （1）定时器如果要循环的话需要加入到runloop中\n  \n  \n        [[NSrunLoop currenRunLoop] addTimer:_timerforMode:NSRunLoopCommonModes]\n        \n   (2)定时器创建的线程和释放的线程应该在同一个线程，否则的话无法释放有兴趣的同学可以试一下\n   \n   \n\n\n\n  ```objectivec\n  \n       //创建\n      dispatch_async(dispatch_get_main_queue(), ^{\n        if (self.time) {\n            [self.time invalidate];\n        }\n        self.time = [NSTimer ez_scheduledTimerWithTimeInterval:1    block:^{\n            NSDate *currentDate =[NSDate date];\n            NSCalendar *calendar = [NSCalendar currentCalendar];\n            \n            NSCalendarUnit  unit = NSDayCalendarUnit | NSCalendarUnitHour | NSCalendarUnitMinute  | NSCalendarUnitSecond;\n            NSDateComponents *commponent = [calendar components:unit fromDate:currentDate toDate:[NSDate dateWithString:weakSelf.endTime ] options:NSCalendarWrapComponents];\n            \n            \n            NSDate *dt = [[NSDate dateWithString: weakSelf.endTime] earlierDate:currentDate];\n            NSLog(@\"-------------------%@\",weakSelf.endTime);\n            //    self.getPrimeRate.enabled =YES;\n            \n            if([dt isEqualToDate:[NSDate dateWithString:weakSelf.endTime ]])\n            {\n                [weakSelf.time invalidate];\n                weakSelf.countDownLabel.text = @\"⚡️距离开放认投剩余0天00时00分00秒\";\n                \n            }else\n            {\n                weakSelf.countDownLabel.text = [NSString stringWithFormat:@\"⚡️距离开放认投剩余%zd天%02zd时%02zd分%02zd秒\",commponent.day,commponent.hour,commponent.minute,commponent.second];\n                \n            }\n        } repeats:YES];\n    });\n```\n\n这里是释放  \n\n```objectivec\n\n    dispatch_async(dispatch_get_main_queue(), ^{\n                 @strongify(self)\n                 [self.time invalidate];\n                 self.time = nil;\n                 NSLog(@\"timer停止了\");\n             });\n  ```\n\n **注 这里我使用的是一个NStimer的分类原文有详细介绍就是创建一个对self弱引用的Nstimer[原文](http://blog.callmewhy.com/2015/07/06/weak-timer-in-ios/)**  \n \n- 3 由于cell的重用问题 每次控制pop或者dismiss的时候，都不能够释放所以尤其是在和定时器一起用的时候要特别的注意循环引用的问题 ，我就是 遇到了这样的问题感觉很坑的 ，我们要想释放cell就需要知道 控制器的UIviewcontroller的dealoc方法 那么我们怎么才能在cell中得到cell所在的控制器呢  为了降低耦合度 有网友想到了给view添加一个扩展的方法原文[在这](http://www.jianshu.com/p/94729046ea31)原文有循序渐进的讲解为什么但是最终没有完全解决我遇到的问题，很不错了\n\n 核心代码 ：\n \n ```objectivec\n \n    - (UIViewController*)getViewController\n\t{\n\t    for (UIView* next = [self superview]; next; next = next.superview)\n\t    {\n        UIResponder* nextResponder = [next nextResponder];\n        \n        if ([nextResponder isKindOfClass:[UIViewController class]])\n        {\n            return (UIViewController*)nextResponder;\n        }\n    }\n    \n    return nil; }\n```\n 其实是使用响应者链得到对应的Controller 这样的话cell就可以得到对应的Controller 然后使用RAC得到控制器销毁的消息发送时刻释放定时器。\n \n 核心代码如下 :\n  \n ```objectivec\n \n    - (void)didMoveToSuperview\n\t\t{\n\t\t    UIViewController *controller = [self getViewController];\n\t\t    //这里需要判断相应的controller是否存在\n\t\t    if (controller){\n\t\t        @weakify(self)\n\t\t        [controller.rac_willDeallocSignal\n\t\t         subscribeCompleted:^{\n\t\t             @strongify(self)\n\t\t             [self.countDownTimer invalidate];\n\t\t             self.countDownTimer = nil;\n\t\t         }];\n\t\t    }\n\t\t}\n\t\t\n```\n **这里释放的时机很重要使用上面的扩展需要Cell被添加到视图树之后才能获取到需要的UIViewController,不然得到会是一个空。那么怎么保证Cell一定被添加到视图树呢。UIView有个方法叫didMoveToSuperview,它会在该视图的父视图改变的时候被调用**\n\n\n- 4最后的时候发现虽然好了很多打印的时候仍然有一个定时器不能释放 ，试了很多的办法都不行 所以 就在cell 的dealoc方法中又释放了一次就好了具体是什么原因暂时还没发现，希望有知道的大神能够说一下啊，毕竟自己还是一个菜鸟。\n\n  最后又发现了一个好的例文还没仔细看[【iOS】TableViewCell上展示倒计时](http://www.jianshu.com/p/8ae4c65f4313);\n  \n  好了先写这么多，有想起来的再补充吧。\n\n\n  ","source":"_posts/2016/7月/tableviewcell上播放倒计时.md","raw":"layout: 'tableview'\ntitle: 'tableview cell上播放倒计时'\ndate: 2016-07-07 16:09:53\ntags:\n---\n\n# tableview cell 上播放倒计时\n\n## 项目中有用到cell上播放倒计时，遇到很多的坑，在这里总结一些以免下次再遇到\n\n- 1 第一条跟NStimer无关  只是平时项目中的细节问题，一定要注意block中的循环引用问题，这里有两种方法 \n\n```objectivec\n\n      // 第一种创建一个self弱引用\n      #define WS(weakSelf)  __weak __typeof(&*self)weakSelf = self;\n      //第二种就是如果项目中用到了reactivecocoa这个第三方的话 使用     @weakify（self）\n      @Strongify（self）\n       \n ```\n      \n       \n<!--more-->\n      \n### 这两个是成对出现的block外用@weakify block里面用@strongify（今天发现好多控制器请求数据的时候没有严格使用，导致很多控制器没有释放）\n\n- 2 这里只说我自己遇到的问题及解决办法，基本的介绍就不再说了 \n\n  （1）定时器如果要循环的话需要加入到runloop中\n  \n  \n        [[NSrunLoop currenRunLoop] addTimer:_timerforMode:NSRunLoopCommonModes]\n        \n   (2)定时器创建的线程和释放的线程应该在同一个线程，否则的话无法释放有兴趣的同学可以试一下\n   \n   \n\n\n\n  ```objectivec\n  \n       //创建\n      dispatch_async(dispatch_get_main_queue(), ^{\n        if (self.time) {\n            [self.time invalidate];\n        }\n        self.time = [NSTimer ez_scheduledTimerWithTimeInterval:1    block:^{\n            NSDate *currentDate =[NSDate date];\n            NSCalendar *calendar = [NSCalendar currentCalendar];\n            \n            NSCalendarUnit  unit = NSDayCalendarUnit | NSCalendarUnitHour | NSCalendarUnitMinute  | NSCalendarUnitSecond;\n            NSDateComponents *commponent = [calendar components:unit fromDate:currentDate toDate:[NSDate dateWithString:weakSelf.endTime ] options:NSCalendarWrapComponents];\n            \n            \n            NSDate *dt = [[NSDate dateWithString: weakSelf.endTime] earlierDate:currentDate];\n            NSLog(@\"-------------------%@\",weakSelf.endTime);\n            //    self.getPrimeRate.enabled =YES;\n            \n            if([dt isEqualToDate:[NSDate dateWithString:weakSelf.endTime ]])\n            {\n                [weakSelf.time invalidate];\n                weakSelf.countDownLabel.text = @\"⚡️距离开放认投剩余0天00时00分00秒\";\n                \n            }else\n            {\n                weakSelf.countDownLabel.text = [NSString stringWithFormat:@\"⚡️距离开放认投剩余%zd天%02zd时%02zd分%02zd秒\",commponent.day,commponent.hour,commponent.minute,commponent.second];\n                \n            }\n        } repeats:YES];\n    });\n```\n\n这里是释放  \n\n```objectivec\n\n    dispatch_async(dispatch_get_main_queue(), ^{\n                 @strongify(self)\n                 [self.time invalidate];\n                 self.time = nil;\n                 NSLog(@\"timer停止了\");\n             });\n  ```\n\n **注 这里我使用的是一个NStimer的分类原文有详细介绍就是创建一个对self弱引用的Nstimer[原文](http://blog.callmewhy.com/2015/07/06/weak-timer-in-ios/)**  \n \n- 3 由于cell的重用问题 每次控制pop或者dismiss的时候，都不能够释放所以尤其是在和定时器一起用的时候要特别的注意循环引用的问题 ，我就是 遇到了这样的问题感觉很坑的 ，我们要想释放cell就需要知道 控制器的UIviewcontroller的dealoc方法 那么我们怎么才能在cell中得到cell所在的控制器呢  为了降低耦合度 有网友想到了给view添加一个扩展的方法原文[在这](http://www.jianshu.com/p/94729046ea31)原文有循序渐进的讲解为什么但是最终没有完全解决我遇到的问题，很不错了\n\n 核心代码 ：\n \n ```objectivec\n \n    - (UIViewController*)getViewController\n\t{\n\t    for (UIView* next = [self superview]; next; next = next.superview)\n\t    {\n        UIResponder* nextResponder = [next nextResponder];\n        \n        if ([nextResponder isKindOfClass:[UIViewController class]])\n        {\n            return (UIViewController*)nextResponder;\n        }\n    }\n    \n    return nil; }\n```\n 其实是使用响应者链得到对应的Controller 这样的话cell就可以得到对应的Controller 然后使用RAC得到控制器销毁的消息发送时刻释放定时器。\n \n 核心代码如下 :\n  \n ```objectivec\n \n    - (void)didMoveToSuperview\n\t\t{\n\t\t    UIViewController *controller = [self getViewController];\n\t\t    //这里需要判断相应的controller是否存在\n\t\t    if (controller){\n\t\t        @weakify(self)\n\t\t        [controller.rac_willDeallocSignal\n\t\t         subscribeCompleted:^{\n\t\t             @strongify(self)\n\t\t             [self.countDownTimer invalidate];\n\t\t             self.countDownTimer = nil;\n\t\t         }];\n\t\t    }\n\t\t}\n\t\t\n```\n **这里释放的时机很重要使用上面的扩展需要Cell被添加到视图树之后才能获取到需要的UIViewController,不然得到会是一个空。那么怎么保证Cell一定被添加到视图树呢。UIView有个方法叫didMoveToSuperview,它会在该视图的父视图改变的时候被调用**\n\n\n- 4最后的时候发现虽然好了很多打印的时候仍然有一个定时器不能释放 ，试了很多的办法都不行 所以 就在cell 的dealoc方法中又释放了一次就好了具体是什么原因暂时还没发现，希望有知道的大神能够说一下啊，毕竟自己还是一个菜鸟。\n\n  最后又发现了一个好的例文还没仔细看[【iOS】TableViewCell上展示倒计时](http://www.jianshu.com/p/8ae4c65f4313);\n  \n  好了先写这么多，有想起来的再补充吧。\n\n\n  ","slug":"2016-7月-tableviewcell上播放倒计时","published":1,"updated":"2016-07-12T06:41:52.000Z","comments":1,"photos":[],"link":"","_id":"ckeb5g9po001krb0ueflh8tmh","content":"<h1 id=\"tableview-cell-上播放倒计时\"><a href=\"#tableview-cell-上播放倒计时\" class=\"headerlink\" title=\"tableview cell 上播放倒计时\"></a>tableview cell 上播放倒计时</h1><h2 id=\"项目中有用到cell上播放倒计时，遇到很多的坑，在这里总结一些以免下次再遇到\"><a href=\"#项目中有用到cell上播放倒计时，遇到很多的坑，在这里总结一些以免下次再遇到\" class=\"headerlink\" title=\"项目中有用到cell上播放倒计时，遇到很多的坑，在这里总结一些以免下次再遇到\"></a>项目中有用到cell上播放倒计时，遇到很多的坑，在这里总结一些以免下次再遇到</h2><ul>\n<li>1 第一条跟NStimer无关  只是平时项目中的细节问题，一定要注意block中的循环引用问题，这里有两种方法 </li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一种创建一个self弱引用</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> WS(weakSelf)  __weak __typeof(&amp;*self)weakSelf = self;</span></span><br><span class=\"line\"><span class=\"comment\">//第二种就是如果项目中用到了reactivecocoa这个第三方的话 使用     @weakify（self）</span></span><br><span class=\"line\">@Strongify（<span class=\"keyword\">self</span>）</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"这两个是成对出现的block外用-weakify-block里面用-strongify（今天发现好多控制器请求数据的时候没有严格使用，导致很多控制器没有释放）\"><a href=\"#这两个是成对出现的block外用-weakify-block里面用-strongify（今天发现好多控制器请求数据的时候没有严格使用，导致很多控制器没有释放）\" class=\"headerlink\" title=\"这两个是成对出现的block外用@weakify block里面用@strongify（今天发现好多控制器请求数据的时候没有严格使用，导致很多控制器没有释放）\"></a>这两个是成对出现的block外用@weakify block里面用@strongify（今天发现好多控制器请求数据的时候没有严格使用，导致很多控制器没有释放）</h3><ul>\n<li><p>2 这里只说我自己遇到的问题及解决办法，基本的介绍就不再说了 </p>\n<p>（1）定时器如果要循环的话需要加入到runloop中</p>\n</li>\n</ul>\n<pre><code>[[NSrunLoop currenRunLoop] addTimer:_timerforMode:NSRunLoopCommonModes]\n</code></pre><p>   (2)定时器创建的线程和释放的线程应该在同一个线程，否则的话无法释放有兴趣的同学可以试一下</p>\n  <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">//创建</span></span><br><span class=\"line\">  <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.time) &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span>.time invalidate];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.time = [<span class=\"built_in\">NSTimer</span> ez_scheduledTimerWithTimeInterval:<span class=\"number\">1</span>    block:^&#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSDate</span> *currentDate =[<span class=\"built_in\">NSDate</span> date];</span><br><span class=\"line\">        <span class=\"built_in\">NSCalendar</span> *calendar = [<span class=\"built_in\">NSCalendar</span> currentCalendar];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSCalendarUnit</span>  unit = <span class=\"built_in\">NSDayCalendarUnit</span> | <span class=\"built_in\">NSCalendarUnitHour</span> | <span class=\"built_in\">NSCalendarUnitMinute</span>  | <span class=\"built_in\">NSCalendarUnitSecond</span>;</span><br><span class=\"line\">        <span class=\"built_in\">NSDateComponents</span> *commponent = [calendar components:unit fromDate:currentDate toDate:[<span class=\"built_in\">NSDate</span> dateWithString:weakSelf.endTime ] options:<span class=\"built_in\">NSCalendarWrapComponents</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSDate</span> *dt = [[<span class=\"built_in\">NSDate</span> dateWithString: weakSelf.endTime] earlierDate:currentDate];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"-------------------%@\"</span>,weakSelf.endTime);</span><br><span class=\"line\">        <span class=\"comment\">//    self.getPrimeRate.enabled =YES;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([dt isEqualToDate:[<span class=\"built_in\">NSDate</span> dateWithString:weakSelf.endTime ]])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            [weakSelf.time invalidate];</span><br><span class=\"line\">            weakSelf.countDownLabel.text = <span class=\"string\">@\"⚡️距离开放认投剩余0天00时00分00秒\"</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            weakSelf.countDownLabel.text = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"⚡️距离开放认投剩余%zd天%02zd时%02zd分%02zd秒\"</span>,commponent.day,commponent.hour,commponent.minute,commponent.second];</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; repeats:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里是释放  </p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">             @strongify(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">             [<span class=\"keyword\">self</span>.time invalidate];</span><br><span class=\"line\">             <span class=\"keyword\">self</span>.time = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">             <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"timer停止了\"</span>);</span><br><span class=\"line\">         &#125;);</span><br></pre></td></tr></table></figure>\n<p> <strong>注 这里我使用的是一个NStimer的分类原文有详细介绍就是创建一个对self弱引用的Nstimer<a href=\"http://blog.callmewhy.com/2015/07/06/weak-timer-in-ios/\" target=\"_blank\" rel=\"noopener\">原文</a></strong>  </p>\n<ul>\n<li><p>3 由于cell的重用问题 每次控制pop或者dismiss的时候，都不能够释放所以尤其是在和定时器一起用的时候要特别的注意循环引用的问题 ，我就是 遇到了这样的问题感觉很坑的 ，我们要想释放cell就需要知道 控制器的UIviewcontroller的dealoc方法 那么我们怎么才能在cell中得到cell所在的控制器呢  为了降低耦合度 有网友想到了给view添加一个扩展的方法原文<a href=\"http://www.jianshu.com/p/94729046ea31\" target=\"_blank\" rel=\"noopener\">在这</a>原文有循序渐进的讲解为什么但是最终没有完全解决我遇到的问题，很不错了</p>\n<p>核心代码 ：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">   - (<span class=\"built_in\">UIViewController</span>*)getViewController</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span>* next = [<span class=\"keyword\">self</span> superview]; next; next = next.superview)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       <span class=\"built_in\">UIResponder</span>* nextResponder = [next nextResponder];</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">if</span> ([nextResponder isKindOfClass:[<span class=\"built_in\">UIViewController</span> <span class=\"keyword\">class</span>]])</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> (<span class=\"built_in\">UIViewController</span>*)nextResponder;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>; &#125;</span><br></pre></td></tr></table></figure>\n<p>其实是使用响应者链得到对应的Controller 这样的话cell就可以得到对应的Controller 然后使用RAC得到控制器销毁的消息发送时刻释放定时器。</p>\n<p>核心代码如下 :</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">  - (<span class=\"keyword\">void</span>)didMoveToSuperview</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">UIViewController</span> *controller = [<span class=\"keyword\">self</span> getViewController];</span><br><span class=\"line\">    <span class=\"comment\">//这里需要判断相应的controller是否存在</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (controller)&#123;</span><br><span class=\"line\">        @weakify(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">        [controller.rac_willDeallocSignal</span><br><span class=\"line\">         subscribeCompleted:^&#123;</span><br><span class=\"line\">             @strongify(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">             [<span class=\"keyword\">self</span>.countDownTimer invalidate];</span><br><span class=\"line\">             <span class=\"keyword\">self</span>.countDownTimer = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">         &#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>这里释放的时机很重要使用上面的扩展需要Cell被添加到视图树之后才能获取到需要的UIViewController,不然得到会是一个空。那么怎么保证Cell一定被添加到视图树呢。UIView有个方法叫didMoveToSuperview,它会在该视图的父视图改变的时候被调用</strong></p>\n</li>\n</ul>\n<ul>\n<li><p>4最后的时候发现虽然好了很多打印的时候仍然有一个定时器不能释放 ，试了很多的办法都不行 所以 就在cell 的dealoc方法中又释放了一次就好了具体是什么原因暂时还没发现，希望有知道的大神能够说一下啊，毕竟自己还是一个菜鸟。</p>\n<p>最后又发现了一个好的例文还没仔细看<a href=\"http://www.jianshu.com/p/8ae4c65f4313\" target=\"_blank\" rel=\"noopener\">【iOS】TableViewCell上展示倒计时</a>;</p>\n<p>好了先写这么多，有想起来的再补充吧。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"tableview-cell-上播放倒计时\"><a href=\"#tableview-cell-上播放倒计时\" class=\"headerlink\" title=\"tableview cell 上播放倒计时\"></a>tableview cell 上播放倒计时</h1><h2 id=\"项目中有用到cell上播放倒计时，遇到很多的坑，在这里总结一些以免下次再遇到\"><a href=\"#项目中有用到cell上播放倒计时，遇到很多的坑，在这里总结一些以免下次再遇到\" class=\"headerlink\" title=\"项目中有用到cell上播放倒计时，遇到很多的坑，在这里总结一些以免下次再遇到\"></a>项目中有用到cell上播放倒计时，遇到很多的坑，在这里总结一些以免下次再遇到</h2><ul>\n<li>1 第一条跟NStimer无关  只是平时项目中的细节问题，一定要注意block中的循环引用问题，这里有两种方法 </li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一种创建一个self弱引用</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> WS(weakSelf)  __weak __typeof(&amp;*self)weakSelf = self;</span></span><br><span class=\"line\"><span class=\"comment\">//第二种就是如果项目中用到了reactivecocoa这个第三方的话 使用     @weakify（self）</span></span><br><span class=\"line\">@Strongify（<span class=\"keyword\">self</span>）</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"这两个是成对出现的block外用-weakify-block里面用-strongify（今天发现好多控制器请求数据的时候没有严格使用，导致很多控制器没有释放）\"><a href=\"#这两个是成对出现的block外用-weakify-block里面用-strongify（今天发现好多控制器请求数据的时候没有严格使用，导致很多控制器没有释放）\" class=\"headerlink\" title=\"这两个是成对出现的block外用@weakify block里面用@strongify（今天发现好多控制器请求数据的时候没有严格使用，导致很多控制器没有释放）\"></a>这两个是成对出现的block外用@weakify block里面用@strongify（今天发现好多控制器请求数据的时候没有严格使用，导致很多控制器没有释放）</h3><ul>\n<li><p>2 这里只说我自己遇到的问题及解决办法，基本的介绍就不再说了 </p>\n<p>（1）定时器如果要循环的话需要加入到runloop中</p>\n</li>\n</ul>\n<pre><code>[[NSrunLoop currenRunLoop] addTimer:_timerforMode:NSRunLoopCommonModes]\n</code></pre><p>   (2)定时器创建的线程和释放的线程应该在同一个线程，否则的话无法释放有兴趣的同学可以试一下</p>\n  <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">//创建</span></span><br><span class=\"line\">  <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.time) &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span>.time invalidate];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.time = [<span class=\"built_in\">NSTimer</span> ez_scheduledTimerWithTimeInterval:<span class=\"number\">1</span>    block:^&#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSDate</span> *currentDate =[<span class=\"built_in\">NSDate</span> date];</span><br><span class=\"line\">        <span class=\"built_in\">NSCalendar</span> *calendar = [<span class=\"built_in\">NSCalendar</span> currentCalendar];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSCalendarUnit</span>  unit = <span class=\"built_in\">NSDayCalendarUnit</span> | <span class=\"built_in\">NSCalendarUnitHour</span> | <span class=\"built_in\">NSCalendarUnitMinute</span>  | <span class=\"built_in\">NSCalendarUnitSecond</span>;</span><br><span class=\"line\">        <span class=\"built_in\">NSDateComponents</span> *commponent = [calendar components:unit fromDate:currentDate toDate:[<span class=\"built_in\">NSDate</span> dateWithString:weakSelf.endTime ] options:<span class=\"built_in\">NSCalendarWrapComponents</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSDate</span> *dt = [[<span class=\"built_in\">NSDate</span> dateWithString: weakSelf.endTime] earlierDate:currentDate];</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"-------------------%@\"</span>,weakSelf.endTime);</span><br><span class=\"line\">        <span class=\"comment\">//    self.getPrimeRate.enabled =YES;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>([dt isEqualToDate:[<span class=\"built_in\">NSDate</span> dateWithString:weakSelf.endTime ]])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            [weakSelf.time invalidate];</span><br><span class=\"line\">            weakSelf.countDownLabel.text = <span class=\"string\">@\"⚡️距离开放认投剩余0天00时00分00秒\"</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            weakSelf.countDownLabel.text = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"⚡️距离开放认投剩余%zd天%02zd时%02zd分%02zd秒\"</span>,commponent.day,commponent.hour,commponent.minute,commponent.second];</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; repeats:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里是释放  </p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">             @strongify(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">             [<span class=\"keyword\">self</span>.time invalidate];</span><br><span class=\"line\">             <span class=\"keyword\">self</span>.time = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">             <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"timer停止了\"</span>);</span><br><span class=\"line\">         &#125;);</span><br></pre></td></tr></table></figure>\n<p> <strong>注 这里我使用的是一个NStimer的分类原文有详细介绍就是创建一个对self弱引用的Nstimer<a href=\"http://blog.callmewhy.com/2015/07/06/weak-timer-in-ios/\" target=\"_blank\" rel=\"noopener\">原文</a></strong>  </p>\n<ul>\n<li><p>3 由于cell的重用问题 每次控制pop或者dismiss的时候，都不能够释放所以尤其是在和定时器一起用的时候要特别的注意循环引用的问题 ，我就是 遇到了这样的问题感觉很坑的 ，我们要想释放cell就需要知道 控制器的UIviewcontroller的dealoc方法 那么我们怎么才能在cell中得到cell所在的控制器呢  为了降低耦合度 有网友想到了给view添加一个扩展的方法原文<a href=\"http://www.jianshu.com/p/94729046ea31\" target=\"_blank\" rel=\"noopener\">在这</a>原文有循序渐进的讲解为什么但是最终没有完全解决我遇到的问题，很不错了</p>\n<p>核心代码 ：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">   - (<span class=\"built_in\">UIViewController</span>*)getViewController</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span>* next = [<span class=\"keyword\">self</span> superview]; next; next = next.superview)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       <span class=\"built_in\">UIResponder</span>* nextResponder = [next nextResponder];</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">if</span> ([nextResponder isKindOfClass:[<span class=\"built_in\">UIViewController</span> <span class=\"keyword\">class</span>]])</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> (<span class=\"built_in\">UIViewController</span>*)nextResponder;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>; &#125;</span><br></pre></td></tr></table></figure>\n<p>其实是使用响应者链得到对应的Controller 这样的话cell就可以得到对应的Controller 然后使用RAC得到控制器销毁的消息发送时刻释放定时器。</p>\n<p>核心代码如下 :</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">  - (<span class=\"keyword\">void</span>)didMoveToSuperview</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">UIViewController</span> *controller = [<span class=\"keyword\">self</span> getViewController];</span><br><span class=\"line\">    <span class=\"comment\">//这里需要判断相应的controller是否存在</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (controller)&#123;</span><br><span class=\"line\">        @weakify(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">        [controller.rac_willDeallocSignal</span><br><span class=\"line\">         subscribeCompleted:^&#123;</span><br><span class=\"line\">             @strongify(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">             [<span class=\"keyword\">self</span>.countDownTimer invalidate];</span><br><span class=\"line\">             <span class=\"keyword\">self</span>.countDownTimer = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">         &#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>这里释放的时机很重要使用上面的扩展需要Cell被添加到视图树之后才能获取到需要的UIViewController,不然得到会是一个空。那么怎么保证Cell一定被添加到视图树呢。UIView有个方法叫didMoveToSuperview,它会在该视图的父视图改变的时候被调用</strong></p>\n</li>\n</ul>\n<ul>\n<li><p>4最后的时候发现虽然好了很多打印的时候仍然有一个定时器不能释放 ，试了很多的办法都不行 所以 就在cell 的dealoc方法中又释放了一次就好了具体是什么原因暂时还没发现，希望有知道的大神能够说一下啊，毕竟自己还是一个菜鸟。</p>\n<p>最后又发现了一个好的例文还没仔细看<a href=\"http://www.jianshu.com/p/8ae4c65f4313\" target=\"_blank\" rel=\"noopener\">【iOS】TableViewCell上展示倒计时</a>;</p>\n<p>好了先写这么多，有想起来的再补充吧。</p>\n</li>\n</ul>"},{"title":"使用jsonModel需要注意的","date":"2016-07-25T07:15:34.000Z","_content":"\n\n\n\n# 使用Jsonmodel需要注意事项\n\n   **我们知道josnmodel可以帮助我们很方面的把json字符转模型 ，但是使用中需要注意以下几点**\n   \n   \n\n\n - 当Model的属性和json 不一致时\n \n \n ```objectivec\n\t\t \n\t\t   {\n\t\t  \"order_id\": 104,\n\t\t  \"order_details\" : [\n\t\t    {\n\t\t      \"name\": \"Product#1\",   \n\t\t      \"price\": {\n\t\t        \"usd\": 12.95\n\t\t      }\n\t\t    }\n\t\t  ]\n\t\t}\n\t\t//以上是json字符串\n\n\t\t@interface OrderModel : JSONModel\n\t\t@property (assign, nonatomic) int id;\n\t\t@property (assign, nonatomic) float price;\n\t\t@property (strong, nonatomic) NSString* productName;\n\t\t@end\n\t\t\n\t\t@implementation OrderModel\n\t\t\n\t\t+(JSONKeyMapper*)keyMapper\n\t\t{\n\t\t  return [[JSONKeyMapper alloc] initWithDictionary:@{\n\t\t    @\"order_id\": @\"id\",\n\t\t    @\"order_details.name\": @\"productName\",\n\t\t    @\"order_details.price.usd\": @\"price\"\n\t\t  }];\n\t\t}\n\t\t\n\t\t@end \n\t\t//以上是对应的 属性  只有返回的json和Model属性不一致的时候才需要这个方法keyMapper\n\t\t\n\t```\n\t\t\n<!--more-->\n- 可以设置全局的属性\n```objectivec\n\n\t\t\t\t [JSONModel setGlobalKeyMapper:[\n\t\t\t\t    [JSONKeyMapper alloc] initWithDictionary:@{\n\t\t\t\t      @\"item_id\":@\"ID\",\n\t\t\t\t      @\"item.name\": @\"itemName\"\n\t\t\t\t   }]\n\t\t\t\t];\n```\n\n- 属性为非必须的时候(也就是可选的，或者需要忽略的)\n\n```objectivec\n\n\t   @property (strong, nonatomic) NSString<Optional>* name;//可选的\n\t   \n\t   @property (strong, nonatomic) NSString<Ignore>* customProperty;//忽略的\n```\n\n- ### 最后也是最重要的在实际使用中发现基本数据类型 float NSInterger 等无法直接使用<Optial>最后找到的解决办法是设置全局可选\n例如我做的cell自适应高度的时候  cell的高度是存储在Model的属性中的需要设置可选\n\n```objcetivec\n\n      @property(nonatomic,assign)float  height;//缓存的高度\n      +(BOOL)propertyIsOptional:(NSString*)propertyName\n\t{\n\t  if ([propertyName isEqualToString: @\"height\"]) return YES;\n\t  return NO;\n\t}\n\n```\n\n\n","source":"_posts/2016/7月/使用jsonModel需要注意的.md","raw":"---\ntitle: 使用jsonModel需要注意的\ndate: 2016-07-25 15:15:34\ntags:\n---\n\n\n\n\n# 使用Jsonmodel需要注意事项\n\n   **我们知道josnmodel可以帮助我们很方面的把json字符转模型 ，但是使用中需要注意以下几点**\n   \n   \n\n\n - 当Model的属性和json 不一致时\n \n \n ```objectivec\n\t\t \n\t\t   {\n\t\t  \"order_id\": 104,\n\t\t  \"order_details\" : [\n\t\t    {\n\t\t      \"name\": \"Product#1\",   \n\t\t      \"price\": {\n\t\t        \"usd\": 12.95\n\t\t      }\n\t\t    }\n\t\t  ]\n\t\t}\n\t\t//以上是json字符串\n\n\t\t@interface OrderModel : JSONModel\n\t\t@property (assign, nonatomic) int id;\n\t\t@property (assign, nonatomic) float price;\n\t\t@property (strong, nonatomic) NSString* productName;\n\t\t@end\n\t\t\n\t\t@implementation OrderModel\n\t\t\n\t\t+(JSONKeyMapper*)keyMapper\n\t\t{\n\t\t  return [[JSONKeyMapper alloc] initWithDictionary:@{\n\t\t    @\"order_id\": @\"id\",\n\t\t    @\"order_details.name\": @\"productName\",\n\t\t    @\"order_details.price.usd\": @\"price\"\n\t\t  }];\n\t\t}\n\t\t\n\t\t@end \n\t\t//以上是对应的 属性  只有返回的json和Model属性不一致的时候才需要这个方法keyMapper\n\t\t\n\t```\n\t\t\n<!--more-->\n- 可以设置全局的属性\n```objectivec\n\n\t\t\t\t [JSONModel setGlobalKeyMapper:[\n\t\t\t\t    [JSONKeyMapper alloc] initWithDictionary:@{\n\t\t\t\t      @\"item_id\":@\"ID\",\n\t\t\t\t      @\"item.name\": @\"itemName\"\n\t\t\t\t   }]\n\t\t\t\t];\n```\n\n- 属性为非必须的时候(也就是可选的，或者需要忽略的)\n\n```objectivec\n\n\t   @property (strong, nonatomic) NSString<Optional>* name;//可选的\n\t   \n\t   @property (strong, nonatomic) NSString<Ignore>* customProperty;//忽略的\n```\n\n- ### 最后也是最重要的在实际使用中发现基本数据类型 float NSInterger 等无法直接使用<Optial>最后找到的解决办法是设置全局可选\n例如我做的cell自适应高度的时候  cell的高度是存储在Model的属性中的需要设置可选\n\n```objcetivec\n\n      @property(nonatomic,assign)float  height;//缓存的高度\n      +(BOOL)propertyIsOptional:(NSString*)propertyName\n\t{\n\t  if ([propertyName isEqualToString: @\"height\"]) return YES;\n\t  return NO;\n\t}\n\n```\n\n\n","slug":"2016-7月-使用jsonModel需要注意的","published":1,"updated":"2017-07-12T15:51:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9pq001lrb0uy6fmszqf","content":"<h1 id=\"使用Jsonmodel需要注意事项\"><a href=\"#使用Jsonmodel需要注意事项\" class=\"headerlink\" title=\"使用Jsonmodel需要注意事项\"></a>使用Jsonmodel需要注意事项</h1><p>   <strong>我们知道josnmodel可以帮助我们很方面的把json字符转模型 ，但是使用中需要注意以下几点</strong></p>\n<ul>\n<li>当Model的属性和json 不一致时</li>\n</ul>\n <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">  <span class=\"string\">\"order_id\"</span>: <span class=\"number\">104</span>,</span><br><span class=\"line\">  <span class=\"string\">\"order_details\"</span> : [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Product#1\"</span>,   </span><br><span class=\"line\">      <span class=\"string\">\"price\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"usd\"</span>: <span class=\"number\">12.95</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//以上是json字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">OrderModel</span> : <span class=\"title\">JSONModel</span></span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">int</span> <span class=\"keyword\">id</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">float</span> price;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSString</span>* productName;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">OrderModel</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">+(JSONKeyMapper*)keyMapper</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [[JSONKeyMapper alloc] initWithDictionary:@&#123;</span><br><span class=\"line\">    <span class=\"string\">@\"order_id\"</span>: <span class=\"string\">@\"id\"</span>,</span><br><span class=\"line\">    <span class=\"string\">@\"order_details.name\"</span>: <span class=\"string\">@\"productName\"</span>,</span><br><span class=\"line\">    <span class=\"string\">@\"order_details.price.usd\"</span>: <span class=\"string\">@\"price\"</span></span><br><span class=\"line\">  &#125;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span> </span><br><span class=\"line\"><span class=\"comment\">//以上是对应的 属性  只有返回的json和Model属性不一致的时候才需要这个方法keyMapper</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li><p>可以设置全局的属性</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> [JSONModel setGlobalKeyMapper:[</span><br><span class=\"line\">    [JSONKeyMapper alloc] initWithDictionary:@&#123;</span><br><span class=\"line\">      <span class=\"string\">@\"item_id\"</span>:<span class=\"string\">@\"ID\"</span>,</span><br><span class=\"line\">      <span class=\"string\">@\"item.name\"</span>: <span class=\"string\">@\"itemName\"</span></span><br><span class=\"line\">   &#125;]</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>属性为非必须的时候(也就是可选的，或者需要忽略的)</p>\n</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSString</span>&lt;Optional&gt;* name;<span class=\"comment\">//可选的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSString</span>&lt;Ignore&gt;* customProperty;<span class=\"comment\">//忽略的</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"最后也是最重要的在实际使用中发现基本数据类型-float-NSInterger-等无法直接使用最后找到的解决办法是设置全局可选\"><a href=\"#最后也是最重要的在实际使用中发现基本数据类型-float-NSInterger-等无法直接使用最后找到的解决办法是设置全局可选\" class=\"headerlink\" title=\"最后也是最重要的在实际使用中发现基本数据类型 float NSInterger 等无法直接使用最后找到的解决办法是设置全局可选\"></a>最后也是最重要的在实际使用中发现基本数据类型 float NSInterger 等无法直接使用<optial>最后找到的解决办法是设置全局可选</optial></h3>例如我做的cell自适应高度的时候  cell的高度是存储在Model的属性中的需要设置可选</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">     @property(nonatomic,assign)float  height;//缓存的高度</span><br><span class=\"line\">     +(BOOL)propertyIsOptional:(NSString*)propertyName</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  if ([propertyName isEqualToString: @&quot;height&quot;]) return YES;</span><br><span class=\"line\">  return NO;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"使用Jsonmodel需要注意事项\"><a href=\"#使用Jsonmodel需要注意事项\" class=\"headerlink\" title=\"使用Jsonmodel需要注意事项\"></a>使用Jsonmodel需要注意事项</h1><p>   <strong>我们知道josnmodel可以帮助我们很方面的把json字符转模型 ，但是使用中需要注意以下几点</strong></p>\n<ul>\n<li>当Model的属性和json 不一致时</li>\n</ul>\n <figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">  <span class=\"string\">\"order_id\"</span>: <span class=\"number\">104</span>,</span><br><span class=\"line\">  <span class=\"string\">\"order_details\"</span> : [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Product#1\"</span>,   </span><br><span class=\"line\">      <span class=\"string\">\"price\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"usd\"</span>: <span class=\"number\">12.95</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//以上是json字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">OrderModel</span> : <span class=\"title\">JSONModel</span></span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">int</span> <span class=\"keyword\">id</span>;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">float</span> price;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSString</span>* productName;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">OrderModel</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">+(JSONKeyMapper*)keyMapper</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [[JSONKeyMapper alloc] initWithDictionary:@&#123;</span><br><span class=\"line\">    <span class=\"string\">@\"order_id\"</span>: <span class=\"string\">@\"id\"</span>,</span><br><span class=\"line\">    <span class=\"string\">@\"order_details.name\"</span>: <span class=\"string\">@\"productName\"</span>,</span><br><span class=\"line\">    <span class=\"string\">@\"order_details.price.usd\"</span>: <span class=\"string\">@\"price\"</span></span><br><span class=\"line\">  &#125;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span> </span><br><span class=\"line\"><span class=\"comment\">//以上是对应的 属性  只有返回的json和Model属性不一致的时候才需要这个方法keyMapper</span></span><br></pre></td></tr></table></figure>","more":"<ul>\n<li><p>可以设置全局的属性</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> [JSONModel setGlobalKeyMapper:[</span><br><span class=\"line\">    [JSONKeyMapper alloc] initWithDictionary:@&#123;</span><br><span class=\"line\">      <span class=\"string\">@\"item_id\"</span>:<span class=\"string\">@\"ID\"</span>,</span><br><span class=\"line\">      <span class=\"string\">@\"item.name\"</span>: <span class=\"string\">@\"itemName\"</span></span><br><span class=\"line\">   &#125;]</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>属性为非必须的时候(也就是可选的，或者需要忽略的)</p>\n</li>\n</ul>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSString</span>&lt;Optional&gt;* name;<span class=\"comment\">//可选的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSString</span>&lt;Ignore&gt;* customProperty;<span class=\"comment\">//忽略的</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"最后也是最重要的在实际使用中发现基本数据类型-float-NSInterger-等无法直接使用最后找到的解决办法是设置全局可选\"><a href=\"#最后也是最重要的在实际使用中发现基本数据类型-float-NSInterger-等无法直接使用最后找到的解决办法是设置全局可选\" class=\"headerlink\" title=\"最后也是最重要的在实际使用中发现基本数据类型 float NSInterger 等无法直接使用最后找到的解决办法是设置全局可选\"></a>最后也是最重要的在实际使用中发现基本数据类型 float NSInterger 等无法直接使用<optial>最后找到的解决办法是设置全局可选</optial></h3>例如我做的cell自适应高度的时候  cell的高度是存储在Model的属性中的需要设置可选</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">     @property(nonatomic,assign)float  height;//缓存的高度</span><br><span class=\"line\">     +(BOOL)propertyIsOptional:(NSString*)propertyName</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  if ([propertyName isEqualToString: @&quot;height&quot;]) return YES;</span><br><span class=\"line\">  return NO;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"真机运行第三方开源项目","date":"2016-07-15T05:56:14.000Z","_content":"\n\n![](http://ww4.sinaimg.cn/large/0060lm7Tgw1f5uks42cv0j311m0nsjuw.jpg\n)\n#### 今天下载了个个开源的第三方程序，但是发现在模拟器上可以运行，但是真机上没有办法运行，平时运行的时候也没有注意，，这次决定较真一回，经过一番搜索发现，原来是证书团队这一块儿在作祟，于是乎，只要把general里的 team 设为none 就可以了，怎么样呢，是不是很简单呢","source":"_posts/2016/7月/真机运行第三方开源项目.md","raw":"---\ntitle: '真机运行第三方开源项目'\ndate: 2016-07-15 13:56:14\ntags: 开源、第三方 \n---\n\n\n![](http://ww4.sinaimg.cn/large/0060lm7Tgw1f5uks42cv0j311m0nsjuw.jpg\n)\n#### 今天下载了个个开源的第三方程序，但是发现在模拟器上可以运行，但是真机上没有办法运行，平时运行的时候也没有注意，，这次决定较真一回，经过一番搜索发现，原来是证书团队这一块儿在作祟，于是乎，只要把general里的 team 设为none 就可以了，怎么样呢，是不是很简单呢","slug":"2016-7月-真机运行第三方开源项目","published":1,"updated":"2016-07-15T06:35:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9pr001mrb0uxzhmrd27","content":"<p><img src=\"http://ww4.sinaimg.cn/large/0060lm7Tgw1f5uks42cv0j311m0nsjuw.jpg\" alt></p>\n<h4 id=\"今天下载了个个开源的第三方程序，但是发现在模拟器上可以运行，但是真机上没有办法运行，平时运行的时候也没有注意，，这次决定较真一回，经过一番搜索发现，原来是证书团队这一块儿在作祟，于是乎，只要把general里的-team-设为none-就可以了，怎么样呢，是不是很简单呢\"><a href=\"#今天下载了个个开源的第三方程序，但是发现在模拟器上可以运行，但是真机上没有办法运行，平时运行的时候也没有注意，，这次决定较真一回，经过一番搜索发现，原来是证书团队这一块儿在作祟，于是乎，只要把general里的-team-设为none-就可以了，怎么样呢，是不是很简单呢\" class=\"headerlink\" title=\"今天下载了个个开源的第三方程序，但是发现在模拟器上可以运行，但是真机上没有办法运行，平时运行的时候也没有注意，，这次决定较真一回，经过一番搜索发现，原来是证书团队这一块儿在作祟，于是乎，只要把general里的 team 设为none 就可以了，怎么样呢，是不是很简单呢\"></a>今天下载了个个开源的第三方程序，但是发现在模拟器上可以运行，但是真机上没有办法运行，平时运行的时候也没有注意，，这次决定较真一回，经过一番搜索发现，原来是证书团队这一块儿在作祟，于是乎，只要把general里的 team 设为none 就可以了，怎么样呢，是不是很简单呢</h4>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://ww4.sinaimg.cn/large/0060lm7Tgw1f5uks42cv0j311m0nsjuw.jpg\" alt></p>\n<h4 id=\"今天下载了个个开源的第三方程序，但是发现在模拟器上可以运行，但是真机上没有办法运行，平时运行的时候也没有注意，，这次决定较真一回，经过一番搜索发现，原来是证书团队这一块儿在作祟，于是乎，只要把general里的-team-设为none-就可以了，怎么样呢，是不是很简单呢\"><a href=\"#今天下载了个个开源的第三方程序，但是发现在模拟器上可以运行，但是真机上没有办法运行，平时运行的时候也没有注意，，这次决定较真一回，经过一番搜索发现，原来是证书团队这一块儿在作祟，于是乎，只要把general里的-team-设为none-就可以了，怎么样呢，是不是很简单呢\" class=\"headerlink\" title=\"今天下载了个个开源的第三方程序，但是发现在模拟器上可以运行，但是真机上没有办法运行，平时运行的时候也没有注意，，这次决定较真一回，经过一番搜索发现，原来是证书团队这一块儿在作祟，于是乎，只要把general里的 team 设为none 就可以了，怎么样呢，是不是很简单呢\"></a>今天下载了个个开源的第三方程序，但是发现在模拟器上可以运行，但是真机上没有办法运行，平时运行的时候也没有注意，，这次决定较真一回，经过一番搜索发现，原来是证书团队这一块儿在作祟，于是乎，只要把general里的 team 设为none 就可以了，怎么样呢，是不是很简单呢</h4>"},{"title":"透明导航栏需要注意的几点问题","date":"2016-07-01T02:38:35.000Z","_content":"\n\n\n# 透明导航栏需要注意的几点问题\n\n#### 导航栏的透明度设置\n\n  项目要求导航栏渐变透明效果这里使用的是第三方LTNavigationbar3000多的星星，可是 按照demo使用发现没有效果，完全没有。后来终于被细心的同事大神发现 继承自basenavc而basenavi里面有了一句坑爹的话\n  \n    self.navigationBar.translucent = NO;\n    \n  竟然是NO！NO！好吧，英文不好原来是透明度的意思，把透明度关闭了当然不行啦。。\n  \n  然后就有效果了。\n \n \n<!--more-->\n  \n  \n  \n### scrollView（或者是tableView）的偏移量问题\n\n在实践的过程中发现不能完全按照demo来 透明度一直有问题不知道为什么，，最后发现storyboard里面的scrollView的偏移量设置不一样 导致原来的计算方法失效，好吧，是我SB了。。\n\n\n###  关于推出透明导航栏有黑影问题\n\n透明导航栏做的差不多的但是发现每次推出的时候有黑影就是这样子的：\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/67179-716b4afa201ecd19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n最后也是Google到了答案需要在baseNv的viewdidload里面加上一句\n\n\n     self.backGroundColor = [UIcolor whitecolor];\n     \n   是的，你没看错就是这句，然后就完美了\n ","source":"_posts/2016/7月/透明导航栏需要注意的几点问题.md","raw":"---\ntitle: 透明导航栏需要注意的几点问题\ndate: 2016-07-01 10:38:35\ntags:\n---\n\n\n\n# 透明导航栏需要注意的几点问题\n\n#### 导航栏的透明度设置\n\n  项目要求导航栏渐变透明效果这里使用的是第三方LTNavigationbar3000多的星星，可是 按照demo使用发现没有效果，完全没有。后来终于被细心的同事大神发现 继承自basenavc而basenavi里面有了一句坑爹的话\n  \n    self.navigationBar.translucent = NO;\n    \n  竟然是NO！NO！好吧，英文不好原来是透明度的意思，把透明度关闭了当然不行啦。。\n  \n  然后就有效果了。\n \n \n<!--more-->\n  \n  \n  \n### scrollView（或者是tableView）的偏移量问题\n\n在实践的过程中发现不能完全按照demo来 透明度一直有问题不知道为什么，，最后发现storyboard里面的scrollView的偏移量设置不一样 导致原来的计算方法失效，好吧，是我SB了。。\n\n\n###  关于推出透明导航栏有黑影问题\n\n透明导航栏做的差不多的但是发现每次推出的时候有黑影就是这样子的：\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/67179-716b4afa201ecd19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n最后也是Google到了答案需要在baseNv的viewdidload里面加上一句\n\n\n     self.backGroundColor = [UIcolor whitecolor];\n     \n   是的，你没看错就是这句，然后就完美了\n ","slug":"2016-7月-透明导航栏需要注意的几点问题","published":1,"updated":"2016-07-12T03:10:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9pu001nrb0u2py5ikxf","content":"<h1 id=\"透明导航栏需要注意的几点问题\"><a href=\"#透明导航栏需要注意的几点问题\" class=\"headerlink\" title=\"透明导航栏需要注意的几点问题\"></a>透明导航栏需要注意的几点问题</h1><h4 id=\"导航栏的透明度设置\"><a href=\"#导航栏的透明度设置\" class=\"headerlink\" title=\"导航栏的透明度设置\"></a>导航栏的透明度设置</h4><p>  项目要求导航栏渐变透明效果这里使用的是第三方LTNavigationbar3000多的星星，可是 按照demo使用发现没有效果，完全没有。后来终于被细心的同事大神发现 继承自basenavc而basenavi里面有了一句坑爹的话</p>\n<pre><code>self.navigationBar.translucent = NO;\n</code></pre><p>  竟然是NO！NO！好吧，英文不好原来是透明度的意思，把透明度关闭了当然不行啦。。</p>\n<p>  然后就有效果了。</p>\n<a id=\"more\"></a>\n<h3 id=\"scrollView（或者是tableView）的偏移量问题\"><a href=\"#scrollView（或者是tableView）的偏移量问题\" class=\"headerlink\" title=\"scrollView（或者是tableView）的偏移量问题\"></a>scrollView（或者是tableView）的偏移量问题</h3><p>在实践的过程中发现不能完全按照demo来 透明度一直有问题不知道为什么，，最后发现storyboard里面的scrollView的偏移量设置不一样 导致原来的计算方法失效，好吧，是我SB了。。</p>\n<h3 id=\"关于推出透明导航栏有黑影问题\"><a href=\"#关于推出透明导航栏有黑影问题\" class=\"headerlink\" title=\"关于推出透明导航栏有黑影问题\"></a>关于推出透明导航栏有黑影问题</h3><p>透明导航栏做的差不多的但是发现每次推出的时候有黑影就是这样子的：<br><img src=\"http://upload-images.jianshu.io/upload_images/67179-716b4afa201ecd19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<p>最后也是Google到了答案需要在baseNv的viewdidload里面加上一句</p>\n<pre><code>self.backGroundColor = [UIcolor whitecolor];\n</code></pre><p>   是的，你没看错就是这句，然后就完美了</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"透明导航栏需要注意的几点问题\"><a href=\"#透明导航栏需要注意的几点问题\" class=\"headerlink\" title=\"透明导航栏需要注意的几点问题\"></a>透明导航栏需要注意的几点问题</h1><h4 id=\"导航栏的透明度设置\"><a href=\"#导航栏的透明度设置\" class=\"headerlink\" title=\"导航栏的透明度设置\"></a>导航栏的透明度设置</h4><p>  项目要求导航栏渐变透明效果这里使用的是第三方LTNavigationbar3000多的星星，可是 按照demo使用发现没有效果，完全没有。后来终于被细心的同事大神发现 继承自basenavc而basenavi里面有了一句坑爹的话</p>\n<pre><code>self.navigationBar.translucent = NO;\n</code></pre><p>  竟然是NO！NO！好吧，英文不好原来是透明度的意思，把透明度关闭了当然不行啦。。</p>\n<p>  然后就有效果了。</p>","more":"<h3 id=\"scrollView（或者是tableView）的偏移量问题\"><a href=\"#scrollView（或者是tableView）的偏移量问题\" class=\"headerlink\" title=\"scrollView（或者是tableView）的偏移量问题\"></a>scrollView（或者是tableView）的偏移量问题</h3><p>在实践的过程中发现不能完全按照demo来 透明度一直有问题不知道为什么，，最后发现storyboard里面的scrollView的偏移量设置不一样 导致原来的计算方法失效，好吧，是我SB了。。</p>\n<h3 id=\"关于推出透明导航栏有黑影问题\"><a href=\"#关于推出透明导航栏有黑影问题\" class=\"headerlink\" title=\"关于推出透明导航栏有黑影问题\"></a>关于推出透明导航栏有黑影问题</h3><p>透明导航栏做的差不多的但是发现每次推出的时候有黑影就是这样子的：<br><img src=\"http://upload-images.jianshu.io/upload_images/67179-716b4afa201ecd19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<p>最后也是Google到了答案需要在baseNv的viewdidload里面加上一句</p>\n<pre><code>self.backGroundColor = [UIcolor whitecolor];\n</code></pre><p>   是的，你没看错就是这句，然后就完美了</p>"},{"title":" IOS中的__block关键字简单使用","date":"2017-01-10T09:11:27.000Z","_content":"\n###  1.__block 什么开始后使用 ？\n结论: 在block里面修改局部变量的值都要使用__Block修饰。\n###  2.在block中对一个数组执行添加操作，这个数组需要声明成__block么？\n\n答案：不需要声明成__block ,因为testArray的指针并没有改变(往数组里面添加对象，数组的指针是没有改变的，只是指针指向的内存里面的内容变了)\n\n### 3.在block里对NSInterger的值进行修改,这个NSIterger变量是否需要用__block修饰？\n<!--more-->\n答:NSInterger的值发生变化,需要添加__block进行修饰.\n\n示例代码\n\n```objectivec\n\n\n    NSMutableArray * testArray = [NSMutableArray arrayWithObjects:@\"1\",@\"2\",@\"3\", nil];\n    __block NSInteger foo = 100;\n    \n    void (^testBlock)() = ^{\n      \n        [testArray addObject:@\"99\"];\n        \n        foo = 50;\n    };\n    testBlock();\n    NSLog(@\"%@\",testArray);\n    NSLog(@\"%ld\",foo);\n    \n    \n ```\n \n 打印结果:\n 2017-01-10 17:47:45.201 block内存测试[4768:2423415] (\n    1,\n    2,\n    3,\n    99\n)\n2017-01-10 17:47:45.201 block内存测试[4768:2423415] 50\n\n","source":"_posts/2017/1月/IOS中的-block关键字简单使用.md","raw":"---\ntitle: ' IOS中的__block关键字简单使用'\ndate: 2017-01-10 17:11:27\ntags: 内存管理\n---\n\n###  1.__block 什么开始后使用 ？\n结论: 在block里面修改局部变量的值都要使用__Block修饰。\n###  2.在block中对一个数组执行添加操作，这个数组需要声明成__block么？\n\n答案：不需要声明成__block ,因为testArray的指针并没有改变(往数组里面添加对象，数组的指针是没有改变的，只是指针指向的内存里面的内容变了)\n\n### 3.在block里对NSInterger的值进行修改,这个NSIterger变量是否需要用__block修饰？\n<!--more-->\n答:NSInterger的值发生变化,需要添加__block进行修饰.\n\n示例代码\n\n```objectivec\n\n\n    NSMutableArray * testArray = [NSMutableArray arrayWithObjects:@\"1\",@\"2\",@\"3\", nil];\n    __block NSInteger foo = 100;\n    \n    void (^testBlock)() = ^{\n      \n        [testArray addObject:@\"99\"];\n        \n        foo = 50;\n    };\n    testBlock();\n    NSLog(@\"%@\",testArray);\n    NSLog(@\"%ld\",foo);\n    \n    \n ```\n \n 打印结果:\n 2017-01-10 17:47:45.201 block内存测试[4768:2423415] (\n    1,\n    2,\n    3,\n    99\n)\n2017-01-10 17:47:45.201 block内存测试[4768:2423415] 50\n\n","slug":"2017-1月-IOS中的-block关键字简单使用","published":1,"updated":"2017-07-12T15:56:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9pv001prb0u0vdc4vq9","content":"<h3 id=\"1-block-什么开始后使用-？\"><a href=\"#1-block-什么开始后使用-？\" class=\"headerlink\" title=\"1.__block 什么开始后使用 ？\"></a>1.__block 什么开始后使用 ？</h3><p>结论: 在block里面修改局部变量的值都要使用__Block修饰。</p>\n<h3 id=\"2-在block中对一个数组执行添加操作，这个数组需要声明成-block么？\"><a href=\"#2-在block中对一个数组执行添加操作，这个数组需要声明成-block么？\" class=\"headerlink\" title=\"2.在block中对一个数组执行添加操作，这个数组需要声明成__block么？\"></a>2.在block中对一个数组执行添加操作，这个数组需要声明成__block么？</h3><p>答案：不需要声明成__block ,因为testArray的指针并没有改变(往数组里面添加对象，数组的指针是没有改变的，只是指针指向的内存里面的内容变了)</p>\n<h3 id=\"3-在block里对NSInterger的值进行修改-这个NSIterger变量是否需要用-block修饰？\"><a href=\"#3-在block里对NSInterger的值进行修改-这个NSIterger变量是否需要用-block修饰？\" class=\"headerlink\" title=\"3.在block里对NSInterger的值进行修改,这个NSIterger变量是否需要用__block修饰？\"></a>3.在block里对NSInterger的值进行修改,这个NSIterger变量是否需要用__block修饰？</h3><a id=\"more\"></a>\n<p>答:NSInterger的值发生变化,需要添加__block进行修饰.</p>\n<p>示例代码</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> * testArray = [<span class=\"built_in\">NSMutableArray</span> arrayWithObjects:<span class=\"string\">@\"1\"</span>,<span class=\"string\">@\"2\"</span>,<span class=\"string\">@\"3\"</span>, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">__block <span class=\"built_in\">NSInteger</span> foo = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> (^testBlock)() = ^&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    [testArray addObject:<span class=\"string\">@\"99\"</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    foo = <span class=\"number\">50</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">testBlock();</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,testArray);</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%ld\"</span>,foo);</span><br></pre></td></tr></table></figure>\n<p> 打印结果:<br> 2017-01-10 17:47:45.201 block内存测试[4768:2423415] (<br>    1,<br>    2,<br>    3,<br>    99<br>)<br>2017-01-10 17:47:45.201 block内存测试[4768:2423415] 50</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-block-什么开始后使用-？\"><a href=\"#1-block-什么开始后使用-？\" class=\"headerlink\" title=\"1.__block 什么开始后使用 ？\"></a>1.__block 什么开始后使用 ？</h3><p>结论: 在block里面修改局部变量的值都要使用__Block修饰。</p>\n<h3 id=\"2-在block中对一个数组执行添加操作，这个数组需要声明成-block么？\"><a href=\"#2-在block中对一个数组执行添加操作，这个数组需要声明成-block么？\" class=\"headerlink\" title=\"2.在block中对一个数组执行添加操作，这个数组需要声明成__block么？\"></a>2.在block中对一个数组执行添加操作，这个数组需要声明成__block么？</h3><p>答案：不需要声明成__block ,因为testArray的指针并没有改变(往数组里面添加对象，数组的指针是没有改变的，只是指针指向的内存里面的内容变了)</p>\n<h3 id=\"3-在block里对NSInterger的值进行修改-这个NSIterger变量是否需要用-block修饰？\"><a href=\"#3-在block里对NSInterger的值进行修改-这个NSIterger变量是否需要用-block修饰？\" class=\"headerlink\" title=\"3.在block里对NSInterger的值进行修改,这个NSIterger变量是否需要用__block修饰？\"></a>3.在block里对NSInterger的值进行修改,这个NSIterger变量是否需要用__block修饰？</h3>","more":"<p>答:NSInterger的值发生变化,需要添加__block进行修饰.</p>\n<p>示例代码</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> * testArray = [<span class=\"built_in\">NSMutableArray</span> arrayWithObjects:<span class=\"string\">@\"1\"</span>,<span class=\"string\">@\"2\"</span>,<span class=\"string\">@\"3\"</span>, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">__block <span class=\"built_in\">NSInteger</span> foo = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> (^testBlock)() = ^&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    [testArray addObject:<span class=\"string\">@\"99\"</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    foo = <span class=\"number\">50</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">testBlock();</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,testArray);</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%ld\"</span>,foo);</span><br></pre></td></tr></table></figure>\n<p> 打印结果:<br> 2017-01-10 17:47:45.201 block内存测试[4768:2423415] (<br>    1,<br>    2,<br>    3,<br>    99<br>)<br>2017-01-10 17:47:45.201 block内存测试[4768:2423415] 50</p>"},{"title":"iOS开发资源终极汇总<转>","date":"2016-06-02T03:04:05.000Z","_content":"\n\n*自己总结的iOS、mac开源项目及库。 github排名 https://github.com/trending,github搜索：https://github.com/search*\n\n\n\n- UI下拉刷新\n\n- EGOTableViewPullRefresh - 最早的下拉刷新控件。\n- SVPullToRefresh - 下拉刷新控件。\nMJRefresh - 仅需一行代码就可以为UITableView或者CollectionView加上下拉刷新或者上拉刷新功能。可以自定义上下拉刷新的文字说明。具体使用看“使用方法”。 （国人写）\nXHRefreshControl - XHRefreshControl 是一款高扩展性、低耦合度的下拉刷新、上提加载更多的组件。（国人写）\nCBStoreHouseRefreshControl - 一个效果很酷炫的下拉刷新控件。\nBreakOutToRefresh - 一个下拉刷新打砖块的开源 Swift 库，能让用户在等待下拉刷新的时候边玩撞球游戏边等待。\nKYJellyPullToRefresh - 实现弹性物理效果的下拉刷新，神奇的贝塞尔曲线，配合UIDynamic写的一个拟物的下拉刷新动画。\nMHYahooParallaxView - 类似于Yahoo Weather和News Digest首屏的视差滚动。\nSDRefreshView - 简单易用的上拉和下拉刷新（多版本细节适配）。\nZLSwiftRefresh - swift下拉刷新/上拉加载更多，支持自定义动画，集成简单，兼容UITableView/CollectionView/ScrollView/WebView。\nBreakOutToRefresh - swift，上拉和下拉刷新。\nGearRefreshControl - swift，上拉和下拉刷新。\nrefresher - swift，上拉和下拉刷新。\n可展开/收缩的下拉菜单--SvpplyTable - 一个可展开可收缩的下拉菜单，类似Svpply app。\nODRefreshControl - 原iOS6上的橡皮糖刷新样式，很有意思。现在也很多大的 App 在用，比如虾米音乐和 QQ 客户端。\nPullToMakeSoup - PullToMakeSoup, 自定义下拉刷新的动画效果：煮饭, Yalantis新作！\nTwitterCover - Twitter iOS客户端的下拉封面模糊效果。\nReplace-iOS - Replace-iOS 让人眼前一亮的下拉刷新（iOS）。\nAnimations - 封装了一下，使用的时候只要两行代码。一些动画的飞机稿，都是一些单独分离出来的用于测试的子动画，现在统一归类一下。\nPullToBounce - 下拉刷新的动画 for UIScrollView。\n　　模糊效果\n　　\n<!--more-->\n\n\nFXBlurView - 是一个UIView子类，支持iOS5.0以上版本，支持静态、动态模糊效果，继承与UIView的模糊特效。\nVVBlurPresentation -很简单易用的在原来viewconntroller基础上做模糊，然后present新的viewcontroller的。\nUICustomActionSheet - 通过模糊背景来着重强调与菜单相关的元素--对话框 里面已经收藏。\nSABlurImageView - 支持渐变动画效果的图像模糊化类库。P.S. 与前几天推存类库 SAHistoryNavigationViewController 是同一位作者。\n　　AutoLayout\n\nMasonry - Masonry是一个轻量级的布局框架，拥有自己的描述语法，采用更优雅的链式语法封装自动布局，简洁明了并具有高可读性（ 使用介绍1 使用介绍2），iOS自适应前段库-Masonry的使用），Masonry、Classy、ClassyLiveLayout介绍。使用DEMO 视图居中显示、子视图含边距、视图等距离摆放、计算ScrollView的contentsize。\nClassy - Classy是一个能与UIKit无缝结合stylesheet(样式)系统。它借鉴CSS的思想，但引入新的语法和命名规则，Classy官网，Masonry、Classy、ClassyLiveLayout介绍。\nClassyLiveLayout - ClassyLiveLayout通过结合Classy stylesheets与Masonry一起使用，能够在运行的模拟器中微调Auto Layout约束实时显示效果的工具，Masonry、Classy、ClassyLiveLayout介绍。\nSnap - Snap是Masonry Auto Layout DSL的Swift版本，是一款轻量级的布局框架，使用了更良好的语法封装了AutoLayout。Snap支持iOS和OS X。\nSnapKit - 就是“snap”， --swift 喜欢自动布局吗？当然喜欢！至少在storyboard中创建时会喜欢。 在代码中纯手工创建约束灰常痛苦，但幸运的是我们有了SnapKit，在board中用上它，你可以简单直观地编写约束了。。\nPureLayout - PureLayout 是 iOS & OS X Auto Layout 的终极 API——非常简单，又非常强大。PureLayout 通过一个全面的Auto Layout API 扩展了 UIView/NSView, NSArray 和 NSLayoutConstraint，仿照苹果自身的框架。\nUIView-AutoLayout - Deprecated in favor of PureLayout, which includes OS X support:https://github.com/smileyborg/PureLayout。\nCartography - Cartography 是用来声明 Swift 中的 Auto Layout，无需输入任何 stringly 就可设置自己 Auto Layout 的约束声明。\nAuto-Layout-Showcase - swift,AutoLayout 进阶 Demo，宽高比约束、比例约束、不等约束、视差约束、低优先级约束等高级用法，无需写码即可进行复杂页面布局，Demo 还动态模拟了各屏幕下的效果。来自百度知道 iOS 小组的内部分享。\nUIView-FDCollapsibleConstraints - 一个AutoLayout辅助工具，最优雅的方式解决自动布局中子View的动态显示和隐藏的问题。第二个Demo模拟了一个经典的FlowLayout，任意一个元素隐藏时，底下的元素需要自动“顶”上来，配合这个扩展，你可以在IB里连一连，选一选，不用一行代码就能搞定。\nAutolayout_Demo - 在项目中用自动布局实现的类似抽屉效果。\n当view隐藏的时候也隐藏其autolayout的NSLayoutAttribute - 当view隐藏的时候也隐藏其autolayout的NSLayoutAttribute，从而不用大量的代码工作。\n　　富文本\n\nRTLabel - RTLabel 基于UILabel类的拓展,能够支持Html标记的富文本显示，它是基于Core Text,因此也支持Core Text上的一些东西。32位，很久没有更新了。\nRTLabel - 富文本，RTLabel支持64位。\nTYAttributedLabel - TYAttributedLabel。 简单易用的属性文本控件(无需了解CoreText)，支持富文本，图文混排显示，支持添加链接，image和UIView控件，支持自定义排版显示。\nTQRichTextView - 用于做富文本视图控件显示，用于即时通讯的表情显示，以及资源评论的富文本显示。\nTTTAttributedLabel - 一个文字视图开源组件，是UILabel的替代元件，可以以简单的方式展现渲染的属性字符串。另外，还支持链接植入，不管是手动还是使用UIDataDetectorTypes自动把电话号码、事件、地址以及其他信息变成链接。用TTTAttributedLabel创建变化丰富的UILabel - 网易新闻iOS版使用。\nMLEmojiLabel - 自动识别网址、号码、邮箱、@、#话题#和表情的label。可以自定义自己的表情识别正则，和对应的表情图像。(默认是识别微信的表情符号)，继承自TTTAttributedLabel，所以可以像label一样使用。label的特性全都有，使用起来更友好更方便。\nFXLabel - FXLabel是一个功能强大使用简单的类库，通过提供一个子类改进了标准的UILabel组件，为字体增加了阴影、内阴影和渐变色等，可以被用在任何标准的UILabel中。FXLabel还提供了更多控件，可以对字体行距、字体间距等进行调整。\nWFReader - 一款简单的coretext阅读器，支持文本选择、高亮以及字体大小选择等。\nWPAttributedMarkup - WPAttributedMarkup is a simple utility category that can be used to easily create an attributed string from text with markup tags and a style dictionary。\nKMPlaceholderTextView - 可显示多行 placeholder 的 textView，可以在IB里面设置 -- swift。\nHHFlashSwitch - 一个另类的UISwitch，选择后，背景水波扩散变色效果。\nUUColorSwitch - Switch 开关动画效果,当打开开关时，Switch可实现平滑渲染过渡到父视图的效果。\nUITextViewDIYEmojiExample - UITextView编辑时插入自定义表情-简单的图文混编。\nShimmer - BlingBling闪光效果，酷炫的Label的效果，可以用于加载等待提示。\nZSSRichTextEditor - 适用于iOS的富文本WYSIWYG编辑器，支持语法高亮和源码查看。ZSSRichTextEditor包含所有WYSIWYG标准的编辑器工具。\nRichEditorView - swift，一套可定制富文本编辑器组件及示例。功能完整、代码简练、实现逻辑巧妙（编辑器核心与 WebView 结合，采用 HTML5 contentEditable 编辑模式，执行JS 配套命令 execCommand 实现富文本编辑功能）。\nDTCoreText - 可以解析HTML与CSS最终用CoreText绘制出来，通常用于在一些需要显示富文本的场景下代替低性能的UIWebView。DTCoreText源码解析。\nCSGrowingTextView - 用作即时通讯文本框和评论文本框使用，可以显示多行输入。\nMarkdownTextView - 显示Markdown的TextView。\n高仿微信限定行数文字内容 - 采用Autolayout高仿微信纯文字限定行数。\nFuriganaTextView - 实现复杂的日文韩文排版。\nParkedTextField - 带固定文本的输入组件。\nLTMorphingLabel - swift 能够实现文字变形动画效果的Label，用Swift写的一个能够实现文字变形动画效果的Label，很炫。\nGJCFCoreText - 图文混排。\nAttributedLabel - 显示性能数量级 UILabel 的 AttributedLabel。无畏无惧、挑战权威。\nFFLabel - 自动检测 URLs, @username, #topic# 等关链词（提供响应扩展）。实用的标签文本小组件。\nTextFieldEffects - 标准的UITextField有些枯燥么？来认识一下TextFieldEffects吧！废话不多说，只要看几个例子,是啊，都是些简单的dropin控制器。甚至可以在storyboard中使用IBDesignables。\n　　图表\n\nPNChart - 国内开源作者，动态的图表。\nswift-linechart - 功能完整、实用的折线图组件。使用方便，参数配置简单。是不可多得的优质组件--swift。\nios-charts - 一款优秀 Android 图表开源库 MPAndroidChart 的 Swift 语言实现版（支持 Objective-C 和 Swift 调用）。缺省提供的示例代码为 Objective-C。\nTEAChart - xhacker/TEAChart 一个简洁的 iOS 图表库，支持柱状图、饼图以及日历等。\nYOChartImageKit - 支持在watchOS上绘制图表，看它最近更新挺勤快的，可以关注一下。\nRealtimeGradientText - Fun With CALayer Mask 刚好今天开源了一个有趣的项目 RealtimeGradientText，所以也好聊一下 CALayer 的 Mask，说明。\n　　表相关\n\nSWTableViewCell - 国内开源作者，带很多手势的表单元格。\nMCSwipeTableViewCell - 带很多手势的表单元格。\nTMQuiltView - 瀑布流。\nWaterfallFlowDemo - 一个简单的UICollectionView瀑布流布局演示demo。\nXLForm - 很多表格类的table,写法更高冷一点，推荐使用。\nRETableViewManager - 可以十分方便地生成各种样式、各种功能的TableView。只要开发者能想到的列表效果或者功能，都可以利用这份代码迅速编写出来。比如，之前要实现一个填写各种资料的列表，可能需要很多代码，现在只需要几行代码就可以实现。\nUIScrollSlidingPages - 允许添加多视图控件，并且可以横向滚动。有点类似于Groupon app。\nHBHorizontalTableView - swift，TableView 横向滚动小示例（仿照 AppStore 应用展示）。\nHorizontalScrollCell - HorizontalScrollCell是一款使用方便的水平方向可滚动的单元格，适用于UICollectionView中实现水片方向滚动视图。 。\nSYJiugonggeTableView - tableView封装的九宫格。\nUUChatTableView - UUChatTableView 气泡聊天界面，支持文本、图片以及音频的气泡聊天界面。源码推荐说明。\nChats - 聊天 UI 示例程序。此项目应该只为演示或学习之用，没有服务器 -- swift。\nAtlas-iOS - 快速在iOS里集成聊天功能，类似开源版本的环信。Layer家开源了一套聊天app界面的解决方案.看起来很赞，很多蛮复杂的东西直接都帮封好了。不得不说现在做app开发真是很简单，大部分时间搭积木就可以了。官方网站。\nDLSlideView - DLSlideView对常见的顶部Tab页点击、滑动分页做了封装。它使用基于ViewController的container特性（而不是scrollview）来管理各个子页面，以支持无限分页，源码推荐说明。\nVOVCManager - 页面管理器:1.跳转指定页面,只需要知道viewController的Class名,如果有storyboard,则需要指定storyboard名；2.无需添加基类；3.支持URLScheme跳转指定页面。\nMBXPageViewController - 简洁快速的页面切换--MBXPageViewController，带有按钮控件的UIPageController，非常整洁、简单以及快速。该项目通过三种形式展示页面之间的切换，比如导航栏上的多个tab切换、页面左右两端箭头指示切换，以及使用分段控件。\nPagerTab - UIScrollView实现滑动转换页面，类似网易云音乐iOS版的页面滑动切换效果。\nGUITabPagerViewController - 多个tab滑动切换。\nVOMetroLayoutDemo - Metro风格的UICollectionView, 目前只支持横向布局,仅在iPad上应用。\nKYCellAnimation - 给UITableViewCell增加进入的动画。\nCOBezierTableView - swift，通过编辑 Bezier 曲线四点位置设置 TableView 内 Cell 及对应按扭位置。实验效果很赞。\nRDVTabBarController - 一个TabBar组件，可以方便设置底部菜单的文字图片，点击效果，小红点提示等。\nLxTabBarController - 改变了原生tabbar切换tab时的生硬效果，并加入滑动切换手势（有和界面上的其它手势发生冲突的风险，可根据具体项目予以关闭），swift版本。\n横向展示文本内容的自定义cell - 可以横向展示文本内容的自定义cell，根据文本无限滚动。\nUITableView-FDTemplateLayoutCell - UITableView-FDTemplateLayoutCell 是一个方便缓存 UITableViewCell 的高度的框架。\nExpandingStackCells - 采用 UIStackView 实现表格单元格扩展内容显示示例及解决方案。\nSapporo - swift 单元格模型驱动的集合视图管理器组件。又一个超实用的“轮子”。\nMDIHorizontalSectionTableViewController - 根据产品需求开源了一个交互项目，可以理解为横向Section的TableView，section和cell同时支持拖拽，后续安卓版本也会开源出来。\nJZNavigationExtension - 多功能导航控制器，可以透明返回栏。\nQuickRearrangeTableView - 基于 UITableView 的快速重排功能扩展子类。通过长按选定单元格然后滚动移动到指定位置。\nuicollectionview-reordering - UICollectionViews的拖拽(拖动、移动)效果,实例教程.\nDZNEmptyDataSet - DZNEmptyDataSet算是一个很标准的iOS内建方式，适合用来处理空的table view和collection view。会自动将collection view处理完善，并将用户消息以合适美观的方式显示出来。每个iOS项目都可以自动处理。\nMGSwipeTableCell - 另一个常见于很多应用中的UI组件，苹果应该考虑在标准的iOS SDK中加入一些类似的内容。Swipeable表格cell是这个pod的最佳描述，也是最好的。\n　　隐藏与显示\n\nSlideTapBar - 滚动栏菜单，向上滚动时隐藏tabbar，向下滚动马上显示tabbar。\nFoldingTabBar.iOS - 可折叠Tab Bar和Tab Bar Controller。\nLTNavigationBar - LTNavigationBar为app导航栏添加动态着色效果，可自定义其背景色。Demo包含：1.变换背景色；2.滚动视图，导航栏和状态栏重叠。\nBLKFlexibleHeightBar - 固定Header的效果库。\n　　HUD与Toast\n\nMBProgressHUD - 最多人用的loading。\nSVProgressHUD - SVProgressHUD的loading，如果你需要定制化的等待提示器，这个就是了（也许是最好的）。\nProgressHUD - ProgressHUD的loading，使用最简单。\nMMProgressHUD - 设置HUD出现和消失的方式（包括上下、左右、淡入淡出、放大缩小等等），设置HUD的内容（可以在HUD中加入帧动画、动态图片等等），设置HUD出现时的底部覆盖层颜色，等等。总而言之，这是一份集大成的HUD代码。慢慢看视频吧，囊括了所有效果。\nWSProgressHUD - 一个小巧精致的HUD,支持添加到自定义View上, 还有更多小细节.。\n　　对话框\n\nWCAlertView - 自定义的对话框。\nIOS7AlertView - IOS7AlertView的对话框。\nAMSmoothAlert - 动画效果不错，最多star，但不支持arm64。\nDQAlertView - 扁平化的样式不错。\nHHAlertView - 一个简易的alertview 有三种样式，有成功，失败，和警告三种样式，支持Delegate和block两种回调。\nMJPopupViewController - 实现弹出视图的各种弹出和消失效果，包括淡入淡出（fade in，fade out），从屏幕上方飞进，下方飞出，从屏幕左方飞进，右方飞出等等效果，弹窗。\nMenu - 项目中可能会用到的常用菜单，以后有时间会继续补充，弹窗。\nEasyTipView - 弹出提示框类及演示示例。同样地，API 简单、易用。好“轮子”，弹窗。\nkxmenu - kxmenu弹出菜单，点击视图上任意位置的按钮，会弹出一个菜单，并且有个小箭头指向点击的按钮，类似气泡视图。弹出的菜单位置会根据按钮的位置来进行调整。\nQBPopupMenu - QBPopupMenu弹出菜单，实现类似 UIMenuItem 的弹出菜单按钮。点击按钮，会弹出一个菜单，上面可以排列多个按钮。纯代码实现，不需要任何图片。\nSTModalDemo - 弹出视图（通知，提示，选择，窗口）。\nTAOverlay - TAOverlay可通过叠加层展示有用的信息，可自定义文本和背景色，添加阴影和模糊效果，以及更改字体大小或者用自定义图片替换页面上的icon。\nUICustomActionSheet - 通过模糊背景来着重强调与菜单相关的元素--模糊效果 里面已经收藏。\nActionSheetPicker-3.0 - 该项目是此前热门项目ActionSheetPicker的新版本，快速复制了iOS 8上的下拉 UIPickerView/ActionSheet功能。\nMJAlertView - 3D效果转场效果警示图--MJAlertView。\nSwiftyDrop - 轻量、易用的小清新弹出列表及信息提示组件真心不错。\n　　其他UI\n\nAwesomeMenu - 最多人用的Path菜单。\nDCPathButton - Path，4.0的弹出菜单，呼出或者关闭菜单时，多个小图标会分别按照逆时针和顺时针的方向进行滚动。\nSphereMenu - 利用UIDynamicAnimator的有趣的菜单，path类似。\nKYGooeyMenu - KYGooeyMenu 是一个具有 Gooey Effects 带粘性的扇形菜单控件(卫星菜单、path)。\nTwitterPaggingViewer - 多个Tableview，左右滑动。\nCircularProgressControl - Circular Progress Control using CAShapeLayer ，环形进度控制条。\nKDCircularProgress - KDCircularProgress是使用swift制作的色彩炫丽的进度条，可以加入多种颜色来控制进度条的渐变效果。\nTextProgress - 自定义实现数字进度条：1、可以自定义数字（0-100），填充的比例为当前设置的数字，2、可以实现自定义填充颜色，上下部分都可以，3、可以自定义边界的颜色4、实现了水波动画，可以设置打开或关闭。\nSDProgressView - 简便美观的进度指示器，此系列共有六种样式的进度指示器。\nNVActivityIndicatorView - loading 进度条动画，有20-30多种，是在此DGActivityIndicatorView 基础上做得修改。\nLoopProgressDemo - 环形渐变进度条。\n环形渐变进度条实现，\nXLPagerTabStrip - 做的很棒的iOS下的PagerTabStrip。\nRandomColorSwift - 一个自动生成好看的颜色的 Swift 库，RandomColorSwift。\nHexColorService - 将16进制颜色字符串转成UIColor。\nRainbow - 旨在提高代码可读性及易用性的 UIColor 扩展，它使原先有限的预定义颜色（方法）选择，扩展至超过 1200 种。\nUIColor-ChineseTraditionalColors - 中国传统颜色引用 UIColor 扩展。“UIColor.桃红()，UIColor.竹青() ...”，共158种。\n类似美团的下拉菜单 - 类似美团的下拉菜单，源码推荐说明。\n类似美团的下拉选项 - 类似于美团、大众点评的下拉菜单选项，code4app代码，评论代码有瑕疵。\nCRMediaPickerController - 一个简单易用的图片/视频选择器。1.可同时选择照片和视频。 2.挑选范围有Camera、Camera Roll、Photo Library以及最近拍摄的照片和视频。3.可自定义UIImagePickerController属性（Camera Overlay、Camera Device、Camera View Transform以及allowsEditing）。4.支持横屏和竖屏5.原生的iOS UI。，源码推荐说明。\nMDCSwipeToChoose - MDCSwipeToChoose可简单地添加滑动手势来调用UIView，并使用该行为提供了一个组件以创建类似Tinder app的like或者dislike界面的轻扫。基于轻扫的方向，你可以决定执行什么样的行为，并且你可以自定义文本颜色和图片。该项目适用于教学用的抽认卡、图片查看器以及其他等。\niOS Material Design库 - 该项目借鉴于谷歌的Material Design guideline，用户可自定义背景色。\nMaterial-Controls-For-iOS - Material Design风格的各种控件，非常完整全面。\nZMaterialDesignUIButton - Swift Material Design UIButton。\nMediumScrollFullScreen - Medium的可扩展滚动页面，上下滚动时，全屏显示内容，并自然消隐上下菜单。由此项目感知，作者是一位很注重细节的开发者，他的另外几个菜单类项目也都不错，值得参考，比如：PathMenu, MediumMenu 等。\n\nWZFlashButton - WZFlashButton，点击后button里面出现水波扩散效果。\n\nTwinkle - 为字体加上钻石版闪耀的效果。使用Swift编写。\nios-multi-back-button - 可替换内置的UInavigationController返回按钮，长按左上角的返回按钮，实现多层级的快速返回。\nASDayPicker - 适用于iOS (iPhone)的日期选择器，类似于Calendar app的周视图。\ntoday extension - 用纯代码构建一个Widget(today extension) 。\nFSCalendar - 日历视图，带有微妙和平滑的滚动效果，可自定义外观--国人。\nHSDatePickerViewController - 带有Dropbox Mailbox感觉的时间日期选择器。启动是背景被模糊化。界面也是主流的扁平化风格。\nCFCityPickerVC - 城市选取控制器。\nJTCalendar - iOS下优美的 Calendar 组件，做 GTD 类 App 必备。\nPersei - 动画隐藏或显示顶部菜单支持库及示例项目。--swift\nPDTSimpleCalendar - 是iOS最棒的日历组件了。你可以在各个方面对它进行定制，无论是运行逻辑还是外观方面。\nForm - JSON 驱动的 Form表单系统，复杂的表单填写类 App 极其需要（比如淘宝呢！）。\nSwiftyFORM - swift 表单输入框架（亮点是表单验证规则引擎），是我见过地最易用的 Swift 表单组件。\nSwiftSpinner - SwiftSpinner是使用swift制作的一款精致带感的指示器，并且连带有字体信息显示，模糊背景，半透明，扁平化等IOS8的效果。\nAKPickerView-Swift - 一款小而美的 3D 效果选择器。\nImagePickerSheet - 图片或视频选择器（可多选）组件及其示例项目。\niOS-RatingBar - iOS-RatingBar swift版的评分控件,跟Android的RatingBar一样有两种模式，评分模式和只读模式'支持视图编辑，自定义星星数量，评分等级,另外还能支持非整数星，0.5颗星，0.1颗星,可以开启动画效果。\nRKNotificationHub - 快速给 UIView 添加上炫酷的通知图标（Badge、红点、提示）。\nWZLBadge - Badge，支持横竖屏支持iOS5~iOS8允许高度定制化，包括“红点”的背景颜色，文字(字体大小、颜色)，位置等。说明.\nBubbleTransition - 以气泡膨胀和缩小的动画效果来显示和移除 controller，Uber的就是这种取消操作的方式。\nKYFloatingBubble - 类似iOS7中Game Center浮动气泡的效果。\nDKNightVersion - DKNightVersion 是一个支持夜间模式切换的框架。\nEasyUIControl - 一个可以简化界面ui的控件框架。\nLxGridView-oc LxGridView-swift - 利用UICollectionView模仿iOS系统桌面图标的交互，作用如动图。\nQQBtn - 仿QQ未读消息弹性按钮动画，达到和手机QQ未读信息一样的动画效果，效果基本实现。\nGMStepper - swift 带动画效果、支持手势滑动操作的步进标签。\nTZStackView - OS 9 UIStackView 功能模拟实现于 iOS 7/ iOS 8 内。\nLayoutTrait - swift 一个小类库。 做iPad 多任务分屏 适配的同学可以看一下。\nHACursor - HACursor，是一个对横向ScrollView中的视图进行管理的UI控件。只要几行代码就可以集成类似于网易新闻对主题页面进行排序，删除操作的功能。\nZTPageController - 模仿网易新闻和其他新闻样式做的一个菜单栏，栏中有各自的控制器，其中有4中展示样式’网易style' ’搜狐style' ’腾讯style1' ’网易style2' 。\nRuler - 尺子。\nHUMSlider - HUMSlider是一款能够自动显示刻度记号的滑竿，滑动到某处，该处的刻度会自动上升，两边还能配置图像。支持代码或storyboard中实现。\nJDSelectedDemo - 仿京东筛选菜单实现。\nBTNavigationDropdownMenu - 下拉列表暨导航标题组件。简单、直接、易用 -swift。\n　动画\n\nCore Animation笔记，基本的使用方法 - Core Animation笔记，基本的使用方法：1.基本动画，2.多步动画，3.沿路径的动画，4.时间函数，5.动画组。\nawesome-ios-animation - iOS Animation 主流炫酷动画框架(特效)收集整理 收集整理了下iOS平台下比较主流炫酷的几款动画框架。\n　　侧滑与右滑返回手势\n\nSloppySwiper - iOS系统自带的UINavigationController要7.0才支持，但不过该手势只能从屏幕左侧边缘识别，如果要扩大到整个屏幕范围怎么办？配合一个SloppySwiper无需代码就可以轻松实现。此库支持iOS5.0以上版本（另外：Nav的title滑动不明显，本人写了2个类似的控件），SloppySwiper-demo ：代码方式与storyboard方式。\nSCNavigation - UINavigation可以右滑返回，隐藏UINavigationBar。\nUINavigationController-YRBackGesture - 支持右滑返回手势，标题栏不动。\nGHSidebarNav - 现在比较流行使用侧开(侧滑)菜单设计。试了不少控件，感觉GHSidebarNav最成熟，尤其对纯代码创建的界面兼容性最好。在Storyboard中使用GHSidebarNav侧开菜单控件。\niOS-Slide-Menu - 能够类似Facebook和Path那样弹出左右边栏侧滑菜单,还支持手势。多种可以自定义的属性 (非常不错)。\nECSlidingViewController - 侧滑菜单。\nJASidePanels - 侧滑菜单,有左右菜单，有pop功能，支持手势侧滑,本人使用中：简单。\nanimated-tab-bar - 让 Tabbar items能显示萌萌的动画。\ntabbar图标动画 - tabbar上图标的动画实现，源码推荐说明。\nSideMenu - swift实现，一款带动画效果可定制 Slide Menu，可以学习其动画实现思路。P.S. 对于Hamburger式菜单，虽然很常用，不过，苹果并不鼓励使用，甚至有开发小组对其弊病用自家上线应用前后数据对比进行了抨击。\nRESideMenu - 侧开菜单，qq类似。\nJHMenuTableViewDemo - 仿网易邮箱列表侧滑菜单。\nSlideMenuView - 炫酷侧滑菜单布局框架，Android版本的一致实现。\nQQConfiguration - swift，QQ-iPhone端框架，左侧菜单栏拖动手势。\nKGFloatingDrawer - 侧滑菜单，qq类似，KyleGoddard/KGFloatingDrawer：一款适合于大屏手机或平板的浮动抽屉式导航界面组件。效果很赞- 侧开菜单，qq类似（与RESideMenu类似）。\nAIFlatSwitch - 一款带平滑过渡动画的 Switch 组件类，类相同风格的 Menu/BackHamburgerButton,类似相同风格的 Menu/Closehamburger-button.\nJHChainableAnimations - 在应用中采用链式写出酷炫的动画效果, 使代码更加清晰易读，利用block实现的链式编程。\nWXGSlideMenuDemo - 个简单实现侧拉（侧滑）菜单的小demo，供初学者共同学习、练习使用。\nPKRevealController - PKRevealController是一个可以滑动的侧边栏菜单（可向左、向右或者同时向两侧），只需手指轻轻一点（或者按一下按钮，但是这样滑动时不够炫酷），这类控制的其他库，而PKRevealController是最棒的。安装简便，高度定制且对手势识别良好。可以当做一个标准控件用在iOS SDK中。\nSwiftPages - 高可定制类似 Instagram 视图滑动切换功能类库。API 简单、易用。\nFlipBoardNavigationController - FlipBoardNavigationController。\nMMDrawerController - 最多人用的一个有关侧边“抽屉”导航框架，里面还有很多你意想不到的交互效果，侧滑。\nUIWebView翻页返回效果 - UIWebView翻页返回效果（变通方法）。\n　　gif动画\n\nUIImageView-PlayGIF - UIImageView-PlayGIF。\nYLGIFImage - YLGIFImage。\nYLGIFImage-Swift - YLGIFImage-Swift。\n　　其他动画\n\npopping - popping是一个POP 使用实例工程\nSinaMenuView - 用POP动画引擎写的Sina微博的Menu菜单。\nMMTweenAnimation - facebook POP的自定义动画扩展(基于POPCustomAnimation) 提供10种函数式动画。\nZQLRotateMenu - 这是一个旋转视图的选择器。\nCoolLoadAniamtion - 一个简单但是效果不错的loading动画。\nSequenRotateAnimation - 一个简单的loading次序动画。\nSYAppStart - App启动插画的自定义过度。\nVJDeviceSpecificMedia - 如何根据设备选择不同尺寸的图片 可以通过设置不同尺寸设备的LaunchImage，来使得App适配这些设备，要是在不同不同尺寸设备上使用不同大小的图片，则需要在代码中一一判断，然后加载。\nRMParallax - RMParallax是一个app启动页引导开源项目，除了细微的翻页视差效果，描述文本的过渡也非常美观（版本新特性）。\nADo_GuideView - 转动的用户引导页(模仿网易bobo) 因为没有从app包里抓到@3x的图片,建议在iPhone5模拟器运行,保证效果~ （版本新特性）。\nCoreNewFeatureVC - 版本新特性（引导页），1.封装并简化了版本新特性启动视图！2.添加了版本的本地缓存功能，3.集成简单，使用方便，没有耦合度，4.支持block回调。\nSpring - Spring是一个Swift编写的开源库，可简化Swift编写的iOS动画。支持shake、pop、morph、squeeze、wobble、swing、flipX、flipY、fall、squeezeLeft、squeezeRight以及squeezeDown等多种动画形式，用 IBDesignable 让使用者可以在 Xcode 中快速设置动画效果。\nKYBezierBounceView - 手势控制贝塞尔曲线，取消手势贝塞尔曲线会有反弹效果。\ncadisplaylinkanduibezierpath - CADisplayLink结合UIBezierPath的神奇妙用。\nKYCuteView - 实现类似QQ消息拖拽消失的交互+GameCenter的浮动小球效果，分析。\nKYWaterWaveView - 一个内置波浪动画的UIView，里面有鱼跳跃水溅起来的效果。\nKYPingTransition - 实现圆圈放大放小的转场动画，可以根据自己的需要使用Paper中的弹性效果，有Material风格。\nKYNewtonCradleAnimiation - 牛顿摆动画。\nLayerPlayer - 一款全面展示核心动画 API 示例项目（上架应用）。包括 CALayer, CAScrollLayer, CATextLayer, AVPlayerLayer, CAGradientLayer, CAReplicatorLayer, CATiledLayer, CAShapeLayer, CAEAGLLayer, CATransformLayer, CAEmitterLayer 等使用的互动演示。\nJGTransitionCollectionView - swift，基于集合视图扩展实现完成自动布局及单元项 Flip式动画效果（效果很赞）。组件使用方便、自然（只需设置集合视图数据源的标准方式即可）。\nKYShareMenu - 带弹性动画的分享菜单。\nContext-Menu.iOS - 可以为app的菜单添加漂亮的动画内容，可自定义icon，并可根据自己的喜好设计单元格和布局。\nDeformationButton - 一个简单的变换形状动画按钮。\nUnReadBubbleView - UnReadBubbleView是一个能够拖拽并拉长的气泡视图。拖拽到一定的长度会消失，可以通过系数设置来控制拖拽的长度。气泡也支持多种属性设置。\nPPDragDropBadgeView - 实现了类似于QQ 5.0 水滴拖拽效果. 支持iOS 5.0+ ARC，气泡能够带有数字标识，同时支持消失block方法。消失时还带有消失效果动画。\nGiftCard-Implementation - 购买的炫酷动画。\niCarousel - iCarousel是一个类，它继承于UIView。用于简化实现各种类型的旋转木马(分页滚动视图），无限轮播 ，iOS开发之多图片无缝滚动组件封装与使用。\nKIPageView - 无限循环PageView，横向TableView，无限轮播。\nHotGirls - 卡片动画。\ntispr-card-stack - swift 卡片风格动画切换组件及完整交互示例。\nZLSwipeableViewSwift - swift 卡片堆叠效果的实现（ZLSwipeableView)】可实现类似Tinder和Potluck应用程序的卡片堆叠效果，该项目基于ZLSwipeableView objective-c实现。1.自定义动画。2.自定义滑动切换。3.自定义方向。4.撤销。\nKoloda - 基于卡片的 Tinder-style 动画效果示例。精细绝人。更赞的是额外附了详细开发教程 How We Built Tinder-Like Koloda Animation in Swift 网页链接 。Yalantis 出品动画程序款款精品。\nQQPersonalInfoTransition - 仿照QQ的转场。\nKYAnimatedPageControl - 除了滚动视图时PageControl会以动画的形式一起移动，点击目标页还可快速定位。支持两种样式：粘性小球和旋转方块。\nKDIntroView - swift 动态介绍视图框架及演示。另外两个相似的类库是 RazzleDazzle和 Presentation，择需使用。\nRazzleDazzle - 【IFTTT开源Swift编写的帧动画框架--RazzleDazzle】RazzleDazzle 是IFTTT开源的一个iOS帧动画框架，非常适用于APP初次使用时的介绍和引导信息。JazzHands是UIKit一个简单的关键帧基础动画框架，可通过手势、scrollview、KVO等控制动画，被IFTTT应用在IFTTT for iPhone上。\nPresentation - 一个类似RazzleDazzle的框架。\nFillableLoaders - 基于 CGPaths 可定制个性化填空式装载类库。附水波上涨式示例。\nSXWaveAnimate - 实现非常美观的灌水动画。\nLSPaomaView - 可循环滚动的较长文字，跑马灯，效果很好，一句话集成。\nSIFloatingCollection_Swift - 可定制的 Apple Music 风格浮动形状动画组件及演示。\nCheetah - 易用、高可读链式动画类库。另一个类似类库是 DKChainableAnimationKit。\nCKWaveCollectionViewTransition - swift， UICollectionViewController之间切换的动画。\nTKSubmitTransition - 基于 UIButton 的登录加载、返回按钮转场动画组件及示例。\n　网络相关\n\n　　网络连接\n\nAFNetworking - ASI不升级以后，最多人用的网络连接开源库，iOS网络编程之AFNetworking使用,iOS开发下载文件速度计算。\nAlamofire - Alamofire是AFNetworking的作者mattt新写的网络请求的swift库。\nYTKNetwork - 是基于 AFNetworking 封装的 iOS网络库，提供了更高层次的网络访问抽象。相比AFNetworking，YTKNetwork提供了以下更高级的功能：按时间或版本号缓存网络请求内容、检查返回 JSON 内容的合法性、文件的断点续传、批量的网络请求发送、filter和插件机制等。\nLxFTPRequest - 支持获取FTP服务器资源列表，下载/上传文件，创建/销毁ftp服务器文件/目录，以及下载断点续传，下载/上传进度，自动判断地址格式合法性跟踪等功能！国人开发，QQ：349124555。\nHSDownloadManager - HSDownloadManager，下载音乐、视频、图片各种资源，支持多任务、断点下载。\nMutableUploadDemo - 模拟需求：图文混编，要求用户选择图片后就上传，可选择多图，并行上传，用户确定提交后后台执行，必须全部图片上传完才能提交文字。\nWTRequestCenter - 方便缓存的请求库，提供了方便的HTTP请求方法，传入请求url和参数，返回成功和失败的回调。 UIKit扩展提供了许多不错的方法，快速缓存图片，图片查看，缩放功能， 颜色创建，设备UUID，网页缓存，数据缓存等功能。 无需任何import和配置，目前实现了基础需求。\nMMWormhole - Message passing between iOS apps and extensions 2个iOS设备之间通信。\nsocket.io-client-swift - WebSockect 客户端类库。开放的通讯协议，有利于构建强大地跨平台应用。\nTransporter - swift， 短小、精悍、易用的多文件（并发或顺序）上传和下载传输库。还支持后台运行、传输进程跟踪、暂停/续传/取消/重试控制等功能。\nSTNetTaskQueue - STNetTaskQueue Objective-C 可扩展网络请求管理库。\nCocoaAsyncSocket - 在iOS开发中使用socket，一般都是用第三方库AsyncSocket，不得不承认这个库确实很强大，使用教程。\nGCDAsyncSocket - GCDAsyncSocket ， 不错的Demo。\nJust - 小而美的 HTTP 类。功能简单、直接、完整且健壮性高-- swift。\nFuture - 基于微框架设计思想的异步执行及结果响应类，代码即简单又干净-- swift。\nMZDownloadManager - 下载管理。\nDVR - 针对网络请求的测试框架，超实用的工具。且支持 iOS, OSX, watchOS 全平台。\nHFDownLoad - iOS开发网络篇之文件下载、大文件下载、断点下载:NSData方式、NSURLConnection方式、NSURLSession下载方式 下载方式具体的思路、区别见Blog 。\n　　图像获取\n\nSDWebImage - SDWebImage 网络图片获取及缓存处理。\nKingfisher - 纯 Swift 实现的类 SDWebImage 库，实现了异步下载和缓存图片。\nKFSwiftImageLoader - Swift，一个图像缓存加载库。\nFastImageCache - FastImageCache 网络图片获取及缓存处理，iOS图片加载速度极限优化—FastImageCache解析。\nEGOCache - 十分知名的第三方缓存类库，可以缓存NSString、UIImage、NSImage以及NSData。除此，如果还可以缓存任何一个实现了接口的对象。所有缓存的数据都可以自定义过期的时间，默认是1天。EGOCache 支持多线程（thread-safe），UITableView加载多张照片导致内存上涨的问题。\n　　网络聊天\n\nXMPPFramework - XMPPFramework openfire聊天。\nSXTheQQ - 用xmppFramework框架编写QQ程序，主要为了练习通讯的一些原理，界面比较渣 必须要先在本地配置好环境才可以运行。\n环信 - 给开发者更稳定IM云功能。8200万用户考验，好用！（暂无及时语音、视频通话）\n融云 - 即时通讯云服务提供商。（暂无及时语音、视频通话）\n容联云通讯 - 提供基于互联网通话,视频会议,呼叫中心/IVR,IM等通讯服务。\nchatsecure - 基于XMPP的iphone、android加密式聊天软件， chatsecure官网 。 iOS代码1，iOS代码2， iOS中文版。\nMessageDisplayKit - 仿微信聊天，参考JSQMessagesViewController。（国人写）\nJSQMessagesViewController - 聊天 。\nSunFlower - 环信聊天demo，比较多功能 。\nBlueTalk蓝牙聊天 - 以MultipeerConnectivity为基础， 实现了简单的蓝牙聊天。\n　　网络测试\n\nReachability - 苹果提供过一个Reachability类，用于检测网络状态。但是该类由于年代久远，并不支持ARC。该项目旨在提供一个苹果的Reachability类的替代品，支持ARC和block的使用方式。iOS网络监测如何区分2、3、4G\nSimpleCarrie - 简单的运营商信息获取!。\nNetReachability - swift2.0 简单的方法检查网络连接的连通性，提供通知中心集成接口。\n　　WebView\n\nMGTemplateEngine - MGTemplateEngine比较象 PHP 中的 Smarty、FreeMarker 和 Django的模版引擎，是一个轻量级的引擎，简单好用。只要设置很多不同的HMTL模版，就能轻松的实现一个View多种内容格式的显示，对于不熟悉HTML或者减轻 工作量而言，把这些工作让设计分担一下还是很好的，也比较容易实现设计想要的效果。\nNJKWebViewProgress - 一个 UIWebView 的进度条接口库,UIWebView 本身是不提供进度条的。\nGTMNSString-HTML - 谷歌开源的用于过滤HTML标签。\n　　Model\n\nJSONKit - JSONKit库是非常简单易用而且效率又比较高的，重要的JSONKit适用于ios 5.0以下的版本,使用JSONKit库来解析json文件，只需要下载JSONKit.h 和JSONKit.m添加到工程中；然后加入libz.dylib即可。\nJSONModel - 解析服务器返回的Json数据的库,JSONModel源码解析一。\nMantle - Mantle主要用来将JSON数据模型化为OC对象, 大系统中使用。为什么选择Mantle。\nRFJModel - RFJModel是一个IOS类库，可以将JSON字典自动装填到OBJC对象。相比JSONModel有一些非常好的特性，使用上也比较简单。\nXMLDictionary - ios与mac os平台下xml与NSDictionary相互转化开源类库。\nMJExtension - 用于json转model进行使用，转换效率很高，使用也比较简单，只要前后台约定好，json直接就转成了model。\nCFRuntime - “Swift 版的 MJExtension，运行时、反射与一键字典模型互转”。\nDDModel - 快速搭建项目Model层，支持ORM映射关系，能从JSON/XML直接实例一个Model对象。支持SQLite本地数据持久化，封装了HTTP， 减少HTTP代码与UIViewController的代码耦合，支持Cache；类似RESTKit、Mantle的功能；使用该类库以后简化了网络层的开发工作，把更多的精力放在UI上面；目前只支持GET/POST方法的请求。使用到的第三方库有：1.SQLitePersistentObject; 2.JTObjectMapping; 3.AFNetworking; 4.XMLDictionary;\nprotobuf-swift - Protocol Buffers 的 Swift 语言实现库。P.S. Protocol Buffers 是 Google 开源项目，主要功能是实现直接序列化结构化的对象数据，方便跨平台快速传递，开发者也可以直接修改 protobuf 中的数据。相比 XML 和 JSON，protobuf 解析更快，存储更小。\nJSONCodable - 基于 Swift 2.0 新特性（Protocol Extensions and Error Handling）的JSON 解析类。\nSwiftyJSON - 使Swift的JSON解析变得简单。\n　　其他\n\nDateTimeKit - 一个超赞的时间处理的库，Joda-Time ！ 他能帮你轻松处理时区，处理时间加减，计算到期时间等等场景下的问题。\nSwiftDate - 特别完整、强大的日期时间操作管理类库。它几乎涵盖了已知开源日期类库所有优秀特性。 他能帮你轻松处理时区，处理时间加减，计算到期时间等等场景下的问题。\niOS私有API - 私有API，绿色 == public，红色 == private，蓝色 == dylib。\niOS源代码 - iOS源代码。\nlibfacedetection - C++ 人脸识别 包含正面和多视角人脸检测两个算法.优点:速度快(OpenCV haar+adaboost的2-3倍), 准确度高 (FDDB非公开类评测排名第二），能估计人脸角度。\nSlidden - 一个老外开源的开发自定义键盘的库，利用这个开源库，可以方便的配置键位、颜色以及键位对应的图片。\nTPKeyboardAvoiding - 用户键盘弹出自动计算高度，进行屏幕滚动操作。\nCDPMonitorKeyboard - CDPMonitorKeyboard封装,可以解决输入视图(例如textField,textView等)被键盘覆盖问题，并可设置高于键盘多少。\n自动监听键盘高度 - 自动监听键盘高度，初始界面，输入框在屏幕最下方，当键盘出现时，输入框随即移动到键盘上方。\nSYKeyboardTextField - SYKeyboardTextField 是一个轻巧,简单,非侵入式的键盘附随输入框! 采用Swift编写。\nBlocksKit - block框架，为 OC 常用类提供了强大的 Block 语法支持，使得编写 OC 代码变得舒适、快速、优雅。\nKVOController - 在项目中有使用 KVO ，那么 KVOController 绝对是个好选择。它是 facebook 开源的一个 KVO 增强框架。\nappirater - 用于提醒用户给你的 APP 打分的工具。\nMotionKitr - 为核心运动框架（The Core Motion framework）提供友好的类库封装，以更方便使用三轴陀螺仪和加速感应器特性。\nReview Monitor - 第一时间自动推送 Apple Store 的用户评论到你的邮件箱或者 Slack，第一时间跟进用户反馈，打造优秀 App 必备工具！类似的有：App annie 的类似功能。\nWBWebViewConsole - 类似微博iPhone客户端的 “调试选项” 吗？把其中的 “内置浏览器网页调试” 开源在 Github 上了。\nios-good-practices - ios-good-practices iOS 开发最佳实践。\niOS开发最佳实践 - iOS 开发最佳实践 -- 中文。\nTodayExtensionSharingDefaults - TodayExtensionSharingDefaults是一个iOS 8 Today扩展示例，可以使用NSUserDefaults与其containing app分享数据。\nQRCodeReader.swift - QRCodeReader.swift一款简单的 QR 二维码阅读组件及示例，提供前后相机切换功能。\nQRCatcher - 一个简洁美观的二维码扫描应用， iOS学习：AVFoundation 视频流处理--二维码扫描。\nParsimmon - swift，小而美的语言学类库封装工具包。提供分词、标记词性、词形归并、朴素贝页斯分类、决策树等自然语言分析小工具。P.S. 英语分词效果好于中文，感兴趣的同学可以针对中文做一些优化开发。参考译文 NSHipster - NSLinguistic​Tagger。\nPassword-keyboard - 随机变换数字位置的密码键盘。 模仿银行类应用在付款时输入的随机密码键盘。\nMKMapView-Extension - 这是关于 MKMapView 写的一个基于swift的扩展，可以扩展 MKMapView 的相关功能，减少复用代码量。\nSemverKit - 针对符合『语义化版本规范 2.0.0』版本号的解析、比较运算类库。不仅支持 Major, Minor, Patch，还支持 Alpha 和 Beta 预发布版本，以及相应地递增运算扩展。\nSwiftValidator - 基于规则的输入验证类库。项目良好的面向对象设计思想，使规则的扩展及自定义非常方便。更专业的规则引擎（甚至是基于自然语言的规则配置）解决方案，比如：开源的 Drools，商用的 ILOG 等。\nTesseract-OCR-iOS - 有关OCR文字识别项目。\nScreenotate - 支持 OCR 文字识别的载屏笔记 Mac 完整应用。\niOS-Categories - 收集了许多有助于开发的iOS扩展,各种category。\nOlla4iOS - 过去积累的一些方便复用的类和方法，还在整理中。\nDKNightVersion - 用最快的方式给你的应用加上夜间和白天的切换效果。\nTouchVisualizer - 实用的多点触摸可视化组件。扩展并作用于 UIWindows，结构上提供了简单地针对触摸显示定制，比如触摸点的颜色。\nRegexKitLite - 用来处理正则表达式。\nXcodeServerSDK - 非官方 Xcode Server SDK 封装库。 P.S. 该 SDK 分离自之前推荐的由该作者开发的自动测试框架 Buildasaur。\nBFKit-Swift - BFKit-Swift 这套工具库可以提高应用开发效率。\nCKSIncrementalStore - 基于 CloudKit 服务器实现多终端数据同步。\nSwiftSequence - 简洁、灵活、多变的操作 SequenceType 的类库（基于微框架（μframework）设计思想）。\nIDNFeedParser - 一个简单易用的Rss解析库。\nCoreUmeng - 简单：友盟分享封装。\nopenshare - 不用官方SDK，利用社交软件移动客户端(微信/QQ/微博/人人/支付宝)分享/登录/支付。\nSwifternalization - 一套实用的本地化工具库。使用教程及 API 文档完整。值得收入项目的“轮子”。\napous - 一款有趣的 Swift 应用 － 让 Swift 成为脚本语言。\nMirror - 通过反射（Refection）实现镜像对象封装库。从而可以更轻松获取（或输出）对象属性名、类型及值变量。\nProposer - Proposer 用单个 API 处理 iOS 上的权限请求，以便使用前确认可访问“相册”、“相机”、“麦克风”、“通讯录”或“用户位置”。\nPermissionScope - 用这个库可以在询问用户前，就告知用户所需的系统权限，为用户带来更好的体验。接受度更高—>更多活跃用户->更高的留存率->数据更好->下载率更高。\nLocationManager - CoreLocation使用起来还是比较麻烦的，需要授权，判断系统版本等等，所以推荐使用第三方框架LocationManager，使用Block，十分简单！iOS-CoreLocation：无论你在哪里，我都要找到你！ 。\npangu.objective-c - 有多种语言实现版本～ Pangu.Objective-C：格式化中英文之间的空格（OC）。\nobjection - 一个轻量级的依赖注入框架Objection。\nControlOrientation - 如何用代码控制以不同屏幕方向打开新页面【iOS】， 使用说明。\niRate - 问卷调查。\nGameCenterManager - 在iOS上管理GameCenter vanilla并不算难，但是有了这个库会更简单也更快。好上加好不是更好么。\nSlackTextViewController - 用作极佳、定制的文本输入控制时，自适应文本区域，手势识别、自动填充、多媒体合并，快速drop-in解决方案。\nIAPHelper - 应用内付费给我们提供了很多样本代码，而这个库丢掉了那些代码，将金钱交易相关的大多通用任务做了简单的封装。\nTAPromotee - 交叉推广应用是你可以免费实现的最佳市场推广策略之一。使用这个库做起来非常简单，不用都不可能——将TAPromotee加入你的podfile中，免费配置与享受更多下载吧。\nDownloadFontOnline - 实现了在线下载一些字体的功能，不用在工程中导入字体库，下载的字体也不会保存在你的应用中，所以可以放心使用。修复了一下崩溃的bug。\nSTClock - 仿锤子时钟。\nGitUp - GitUp是一个可视化的Git客户端，能够实时的进行编辑、合并、回滚等多种操作，更多功能，请下载体验。\n获取联系人信息，通讯录 - 获取联系人信息，通讯录。\nUniversal-Jump-ViewController - 根据规则跳转到指定的界面(runtime实用篇一)。\n　　数据库\n\nFMDB - sqlite的工具， 多线程FMDatabaseQueue实例，FMDB数据库的使用演示和封装工具类。\nGXDatabaseUtils - 在FMDB基础上的工具。\nrealm-cocoa - Realm是一个真正为移动设备打造的数据库，同时支持Objective-C和Swfit。Realm宣称其相比Sqlite，在移动设备上有着更好的性能表现,官方中文。\nBreeze - 用Swift写的一个轻量级的CoreData管理工具，并且还支持iCloud 。\nAlecrimCoreData - Swift，更容易地访问 CoreData 对象封装类库。除了 CRUD，还提供指针定位，强大的排序、筛选，异步数据获取，以及独立线程后台存取数据。\nCoreStore - Core Data 管理类库。 其中事务管理及查询是其比较大的亮点，整套 API 功能完整。\nMagicRecord\nMagicalRecord - MagicalRecord就像是给Core Data提供了一层外包装，隐藏掉所有不相关的东西。 其中事务管理及查询是其比较大的亮点，整套 API 功能完整。\nPresentation - 重量级好项目 Presentation，它可以方便你制作定制的动画式教程、Release Notes、个性化演讲稿等。\nCoreValue - Swift 2 版 Core Data 封装库。相比另外两个 SwiftRecord和 CoreStore更轻量。\nSQLCipher - SQLCipher使用256-bit AES加密，SQLCipher分为收费版本和免费版本。官方教程， 加密你的SQLite - 各种sqlite数据库加密介绍。 SQLCipherDemo下载 。\n　　缓存处理\n\nYTKKeyValueStore - Key-Value存储工具类，说明。\nTMCache - TMCache 是 Tumblr 开源的一个基于 key/value 的数据缓存类库,可以用于缓存一些临时数据或者需要频繁加载的数据,比如某些下载的数据或者一些临时处理结果。\nJLKeychain - 快捷使用keychain存储数据的类，使keychain像NSUserDefaults一样工作。\nsskeychain - SSKeyChains对苹果安全框架API进行了简单封装,支持对存储在钥匙串中密码、账户进行访问,包括读取、删除和设置。\nKeychainAccess - 管理Keychain接入的小助手。\n　　PDF\n\nReader - Reader可提供类似iBooks的文档导航，支持屏幕旋转和所有方向，并通过密码保护加密PDF文件，支持PDF链接和旋转页面。\n　　图像浏览及处理\n\nFLAnimatedImage - gif播放处理的工具。\nCLImageEditor - 超强的图片编辑库，快速帮你实现旋转，防缩，滤镜等等一系列麻烦的事情。\nios-image-filters - 图像滤镜，库比较旧了，很容易崩溃。\nXBImageFilters - 图像滤镜，。\nVIPhotoView - 用于展示图片的工具类，因为是个 View，所以你可以放在任何地方显示。支持旋转，双击指定位置放大等。\nMWPhotoBrowser - 一个非常不错的照片浏览器，在github的star接近3000个，解决MWPhotoBrowser中的SDWebImage加载大图导致的内存警告问题。\ncore-image-explorer - Core Image 滤镜处理图片-- swift ，Core Image 介绍。\nCoreImageShop - CoreImageShop图片滤镜处理-- Mac app that let you create a complete Core Image Filter usable on iOS using SCRecorder。\nGPUImage - 处理图片效果。\nRSKImageCropper - 适用于iOS的图片裁剪器，类似Contacts app，可上下左右移动图片选取最合适的区域。\nWZRecyclePhotoStackView - 删除照片交互--WZRecyclePhotoStackView，就是模拟生活中是删除或保留犹豫不决的情形而产生的。 在上滑，下滑的部分，借鉴了TinderSimpleSwipeCards。\nTimingFunctionEditor - TimingFunctionEditor用swift编写， 贝塞尔曲线编辑器，编辑后可以预览或拷贝代码片段直接使用。P.S. 该项目采用更简单的依赖管理器 Carthage ，而非常用的 CocoaPods。Carthage介绍中文。\nAAFaceDetection - AAFaceDetection--swift，简单、实用的面部识别封装库。虽然该技术从 iOS 5 发展，不过真正有趣的应用还不多。。\nPhotoTweaks - 这个库挺赞的，正好是对图像操作的。\nConcorde - swift, Concorde, 一个可用于下载和解码渐进式 JPEG 的库, 可用来改善应用的用户体验。\nZoomTransition - swift, 通过手势操控图片的放大、缩小、旋转等自由变化效果的组件及示例。\nAFImageHelper - swift,一套针对 UIImage 和 UIImageView 的实用扩展库，功能包含填色和渐变、裁剪、缩放以及具有缓存机制的在线图片获取。\nPinterestSwift - swift,Pinterest 风格图片缩放、切换示例。\nKYElegantPhotoGallery - 一个优雅的图片浏览库。\nSDCycleScrollView - 无限循环自动图片轮播器(一步设置即可使用)。\nSDPhotoBrowser - 仿新浪动感图片浏览器,非常简单易用的图片浏览器，模仿微博图片浏览器动感效果，综合了图片展示和存储等多项功能。\nHZPhotoBrowser - 一个类似于新浪微博图片浏览器的框架（支持显示和隐藏动画；支持双击缩放，手势放大缩小；支持图片存储；支持网络加载gif图片，长图滚动浏览；支持横竖屏显示）。\nPhotoStackView-Swift - PhotoStackView——照片叠放视图，使用说明。\nMarkingMenu - 基于手势、类似 Autodesk Maya 风格标记菜单及图片渲染。\nSXPhotoShow - UICollectionViewFlowLayout流水布局 是当下collectionView中常用且普通的布局方式。本代码也写了三种好看的布局，其中LineLayout和流水布局有很大的相同点就直接继承UICollectionViewFlowLayout，然后StackLayout，CircleLayout这两种都是直接继承自最原始的UICollectionViewLayout 布局方案。\nPictureWatermark - 主要实现了给图片加文字以及图片水印的功能，已封装成了UIImage的类别，方便使用。\nCocoaPicker - 仿 QQ 图片选择器（OC）。\n自定义宽高比的相册框 拍照 - 取出照片时 弹出自定义view。在这个自定义view上创建一个需要的相框大小的view层 把取出的图片赋值给UIImageView按缩放添加到这个层上。对uiimageView添加捏合、移动 手势。添加按钮 选取，最后根据位移和缩放比例 裁剪image。\n　摄像照相视频音频处理\n\nSCRecorder - SCRecorder 短视频录制。\nVideoPushDemo - 视频剪辑 视频特效制作1 视频特效制作2。\nLLSimpleCamera - A simple, customizable camera control for iOS， 摄像头。\nEZAudio - EZAudio 是一个 iOS 和 OSX 上简单易用的音频框架，根据音量实时显示波形图，基于Core Audio，适合实时低延迟音频处理，非常直观。中文介绍,官网。\nffmpeg - ffmpeg官网，FFmpeg在iOS上完美编译。\nVCL - VCL官网。\nkxmovie - 使用ffmpeg的影片播放器，修改说明， 修改代码。\nijkplayer - B站开源的视频播放器，支持Android和iOS。\nStreamingKit - StreamingKit流媒体音乐播放器。\nFreeStreamer - FreeStreamer流媒体音乐播放器，cpu占用非常小。\nDOUAudioStreamer - DOUAudioStreamer豆瓣的音乐流媒体播放器。\nfmpro - 电台播放器，支持锁屏歌词，支持基本播放流程，歌词展示，后台锁屏播放和控制以及锁屏后封面+歌词，fmpro_R 。\nIPDFCameraViewController - 支持相机定焦拍摄、滤镜、闪光、实时边框检测以及透视矫正功能，并有简单易用的API。\nSCRecorder - 酷似 Instagram/Vine 的音频/视频摄像记录器，以 Objective-C 为基础的过滤器框架。 你可以做很多如下的操作：记录多个视频录像片段。删除任何你不想要的记录段。可以使用任何视频播放器播放片段。保存的记录可以在序列化的 NSDictionary 中使用。（在 NSUserDefaults 的中操作）添加使用 Core Image 的视频滤波器。可自由选择你需要的 parameters 合并和导出视频。\nCool-iOS-Camera - Cool-iOS-Camera。\nFastttCamera - FastttCamera 快速照相。\nICGVideoTrimmer - ICGVideoTrimmer提供提供视频剪切的视图（类似系统相册中浏览视频时顶部那个条状视图）。左右两个边界选择器还能够自定义。\nIOS录音和播放功能demo - 比较完整的ios录音和播放功能的实现。\nCameraManager - 相机管理封装类库。看着极好用的样子----swift。\nMCAudioInputQueue - 简易录音类，基于AudioQueue的。\nDraggableYoutubeFloatingVideo - 展示像类似Youtube移动应用的那种浏览视频的效果，当点击某视频时能够从右下方弹出一个界面，并且该界面能够通过手势，再次收缩在右下方并继续播放。这是通过AutoLayout设计实现。\namr - 做即时通讯的音频处理，录音文件是m4a，便于web端的音频播放。\nFSVoiceBubble - 一个轻量级播放录音音频的气泡：1.支持短时间的音频播放（支持网络音频）；2.播放时的声波动画；3.自定义包括声波的颜色，气泡的背景等。\nKRVideoPlayer - 类似Weico的播放器，支持竖屏模式下全屏播放。\nVideoBeautify - 功能酷似美拍,秒拍等应用的源码：对视频进行各种美化处理，采用主题形式进行分类，内含各种滤镜，动画特效和音效等。\n　响应式框架\n\nReactiveCocoa - ReactiveCocoa 受函数响应式编程激发。不同于使用可变的变量替换和就地修改，RAC提供Signals来捕获当前值和将来值（ 使用介绍 ），不错的例子,入门好教程：ReactiveCocoa入门教程：第一部分 。Reactive Cocoa 3.0 在 MVVM 中的应用 。\nReactiveAnimation - ReactiveCocoa 推出了一个叫 ReactiveAnimation 的子项目，直接用完全用 Swift 来实现了。\nBeeFramework - 与ReactiveCocoa类似，BeeFramework用户指南 v1.0。\nObjective-Chain - Objective-Chain是一个面向对象的响应式框架，作者表示该框架吸收了 ReactiveCocoa 的思想，并且想做得更面向对象一些。\n　消息相关\n\n　　消息推送客户端\n\nSGPushDemo - 消息推送客户端\nOrbiter - 消息推送客户端:Push Notification Registration for iOS.\nPushDemo - 客户端消息接收消息代码，IOS开发之 ---- IOS8推送消息注册 ， 分分钟搞定IOS远程消息推送。\n　　消息推送服务端\n\njavapns源代码 - 消息推送的java服务端代码，注意：DeviceToken中间不能有空格。\npushMeBaby - Mac端消息推送端代码，注意：DeviceToken中间要有空格。\n　　通知相关\n\nJSQNotificationObserverKit - 一款轻量、易用的通知发送及响应框架类库。作者是知名开源项目 JSQMessagesViewController（Objective-C 版即时聊天）的作者 Jesse Squires.\nGLPubSub - 一个简短实用的 NSNotificationCenter 的封装。\nHomeoff - 用swift写了一个模仿Launcher通知中心快捷方式的应用。支持20个应用，并增加了一个返回到桌面来解放Home键的功能。\nJDStatusBarNotification - 在状态栏顶部显示通知。可以自定义颜色字体以及动画。支持进度显示以及显示状态指示器。\n　版本新API的Demo\n\nappleSample - iOS 苹果官方Demo合集， 官方demo.\niOS7-Sampler - 整合了iOS7.0的一些十分有用的特性，比如：Dynamic Behaviors、碰撞检测、语音合成、视图切换、图像滤镜、三维地图、Sprite Kit（动画精灵）、Motion Effect（Parallax）、附近蓝牙或者wifi搜索连接、AirDrop、运动物体追踪（iPhone 5S以上，需要M7处理器）等等。对于日常的应用开发十分实用。\niOS8-Sampler - 日本的shuさん制作的 iOS8 参考代码集。01.Audio Effects ；02.New Image Filters；03.Custom Filters；04.Metal Basic；05.Metal Uniform Streaming；06.SceneKit；07.HealthKit；08.TouchID；09.Visual Effects；10.WebKit；11.UIAlertController；12.User Notification；13.Pedometer；14.AVKit；15.Histogram；16.Code Generator；17.New Fonts；18.Popover；19.Accordion Fold Transition\niOS-9-Sampler - 通过实例介绍了iOS 9 SDK中重要新特性的使用。\nMTSwift-Learning - 通过一些简单项目实战演练开始学习 Swift 。\niOS8-day-by-day - swift。\niOS9-day-by-day - swfit iOS9 Day-by-Day :: Day 2 :: UI Testing。\niOS 9 分屏多任务 - iOS 9 分屏多任务：Slide Over & Split View快速入门（中文版）。\n　代码安全与密码\n\nios-class-guard - 一个用于混淆iOS的类名、方法名以及变量名的开源库--有人反映编译出来的app运行不了。\n《Protecting iOS Applications》：文章系统地介绍了如何保护iOS程序的代码安全，防止反汇编分析。\nfishhook - fishhook是Facebook开源的一个可以hook系统方法的工具。\nGesturePassword - 一个iOS手势密码功能实现，iPad/iPhone 都可以用，没有使用图片，里面可以通过view自己添加。keychain做的数据持久化，利用苹果官方KeychainItemWrapper类。操作部分都在controller了。删除直接用一下clear。\nJMPasswordView - 简单实用的手势密码，效果可自行调控。\n仿密码锁-九宫格 - 仿密码锁-九宫格，主要是使用UIButton 手势事件 UIBezierPath画图，解锁失败弹出“密码错误”。\nCoreLock - 本框架是高仿支付宝，并集成了所有功能，并非一个简单的解锁界面展示。个人制作用时1周多，打造解锁终结者框架。\nLikeAlipayLockCodeView - 高仿支付宝手势解锁（超级版）。\nPCGestureUnlock - 目前最全面最高仿支付宝的手势解锁，而且提供方法进行参数修改，能解决项目开发中所有手势解锁的开发。\nICPayPassWordDemo - CPayPassWordDemo，一个模仿支付宝支付密码输入对话框小demo。\nRSAESCryptor - 加密 RSA+AES Encryption/Decryption library for iOS. This library uses 2048-bit RSA and 256-bit key with 128-bit block size AES for encryption/decryption。\n　测试及调试\n\nHeapInspector - HeapInspector是一个用于检测应用中的内存泄漏的开源调试工具。\nCrashlytics - Crashlytics 崩溃报告 崩溃日志 使用说明 。\nUIViewController-Swizzled - 把你进入的每一个controller的类名打出来,如果看一些特别复杂的项目的时候直接运行demo就可以知道执行次序了。\nsnoop-it - snoop-it比UIViewController-Swizzled好用，代码托管在google上。\nVersions - 版本比较小工具。\nMobileWebPageTest - MobileWebPageTest是用来测试移动网页性能的软件，它可以对页面的加载和渲染过程进行截屏，协助开发者分析出页面性能瓶颈。\nKKLog - 一个日志管理系统。\nCleanroomLogger - 相当于 CocoaLumberjack 或 Log4j 的 Swift 版本，功能上甚至更强大。另外，源代码中已经内含了完整的 API 文档，使用非常方便。 Buildasaur - 自动测试框架 Buildasaur。 MMPlaceHolder - 一行代码显示UIView的位置及相关参数。 使用Quick框架和Nimble来测试ViewControler - Quick是一个用于创建BDD测试的框架。配合Nimbl，可以为你创建更符合预期目标的测试。\nfastlane - 一套iOS开发和持续集成的命令行工具fastlane，可以用来快速搭建CI甚至自动提交的开发环境。这套工具中包括了上传ipa文件，自动截取多语言截屏，生成推送证书，管理产品证书等一系列实用工具。\nKIF - 是一个开源的用户界面UI测试框架. 使用 KIF, 并利用 iOS中的辅助功能 API, 你将能够编写模拟用户输入，诸如点击，触摸和文本输入，自动化的UI测试.\nQuick - 用于Swift中的单元测试（也可用于Objective-C），与Xcode整合在一起。如果你是Objective-C的粉丝，我建议用Specta代替这个，但是对Swift使用者来说，Quick是最佳选择。\nSleipnir - Swift的测试框架。\nkiwi-bdd - TDD或BDD，objective-c语言的测试框架，最流行的BDD测试框架了，Kiwi最受欢迎（根据github上的star数来推断，行为描述和期望写起来也比较易懂，至少我是这么认为的） iOS开发中的测试框架。\nspecta - TDD或BDD，objective-c语言的测试框架，用的人多。\ncedar - TDD或BDD，objective-c语言的测试框架，用的人少。\n　AppleWatch\n\nTesla汽车AppleWatch app demo演示 - 通过AppleWatch控制特斯拉汽车，同时可以看到汽车的相关信息，比如剩余电量、可续行里程等，以及解锁/上锁车门、调节司机和乘客的四区域空调温度、开启车辆大灯、定位汽车等。源码推荐说明。\nWatchKit-Apps - WatchKit 开源小项目示例集锦。是不可多得地学习 WatchKit 的示例式教程（1.如何创建一个简单的交互式计数器；2.如何从手表上控制iOS app；3.如何在WatchKit app和iOS app之间共享数据；4.如何创建一个拥有不同背景色的数字时钟；5.展示不同的UI层；6.如何创建支持滑动手势的应用程序。）。\nKYVoiceCurve - 类似Apple Watch中语音的声音曲线动画。\nIGInterfaceDataTable - IGInterfaceDataTable是WKInterfaceTable对象的一个类别，可以让开发者更简单地配置多维数据。该项目使用类似UITableViewDataSource的数据源模式配置Apple Watch表格，而不是将数据结构扁平化成为数组。\nApple Watch开发教程资料汇总 - Apple Watch开发教程资料汇总。\nStargate - 通过 iPhone 桥接实现 Mac 与 Watch 的即时通讯。Stargate 通过封装两个优秀的基础类库 MMWormhole 和 PeerKit 实现高效的通讯应用。--swift\nsoon - 一款倒计时 WatchKit 示例应用。作者从架构的角度，思考如何设计一款完整、通讯高效且性能又好的 WatchKit 扩展应用。该示例学习性非常强。--swift\nwatchOS-2-Sampler - 基于 watchOS 2 若干新特性，写了相应的示例代码供大家学习、参考。\nHMWatch - HMWatch是个有待完善的watchOS 2.0 HomeKit 应用示例。\nCocoaMultipeer - CocoaMultipeer这个开源框架支持OS X, iOS和watchOS设备间的点对点通信，解决watchOS和Mac之间通信的方案还是很有用的。\nHighstreetWatchApp - 是电商平台Highstreet针对App Watch的一款应用，该demo中加载的是虚拟数据。\nNKWatchChart - NKWatchChart是一个基于PNChart专门为Apple Watch 开发的图表库,目前支持 line, bar, pie, circle 和 radar 等 图表形式。\n　VPN\n\nvpnon - swift的VPN On 的源码和本地化内容都是开放的: 官方网站。\nHydro.network - Hydro.network 的开发旅程, gitcafe。\n　完整项目\n\nv2ex - v2ex 的客户端，新闻、论坛。\napps-ios-wikipedia - apps-ios-wikipedia 客户端。\njetstream-ios - 一款 Uber 的 MVC 框架。它同时提供了多用户实时通讯支持，一旦启动 JetStream 后端服务，通过 WebSocket 协议可以分分钟建立多用户实时通讯应用。\nDeckRocket - 在相同 WiFi 网络环境内，通过iPhone 控制并播放 Mac 中的 PDF 文档。\nScanBook - 扫扫图书:可以扫描条形码查询图书，也可以关键字搜索，遇到合乎你口味的书，还可以看看别人的读书笔记，不同角度去体会。\nDesignerNewsApp - Swift 开发的 DesignerNews 客户端，看着美美的！\nKYWeibo - 调用新浪API自己写的第三方微博客户端。\nDouQu_IOS - 逗趣IOS手机端（一款笑话软件）,拥有完整的功能的手机应用app 。\nIT江湖iOS客户端 - IT江湖iOS客户端。\nEidolon - 艺术品拍卖的投标亭平台，用swift与反应式编程框架 ReactiveCocoa。\nCrazyPuzzle - 模仿“看图猜成语”App，功能齐全，配有音效，效果很不错。游戏使用cocoa框架完成，没有使用cocos2d的框架。\nWhoCall - 谁CALL我，iOS来电信息语音提醒，无需越狱。（需要iOS 7.0及以上版本。)骚扰电话预警、来电归属地提醒、联系人姓名播报，这些有中国特色人性化的电话功能，iOS上也应该有。电话提醒、私有API。\n仿iOS猎豹垃圾清理(实现原理+源码) - 仿iOS猎豹垃圾清理(实现原理+源码),用到私有API。\nDSLolita - 模仿新浪微博做的一款app，有发送博文，评论，点赞，私聊功能。\nGSD_ZHIFUBAO - 支付宝高仿版。\nTropos - Tropos, 由 thoughtbot 推出的一款用 Objective-C 写的开源天气类应用, 截至今天, thoughtbot 已在 GitHub 上贡献了 174 个开源项目, 实在令人敬佩。\nSmileWeather -开源天气类应用,天气图标很完整。\nMVVMReactiveCocoa - GitBucket 2.0 通过审核啦，她是我在公司实践了一年多 MVVM 和 RAC 的基础上，利用业余时间开发的第三方 GitHub 客户端，旨在能够对想实践 MVVM 和 RAC 的 iOS 开发者有所帮助。AppStore地址，欢迎下载使用GitBucket和收藏MVVMReactiveCocoa。\nTomate - 这个圆盘式计时器让你更专注于工作或学习。P.S. App Store 上架收费应用（0.99 欧）。\nStoveFireiOSMenu - 炉火餐饮系统iPad点餐端。\nBaiduFM-Swift - 百度FM, swift语言实现，基于最新xcode6.3+swift1.2,初步只是为了实现功能，代码比较粗燥，后面有时间会整理，支持Apple Watch。\nWNXHuntForCity - iOS高仿城觅项目（开发思路和代码）。\nZYChat - 关于聊天界面的可消息类型扩展，响应绑定设计。\nNiceAppDemo - 仿最美应用-每日最美的钢琴律动效果。\nmeituan - 美团5.7iOS版（高仿），功能包括，团购首页，高德地图搜索附近美食并显示在地图上，上门服务，商家，友盟分享。\nchuanke - 高仿百度传课iOS版。\nTuan - 模仿MJ老师iPad版美团（swift版），偶有bug 见谅。\nSXNews - 模仿网易新闻做的新闻软件，完成了主导航页，新闻详情页，图片浏览页，评论页。效果不错，比网上流传的各种和网易新闻UI架构有关的代码都要完整，都要好。\nMonkey - Monkey for GitHub是一个GitHub开发者和仓库排名的开源App。这次主要增加了登录GitHub的功能，随手follow和star，并且增加发现模块，包括GitHub的trending，动态，showcases等。\nUther - 跟蠢萌的外星人聊天，还能帮你记事”。itunes下载 。\n　好的文章\n\n自定义转场动画 - 3 种方法～ 关于自定义转场动画。\niOS提高效率的方法和工具 - iOS提高效率的方法和工具。\n用 JSON 构建 API 的标准指南 - 用 JSON 构建 API 的标准指南。\n　Xcode插件\n\niOS开发进阶，从Xcode开始 - 学习使用Xcode构建出色的应用程序！\n在Xcode启动的时候，Xcode将会寻找位于~/Library/Application Support/Developer/Shared/Xcode/Plug-ins文件夹中的后缀名为.xcplugin的bundle作为插件进行加载（运行其中的可执行文件）。Xcode5 Plugins 开发简介 写个自己的Xcode4插件\n\nXcode 4 插件制作入门 - Xcode 4 插件制作入门:Xcode所使用的所有库都包含在Xcode.app/Contents/的Frameworks，SharedFrameworks和OtherFrameworks三个文件夹下。其中和Xcode关系最为直接以及最为重要的是Frameworks中的IDEKit和IDEFoundation，以及SharedFrameworks中的DVTKit和DVTFoundation四个。\n\nRTImageAssets - 一个 Xcode 插件，用来生成 @3x 的图片资源对应的 @2x 和 @1x 版本。Asset Catalog Creator 功能强大，能自动生成全部尺寸：包括App Icons、Image Sets、Launch Screens Generator。\n\nVVDocumenter-Xcode - 一个Xcode插件，build后，随手打开一个你之前的项目，然后在任意一个方法上面连按三下\"/\"键盘，就ok了。\n\nReveal-Plugin-for-XCode - 一个Reveal插件，可以使工程不作任何修改的情况下使用Reveal，该插件已在Alcatraz上架。Reveal：分析iOS UI的利器 。\n\njava2Objective-c - Google公司出得java转Obje-C转换工具，转换逻辑，不转换UI。\n\nRegX - 专治代码强迫症的 Xcode 插件，使用 Swift 和 Objective-C 编写。其用竖向对齐特定源代码的元素，使得代码更易读和易理解。说明 ； 菜单：xcode——》Edit-》Regx 。\n\nKSImageNamed - 自动完成，特别是如果你正在写Objective-C，如果Xcode能自动完成文件名难道不会很伟大吗？比如图像文件的名称。\n\nFuzzyAutocomplete - Xcode的实现自动完成还不完美，此插件能给出你所期望或想要的建议，设置：xcode-》Editor-》FuzzyAutocomplete-》plugin settings。\n\nGitDiff - Xcode的代码编辑器的一个微妙的补强，加上了足够的可见信息以了解上次git提交以来发生了什么变化，设置：xcode-》Edit-》GitDiff。\n\nXToDo - 这个插件不仅凸显TODO，FIXME，???，以及！！！注释，也在便利列表呈现他们。 菜单：xcode-》view-》snippets; 调出列表显示: xcode-》view-》ToDo List ： ctrl + T 。\n\nBacklight - 突出显示当前正在编辑的行。菜单：xcode-》view-》Backlight 。\n\nCocoaPods - 该CocoaPods的插件增加了一个CocoaPods菜单到Xcode的产品菜单。如果你不喜欢命令行，那么你一定会喜欢这个插件。 用CocoaPods做iOS程序的依赖管理 。\n\nPeckham - 添加import语句比较麻烦，此插件 按Command-Control-P，给出的选项列表中选择要的头文件。先要安装Alcatraz ,在终端输入： curl -fsSL https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh | sh ； 重启xcode-》window-》Package Manager：搜索 Peckham 安装，打开Peckham.xcodeproj，编译 Peckham target，重启Xcode 。\n\nAuto-Importer - Auto-Importer是一个自动导入类对应的头文件的Xcode插件。\n\nAlcatraz -使用Alcatraz来管理Xcode插件 使用说明 。\n\nKSHObjcUML -KSHObjcUML 是一个 Objective-C 类引用关系图的 Xcode 插件。\n\nColorSense-for-Xcode - 颜色插件，安装之后，就不用根据RGB选择颜色，直接从取色板中取颜色，会自动补齐RGB代码。。\n\n10款提高iOS开发效率的XCode插件 - 10款提高iOS开发效率的XCode插件：1. XcodeColors；5. ACCodeSnippetRepository；10. Dash for Xcode。\n\nZLGotoSandboxPlugin - 支持Xcode快捷键了跳转当前应用沙盒了！快捷键是 Shift+Common+w。\n\nXcodeSwiftSnippets - XcodeSwiftSnippets, 提供了很多可在 Xcode 上使用的 Swift 代码片段, 通过自动补全的方式极大的提高了开发效率， 另外还有 Objective-C 版的。\n\nCoPilot - 通过此插件， Xcode 可以协同编程了（采用 WebSocket 通讯）。如此强大的“黑工具”，不爱它能行吗。\n\nESJsonFormat-Xcode - 将Json格式化输出为模型的属性。\nSCXcodeMiniMap - Xcode迷你小地图-SCXcodeMiniMap。\nxTransCodelation - XCODE中英文翻译插件，提供API查询模式和网页模式，都是利用的百度翻译。另外集成了一个可以一键关闭其他所有APP的实用功能，方便开发者！\n　美工资源\n\nTWG_Retina_Icons - 一套支持 Retina 高清屏的 iPhone 免费图标集。\nASCIImage - 使用 NSString 创建 image，说明。\nmy-sketch-colors - 配色。\nFont Awesome - Font Awesome：一套绝佳的图标字体库和CSS框架，详细的安装方法请参考官方网站中文网站,GitHub地址 。\nDynamicColor - 强大的颜色操作扩展类。通过该类，你可以通过扩展方法基于某个颜色得到不同深浅、饱和度、灰度、色相，以及反转后的新颜色。是不可多得的好类库。\nChameleon - Chameleon是一个iOS的色彩框架。它运用现代化flat color将UIColor扩展地非常美观。我们还可以通过它运用自定义颜色创建调色板。它还有很多功用，请浏览readme。\nFontBlaster - 载入定制字体时更简单。\n　其他资源\n\ngithuber - 最好用的GitHub人才搜索工具。\ncodatlas - 源代码搜索利器。\nsearchcode - 源代码搜索利器：来自悉尼的代码搜索引擎汇聚了 Github, Bitbucket, Sourceforge...等多家开源站点超20万个项目、180亿行源代码，能以特殊字符、语言、仓库和源方式从90多种语言找到函数、API的真实代码。\nkitematic - Mac 上使用 Docker 最简单的方案。\n　开发资源\n\n　　开发资料\n\n豆瓣iOS开源库列表 - 豆瓣iOS开源库列表，很多开源项目。\niOS-Core-Animation-Advanced-Techniques - 中文版iOS 高级动画技术。\niOS开发的一些奇巧淫技1 - TableView不显示没内容的Cell怎么办; 键盘事件：IQKeyboardManager; app不流畅:KMCGeigerCounter; CoreData用起来好烦:MagicalRecord; CollectionView实现悬停的header:CSStickyHeaderFlowLayout。\niOS开发的一些奇巧淫技2 - 用一个pan手势来代替UISwipegesture的各个方向、拉伸图片、播放GIF、上拉刷新、把tableview里cell的小对勾的颜色改变、navigationbar弄成透明的而不是带模糊的效果、改变uitextfield placeholder的颜色和位置。\ncocoapods安装指南 - cocoapods安装指南。\nRemoteControl - Control your iPhone from inside Xcode for end-to-end testing 。\nMVVM 介绍 - 替换MVC的开发模式。\n第三方接口 - 基本所有第三方接口都在这，再也不用那么麻烦去找了。\n\n提高iOS开发效率的方法和工具 - 提高iOS开发效率的方法和工具。\n\n禅与 Objective-C 编程艺术 - 禅与 Objective-C 编程艺术 （Zen and the Art of the Objective-C Craftsmanship 中文翻译）。\nObjective-C编码规范：26个方面解决iOS开发问题 - 【Objective-C编码规范：26个方面解决iOS开发问题：“我们制定Objective-C编码规范的原因是我们能够在我们的书，教程和初学者工具包的代码保持优雅和一致。”今天分享的规范来自raywenderlich.com团队成员共同完成的，希望对学习OC的朋友们有所指导和帮助。\n　　swift\n\nSwift中文指南 - 中文版Apple官方Swift教程《The Swift Programming Language》，老码版本 历史版本更新说明。\nThe Swift Programming Language 中文版 - The Swift Programming Language 中文版。\nswifttoolbox - swifttoolbox swift开发的开源库汇总。\nSwiftGuide - 这份指南汇集了Swift语言主流学习资源，并以开发者的视角整理编排-- 非常不错，值得推荐。\nSwift开源项目精选 - Swift开源项目精选--推荐，每周都有更新。\nAwesome Swift - 一个收集了很多 Swift 开发资源的网站。\nDeveloping_iOS_8_Apps_With_Swift - Developing iOS 8 Apps with Swift 字幕简体中文翻译项目（斯坦福白胡子老头swift教学视频）。\nSwift-On-iOS - JohnLui 的 Swift On iOS 代码仓库。\n　　他人开源总结\n\ncode4app - 最多国人用的代码库。\ncocoachina - 国内最热门的iOS社区的代码库。\nawesome-ios - 一个老外整理的，中文版。\nawesome-ios-ui - 收集了不少 iOS UI/UX 库, 包含了很多酷炫的动画效果。\nios-cosmos - The iOS Cosmos：收录了IOS绝大部分的开源框架和工具。\nAwesome Haskell资料大全 - Awesome Haskell 资料大全：框架，库和软件。\nCosmos - The iOS Cosmos：收录了IOS绝大部分的开源框架和工具。\ncocoacontrols - 收集了很多UI控件效果代码，缺点是需要翻墙，而且代码分类不够好。\nlexrus - lexrus国内出名的iOS开源coder，非常库的label动画、textfield动画。\nopen-source-ios-apps - iOS App集合，分：swift与Objective-C--国外人整理。\n\n适合iOS开发者的15大网站推荐 - 适合 iOS 开发者的 15 大网站推荐 --- 英文网站。\n\nObjective-C GitHub 排名前 100 项目简介 - 主要对当前 GitHub 排名前 100 的项目做一个简单的简介, 方便初学者快速了解到当前 Objective-C 在 GitHub 的情况。\n\nGithub-iOS备忘 -整理了比较常用的iOS第三方组件，以及github上的统计。\n\n","source":"_posts/2016/6月/iOS开发资源终极汇总-转.md","raw":"---\ntitle: iOS开发资源终极汇总<转>\ndate: 2016-06-02 11:04:05\ntags:\n---\n\n\n*自己总结的iOS、mac开源项目及库。 github排名 https://github.com/trending,github搜索：https://github.com/search*\n\n\n\n- UI下拉刷新\n\n- EGOTableViewPullRefresh - 最早的下拉刷新控件。\n- SVPullToRefresh - 下拉刷新控件。\nMJRefresh - 仅需一行代码就可以为UITableView或者CollectionView加上下拉刷新或者上拉刷新功能。可以自定义上下拉刷新的文字说明。具体使用看“使用方法”。 （国人写）\nXHRefreshControl - XHRefreshControl 是一款高扩展性、低耦合度的下拉刷新、上提加载更多的组件。（国人写）\nCBStoreHouseRefreshControl - 一个效果很酷炫的下拉刷新控件。\nBreakOutToRefresh - 一个下拉刷新打砖块的开源 Swift 库，能让用户在等待下拉刷新的时候边玩撞球游戏边等待。\nKYJellyPullToRefresh - 实现弹性物理效果的下拉刷新，神奇的贝塞尔曲线，配合UIDynamic写的一个拟物的下拉刷新动画。\nMHYahooParallaxView - 类似于Yahoo Weather和News Digest首屏的视差滚动。\nSDRefreshView - 简单易用的上拉和下拉刷新（多版本细节适配）。\nZLSwiftRefresh - swift下拉刷新/上拉加载更多，支持自定义动画，集成简单，兼容UITableView/CollectionView/ScrollView/WebView。\nBreakOutToRefresh - swift，上拉和下拉刷新。\nGearRefreshControl - swift，上拉和下拉刷新。\nrefresher - swift，上拉和下拉刷新。\n可展开/收缩的下拉菜单--SvpplyTable - 一个可展开可收缩的下拉菜单，类似Svpply app。\nODRefreshControl - 原iOS6上的橡皮糖刷新样式，很有意思。现在也很多大的 App 在用，比如虾米音乐和 QQ 客户端。\nPullToMakeSoup - PullToMakeSoup, 自定义下拉刷新的动画效果：煮饭, Yalantis新作！\nTwitterCover - Twitter iOS客户端的下拉封面模糊效果。\nReplace-iOS - Replace-iOS 让人眼前一亮的下拉刷新（iOS）。\nAnimations - 封装了一下，使用的时候只要两行代码。一些动画的飞机稿，都是一些单独分离出来的用于测试的子动画，现在统一归类一下。\nPullToBounce - 下拉刷新的动画 for UIScrollView。\n　　模糊效果\n　　\n<!--more-->\n\n\nFXBlurView - 是一个UIView子类，支持iOS5.0以上版本，支持静态、动态模糊效果，继承与UIView的模糊特效。\nVVBlurPresentation -很简单易用的在原来viewconntroller基础上做模糊，然后present新的viewcontroller的。\nUICustomActionSheet - 通过模糊背景来着重强调与菜单相关的元素--对话框 里面已经收藏。\nSABlurImageView - 支持渐变动画效果的图像模糊化类库。P.S. 与前几天推存类库 SAHistoryNavigationViewController 是同一位作者。\n　　AutoLayout\n\nMasonry - Masonry是一个轻量级的布局框架，拥有自己的描述语法，采用更优雅的链式语法封装自动布局，简洁明了并具有高可读性（ 使用介绍1 使用介绍2），iOS自适应前段库-Masonry的使用），Masonry、Classy、ClassyLiveLayout介绍。使用DEMO 视图居中显示、子视图含边距、视图等距离摆放、计算ScrollView的contentsize。\nClassy - Classy是一个能与UIKit无缝结合stylesheet(样式)系统。它借鉴CSS的思想，但引入新的语法和命名规则，Classy官网，Masonry、Classy、ClassyLiveLayout介绍。\nClassyLiveLayout - ClassyLiveLayout通过结合Classy stylesheets与Masonry一起使用，能够在运行的模拟器中微调Auto Layout约束实时显示效果的工具，Masonry、Classy、ClassyLiveLayout介绍。\nSnap - Snap是Masonry Auto Layout DSL的Swift版本，是一款轻量级的布局框架，使用了更良好的语法封装了AutoLayout。Snap支持iOS和OS X。\nSnapKit - 就是“snap”， --swift 喜欢自动布局吗？当然喜欢！至少在storyboard中创建时会喜欢。 在代码中纯手工创建约束灰常痛苦，但幸运的是我们有了SnapKit，在board中用上它，你可以简单直观地编写约束了。。\nPureLayout - PureLayout 是 iOS & OS X Auto Layout 的终极 API——非常简单，又非常强大。PureLayout 通过一个全面的Auto Layout API 扩展了 UIView/NSView, NSArray 和 NSLayoutConstraint，仿照苹果自身的框架。\nUIView-AutoLayout - Deprecated in favor of PureLayout, which includes OS X support:https://github.com/smileyborg/PureLayout。\nCartography - Cartography 是用来声明 Swift 中的 Auto Layout，无需输入任何 stringly 就可设置自己 Auto Layout 的约束声明。\nAuto-Layout-Showcase - swift,AutoLayout 进阶 Demo，宽高比约束、比例约束、不等约束、视差约束、低优先级约束等高级用法，无需写码即可进行复杂页面布局，Demo 还动态模拟了各屏幕下的效果。来自百度知道 iOS 小组的内部分享。\nUIView-FDCollapsibleConstraints - 一个AutoLayout辅助工具，最优雅的方式解决自动布局中子View的动态显示和隐藏的问题。第二个Demo模拟了一个经典的FlowLayout，任意一个元素隐藏时，底下的元素需要自动“顶”上来，配合这个扩展，你可以在IB里连一连，选一选，不用一行代码就能搞定。\nAutolayout_Demo - 在项目中用自动布局实现的类似抽屉效果。\n当view隐藏的时候也隐藏其autolayout的NSLayoutAttribute - 当view隐藏的时候也隐藏其autolayout的NSLayoutAttribute，从而不用大量的代码工作。\n　　富文本\n\nRTLabel - RTLabel 基于UILabel类的拓展,能够支持Html标记的富文本显示，它是基于Core Text,因此也支持Core Text上的一些东西。32位，很久没有更新了。\nRTLabel - 富文本，RTLabel支持64位。\nTYAttributedLabel - TYAttributedLabel。 简单易用的属性文本控件(无需了解CoreText)，支持富文本，图文混排显示，支持添加链接，image和UIView控件，支持自定义排版显示。\nTQRichTextView - 用于做富文本视图控件显示，用于即时通讯的表情显示，以及资源评论的富文本显示。\nTTTAttributedLabel - 一个文字视图开源组件，是UILabel的替代元件，可以以简单的方式展现渲染的属性字符串。另外，还支持链接植入，不管是手动还是使用UIDataDetectorTypes自动把电话号码、事件、地址以及其他信息变成链接。用TTTAttributedLabel创建变化丰富的UILabel - 网易新闻iOS版使用。\nMLEmojiLabel - 自动识别网址、号码、邮箱、@、#话题#和表情的label。可以自定义自己的表情识别正则，和对应的表情图像。(默认是识别微信的表情符号)，继承自TTTAttributedLabel，所以可以像label一样使用。label的特性全都有，使用起来更友好更方便。\nFXLabel - FXLabel是一个功能强大使用简单的类库，通过提供一个子类改进了标准的UILabel组件，为字体增加了阴影、内阴影和渐变色等，可以被用在任何标准的UILabel中。FXLabel还提供了更多控件，可以对字体行距、字体间距等进行调整。\nWFReader - 一款简单的coretext阅读器，支持文本选择、高亮以及字体大小选择等。\nWPAttributedMarkup - WPAttributedMarkup is a simple utility category that can be used to easily create an attributed string from text with markup tags and a style dictionary。\nKMPlaceholderTextView - 可显示多行 placeholder 的 textView，可以在IB里面设置 -- swift。\nHHFlashSwitch - 一个另类的UISwitch，选择后，背景水波扩散变色效果。\nUUColorSwitch - Switch 开关动画效果,当打开开关时，Switch可实现平滑渲染过渡到父视图的效果。\nUITextViewDIYEmojiExample - UITextView编辑时插入自定义表情-简单的图文混编。\nShimmer - BlingBling闪光效果，酷炫的Label的效果，可以用于加载等待提示。\nZSSRichTextEditor - 适用于iOS的富文本WYSIWYG编辑器，支持语法高亮和源码查看。ZSSRichTextEditor包含所有WYSIWYG标准的编辑器工具。\nRichEditorView - swift，一套可定制富文本编辑器组件及示例。功能完整、代码简练、实现逻辑巧妙（编辑器核心与 WebView 结合，采用 HTML5 contentEditable 编辑模式，执行JS 配套命令 execCommand 实现富文本编辑功能）。\nDTCoreText - 可以解析HTML与CSS最终用CoreText绘制出来，通常用于在一些需要显示富文本的场景下代替低性能的UIWebView。DTCoreText源码解析。\nCSGrowingTextView - 用作即时通讯文本框和评论文本框使用，可以显示多行输入。\nMarkdownTextView - 显示Markdown的TextView。\n高仿微信限定行数文字内容 - 采用Autolayout高仿微信纯文字限定行数。\nFuriganaTextView - 实现复杂的日文韩文排版。\nParkedTextField - 带固定文本的输入组件。\nLTMorphingLabel - swift 能够实现文字变形动画效果的Label，用Swift写的一个能够实现文字变形动画效果的Label，很炫。\nGJCFCoreText - 图文混排。\nAttributedLabel - 显示性能数量级 UILabel 的 AttributedLabel。无畏无惧、挑战权威。\nFFLabel - 自动检测 URLs, @username, #topic# 等关链词（提供响应扩展）。实用的标签文本小组件。\nTextFieldEffects - 标准的UITextField有些枯燥么？来认识一下TextFieldEffects吧！废话不多说，只要看几个例子,是啊，都是些简单的dropin控制器。甚至可以在storyboard中使用IBDesignables。\n　　图表\n\nPNChart - 国内开源作者，动态的图表。\nswift-linechart - 功能完整、实用的折线图组件。使用方便，参数配置简单。是不可多得的优质组件--swift。\nios-charts - 一款优秀 Android 图表开源库 MPAndroidChart 的 Swift 语言实现版（支持 Objective-C 和 Swift 调用）。缺省提供的示例代码为 Objective-C。\nTEAChart - xhacker/TEAChart 一个简洁的 iOS 图表库，支持柱状图、饼图以及日历等。\nYOChartImageKit - 支持在watchOS上绘制图表，看它最近更新挺勤快的，可以关注一下。\nRealtimeGradientText - Fun With CALayer Mask 刚好今天开源了一个有趣的项目 RealtimeGradientText，所以也好聊一下 CALayer 的 Mask，说明。\n　　表相关\n\nSWTableViewCell - 国内开源作者，带很多手势的表单元格。\nMCSwipeTableViewCell - 带很多手势的表单元格。\nTMQuiltView - 瀑布流。\nWaterfallFlowDemo - 一个简单的UICollectionView瀑布流布局演示demo。\nXLForm - 很多表格类的table,写法更高冷一点，推荐使用。\nRETableViewManager - 可以十分方便地生成各种样式、各种功能的TableView。只要开发者能想到的列表效果或者功能，都可以利用这份代码迅速编写出来。比如，之前要实现一个填写各种资料的列表，可能需要很多代码，现在只需要几行代码就可以实现。\nUIScrollSlidingPages - 允许添加多视图控件，并且可以横向滚动。有点类似于Groupon app。\nHBHorizontalTableView - swift，TableView 横向滚动小示例（仿照 AppStore 应用展示）。\nHorizontalScrollCell - HorizontalScrollCell是一款使用方便的水平方向可滚动的单元格，适用于UICollectionView中实现水片方向滚动视图。 。\nSYJiugonggeTableView - tableView封装的九宫格。\nUUChatTableView - UUChatTableView 气泡聊天界面，支持文本、图片以及音频的气泡聊天界面。源码推荐说明。\nChats - 聊天 UI 示例程序。此项目应该只为演示或学习之用，没有服务器 -- swift。\nAtlas-iOS - 快速在iOS里集成聊天功能，类似开源版本的环信。Layer家开源了一套聊天app界面的解决方案.看起来很赞，很多蛮复杂的东西直接都帮封好了。不得不说现在做app开发真是很简单，大部分时间搭积木就可以了。官方网站。\nDLSlideView - DLSlideView对常见的顶部Tab页点击、滑动分页做了封装。它使用基于ViewController的container特性（而不是scrollview）来管理各个子页面，以支持无限分页，源码推荐说明。\nVOVCManager - 页面管理器:1.跳转指定页面,只需要知道viewController的Class名,如果有storyboard,则需要指定storyboard名；2.无需添加基类；3.支持URLScheme跳转指定页面。\nMBXPageViewController - 简洁快速的页面切换--MBXPageViewController，带有按钮控件的UIPageController，非常整洁、简单以及快速。该项目通过三种形式展示页面之间的切换，比如导航栏上的多个tab切换、页面左右两端箭头指示切换，以及使用分段控件。\nPagerTab - UIScrollView实现滑动转换页面，类似网易云音乐iOS版的页面滑动切换效果。\nGUITabPagerViewController - 多个tab滑动切换。\nVOMetroLayoutDemo - Metro风格的UICollectionView, 目前只支持横向布局,仅在iPad上应用。\nKYCellAnimation - 给UITableViewCell增加进入的动画。\nCOBezierTableView - swift，通过编辑 Bezier 曲线四点位置设置 TableView 内 Cell 及对应按扭位置。实验效果很赞。\nRDVTabBarController - 一个TabBar组件，可以方便设置底部菜单的文字图片，点击效果，小红点提示等。\nLxTabBarController - 改变了原生tabbar切换tab时的生硬效果，并加入滑动切换手势（有和界面上的其它手势发生冲突的风险，可根据具体项目予以关闭），swift版本。\n横向展示文本内容的自定义cell - 可以横向展示文本内容的自定义cell，根据文本无限滚动。\nUITableView-FDTemplateLayoutCell - UITableView-FDTemplateLayoutCell 是一个方便缓存 UITableViewCell 的高度的框架。\nExpandingStackCells - 采用 UIStackView 实现表格单元格扩展内容显示示例及解决方案。\nSapporo - swift 单元格模型驱动的集合视图管理器组件。又一个超实用的“轮子”。\nMDIHorizontalSectionTableViewController - 根据产品需求开源了一个交互项目，可以理解为横向Section的TableView，section和cell同时支持拖拽，后续安卓版本也会开源出来。\nJZNavigationExtension - 多功能导航控制器，可以透明返回栏。\nQuickRearrangeTableView - 基于 UITableView 的快速重排功能扩展子类。通过长按选定单元格然后滚动移动到指定位置。\nuicollectionview-reordering - UICollectionViews的拖拽(拖动、移动)效果,实例教程.\nDZNEmptyDataSet - DZNEmptyDataSet算是一个很标准的iOS内建方式，适合用来处理空的table view和collection view。会自动将collection view处理完善，并将用户消息以合适美观的方式显示出来。每个iOS项目都可以自动处理。\nMGSwipeTableCell - 另一个常见于很多应用中的UI组件，苹果应该考虑在标准的iOS SDK中加入一些类似的内容。Swipeable表格cell是这个pod的最佳描述，也是最好的。\n　　隐藏与显示\n\nSlideTapBar - 滚动栏菜单，向上滚动时隐藏tabbar，向下滚动马上显示tabbar。\nFoldingTabBar.iOS - 可折叠Tab Bar和Tab Bar Controller。\nLTNavigationBar - LTNavigationBar为app导航栏添加动态着色效果，可自定义其背景色。Demo包含：1.变换背景色；2.滚动视图，导航栏和状态栏重叠。\nBLKFlexibleHeightBar - 固定Header的效果库。\n　　HUD与Toast\n\nMBProgressHUD - 最多人用的loading。\nSVProgressHUD - SVProgressHUD的loading，如果你需要定制化的等待提示器，这个就是了（也许是最好的）。\nProgressHUD - ProgressHUD的loading，使用最简单。\nMMProgressHUD - 设置HUD出现和消失的方式（包括上下、左右、淡入淡出、放大缩小等等），设置HUD的内容（可以在HUD中加入帧动画、动态图片等等），设置HUD出现时的底部覆盖层颜色，等等。总而言之，这是一份集大成的HUD代码。慢慢看视频吧，囊括了所有效果。\nWSProgressHUD - 一个小巧精致的HUD,支持添加到自定义View上, 还有更多小细节.。\n　　对话框\n\nWCAlertView - 自定义的对话框。\nIOS7AlertView - IOS7AlertView的对话框。\nAMSmoothAlert - 动画效果不错，最多star，但不支持arm64。\nDQAlertView - 扁平化的样式不错。\nHHAlertView - 一个简易的alertview 有三种样式，有成功，失败，和警告三种样式，支持Delegate和block两种回调。\nMJPopupViewController - 实现弹出视图的各种弹出和消失效果，包括淡入淡出（fade in，fade out），从屏幕上方飞进，下方飞出，从屏幕左方飞进，右方飞出等等效果，弹窗。\nMenu - 项目中可能会用到的常用菜单，以后有时间会继续补充，弹窗。\nEasyTipView - 弹出提示框类及演示示例。同样地，API 简单、易用。好“轮子”，弹窗。\nkxmenu - kxmenu弹出菜单，点击视图上任意位置的按钮，会弹出一个菜单，并且有个小箭头指向点击的按钮，类似气泡视图。弹出的菜单位置会根据按钮的位置来进行调整。\nQBPopupMenu - QBPopupMenu弹出菜单，实现类似 UIMenuItem 的弹出菜单按钮。点击按钮，会弹出一个菜单，上面可以排列多个按钮。纯代码实现，不需要任何图片。\nSTModalDemo - 弹出视图（通知，提示，选择，窗口）。\nTAOverlay - TAOverlay可通过叠加层展示有用的信息，可自定义文本和背景色，添加阴影和模糊效果，以及更改字体大小或者用自定义图片替换页面上的icon。\nUICustomActionSheet - 通过模糊背景来着重强调与菜单相关的元素--模糊效果 里面已经收藏。\nActionSheetPicker-3.0 - 该项目是此前热门项目ActionSheetPicker的新版本，快速复制了iOS 8上的下拉 UIPickerView/ActionSheet功能。\nMJAlertView - 3D效果转场效果警示图--MJAlertView。\nSwiftyDrop - 轻量、易用的小清新弹出列表及信息提示组件真心不错。\n　　其他UI\n\nAwesomeMenu - 最多人用的Path菜单。\nDCPathButton - Path，4.0的弹出菜单，呼出或者关闭菜单时，多个小图标会分别按照逆时针和顺时针的方向进行滚动。\nSphereMenu - 利用UIDynamicAnimator的有趣的菜单，path类似。\nKYGooeyMenu - KYGooeyMenu 是一个具有 Gooey Effects 带粘性的扇形菜单控件(卫星菜单、path)。\nTwitterPaggingViewer - 多个Tableview，左右滑动。\nCircularProgressControl - Circular Progress Control using CAShapeLayer ，环形进度控制条。\nKDCircularProgress - KDCircularProgress是使用swift制作的色彩炫丽的进度条，可以加入多种颜色来控制进度条的渐变效果。\nTextProgress - 自定义实现数字进度条：1、可以自定义数字（0-100），填充的比例为当前设置的数字，2、可以实现自定义填充颜色，上下部分都可以，3、可以自定义边界的颜色4、实现了水波动画，可以设置打开或关闭。\nSDProgressView - 简便美观的进度指示器，此系列共有六种样式的进度指示器。\nNVActivityIndicatorView - loading 进度条动画，有20-30多种，是在此DGActivityIndicatorView 基础上做得修改。\nLoopProgressDemo - 环形渐变进度条。\n环形渐变进度条实现，\nXLPagerTabStrip - 做的很棒的iOS下的PagerTabStrip。\nRandomColorSwift - 一个自动生成好看的颜色的 Swift 库，RandomColorSwift。\nHexColorService - 将16进制颜色字符串转成UIColor。\nRainbow - 旨在提高代码可读性及易用性的 UIColor 扩展，它使原先有限的预定义颜色（方法）选择，扩展至超过 1200 种。\nUIColor-ChineseTraditionalColors - 中国传统颜色引用 UIColor 扩展。“UIColor.桃红()，UIColor.竹青() ...”，共158种。\n类似美团的下拉菜单 - 类似美团的下拉菜单，源码推荐说明。\n类似美团的下拉选项 - 类似于美团、大众点评的下拉菜单选项，code4app代码，评论代码有瑕疵。\nCRMediaPickerController - 一个简单易用的图片/视频选择器。1.可同时选择照片和视频。 2.挑选范围有Camera、Camera Roll、Photo Library以及最近拍摄的照片和视频。3.可自定义UIImagePickerController属性（Camera Overlay、Camera Device、Camera View Transform以及allowsEditing）。4.支持横屏和竖屏5.原生的iOS UI。，源码推荐说明。\nMDCSwipeToChoose - MDCSwipeToChoose可简单地添加滑动手势来调用UIView，并使用该行为提供了一个组件以创建类似Tinder app的like或者dislike界面的轻扫。基于轻扫的方向，你可以决定执行什么样的行为，并且你可以自定义文本颜色和图片。该项目适用于教学用的抽认卡、图片查看器以及其他等。\niOS Material Design库 - 该项目借鉴于谷歌的Material Design guideline，用户可自定义背景色。\nMaterial-Controls-For-iOS - Material Design风格的各种控件，非常完整全面。\nZMaterialDesignUIButton - Swift Material Design UIButton。\nMediumScrollFullScreen - Medium的可扩展滚动页面，上下滚动时，全屏显示内容，并自然消隐上下菜单。由此项目感知，作者是一位很注重细节的开发者，他的另外几个菜单类项目也都不错，值得参考，比如：PathMenu, MediumMenu 等。\n\nWZFlashButton - WZFlashButton，点击后button里面出现水波扩散效果。\n\nTwinkle - 为字体加上钻石版闪耀的效果。使用Swift编写。\nios-multi-back-button - 可替换内置的UInavigationController返回按钮，长按左上角的返回按钮，实现多层级的快速返回。\nASDayPicker - 适用于iOS (iPhone)的日期选择器，类似于Calendar app的周视图。\ntoday extension - 用纯代码构建一个Widget(today extension) 。\nFSCalendar - 日历视图，带有微妙和平滑的滚动效果，可自定义外观--国人。\nHSDatePickerViewController - 带有Dropbox Mailbox感觉的时间日期选择器。启动是背景被模糊化。界面也是主流的扁平化风格。\nCFCityPickerVC - 城市选取控制器。\nJTCalendar - iOS下优美的 Calendar 组件，做 GTD 类 App 必备。\nPersei - 动画隐藏或显示顶部菜单支持库及示例项目。--swift\nPDTSimpleCalendar - 是iOS最棒的日历组件了。你可以在各个方面对它进行定制，无论是运行逻辑还是外观方面。\nForm - JSON 驱动的 Form表单系统，复杂的表单填写类 App 极其需要（比如淘宝呢！）。\nSwiftyFORM - swift 表单输入框架（亮点是表单验证规则引擎），是我见过地最易用的 Swift 表单组件。\nSwiftSpinner - SwiftSpinner是使用swift制作的一款精致带感的指示器，并且连带有字体信息显示，模糊背景，半透明，扁平化等IOS8的效果。\nAKPickerView-Swift - 一款小而美的 3D 效果选择器。\nImagePickerSheet - 图片或视频选择器（可多选）组件及其示例项目。\niOS-RatingBar - iOS-RatingBar swift版的评分控件,跟Android的RatingBar一样有两种模式，评分模式和只读模式'支持视图编辑，自定义星星数量，评分等级,另外还能支持非整数星，0.5颗星，0.1颗星,可以开启动画效果。\nRKNotificationHub - 快速给 UIView 添加上炫酷的通知图标（Badge、红点、提示）。\nWZLBadge - Badge，支持横竖屏支持iOS5~iOS8允许高度定制化，包括“红点”的背景颜色，文字(字体大小、颜色)，位置等。说明.\nBubbleTransition - 以气泡膨胀和缩小的动画效果来显示和移除 controller，Uber的就是这种取消操作的方式。\nKYFloatingBubble - 类似iOS7中Game Center浮动气泡的效果。\nDKNightVersion - DKNightVersion 是一个支持夜间模式切换的框架。\nEasyUIControl - 一个可以简化界面ui的控件框架。\nLxGridView-oc LxGridView-swift - 利用UICollectionView模仿iOS系统桌面图标的交互，作用如动图。\nQQBtn - 仿QQ未读消息弹性按钮动画，达到和手机QQ未读信息一样的动画效果，效果基本实现。\nGMStepper - swift 带动画效果、支持手势滑动操作的步进标签。\nTZStackView - OS 9 UIStackView 功能模拟实现于 iOS 7/ iOS 8 内。\nLayoutTrait - swift 一个小类库。 做iPad 多任务分屏 适配的同学可以看一下。\nHACursor - HACursor，是一个对横向ScrollView中的视图进行管理的UI控件。只要几行代码就可以集成类似于网易新闻对主题页面进行排序，删除操作的功能。\nZTPageController - 模仿网易新闻和其他新闻样式做的一个菜单栏，栏中有各自的控制器，其中有4中展示样式’网易style' ’搜狐style' ’腾讯style1' ’网易style2' 。\nRuler - 尺子。\nHUMSlider - HUMSlider是一款能够自动显示刻度记号的滑竿，滑动到某处，该处的刻度会自动上升，两边还能配置图像。支持代码或storyboard中实现。\nJDSelectedDemo - 仿京东筛选菜单实现。\nBTNavigationDropdownMenu - 下拉列表暨导航标题组件。简单、直接、易用 -swift。\n　动画\n\nCore Animation笔记，基本的使用方法 - Core Animation笔记，基本的使用方法：1.基本动画，2.多步动画，3.沿路径的动画，4.时间函数，5.动画组。\nawesome-ios-animation - iOS Animation 主流炫酷动画框架(特效)收集整理 收集整理了下iOS平台下比较主流炫酷的几款动画框架。\n　　侧滑与右滑返回手势\n\nSloppySwiper - iOS系统自带的UINavigationController要7.0才支持，但不过该手势只能从屏幕左侧边缘识别，如果要扩大到整个屏幕范围怎么办？配合一个SloppySwiper无需代码就可以轻松实现。此库支持iOS5.0以上版本（另外：Nav的title滑动不明显，本人写了2个类似的控件），SloppySwiper-demo ：代码方式与storyboard方式。\nSCNavigation - UINavigation可以右滑返回，隐藏UINavigationBar。\nUINavigationController-YRBackGesture - 支持右滑返回手势，标题栏不动。\nGHSidebarNav - 现在比较流行使用侧开(侧滑)菜单设计。试了不少控件，感觉GHSidebarNav最成熟，尤其对纯代码创建的界面兼容性最好。在Storyboard中使用GHSidebarNav侧开菜单控件。\niOS-Slide-Menu - 能够类似Facebook和Path那样弹出左右边栏侧滑菜单,还支持手势。多种可以自定义的属性 (非常不错)。\nECSlidingViewController - 侧滑菜单。\nJASidePanels - 侧滑菜单,有左右菜单，有pop功能，支持手势侧滑,本人使用中：简单。\nanimated-tab-bar - 让 Tabbar items能显示萌萌的动画。\ntabbar图标动画 - tabbar上图标的动画实现，源码推荐说明。\nSideMenu - swift实现，一款带动画效果可定制 Slide Menu，可以学习其动画实现思路。P.S. 对于Hamburger式菜单，虽然很常用，不过，苹果并不鼓励使用，甚至有开发小组对其弊病用自家上线应用前后数据对比进行了抨击。\nRESideMenu - 侧开菜单，qq类似。\nJHMenuTableViewDemo - 仿网易邮箱列表侧滑菜单。\nSlideMenuView - 炫酷侧滑菜单布局框架，Android版本的一致实现。\nQQConfiguration - swift，QQ-iPhone端框架，左侧菜单栏拖动手势。\nKGFloatingDrawer - 侧滑菜单，qq类似，KyleGoddard/KGFloatingDrawer：一款适合于大屏手机或平板的浮动抽屉式导航界面组件。效果很赞- 侧开菜单，qq类似（与RESideMenu类似）。\nAIFlatSwitch - 一款带平滑过渡动画的 Switch 组件类，类相同风格的 Menu/BackHamburgerButton,类似相同风格的 Menu/Closehamburger-button.\nJHChainableAnimations - 在应用中采用链式写出酷炫的动画效果, 使代码更加清晰易读，利用block实现的链式编程。\nWXGSlideMenuDemo - 个简单实现侧拉（侧滑）菜单的小demo，供初学者共同学习、练习使用。\nPKRevealController - PKRevealController是一个可以滑动的侧边栏菜单（可向左、向右或者同时向两侧），只需手指轻轻一点（或者按一下按钮，但是这样滑动时不够炫酷），这类控制的其他库，而PKRevealController是最棒的。安装简便，高度定制且对手势识别良好。可以当做一个标准控件用在iOS SDK中。\nSwiftPages - 高可定制类似 Instagram 视图滑动切换功能类库。API 简单、易用。\nFlipBoardNavigationController - FlipBoardNavigationController。\nMMDrawerController - 最多人用的一个有关侧边“抽屉”导航框架，里面还有很多你意想不到的交互效果，侧滑。\nUIWebView翻页返回效果 - UIWebView翻页返回效果（变通方法）。\n　　gif动画\n\nUIImageView-PlayGIF - UIImageView-PlayGIF。\nYLGIFImage - YLGIFImage。\nYLGIFImage-Swift - YLGIFImage-Swift。\n　　其他动画\n\npopping - popping是一个POP 使用实例工程\nSinaMenuView - 用POP动画引擎写的Sina微博的Menu菜单。\nMMTweenAnimation - facebook POP的自定义动画扩展(基于POPCustomAnimation) 提供10种函数式动画。\nZQLRotateMenu - 这是一个旋转视图的选择器。\nCoolLoadAniamtion - 一个简单但是效果不错的loading动画。\nSequenRotateAnimation - 一个简单的loading次序动画。\nSYAppStart - App启动插画的自定义过度。\nVJDeviceSpecificMedia - 如何根据设备选择不同尺寸的图片 可以通过设置不同尺寸设备的LaunchImage，来使得App适配这些设备，要是在不同不同尺寸设备上使用不同大小的图片，则需要在代码中一一判断，然后加载。\nRMParallax - RMParallax是一个app启动页引导开源项目，除了细微的翻页视差效果，描述文本的过渡也非常美观（版本新特性）。\nADo_GuideView - 转动的用户引导页(模仿网易bobo) 因为没有从app包里抓到@3x的图片,建议在iPhone5模拟器运行,保证效果~ （版本新特性）。\nCoreNewFeatureVC - 版本新特性（引导页），1.封装并简化了版本新特性启动视图！2.添加了版本的本地缓存功能，3.集成简单，使用方便，没有耦合度，4.支持block回调。\nSpring - Spring是一个Swift编写的开源库，可简化Swift编写的iOS动画。支持shake、pop、morph、squeeze、wobble、swing、flipX、flipY、fall、squeezeLeft、squeezeRight以及squeezeDown等多种动画形式，用 IBDesignable 让使用者可以在 Xcode 中快速设置动画效果。\nKYBezierBounceView - 手势控制贝塞尔曲线，取消手势贝塞尔曲线会有反弹效果。\ncadisplaylinkanduibezierpath - CADisplayLink结合UIBezierPath的神奇妙用。\nKYCuteView - 实现类似QQ消息拖拽消失的交互+GameCenter的浮动小球效果，分析。\nKYWaterWaveView - 一个内置波浪动画的UIView，里面有鱼跳跃水溅起来的效果。\nKYPingTransition - 实现圆圈放大放小的转场动画，可以根据自己的需要使用Paper中的弹性效果，有Material风格。\nKYNewtonCradleAnimiation - 牛顿摆动画。\nLayerPlayer - 一款全面展示核心动画 API 示例项目（上架应用）。包括 CALayer, CAScrollLayer, CATextLayer, AVPlayerLayer, CAGradientLayer, CAReplicatorLayer, CATiledLayer, CAShapeLayer, CAEAGLLayer, CATransformLayer, CAEmitterLayer 等使用的互动演示。\nJGTransitionCollectionView - swift，基于集合视图扩展实现完成自动布局及单元项 Flip式动画效果（效果很赞）。组件使用方便、自然（只需设置集合视图数据源的标准方式即可）。\nKYShareMenu - 带弹性动画的分享菜单。\nContext-Menu.iOS - 可以为app的菜单添加漂亮的动画内容，可自定义icon，并可根据自己的喜好设计单元格和布局。\nDeformationButton - 一个简单的变换形状动画按钮。\nUnReadBubbleView - UnReadBubbleView是一个能够拖拽并拉长的气泡视图。拖拽到一定的长度会消失，可以通过系数设置来控制拖拽的长度。气泡也支持多种属性设置。\nPPDragDropBadgeView - 实现了类似于QQ 5.0 水滴拖拽效果. 支持iOS 5.0+ ARC，气泡能够带有数字标识，同时支持消失block方法。消失时还带有消失效果动画。\nGiftCard-Implementation - 购买的炫酷动画。\niCarousel - iCarousel是一个类，它继承于UIView。用于简化实现各种类型的旋转木马(分页滚动视图），无限轮播 ，iOS开发之多图片无缝滚动组件封装与使用。\nKIPageView - 无限循环PageView，横向TableView，无限轮播。\nHotGirls - 卡片动画。\ntispr-card-stack - swift 卡片风格动画切换组件及完整交互示例。\nZLSwipeableViewSwift - swift 卡片堆叠效果的实现（ZLSwipeableView)】可实现类似Tinder和Potluck应用程序的卡片堆叠效果，该项目基于ZLSwipeableView objective-c实现。1.自定义动画。2.自定义滑动切换。3.自定义方向。4.撤销。\nKoloda - 基于卡片的 Tinder-style 动画效果示例。精细绝人。更赞的是额外附了详细开发教程 How We Built Tinder-Like Koloda Animation in Swift 网页链接 。Yalantis 出品动画程序款款精品。\nQQPersonalInfoTransition - 仿照QQ的转场。\nKYAnimatedPageControl - 除了滚动视图时PageControl会以动画的形式一起移动，点击目标页还可快速定位。支持两种样式：粘性小球和旋转方块。\nKDIntroView - swift 动态介绍视图框架及演示。另外两个相似的类库是 RazzleDazzle和 Presentation，择需使用。\nRazzleDazzle - 【IFTTT开源Swift编写的帧动画框架--RazzleDazzle】RazzleDazzle 是IFTTT开源的一个iOS帧动画框架，非常适用于APP初次使用时的介绍和引导信息。JazzHands是UIKit一个简单的关键帧基础动画框架，可通过手势、scrollview、KVO等控制动画，被IFTTT应用在IFTTT for iPhone上。\nPresentation - 一个类似RazzleDazzle的框架。\nFillableLoaders - 基于 CGPaths 可定制个性化填空式装载类库。附水波上涨式示例。\nSXWaveAnimate - 实现非常美观的灌水动画。\nLSPaomaView - 可循环滚动的较长文字，跑马灯，效果很好，一句话集成。\nSIFloatingCollection_Swift - 可定制的 Apple Music 风格浮动形状动画组件及演示。\nCheetah - 易用、高可读链式动画类库。另一个类似类库是 DKChainableAnimationKit。\nCKWaveCollectionViewTransition - swift， UICollectionViewController之间切换的动画。\nTKSubmitTransition - 基于 UIButton 的登录加载、返回按钮转场动画组件及示例。\n　网络相关\n\n　　网络连接\n\nAFNetworking - ASI不升级以后，最多人用的网络连接开源库，iOS网络编程之AFNetworking使用,iOS开发下载文件速度计算。\nAlamofire - Alamofire是AFNetworking的作者mattt新写的网络请求的swift库。\nYTKNetwork - 是基于 AFNetworking 封装的 iOS网络库，提供了更高层次的网络访问抽象。相比AFNetworking，YTKNetwork提供了以下更高级的功能：按时间或版本号缓存网络请求内容、检查返回 JSON 内容的合法性、文件的断点续传、批量的网络请求发送、filter和插件机制等。\nLxFTPRequest - 支持获取FTP服务器资源列表，下载/上传文件，创建/销毁ftp服务器文件/目录，以及下载断点续传，下载/上传进度，自动判断地址格式合法性跟踪等功能！国人开发，QQ：349124555。\nHSDownloadManager - HSDownloadManager，下载音乐、视频、图片各种资源，支持多任务、断点下载。\nMutableUploadDemo - 模拟需求：图文混编，要求用户选择图片后就上传，可选择多图，并行上传，用户确定提交后后台执行，必须全部图片上传完才能提交文字。\nWTRequestCenter - 方便缓存的请求库，提供了方便的HTTP请求方法，传入请求url和参数，返回成功和失败的回调。 UIKit扩展提供了许多不错的方法，快速缓存图片，图片查看，缩放功能， 颜色创建，设备UUID，网页缓存，数据缓存等功能。 无需任何import和配置，目前实现了基础需求。\nMMWormhole - Message passing between iOS apps and extensions 2个iOS设备之间通信。\nsocket.io-client-swift - WebSockect 客户端类库。开放的通讯协议，有利于构建强大地跨平台应用。\nTransporter - swift， 短小、精悍、易用的多文件（并发或顺序）上传和下载传输库。还支持后台运行、传输进程跟踪、暂停/续传/取消/重试控制等功能。\nSTNetTaskQueue - STNetTaskQueue Objective-C 可扩展网络请求管理库。\nCocoaAsyncSocket - 在iOS开发中使用socket，一般都是用第三方库AsyncSocket，不得不承认这个库确实很强大，使用教程。\nGCDAsyncSocket - GCDAsyncSocket ， 不错的Demo。\nJust - 小而美的 HTTP 类。功能简单、直接、完整且健壮性高-- swift。\nFuture - 基于微框架设计思想的异步执行及结果响应类，代码即简单又干净-- swift。\nMZDownloadManager - 下载管理。\nDVR - 针对网络请求的测试框架，超实用的工具。且支持 iOS, OSX, watchOS 全平台。\nHFDownLoad - iOS开发网络篇之文件下载、大文件下载、断点下载:NSData方式、NSURLConnection方式、NSURLSession下载方式 下载方式具体的思路、区别见Blog 。\n　　图像获取\n\nSDWebImage - SDWebImage 网络图片获取及缓存处理。\nKingfisher - 纯 Swift 实现的类 SDWebImage 库，实现了异步下载和缓存图片。\nKFSwiftImageLoader - Swift，一个图像缓存加载库。\nFastImageCache - FastImageCache 网络图片获取及缓存处理，iOS图片加载速度极限优化—FastImageCache解析。\nEGOCache - 十分知名的第三方缓存类库，可以缓存NSString、UIImage、NSImage以及NSData。除此，如果还可以缓存任何一个实现了接口的对象。所有缓存的数据都可以自定义过期的时间，默认是1天。EGOCache 支持多线程（thread-safe），UITableView加载多张照片导致内存上涨的问题。\n　　网络聊天\n\nXMPPFramework - XMPPFramework openfire聊天。\nSXTheQQ - 用xmppFramework框架编写QQ程序，主要为了练习通讯的一些原理，界面比较渣 必须要先在本地配置好环境才可以运行。\n环信 - 给开发者更稳定IM云功能。8200万用户考验，好用！（暂无及时语音、视频通话）\n融云 - 即时通讯云服务提供商。（暂无及时语音、视频通话）\n容联云通讯 - 提供基于互联网通话,视频会议,呼叫中心/IVR,IM等通讯服务。\nchatsecure - 基于XMPP的iphone、android加密式聊天软件， chatsecure官网 。 iOS代码1，iOS代码2， iOS中文版。\nMessageDisplayKit - 仿微信聊天，参考JSQMessagesViewController。（国人写）\nJSQMessagesViewController - 聊天 。\nSunFlower - 环信聊天demo，比较多功能 。\nBlueTalk蓝牙聊天 - 以MultipeerConnectivity为基础， 实现了简单的蓝牙聊天。\n　　网络测试\n\nReachability - 苹果提供过一个Reachability类，用于检测网络状态。但是该类由于年代久远，并不支持ARC。该项目旨在提供一个苹果的Reachability类的替代品，支持ARC和block的使用方式。iOS网络监测如何区分2、3、4G\nSimpleCarrie - 简单的运营商信息获取!。\nNetReachability - swift2.0 简单的方法检查网络连接的连通性，提供通知中心集成接口。\n　　WebView\n\nMGTemplateEngine - MGTemplateEngine比较象 PHP 中的 Smarty、FreeMarker 和 Django的模版引擎，是一个轻量级的引擎，简单好用。只要设置很多不同的HMTL模版，就能轻松的实现一个View多种内容格式的显示，对于不熟悉HTML或者减轻 工作量而言，把这些工作让设计分担一下还是很好的，也比较容易实现设计想要的效果。\nNJKWebViewProgress - 一个 UIWebView 的进度条接口库,UIWebView 本身是不提供进度条的。\nGTMNSString-HTML - 谷歌开源的用于过滤HTML标签。\n　　Model\n\nJSONKit - JSONKit库是非常简单易用而且效率又比较高的，重要的JSONKit适用于ios 5.0以下的版本,使用JSONKit库来解析json文件，只需要下载JSONKit.h 和JSONKit.m添加到工程中；然后加入libz.dylib即可。\nJSONModel - 解析服务器返回的Json数据的库,JSONModel源码解析一。\nMantle - Mantle主要用来将JSON数据模型化为OC对象, 大系统中使用。为什么选择Mantle。\nRFJModel - RFJModel是一个IOS类库，可以将JSON字典自动装填到OBJC对象。相比JSONModel有一些非常好的特性，使用上也比较简单。\nXMLDictionary - ios与mac os平台下xml与NSDictionary相互转化开源类库。\nMJExtension - 用于json转model进行使用，转换效率很高，使用也比较简单，只要前后台约定好，json直接就转成了model。\nCFRuntime - “Swift 版的 MJExtension，运行时、反射与一键字典模型互转”。\nDDModel - 快速搭建项目Model层，支持ORM映射关系，能从JSON/XML直接实例一个Model对象。支持SQLite本地数据持久化，封装了HTTP， 减少HTTP代码与UIViewController的代码耦合，支持Cache；类似RESTKit、Mantle的功能；使用该类库以后简化了网络层的开发工作，把更多的精力放在UI上面；目前只支持GET/POST方法的请求。使用到的第三方库有：1.SQLitePersistentObject; 2.JTObjectMapping; 3.AFNetworking; 4.XMLDictionary;\nprotobuf-swift - Protocol Buffers 的 Swift 语言实现库。P.S. Protocol Buffers 是 Google 开源项目，主要功能是实现直接序列化结构化的对象数据，方便跨平台快速传递，开发者也可以直接修改 protobuf 中的数据。相比 XML 和 JSON，protobuf 解析更快，存储更小。\nJSONCodable - 基于 Swift 2.0 新特性（Protocol Extensions and Error Handling）的JSON 解析类。\nSwiftyJSON - 使Swift的JSON解析变得简单。\n　　其他\n\nDateTimeKit - 一个超赞的时间处理的库，Joda-Time ！ 他能帮你轻松处理时区，处理时间加减，计算到期时间等等场景下的问题。\nSwiftDate - 特别完整、强大的日期时间操作管理类库。它几乎涵盖了已知开源日期类库所有优秀特性。 他能帮你轻松处理时区，处理时间加减，计算到期时间等等场景下的问题。\niOS私有API - 私有API，绿色 == public，红色 == private，蓝色 == dylib。\niOS源代码 - iOS源代码。\nlibfacedetection - C++ 人脸识别 包含正面和多视角人脸检测两个算法.优点:速度快(OpenCV haar+adaboost的2-3倍), 准确度高 (FDDB非公开类评测排名第二），能估计人脸角度。\nSlidden - 一个老外开源的开发自定义键盘的库，利用这个开源库，可以方便的配置键位、颜色以及键位对应的图片。\nTPKeyboardAvoiding - 用户键盘弹出自动计算高度，进行屏幕滚动操作。\nCDPMonitorKeyboard - CDPMonitorKeyboard封装,可以解决输入视图(例如textField,textView等)被键盘覆盖问题，并可设置高于键盘多少。\n自动监听键盘高度 - 自动监听键盘高度，初始界面，输入框在屏幕最下方，当键盘出现时，输入框随即移动到键盘上方。\nSYKeyboardTextField - SYKeyboardTextField 是一个轻巧,简单,非侵入式的键盘附随输入框! 采用Swift编写。\nBlocksKit - block框架，为 OC 常用类提供了强大的 Block 语法支持，使得编写 OC 代码变得舒适、快速、优雅。\nKVOController - 在项目中有使用 KVO ，那么 KVOController 绝对是个好选择。它是 facebook 开源的一个 KVO 增强框架。\nappirater - 用于提醒用户给你的 APP 打分的工具。\nMotionKitr - 为核心运动框架（The Core Motion framework）提供友好的类库封装，以更方便使用三轴陀螺仪和加速感应器特性。\nReview Monitor - 第一时间自动推送 Apple Store 的用户评论到你的邮件箱或者 Slack，第一时间跟进用户反馈，打造优秀 App 必备工具！类似的有：App annie 的类似功能。\nWBWebViewConsole - 类似微博iPhone客户端的 “调试选项” 吗？把其中的 “内置浏览器网页调试” 开源在 Github 上了。\nios-good-practices - ios-good-practices iOS 开发最佳实践。\niOS开发最佳实践 - iOS 开发最佳实践 -- 中文。\nTodayExtensionSharingDefaults - TodayExtensionSharingDefaults是一个iOS 8 Today扩展示例，可以使用NSUserDefaults与其containing app分享数据。\nQRCodeReader.swift - QRCodeReader.swift一款简单的 QR 二维码阅读组件及示例，提供前后相机切换功能。\nQRCatcher - 一个简洁美观的二维码扫描应用， iOS学习：AVFoundation 视频流处理--二维码扫描。\nParsimmon - swift，小而美的语言学类库封装工具包。提供分词、标记词性、词形归并、朴素贝页斯分类、决策树等自然语言分析小工具。P.S. 英语分词效果好于中文，感兴趣的同学可以针对中文做一些优化开发。参考译文 NSHipster - NSLinguistic​Tagger。\nPassword-keyboard - 随机变换数字位置的密码键盘。 模仿银行类应用在付款时输入的随机密码键盘。\nMKMapView-Extension - 这是关于 MKMapView 写的一个基于swift的扩展，可以扩展 MKMapView 的相关功能，减少复用代码量。\nSemverKit - 针对符合『语义化版本规范 2.0.0』版本号的解析、比较运算类库。不仅支持 Major, Minor, Patch，还支持 Alpha 和 Beta 预发布版本，以及相应地递增运算扩展。\nSwiftValidator - 基于规则的输入验证类库。项目良好的面向对象设计思想，使规则的扩展及自定义非常方便。更专业的规则引擎（甚至是基于自然语言的规则配置）解决方案，比如：开源的 Drools，商用的 ILOG 等。\nTesseract-OCR-iOS - 有关OCR文字识别项目。\nScreenotate - 支持 OCR 文字识别的载屏笔记 Mac 完整应用。\niOS-Categories - 收集了许多有助于开发的iOS扩展,各种category。\nOlla4iOS - 过去积累的一些方便复用的类和方法，还在整理中。\nDKNightVersion - 用最快的方式给你的应用加上夜间和白天的切换效果。\nTouchVisualizer - 实用的多点触摸可视化组件。扩展并作用于 UIWindows，结构上提供了简单地针对触摸显示定制，比如触摸点的颜色。\nRegexKitLite - 用来处理正则表达式。\nXcodeServerSDK - 非官方 Xcode Server SDK 封装库。 P.S. 该 SDK 分离自之前推荐的由该作者开发的自动测试框架 Buildasaur。\nBFKit-Swift - BFKit-Swift 这套工具库可以提高应用开发效率。\nCKSIncrementalStore - 基于 CloudKit 服务器实现多终端数据同步。\nSwiftSequence - 简洁、灵活、多变的操作 SequenceType 的类库（基于微框架（μframework）设计思想）。\nIDNFeedParser - 一个简单易用的Rss解析库。\nCoreUmeng - 简单：友盟分享封装。\nopenshare - 不用官方SDK，利用社交软件移动客户端(微信/QQ/微博/人人/支付宝)分享/登录/支付。\nSwifternalization - 一套实用的本地化工具库。使用教程及 API 文档完整。值得收入项目的“轮子”。\napous - 一款有趣的 Swift 应用 － 让 Swift 成为脚本语言。\nMirror - 通过反射（Refection）实现镜像对象封装库。从而可以更轻松获取（或输出）对象属性名、类型及值变量。\nProposer - Proposer 用单个 API 处理 iOS 上的权限请求，以便使用前确认可访问“相册”、“相机”、“麦克风”、“通讯录”或“用户位置”。\nPermissionScope - 用这个库可以在询问用户前，就告知用户所需的系统权限，为用户带来更好的体验。接受度更高—>更多活跃用户->更高的留存率->数据更好->下载率更高。\nLocationManager - CoreLocation使用起来还是比较麻烦的，需要授权，判断系统版本等等，所以推荐使用第三方框架LocationManager，使用Block，十分简单！iOS-CoreLocation：无论你在哪里，我都要找到你！ 。\npangu.objective-c - 有多种语言实现版本～ Pangu.Objective-C：格式化中英文之间的空格（OC）。\nobjection - 一个轻量级的依赖注入框架Objection。\nControlOrientation - 如何用代码控制以不同屏幕方向打开新页面【iOS】， 使用说明。\niRate - 问卷调查。\nGameCenterManager - 在iOS上管理GameCenter vanilla并不算难，但是有了这个库会更简单也更快。好上加好不是更好么。\nSlackTextViewController - 用作极佳、定制的文本输入控制时，自适应文本区域，手势识别、自动填充、多媒体合并，快速drop-in解决方案。\nIAPHelper - 应用内付费给我们提供了很多样本代码，而这个库丢掉了那些代码，将金钱交易相关的大多通用任务做了简单的封装。\nTAPromotee - 交叉推广应用是你可以免费实现的最佳市场推广策略之一。使用这个库做起来非常简单，不用都不可能——将TAPromotee加入你的podfile中，免费配置与享受更多下载吧。\nDownloadFontOnline - 实现了在线下载一些字体的功能，不用在工程中导入字体库，下载的字体也不会保存在你的应用中，所以可以放心使用。修复了一下崩溃的bug。\nSTClock - 仿锤子时钟。\nGitUp - GitUp是一个可视化的Git客户端，能够实时的进行编辑、合并、回滚等多种操作，更多功能，请下载体验。\n获取联系人信息，通讯录 - 获取联系人信息，通讯录。\nUniversal-Jump-ViewController - 根据规则跳转到指定的界面(runtime实用篇一)。\n　　数据库\n\nFMDB - sqlite的工具， 多线程FMDatabaseQueue实例，FMDB数据库的使用演示和封装工具类。\nGXDatabaseUtils - 在FMDB基础上的工具。\nrealm-cocoa - Realm是一个真正为移动设备打造的数据库，同时支持Objective-C和Swfit。Realm宣称其相比Sqlite，在移动设备上有着更好的性能表现,官方中文。\nBreeze - 用Swift写的一个轻量级的CoreData管理工具，并且还支持iCloud 。\nAlecrimCoreData - Swift，更容易地访问 CoreData 对象封装类库。除了 CRUD，还提供指针定位，强大的排序、筛选，异步数据获取，以及独立线程后台存取数据。\nCoreStore - Core Data 管理类库。 其中事务管理及查询是其比较大的亮点，整套 API 功能完整。\nMagicRecord\nMagicalRecord - MagicalRecord就像是给Core Data提供了一层外包装，隐藏掉所有不相关的东西。 其中事务管理及查询是其比较大的亮点，整套 API 功能完整。\nPresentation - 重量级好项目 Presentation，它可以方便你制作定制的动画式教程、Release Notes、个性化演讲稿等。\nCoreValue - Swift 2 版 Core Data 封装库。相比另外两个 SwiftRecord和 CoreStore更轻量。\nSQLCipher - SQLCipher使用256-bit AES加密，SQLCipher分为收费版本和免费版本。官方教程， 加密你的SQLite - 各种sqlite数据库加密介绍。 SQLCipherDemo下载 。\n　　缓存处理\n\nYTKKeyValueStore - Key-Value存储工具类，说明。\nTMCache - TMCache 是 Tumblr 开源的一个基于 key/value 的数据缓存类库,可以用于缓存一些临时数据或者需要频繁加载的数据,比如某些下载的数据或者一些临时处理结果。\nJLKeychain - 快捷使用keychain存储数据的类，使keychain像NSUserDefaults一样工作。\nsskeychain - SSKeyChains对苹果安全框架API进行了简单封装,支持对存储在钥匙串中密码、账户进行访问,包括读取、删除和设置。\nKeychainAccess - 管理Keychain接入的小助手。\n　　PDF\n\nReader - Reader可提供类似iBooks的文档导航，支持屏幕旋转和所有方向，并通过密码保护加密PDF文件，支持PDF链接和旋转页面。\n　　图像浏览及处理\n\nFLAnimatedImage - gif播放处理的工具。\nCLImageEditor - 超强的图片编辑库，快速帮你实现旋转，防缩，滤镜等等一系列麻烦的事情。\nios-image-filters - 图像滤镜，库比较旧了，很容易崩溃。\nXBImageFilters - 图像滤镜，。\nVIPhotoView - 用于展示图片的工具类，因为是个 View，所以你可以放在任何地方显示。支持旋转，双击指定位置放大等。\nMWPhotoBrowser - 一个非常不错的照片浏览器，在github的star接近3000个，解决MWPhotoBrowser中的SDWebImage加载大图导致的内存警告问题。\ncore-image-explorer - Core Image 滤镜处理图片-- swift ，Core Image 介绍。\nCoreImageShop - CoreImageShop图片滤镜处理-- Mac app that let you create a complete Core Image Filter usable on iOS using SCRecorder。\nGPUImage - 处理图片效果。\nRSKImageCropper - 适用于iOS的图片裁剪器，类似Contacts app，可上下左右移动图片选取最合适的区域。\nWZRecyclePhotoStackView - 删除照片交互--WZRecyclePhotoStackView，就是模拟生活中是删除或保留犹豫不决的情形而产生的。 在上滑，下滑的部分，借鉴了TinderSimpleSwipeCards。\nTimingFunctionEditor - TimingFunctionEditor用swift编写， 贝塞尔曲线编辑器，编辑后可以预览或拷贝代码片段直接使用。P.S. 该项目采用更简单的依赖管理器 Carthage ，而非常用的 CocoaPods。Carthage介绍中文。\nAAFaceDetection - AAFaceDetection--swift，简单、实用的面部识别封装库。虽然该技术从 iOS 5 发展，不过真正有趣的应用还不多。。\nPhotoTweaks - 这个库挺赞的，正好是对图像操作的。\nConcorde - swift, Concorde, 一个可用于下载和解码渐进式 JPEG 的库, 可用来改善应用的用户体验。\nZoomTransition - swift, 通过手势操控图片的放大、缩小、旋转等自由变化效果的组件及示例。\nAFImageHelper - swift,一套针对 UIImage 和 UIImageView 的实用扩展库，功能包含填色和渐变、裁剪、缩放以及具有缓存机制的在线图片获取。\nPinterestSwift - swift,Pinterest 风格图片缩放、切换示例。\nKYElegantPhotoGallery - 一个优雅的图片浏览库。\nSDCycleScrollView - 无限循环自动图片轮播器(一步设置即可使用)。\nSDPhotoBrowser - 仿新浪动感图片浏览器,非常简单易用的图片浏览器，模仿微博图片浏览器动感效果，综合了图片展示和存储等多项功能。\nHZPhotoBrowser - 一个类似于新浪微博图片浏览器的框架（支持显示和隐藏动画；支持双击缩放，手势放大缩小；支持图片存储；支持网络加载gif图片，长图滚动浏览；支持横竖屏显示）。\nPhotoStackView-Swift - PhotoStackView——照片叠放视图，使用说明。\nMarkingMenu - 基于手势、类似 Autodesk Maya 风格标记菜单及图片渲染。\nSXPhotoShow - UICollectionViewFlowLayout流水布局 是当下collectionView中常用且普通的布局方式。本代码也写了三种好看的布局，其中LineLayout和流水布局有很大的相同点就直接继承UICollectionViewFlowLayout，然后StackLayout，CircleLayout这两种都是直接继承自最原始的UICollectionViewLayout 布局方案。\nPictureWatermark - 主要实现了给图片加文字以及图片水印的功能，已封装成了UIImage的类别，方便使用。\nCocoaPicker - 仿 QQ 图片选择器（OC）。\n自定义宽高比的相册框 拍照 - 取出照片时 弹出自定义view。在这个自定义view上创建一个需要的相框大小的view层 把取出的图片赋值给UIImageView按缩放添加到这个层上。对uiimageView添加捏合、移动 手势。添加按钮 选取，最后根据位移和缩放比例 裁剪image。\n　摄像照相视频音频处理\n\nSCRecorder - SCRecorder 短视频录制。\nVideoPushDemo - 视频剪辑 视频特效制作1 视频特效制作2。\nLLSimpleCamera - A simple, customizable camera control for iOS， 摄像头。\nEZAudio - EZAudio 是一个 iOS 和 OSX 上简单易用的音频框架，根据音量实时显示波形图，基于Core Audio，适合实时低延迟音频处理，非常直观。中文介绍,官网。\nffmpeg - ffmpeg官网，FFmpeg在iOS上完美编译。\nVCL - VCL官网。\nkxmovie - 使用ffmpeg的影片播放器，修改说明， 修改代码。\nijkplayer - B站开源的视频播放器，支持Android和iOS。\nStreamingKit - StreamingKit流媒体音乐播放器。\nFreeStreamer - FreeStreamer流媒体音乐播放器，cpu占用非常小。\nDOUAudioStreamer - DOUAudioStreamer豆瓣的音乐流媒体播放器。\nfmpro - 电台播放器，支持锁屏歌词，支持基本播放流程，歌词展示，后台锁屏播放和控制以及锁屏后封面+歌词，fmpro_R 。\nIPDFCameraViewController - 支持相机定焦拍摄、滤镜、闪光、实时边框检测以及透视矫正功能，并有简单易用的API。\nSCRecorder - 酷似 Instagram/Vine 的音频/视频摄像记录器，以 Objective-C 为基础的过滤器框架。 你可以做很多如下的操作：记录多个视频录像片段。删除任何你不想要的记录段。可以使用任何视频播放器播放片段。保存的记录可以在序列化的 NSDictionary 中使用。（在 NSUserDefaults 的中操作）添加使用 Core Image 的视频滤波器。可自由选择你需要的 parameters 合并和导出视频。\nCool-iOS-Camera - Cool-iOS-Camera。\nFastttCamera - FastttCamera 快速照相。\nICGVideoTrimmer - ICGVideoTrimmer提供提供视频剪切的视图（类似系统相册中浏览视频时顶部那个条状视图）。左右两个边界选择器还能够自定义。\nIOS录音和播放功能demo - 比较完整的ios录音和播放功能的实现。\nCameraManager - 相机管理封装类库。看着极好用的样子----swift。\nMCAudioInputQueue - 简易录音类，基于AudioQueue的。\nDraggableYoutubeFloatingVideo - 展示像类似Youtube移动应用的那种浏览视频的效果，当点击某视频时能够从右下方弹出一个界面，并且该界面能够通过手势，再次收缩在右下方并继续播放。这是通过AutoLayout设计实现。\namr - 做即时通讯的音频处理，录音文件是m4a，便于web端的音频播放。\nFSVoiceBubble - 一个轻量级播放录音音频的气泡：1.支持短时间的音频播放（支持网络音频）；2.播放时的声波动画；3.自定义包括声波的颜色，气泡的背景等。\nKRVideoPlayer - 类似Weico的播放器，支持竖屏模式下全屏播放。\nVideoBeautify - 功能酷似美拍,秒拍等应用的源码：对视频进行各种美化处理，采用主题形式进行分类，内含各种滤镜，动画特效和音效等。\n　响应式框架\n\nReactiveCocoa - ReactiveCocoa 受函数响应式编程激发。不同于使用可变的变量替换和就地修改，RAC提供Signals来捕获当前值和将来值（ 使用介绍 ），不错的例子,入门好教程：ReactiveCocoa入门教程：第一部分 。Reactive Cocoa 3.0 在 MVVM 中的应用 。\nReactiveAnimation - ReactiveCocoa 推出了一个叫 ReactiveAnimation 的子项目，直接用完全用 Swift 来实现了。\nBeeFramework - 与ReactiveCocoa类似，BeeFramework用户指南 v1.0。\nObjective-Chain - Objective-Chain是一个面向对象的响应式框架，作者表示该框架吸收了 ReactiveCocoa 的思想，并且想做得更面向对象一些。\n　消息相关\n\n　　消息推送客户端\n\nSGPushDemo - 消息推送客户端\nOrbiter - 消息推送客户端:Push Notification Registration for iOS.\nPushDemo - 客户端消息接收消息代码，IOS开发之 ---- IOS8推送消息注册 ， 分分钟搞定IOS远程消息推送。\n　　消息推送服务端\n\njavapns源代码 - 消息推送的java服务端代码，注意：DeviceToken中间不能有空格。\npushMeBaby - Mac端消息推送端代码，注意：DeviceToken中间要有空格。\n　　通知相关\n\nJSQNotificationObserverKit - 一款轻量、易用的通知发送及响应框架类库。作者是知名开源项目 JSQMessagesViewController（Objective-C 版即时聊天）的作者 Jesse Squires.\nGLPubSub - 一个简短实用的 NSNotificationCenter 的封装。\nHomeoff - 用swift写了一个模仿Launcher通知中心快捷方式的应用。支持20个应用，并增加了一个返回到桌面来解放Home键的功能。\nJDStatusBarNotification - 在状态栏顶部显示通知。可以自定义颜色字体以及动画。支持进度显示以及显示状态指示器。\n　版本新API的Demo\n\nappleSample - iOS 苹果官方Demo合集， 官方demo.\niOS7-Sampler - 整合了iOS7.0的一些十分有用的特性，比如：Dynamic Behaviors、碰撞检测、语音合成、视图切换、图像滤镜、三维地图、Sprite Kit（动画精灵）、Motion Effect（Parallax）、附近蓝牙或者wifi搜索连接、AirDrop、运动物体追踪（iPhone 5S以上，需要M7处理器）等等。对于日常的应用开发十分实用。\niOS8-Sampler - 日本的shuさん制作的 iOS8 参考代码集。01.Audio Effects ；02.New Image Filters；03.Custom Filters；04.Metal Basic；05.Metal Uniform Streaming；06.SceneKit；07.HealthKit；08.TouchID；09.Visual Effects；10.WebKit；11.UIAlertController；12.User Notification；13.Pedometer；14.AVKit；15.Histogram；16.Code Generator；17.New Fonts；18.Popover；19.Accordion Fold Transition\niOS-9-Sampler - 通过实例介绍了iOS 9 SDK中重要新特性的使用。\nMTSwift-Learning - 通过一些简单项目实战演练开始学习 Swift 。\niOS8-day-by-day - swift。\niOS9-day-by-day - swfit iOS9 Day-by-Day :: Day 2 :: UI Testing。\niOS 9 分屏多任务 - iOS 9 分屏多任务：Slide Over & Split View快速入门（中文版）。\n　代码安全与密码\n\nios-class-guard - 一个用于混淆iOS的类名、方法名以及变量名的开源库--有人反映编译出来的app运行不了。\n《Protecting iOS Applications》：文章系统地介绍了如何保护iOS程序的代码安全，防止反汇编分析。\nfishhook - fishhook是Facebook开源的一个可以hook系统方法的工具。\nGesturePassword - 一个iOS手势密码功能实现，iPad/iPhone 都可以用，没有使用图片，里面可以通过view自己添加。keychain做的数据持久化，利用苹果官方KeychainItemWrapper类。操作部分都在controller了。删除直接用一下clear。\nJMPasswordView - 简单实用的手势密码，效果可自行调控。\n仿密码锁-九宫格 - 仿密码锁-九宫格，主要是使用UIButton 手势事件 UIBezierPath画图，解锁失败弹出“密码错误”。\nCoreLock - 本框架是高仿支付宝，并集成了所有功能，并非一个简单的解锁界面展示。个人制作用时1周多，打造解锁终结者框架。\nLikeAlipayLockCodeView - 高仿支付宝手势解锁（超级版）。\nPCGestureUnlock - 目前最全面最高仿支付宝的手势解锁，而且提供方法进行参数修改，能解决项目开发中所有手势解锁的开发。\nICPayPassWordDemo - CPayPassWordDemo，一个模仿支付宝支付密码输入对话框小demo。\nRSAESCryptor - 加密 RSA+AES Encryption/Decryption library for iOS. This library uses 2048-bit RSA and 256-bit key with 128-bit block size AES for encryption/decryption。\n　测试及调试\n\nHeapInspector - HeapInspector是一个用于检测应用中的内存泄漏的开源调试工具。\nCrashlytics - Crashlytics 崩溃报告 崩溃日志 使用说明 。\nUIViewController-Swizzled - 把你进入的每一个controller的类名打出来,如果看一些特别复杂的项目的时候直接运行demo就可以知道执行次序了。\nsnoop-it - snoop-it比UIViewController-Swizzled好用，代码托管在google上。\nVersions - 版本比较小工具。\nMobileWebPageTest - MobileWebPageTest是用来测试移动网页性能的软件，它可以对页面的加载和渲染过程进行截屏，协助开发者分析出页面性能瓶颈。\nKKLog - 一个日志管理系统。\nCleanroomLogger - 相当于 CocoaLumberjack 或 Log4j 的 Swift 版本，功能上甚至更强大。另外，源代码中已经内含了完整的 API 文档，使用非常方便。 Buildasaur - 自动测试框架 Buildasaur。 MMPlaceHolder - 一行代码显示UIView的位置及相关参数。 使用Quick框架和Nimble来测试ViewControler - Quick是一个用于创建BDD测试的框架。配合Nimbl，可以为你创建更符合预期目标的测试。\nfastlane - 一套iOS开发和持续集成的命令行工具fastlane，可以用来快速搭建CI甚至自动提交的开发环境。这套工具中包括了上传ipa文件，自动截取多语言截屏，生成推送证书，管理产品证书等一系列实用工具。\nKIF - 是一个开源的用户界面UI测试框架. 使用 KIF, 并利用 iOS中的辅助功能 API, 你将能够编写模拟用户输入，诸如点击，触摸和文本输入，自动化的UI测试.\nQuick - 用于Swift中的单元测试（也可用于Objective-C），与Xcode整合在一起。如果你是Objective-C的粉丝，我建议用Specta代替这个，但是对Swift使用者来说，Quick是最佳选择。\nSleipnir - Swift的测试框架。\nkiwi-bdd - TDD或BDD，objective-c语言的测试框架，最流行的BDD测试框架了，Kiwi最受欢迎（根据github上的star数来推断，行为描述和期望写起来也比较易懂，至少我是这么认为的） iOS开发中的测试框架。\nspecta - TDD或BDD，objective-c语言的测试框架，用的人多。\ncedar - TDD或BDD，objective-c语言的测试框架，用的人少。\n　AppleWatch\n\nTesla汽车AppleWatch app demo演示 - 通过AppleWatch控制特斯拉汽车，同时可以看到汽车的相关信息，比如剩余电量、可续行里程等，以及解锁/上锁车门、调节司机和乘客的四区域空调温度、开启车辆大灯、定位汽车等。源码推荐说明。\nWatchKit-Apps - WatchKit 开源小项目示例集锦。是不可多得地学习 WatchKit 的示例式教程（1.如何创建一个简单的交互式计数器；2.如何从手表上控制iOS app；3.如何在WatchKit app和iOS app之间共享数据；4.如何创建一个拥有不同背景色的数字时钟；5.展示不同的UI层；6.如何创建支持滑动手势的应用程序。）。\nKYVoiceCurve - 类似Apple Watch中语音的声音曲线动画。\nIGInterfaceDataTable - IGInterfaceDataTable是WKInterfaceTable对象的一个类别，可以让开发者更简单地配置多维数据。该项目使用类似UITableViewDataSource的数据源模式配置Apple Watch表格，而不是将数据结构扁平化成为数组。\nApple Watch开发教程资料汇总 - Apple Watch开发教程资料汇总。\nStargate - 通过 iPhone 桥接实现 Mac 与 Watch 的即时通讯。Stargate 通过封装两个优秀的基础类库 MMWormhole 和 PeerKit 实现高效的通讯应用。--swift\nsoon - 一款倒计时 WatchKit 示例应用。作者从架构的角度，思考如何设计一款完整、通讯高效且性能又好的 WatchKit 扩展应用。该示例学习性非常强。--swift\nwatchOS-2-Sampler - 基于 watchOS 2 若干新特性，写了相应的示例代码供大家学习、参考。\nHMWatch - HMWatch是个有待完善的watchOS 2.0 HomeKit 应用示例。\nCocoaMultipeer - CocoaMultipeer这个开源框架支持OS X, iOS和watchOS设备间的点对点通信，解决watchOS和Mac之间通信的方案还是很有用的。\nHighstreetWatchApp - 是电商平台Highstreet针对App Watch的一款应用，该demo中加载的是虚拟数据。\nNKWatchChart - NKWatchChart是一个基于PNChart专门为Apple Watch 开发的图表库,目前支持 line, bar, pie, circle 和 radar 等 图表形式。\n　VPN\n\nvpnon - swift的VPN On 的源码和本地化内容都是开放的: 官方网站。\nHydro.network - Hydro.network 的开发旅程, gitcafe。\n　完整项目\n\nv2ex - v2ex 的客户端，新闻、论坛。\napps-ios-wikipedia - apps-ios-wikipedia 客户端。\njetstream-ios - 一款 Uber 的 MVC 框架。它同时提供了多用户实时通讯支持，一旦启动 JetStream 后端服务，通过 WebSocket 协议可以分分钟建立多用户实时通讯应用。\nDeckRocket - 在相同 WiFi 网络环境内，通过iPhone 控制并播放 Mac 中的 PDF 文档。\nScanBook - 扫扫图书:可以扫描条形码查询图书，也可以关键字搜索，遇到合乎你口味的书，还可以看看别人的读书笔记，不同角度去体会。\nDesignerNewsApp - Swift 开发的 DesignerNews 客户端，看着美美的！\nKYWeibo - 调用新浪API自己写的第三方微博客户端。\nDouQu_IOS - 逗趣IOS手机端（一款笑话软件）,拥有完整的功能的手机应用app 。\nIT江湖iOS客户端 - IT江湖iOS客户端。\nEidolon - 艺术品拍卖的投标亭平台，用swift与反应式编程框架 ReactiveCocoa。\nCrazyPuzzle - 模仿“看图猜成语”App，功能齐全，配有音效，效果很不错。游戏使用cocoa框架完成，没有使用cocos2d的框架。\nWhoCall - 谁CALL我，iOS来电信息语音提醒，无需越狱。（需要iOS 7.0及以上版本。)骚扰电话预警、来电归属地提醒、联系人姓名播报，这些有中国特色人性化的电话功能，iOS上也应该有。电话提醒、私有API。\n仿iOS猎豹垃圾清理(实现原理+源码) - 仿iOS猎豹垃圾清理(实现原理+源码),用到私有API。\nDSLolita - 模仿新浪微博做的一款app，有发送博文，评论，点赞，私聊功能。\nGSD_ZHIFUBAO - 支付宝高仿版。\nTropos - Tropos, 由 thoughtbot 推出的一款用 Objective-C 写的开源天气类应用, 截至今天, thoughtbot 已在 GitHub 上贡献了 174 个开源项目, 实在令人敬佩。\nSmileWeather -开源天气类应用,天气图标很完整。\nMVVMReactiveCocoa - GitBucket 2.0 通过审核啦，她是我在公司实践了一年多 MVVM 和 RAC 的基础上，利用业余时间开发的第三方 GitHub 客户端，旨在能够对想实践 MVVM 和 RAC 的 iOS 开发者有所帮助。AppStore地址，欢迎下载使用GitBucket和收藏MVVMReactiveCocoa。\nTomate - 这个圆盘式计时器让你更专注于工作或学习。P.S. App Store 上架收费应用（0.99 欧）。\nStoveFireiOSMenu - 炉火餐饮系统iPad点餐端。\nBaiduFM-Swift - 百度FM, swift语言实现，基于最新xcode6.3+swift1.2,初步只是为了实现功能，代码比较粗燥，后面有时间会整理，支持Apple Watch。\nWNXHuntForCity - iOS高仿城觅项目（开发思路和代码）。\nZYChat - 关于聊天界面的可消息类型扩展，响应绑定设计。\nNiceAppDemo - 仿最美应用-每日最美的钢琴律动效果。\nmeituan - 美团5.7iOS版（高仿），功能包括，团购首页，高德地图搜索附近美食并显示在地图上，上门服务，商家，友盟分享。\nchuanke - 高仿百度传课iOS版。\nTuan - 模仿MJ老师iPad版美团（swift版），偶有bug 见谅。\nSXNews - 模仿网易新闻做的新闻软件，完成了主导航页，新闻详情页，图片浏览页，评论页。效果不错，比网上流传的各种和网易新闻UI架构有关的代码都要完整，都要好。\nMonkey - Monkey for GitHub是一个GitHub开发者和仓库排名的开源App。这次主要增加了登录GitHub的功能，随手follow和star，并且增加发现模块，包括GitHub的trending，动态，showcases等。\nUther - 跟蠢萌的外星人聊天，还能帮你记事”。itunes下载 。\n　好的文章\n\n自定义转场动画 - 3 种方法～ 关于自定义转场动画。\niOS提高效率的方法和工具 - iOS提高效率的方法和工具。\n用 JSON 构建 API 的标准指南 - 用 JSON 构建 API 的标准指南。\n　Xcode插件\n\niOS开发进阶，从Xcode开始 - 学习使用Xcode构建出色的应用程序！\n在Xcode启动的时候，Xcode将会寻找位于~/Library/Application Support/Developer/Shared/Xcode/Plug-ins文件夹中的后缀名为.xcplugin的bundle作为插件进行加载（运行其中的可执行文件）。Xcode5 Plugins 开发简介 写个自己的Xcode4插件\n\nXcode 4 插件制作入门 - Xcode 4 插件制作入门:Xcode所使用的所有库都包含在Xcode.app/Contents/的Frameworks，SharedFrameworks和OtherFrameworks三个文件夹下。其中和Xcode关系最为直接以及最为重要的是Frameworks中的IDEKit和IDEFoundation，以及SharedFrameworks中的DVTKit和DVTFoundation四个。\n\nRTImageAssets - 一个 Xcode 插件，用来生成 @3x 的图片资源对应的 @2x 和 @1x 版本。Asset Catalog Creator 功能强大，能自动生成全部尺寸：包括App Icons、Image Sets、Launch Screens Generator。\n\nVVDocumenter-Xcode - 一个Xcode插件，build后，随手打开一个你之前的项目，然后在任意一个方法上面连按三下\"/\"键盘，就ok了。\n\nReveal-Plugin-for-XCode - 一个Reveal插件，可以使工程不作任何修改的情况下使用Reveal，该插件已在Alcatraz上架。Reveal：分析iOS UI的利器 。\n\njava2Objective-c - Google公司出得java转Obje-C转换工具，转换逻辑，不转换UI。\n\nRegX - 专治代码强迫症的 Xcode 插件，使用 Swift 和 Objective-C 编写。其用竖向对齐特定源代码的元素，使得代码更易读和易理解。说明 ； 菜单：xcode——》Edit-》Regx 。\n\nKSImageNamed - 自动完成，特别是如果你正在写Objective-C，如果Xcode能自动完成文件名难道不会很伟大吗？比如图像文件的名称。\n\nFuzzyAutocomplete - Xcode的实现自动完成还不完美，此插件能给出你所期望或想要的建议，设置：xcode-》Editor-》FuzzyAutocomplete-》plugin settings。\n\nGitDiff - Xcode的代码编辑器的一个微妙的补强，加上了足够的可见信息以了解上次git提交以来发生了什么变化，设置：xcode-》Edit-》GitDiff。\n\nXToDo - 这个插件不仅凸显TODO，FIXME，???，以及！！！注释，也在便利列表呈现他们。 菜单：xcode-》view-》snippets; 调出列表显示: xcode-》view-》ToDo List ： ctrl + T 。\n\nBacklight - 突出显示当前正在编辑的行。菜单：xcode-》view-》Backlight 。\n\nCocoaPods - 该CocoaPods的插件增加了一个CocoaPods菜单到Xcode的产品菜单。如果你不喜欢命令行，那么你一定会喜欢这个插件。 用CocoaPods做iOS程序的依赖管理 。\n\nPeckham - 添加import语句比较麻烦，此插件 按Command-Control-P，给出的选项列表中选择要的头文件。先要安装Alcatraz ,在终端输入： curl -fsSL https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh | sh ； 重启xcode-》window-》Package Manager：搜索 Peckham 安装，打开Peckham.xcodeproj，编译 Peckham target，重启Xcode 。\n\nAuto-Importer - Auto-Importer是一个自动导入类对应的头文件的Xcode插件。\n\nAlcatraz -使用Alcatraz来管理Xcode插件 使用说明 。\n\nKSHObjcUML -KSHObjcUML 是一个 Objective-C 类引用关系图的 Xcode 插件。\n\nColorSense-for-Xcode - 颜色插件，安装之后，就不用根据RGB选择颜色，直接从取色板中取颜色，会自动补齐RGB代码。。\n\n10款提高iOS开发效率的XCode插件 - 10款提高iOS开发效率的XCode插件：1. XcodeColors；5. ACCodeSnippetRepository；10. Dash for Xcode。\n\nZLGotoSandboxPlugin - 支持Xcode快捷键了跳转当前应用沙盒了！快捷键是 Shift+Common+w。\n\nXcodeSwiftSnippets - XcodeSwiftSnippets, 提供了很多可在 Xcode 上使用的 Swift 代码片段, 通过自动补全的方式极大的提高了开发效率， 另外还有 Objective-C 版的。\n\nCoPilot - 通过此插件， Xcode 可以协同编程了（采用 WebSocket 通讯）。如此强大的“黑工具”，不爱它能行吗。\n\nESJsonFormat-Xcode - 将Json格式化输出为模型的属性。\nSCXcodeMiniMap - Xcode迷你小地图-SCXcodeMiniMap。\nxTransCodelation - XCODE中英文翻译插件，提供API查询模式和网页模式，都是利用的百度翻译。另外集成了一个可以一键关闭其他所有APP的实用功能，方便开发者！\n　美工资源\n\nTWG_Retina_Icons - 一套支持 Retina 高清屏的 iPhone 免费图标集。\nASCIImage - 使用 NSString 创建 image，说明。\nmy-sketch-colors - 配色。\nFont Awesome - Font Awesome：一套绝佳的图标字体库和CSS框架，详细的安装方法请参考官方网站中文网站,GitHub地址 。\nDynamicColor - 强大的颜色操作扩展类。通过该类，你可以通过扩展方法基于某个颜色得到不同深浅、饱和度、灰度、色相，以及反转后的新颜色。是不可多得的好类库。\nChameleon - Chameleon是一个iOS的色彩框架。它运用现代化flat color将UIColor扩展地非常美观。我们还可以通过它运用自定义颜色创建调色板。它还有很多功用，请浏览readme。\nFontBlaster - 载入定制字体时更简单。\n　其他资源\n\ngithuber - 最好用的GitHub人才搜索工具。\ncodatlas - 源代码搜索利器。\nsearchcode - 源代码搜索利器：来自悉尼的代码搜索引擎汇聚了 Github, Bitbucket, Sourceforge...等多家开源站点超20万个项目、180亿行源代码，能以特殊字符、语言、仓库和源方式从90多种语言找到函数、API的真实代码。\nkitematic - Mac 上使用 Docker 最简单的方案。\n　开发资源\n\n　　开发资料\n\n豆瓣iOS开源库列表 - 豆瓣iOS开源库列表，很多开源项目。\niOS-Core-Animation-Advanced-Techniques - 中文版iOS 高级动画技术。\niOS开发的一些奇巧淫技1 - TableView不显示没内容的Cell怎么办; 键盘事件：IQKeyboardManager; app不流畅:KMCGeigerCounter; CoreData用起来好烦:MagicalRecord; CollectionView实现悬停的header:CSStickyHeaderFlowLayout。\niOS开发的一些奇巧淫技2 - 用一个pan手势来代替UISwipegesture的各个方向、拉伸图片、播放GIF、上拉刷新、把tableview里cell的小对勾的颜色改变、navigationbar弄成透明的而不是带模糊的效果、改变uitextfield placeholder的颜色和位置。\ncocoapods安装指南 - cocoapods安装指南。\nRemoteControl - Control your iPhone from inside Xcode for end-to-end testing 。\nMVVM 介绍 - 替换MVC的开发模式。\n第三方接口 - 基本所有第三方接口都在这，再也不用那么麻烦去找了。\n\n提高iOS开发效率的方法和工具 - 提高iOS开发效率的方法和工具。\n\n禅与 Objective-C 编程艺术 - 禅与 Objective-C 编程艺术 （Zen and the Art of the Objective-C Craftsmanship 中文翻译）。\nObjective-C编码规范：26个方面解决iOS开发问题 - 【Objective-C编码规范：26个方面解决iOS开发问题：“我们制定Objective-C编码规范的原因是我们能够在我们的书，教程和初学者工具包的代码保持优雅和一致。”今天分享的规范来自raywenderlich.com团队成员共同完成的，希望对学习OC的朋友们有所指导和帮助。\n　　swift\n\nSwift中文指南 - 中文版Apple官方Swift教程《The Swift Programming Language》，老码版本 历史版本更新说明。\nThe Swift Programming Language 中文版 - The Swift Programming Language 中文版。\nswifttoolbox - swifttoolbox swift开发的开源库汇总。\nSwiftGuide - 这份指南汇集了Swift语言主流学习资源，并以开发者的视角整理编排-- 非常不错，值得推荐。\nSwift开源项目精选 - Swift开源项目精选--推荐，每周都有更新。\nAwesome Swift - 一个收集了很多 Swift 开发资源的网站。\nDeveloping_iOS_8_Apps_With_Swift - Developing iOS 8 Apps with Swift 字幕简体中文翻译项目（斯坦福白胡子老头swift教学视频）。\nSwift-On-iOS - JohnLui 的 Swift On iOS 代码仓库。\n　　他人开源总结\n\ncode4app - 最多国人用的代码库。\ncocoachina - 国内最热门的iOS社区的代码库。\nawesome-ios - 一个老外整理的，中文版。\nawesome-ios-ui - 收集了不少 iOS UI/UX 库, 包含了很多酷炫的动画效果。\nios-cosmos - The iOS Cosmos：收录了IOS绝大部分的开源框架和工具。\nAwesome Haskell资料大全 - Awesome Haskell 资料大全：框架，库和软件。\nCosmos - The iOS Cosmos：收录了IOS绝大部分的开源框架和工具。\ncocoacontrols - 收集了很多UI控件效果代码，缺点是需要翻墙，而且代码分类不够好。\nlexrus - lexrus国内出名的iOS开源coder，非常库的label动画、textfield动画。\nopen-source-ios-apps - iOS App集合，分：swift与Objective-C--国外人整理。\n\n适合iOS开发者的15大网站推荐 - 适合 iOS 开发者的 15 大网站推荐 --- 英文网站。\n\nObjective-C GitHub 排名前 100 项目简介 - 主要对当前 GitHub 排名前 100 的项目做一个简单的简介, 方便初学者快速了解到当前 Objective-C 在 GitHub 的情况。\n\nGithub-iOS备忘 -整理了比较常用的iOS第三方组件，以及github上的统计。\n\n","slug":"2016-6月-iOS开发资源终极汇总-转","published":1,"updated":"2016-07-12T08:43:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9pw001qrb0u80f23kil","content":"<p><em>自己总结的iOS、mac开源项目及库。 github排名 <a href=\"https://github.com/trending,github搜索：https://github.com/search\" target=\"_blank\" rel=\"noopener\">https://github.com/trending,github搜索：https://github.com/search</a></em></p>\n<ul>\n<li><p>UI下拉刷新</p>\n</li>\n<li><p>EGOTableViewPullRefresh - 最早的下拉刷新控件。</p>\n</li>\n<li>SVPullToRefresh - 下拉刷新控件。<br>MJRefresh - 仅需一行代码就可以为UITableView或者CollectionView加上下拉刷新或者上拉刷新功能。可以自定义上下拉刷新的文字说明。具体使用看“使用方法”。 （国人写）<br>XHRefreshControl - XHRefreshControl 是一款高扩展性、低耦合度的下拉刷新、上提加载更多的组件。（国人写）<br>CBStoreHouseRefreshControl - 一个效果很酷炫的下拉刷新控件。<br>BreakOutToRefresh - 一个下拉刷新打砖块的开源 Swift 库，能让用户在等待下拉刷新的时候边玩撞球游戏边等待。<br>KYJellyPullToRefresh - 实现弹性物理效果的下拉刷新，神奇的贝塞尔曲线，配合UIDynamic写的一个拟物的下拉刷新动画。<br>MHYahooParallaxView - 类似于Yahoo Weather和News Digest首屏的视差滚动。<br>SDRefreshView - 简单易用的上拉和下拉刷新（多版本细节适配）。<br>ZLSwiftRefresh - swift下拉刷新/上拉加载更多，支持自定义动画，集成简单，兼容UITableView/CollectionView/ScrollView/WebView。<br>BreakOutToRefresh - swift，上拉和下拉刷新。<br>GearRefreshControl - swift，上拉和下拉刷新。<br>refresher - swift，上拉和下拉刷新。<br>可展开/收缩的下拉菜单–SvpplyTable - 一个可展开可收缩的下拉菜单，类似Svpply app。<br>ODRefreshControl - 原iOS6上的橡皮糖刷新样式，很有意思。现在也很多大的 App 在用，比如虾米音乐和 QQ 客户端。<br>PullToMakeSoup - PullToMakeSoup, 自定义下拉刷新的动画效果：煮饭, Yalantis新作！<br>TwitterCover - Twitter iOS客户端的下拉封面模糊效果。<br>Replace-iOS - Replace-iOS 让人眼前一亮的下拉刷新（iOS）。<br>Animations - 封装了一下，使用的时候只要两行代码。一些动画的飞机稿，都是一些单独分离出来的用于测试的子动画，现在统一归类一下。<br>PullToBounce - 下拉刷新的动画 for UIScrollView。<br>　　模糊效果\n　　<a id=\"more\"></a>\n</li>\n</ul>\n<p>FXBlurView - 是一个UIView子类，支持iOS5.0以上版本，支持静态、动态模糊效果，继承与UIView的模糊特效。<br>VVBlurPresentation -很简单易用的在原来viewconntroller基础上做模糊，然后present新的viewcontroller的。<br>UICustomActionSheet - 通过模糊背景来着重强调与菜单相关的元素–对话框 里面已经收藏。<br>SABlurImageView - 支持渐变动画效果的图像模糊化类库。P.S. 与前几天推存类库 SAHistoryNavigationViewController 是同一位作者。<br>　　AutoLayout</p>\n<p>Masonry - Masonry是一个轻量级的布局框架，拥有自己的描述语法，采用更优雅的链式语法封装自动布局，简洁明了并具有高可读性（ 使用介绍1 使用介绍2），iOS自适应前段库-Masonry的使用），Masonry、Classy、ClassyLiveLayout介绍。使用DEMO 视图居中显示、子视图含边距、视图等距离摆放、计算ScrollView的contentsize。<br>Classy - Classy是一个能与UIKit无缝结合stylesheet(样式)系统。它借鉴CSS的思想，但引入新的语法和命名规则，Classy官网，Masonry、Classy、ClassyLiveLayout介绍。<br>ClassyLiveLayout - ClassyLiveLayout通过结合Classy stylesheets与Masonry一起使用，能够在运行的模拟器中微调Auto Layout约束实时显示效果的工具，Masonry、Classy、ClassyLiveLayout介绍。<br>Snap - Snap是Masonry Auto Layout DSL的Swift版本，是一款轻量级的布局框架，使用了更良好的语法封装了AutoLayout。Snap支持iOS和OS X。<br>SnapKit - 就是“snap”， –swift 喜欢自动布局吗？当然喜欢！至少在storyboard中创建时会喜欢。 在代码中纯手工创建约束灰常痛苦，但幸运的是我们有了SnapKit，在board中用上它，你可以简单直观地编写约束了。。<br>PureLayout - PureLayout 是 iOS &amp; OS X Auto Layout 的终极 API——非常简单，又非常强大。PureLayout 通过一个全面的Auto Layout API 扩展了 UIView/NSView, NSArray 和 NSLayoutConstraint，仿照苹果自身的框架。<br>UIView-AutoLayout - Deprecated in favor of PureLayout, which includes OS X support:<a href=\"https://github.com/smileyborg/PureLayout。\" target=\"_blank\" rel=\"noopener\">https://github.com/smileyborg/PureLayout。</a><br>Cartography - Cartography 是用来声明 Swift 中的 Auto Layout，无需输入任何 stringly 就可设置自己 Auto Layout 的约束声明。<br>Auto-Layout-Showcase - swift,AutoLayout 进阶 Demo，宽高比约束、比例约束、不等约束、视差约束、低优先级约束等高级用法，无需写码即可进行复杂页面布局，Demo 还动态模拟了各屏幕下的效果。来自百度知道 iOS 小组的内部分享。<br>UIView-FDCollapsibleConstraints - 一个AutoLayout辅助工具，最优雅的方式解决自动布局中子View的动态显示和隐藏的问题。第二个Demo模拟了一个经典的FlowLayout，任意一个元素隐藏时，底下的元素需要自动“顶”上来，配合这个扩展，你可以在IB里连一连，选一选，不用一行代码就能搞定。<br>Autolayout_Demo - 在项目中用自动布局实现的类似抽屉效果。<br>当view隐藏的时候也隐藏其autolayout的NSLayoutAttribute - 当view隐藏的时候也隐藏其autolayout的NSLayoutAttribute，从而不用大量的代码工作。<br>　　富文本</p>\n<p>RTLabel - RTLabel 基于UILabel类的拓展,能够支持Html标记的富文本显示，它是基于Core Text,因此也支持Core Text上的一些东西。32位，很久没有更新了。<br>RTLabel - 富文本，RTLabel支持64位。<br>TYAttributedLabel - TYAttributedLabel。 简单易用的属性文本控件(无需了解CoreText)，支持富文本，图文混排显示，支持添加链接，image和UIView控件，支持自定义排版显示。<br>TQRichTextView - 用于做富文本视图控件显示，用于即时通讯的表情显示，以及资源评论的富文本显示。<br>TTTAttributedLabel - 一个文字视图开源组件，是UILabel的替代元件，可以以简单的方式展现渲染的属性字符串。另外，还支持链接植入，不管是手动还是使用UIDataDetectorTypes自动把电话号码、事件、地址以及其他信息变成链接。用TTTAttributedLabel创建变化丰富的UILabel - 网易新闻iOS版使用。<br>MLEmojiLabel - 自动识别网址、号码、邮箱、@、#话题#和表情的label。可以自定义自己的表情识别正则，和对应的表情图像。(默认是识别微信的表情符号)，继承自TTTAttributedLabel，所以可以像label一样使用。label的特性全都有，使用起来更友好更方便。<br>FXLabel - FXLabel是一个功能强大使用简单的类库，通过提供一个子类改进了标准的UILabel组件，为字体增加了阴影、内阴影和渐变色等，可以被用在任何标准的UILabel中。FXLabel还提供了更多控件，可以对字体行距、字体间距等进行调整。<br>WFReader - 一款简单的coretext阅读器，支持文本选择、高亮以及字体大小选择等。<br>WPAttributedMarkup - WPAttributedMarkup is a simple utility category that can be used to easily create an attributed string from text with markup tags and a style dictionary。<br>KMPlaceholderTextView - 可显示多行 placeholder 的 textView，可以在IB里面设置 – swift。<br>HHFlashSwitch - 一个另类的UISwitch，选择后，背景水波扩散变色效果。<br>UUColorSwitch - Switch 开关动画效果,当打开开关时，Switch可实现平滑渲染过渡到父视图的效果。<br>UITextViewDIYEmojiExample - UITextView编辑时插入自定义表情-简单的图文混编。<br>Shimmer - BlingBling闪光效果，酷炫的Label的效果，可以用于加载等待提示。<br>ZSSRichTextEditor - 适用于iOS的富文本WYSIWYG编辑器，支持语法高亮和源码查看。ZSSRichTextEditor包含所有WYSIWYG标准的编辑器工具。<br>RichEditorView - swift，一套可定制富文本编辑器组件及示例。功能完整、代码简练、实现逻辑巧妙（编辑器核心与 WebView 结合，采用 HTML5 contentEditable 编辑模式，执行JS 配套命令 execCommand 实现富文本编辑功能）。<br>DTCoreText - 可以解析HTML与CSS最终用CoreText绘制出来，通常用于在一些需要显示富文本的场景下代替低性能的UIWebView。DTCoreText源码解析。<br>CSGrowingTextView - 用作即时通讯文本框和评论文本框使用，可以显示多行输入。<br>MarkdownTextView - 显示Markdown的TextView。<br>高仿微信限定行数文字内容 - 采用Autolayout高仿微信纯文字限定行数。<br>FuriganaTextView - 实现复杂的日文韩文排版。<br>ParkedTextField - 带固定文本的输入组件。<br>LTMorphingLabel - swift 能够实现文字变形动画效果的Label，用Swift写的一个能够实现文字变形动画效果的Label，很炫。<br>GJCFCoreText - 图文混排。<br>AttributedLabel - 显示性能数量级 UILabel 的 AttributedLabel。无畏无惧、挑战权威。<br>FFLabel - 自动检测 URLs, @username, #topic# 等关链词（提供响应扩展）。实用的标签文本小组件。<br>TextFieldEffects - 标准的UITextField有些枯燥么？来认识一下TextFieldEffects吧！废话不多说，只要看几个例子,是啊，都是些简单的dropin控制器。甚至可以在storyboard中使用IBDesignables。<br>　　图表</p>\n<p>PNChart - 国内开源作者，动态的图表。<br>swift-linechart - 功能完整、实用的折线图组件。使用方便，参数配置简单。是不可多得的优质组件–swift。<br>ios-charts - 一款优秀 Android 图表开源库 MPAndroidChart 的 Swift 语言实现版（支持 Objective-C 和 Swift 调用）。缺省提供的示例代码为 Objective-C。<br>TEAChart - xhacker/TEAChart 一个简洁的 iOS 图表库，支持柱状图、饼图以及日历等。<br>YOChartImageKit - 支持在watchOS上绘制图表，看它最近更新挺勤快的，可以关注一下。<br>RealtimeGradientText - Fun With CALayer Mask 刚好今天开源了一个有趣的项目 RealtimeGradientText，所以也好聊一下 CALayer 的 Mask，说明。<br>　　表相关</p>\n<p>SWTableViewCell - 国内开源作者，带很多手势的表单元格。<br>MCSwipeTableViewCell - 带很多手势的表单元格。<br>TMQuiltView - 瀑布流。<br>WaterfallFlowDemo - 一个简单的UICollectionView瀑布流布局演示demo。<br>XLForm - 很多表格类的table,写法更高冷一点，推荐使用。<br>RETableViewManager - 可以十分方便地生成各种样式、各种功能的TableView。只要开发者能想到的列表效果或者功能，都可以利用这份代码迅速编写出来。比如，之前要实现一个填写各种资料的列表，可能需要很多代码，现在只需要几行代码就可以实现。<br>UIScrollSlidingPages - 允许添加多视图控件，并且可以横向滚动。有点类似于Groupon app。<br>HBHorizontalTableView - swift，TableView 横向滚动小示例（仿照 AppStore 应用展示）。<br>HorizontalScrollCell - HorizontalScrollCell是一款使用方便的水平方向可滚动的单元格，适用于UICollectionView中实现水片方向滚动视图。 。<br>SYJiugonggeTableView - tableView封装的九宫格。<br>UUChatTableView - UUChatTableView 气泡聊天界面，支持文本、图片以及音频的气泡聊天界面。源码推荐说明。<br>Chats - 聊天 UI 示例程序。此项目应该只为演示或学习之用，没有服务器 – swift。<br>Atlas-iOS - 快速在iOS里集成聊天功能，类似开源版本的环信。Layer家开源了一套聊天app界面的解决方案.看起来很赞，很多蛮复杂的东西直接都帮封好了。不得不说现在做app开发真是很简单，大部分时间搭积木就可以了。官方网站。<br>DLSlideView - DLSlideView对常见的顶部Tab页点击、滑动分页做了封装。它使用基于ViewController的container特性（而不是scrollview）来管理各个子页面，以支持无限分页，源码推荐说明。<br>VOVCManager - 页面管理器:1.跳转指定页面,只需要知道viewController的Class名,如果有storyboard,则需要指定storyboard名；2.无需添加基类；3.支持URLScheme跳转指定页面。<br>MBXPageViewController - 简洁快速的页面切换–MBXPageViewController，带有按钮控件的UIPageController，非常整洁、简单以及快速。该项目通过三种形式展示页面之间的切换，比如导航栏上的多个tab切换、页面左右两端箭头指示切换，以及使用分段控件。<br>PagerTab - UIScrollView实现滑动转换页面，类似网易云音乐iOS版的页面滑动切换效果。<br>GUITabPagerViewController - 多个tab滑动切换。<br>VOMetroLayoutDemo - Metro风格的UICollectionView, 目前只支持横向布局,仅在iPad上应用。<br>KYCellAnimation - 给UITableViewCell增加进入的动画。<br>COBezierTableView - swift，通过编辑 Bezier 曲线四点位置设置 TableView 内 Cell 及对应按扭位置。实验效果很赞。<br>RDVTabBarController - 一个TabBar组件，可以方便设置底部菜单的文字图片，点击效果，小红点提示等。<br>LxTabBarController - 改变了原生tabbar切换tab时的生硬效果，并加入滑动切换手势（有和界面上的其它手势发生冲突的风险，可根据具体项目予以关闭），swift版本。<br>横向展示文本内容的自定义cell - 可以横向展示文本内容的自定义cell，根据文本无限滚动。<br>UITableView-FDTemplateLayoutCell - UITableView-FDTemplateLayoutCell 是一个方便缓存 UITableViewCell 的高度的框架。<br>ExpandingStackCells - 采用 UIStackView 实现表格单元格扩展内容显示示例及解决方案。<br>Sapporo - swift 单元格模型驱动的集合视图管理器组件。又一个超实用的“轮子”。<br>MDIHorizontalSectionTableViewController - 根据产品需求开源了一个交互项目，可以理解为横向Section的TableView，section和cell同时支持拖拽，后续安卓版本也会开源出来。<br>JZNavigationExtension - 多功能导航控制器，可以透明返回栏。<br>QuickRearrangeTableView - 基于 UITableView 的快速重排功能扩展子类。通过长按选定单元格然后滚动移动到指定位置。<br>uicollectionview-reordering - UICollectionViews的拖拽(拖动、移动)效果,实例教程.<br>DZNEmptyDataSet - DZNEmptyDataSet算是一个很标准的iOS内建方式，适合用来处理空的table view和collection view。会自动将collection view处理完善，并将用户消息以合适美观的方式显示出来。每个iOS项目都可以自动处理。<br>MGSwipeTableCell - 另一个常见于很多应用中的UI组件，苹果应该考虑在标准的iOS SDK中加入一些类似的内容。Swipeable表格cell是这个pod的最佳描述，也是最好的。<br>　　隐藏与显示</p>\n<p>SlideTapBar - 滚动栏菜单，向上滚动时隐藏tabbar，向下滚动马上显示tabbar。<br>FoldingTabBar.iOS - 可折叠Tab Bar和Tab Bar Controller。<br>LTNavigationBar - LTNavigationBar为app导航栏添加动态着色效果，可自定义其背景色。Demo包含：1.变换背景色；2.滚动视图，导航栏和状态栏重叠。<br>BLKFlexibleHeightBar - 固定Header的效果库。<br>　　HUD与Toast</p>\n<p>MBProgressHUD - 最多人用的loading。<br>SVProgressHUD - SVProgressHUD的loading，如果你需要定制化的等待提示器，这个就是了（也许是最好的）。<br>ProgressHUD - ProgressHUD的loading，使用最简单。<br>MMProgressHUD - 设置HUD出现和消失的方式（包括上下、左右、淡入淡出、放大缩小等等），设置HUD的内容（可以在HUD中加入帧动画、动态图片等等），设置HUD出现时的底部覆盖层颜色，等等。总而言之，这是一份集大成的HUD代码。慢慢看视频吧，囊括了所有效果。<br>WSProgressHUD - 一个小巧精致的HUD,支持添加到自定义View上, 还有更多小细节.。<br>　　对话框</p>\n<p>WCAlertView - 自定义的对话框。<br>IOS7AlertView - IOS7AlertView的对话框。<br>AMSmoothAlert - 动画效果不错，最多star，但不支持arm64。<br>DQAlertView - 扁平化的样式不错。<br>HHAlertView - 一个简易的alertview 有三种样式，有成功，失败，和警告三种样式，支持Delegate和block两种回调。<br>MJPopupViewController - 实现弹出视图的各种弹出和消失效果，包括淡入淡出（fade in，fade out），从屏幕上方飞进，下方飞出，从屏幕左方飞进，右方飞出等等效果，弹窗。<br>Menu - 项目中可能会用到的常用菜单，以后有时间会继续补充，弹窗。<br>EasyTipView - 弹出提示框类及演示示例。同样地，API 简单、易用。好“轮子”，弹窗。<br>kxmenu - kxmenu弹出菜单，点击视图上任意位置的按钮，会弹出一个菜单，并且有个小箭头指向点击的按钮，类似气泡视图。弹出的菜单位置会根据按钮的位置来进行调整。<br>QBPopupMenu - QBPopupMenu弹出菜单，实现类似 UIMenuItem 的弹出菜单按钮。点击按钮，会弹出一个菜单，上面可以排列多个按钮。纯代码实现，不需要任何图片。<br>STModalDemo - 弹出视图（通知，提示，选择，窗口）。<br>TAOverlay - TAOverlay可通过叠加层展示有用的信息，可自定义文本和背景色，添加阴影和模糊效果，以及更改字体大小或者用自定义图片替换页面上的icon。<br>UICustomActionSheet - 通过模糊背景来着重强调与菜单相关的元素–模糊效果 里面已经收藏。<br>ActionSheetPicker-3.0 - 该项目是此前热门项目ActionSheetPicker的新版本，快速复制了iOS 8上的下拉 UIPickerView/ActionSheet功能。<br>MJAlertView - 3D效果转场效果警示图–MJAlertView。<br>SwiftyDrop - 轻量、易用的小清新弹出列表及信息提示组件真心不错。<br>　　其他UI</p>\n<p>AwesomeMenu - 最多人用的Path菜单。<br>DCPathButton - Path，4.0的弹出菜单，呼出或者关闭菜单时，多个小图标会分别按照逆时针和顺时针的方向进行滚动。<br>SphereMenu - 利用UIDynamicAnimator的有趣的菜单，path类似。<br>KYGooeyMenu - KYGooeyMenu 是一个具有 Gooey Effects 带粘性的扇形菜单控件(卫星菜单、path)。<br>TwitterPaggingViewer - 多个Tableview，左右滑动。<br>CircularProgressControl - Circular Progress Control using CAShapeLayer ，环形进度控制条。<br>KDCircularProgress - KDCircularProgress是使用swift制作的色彩炫丽的进度条，可以加入多种颜色来控制进度条的渐变效果。<br>TextProgress - 自定义实现数字进度条：1、可以自定义数字（0-100），填充的比例为当前设置的数字，2、可以实现自定义填充颜色，上下部分都可以，3、可以自定义边界的颜色4、实现了水波动画，可以设置打开或关闭。<br>SDProgressView - 简便美观的进度指示器，此系列共有六种样式的进度指示器。<br>NVActivityIndicatorView - loading 进度条动画，有20-30多种，是在此DGActivityIndicatorView 基础上做得修改。<br>LoopProgressDemo - 环形渐变进度条。<br>环形渐变进度条实现，<br>XLPagerTabStrip - 做的很棒的iOS下的PagerTabStrip。<br>RandomColorSwift - 一个自动生成好看的颜色的 Swift 库，RandomColorSwift。<br>HexColorService - 将16进制颜色字符串转成UIColor。<br>Rainbow - 旨在提高代码可读性及易用性的 UIColor 扩展，它使原先有限的预定义颜色（方法）选择，扩展至超过 1200 种。<br>UIColor-ChineseTraditionalColors - 中国传统颜色引用 UIColor 扩展。“UIColor.桃红()，UIColor.竹青() …”，共158种。<br>类似美团的下拉菜单 - 类似美团的下拉菜单，源码推荐说明。<br>类似美团的下拉选项 - 类似于美团、大众点评的下拉菜单选项，code4app代码，评论代码有瑕疵。<br>CRMediaPickerController - 一个简单易用的图片/视频选择器。1.可同时选择照片和视频。 2.挑选范围有Camera、Camera Roll、Photo Library以及最近拍摄的照片和视频。3.可自定义UIImagePickerController属性（Camera Overlay、Camera Device、Camera View Transform以及allowsEditing）。4.支持横屏和竖屏5.原生的iOS UI。，源码推荐说明。<br>MDCSwipeToChoose - MDCSwipeToChoose可简单地添加滑动手势来调用UIView，并使用该行为提供了一个组件以创建类似Tinder app的like或者dislike界面的轻扫。基于轻扫的方向，你可以决定执行什么样的行为，并且你可以自定义文本颜色和图片。该项目适用于教学用的抽认卡、图片查看器以及其他等。<br>iOS Material Design库 - 该项目借鉴于谷歌的Material Design guideline，用户可自定义背景色。<br>Material-Controls-For-iOS - Material Design风格的各种控件，非常完整全面。<br>ZMaterialDesignUIButton - Swift Material Design UIButton。<br>MediumScrollFullScreen - Medium的可扩展滚动页面，上下滚动时，全屏显示内容，并自然消隐上下菜单。由此项目感知，作者是一位很注重细节的开发者，他的另外几个菜单类项目也都不错，值得参考，比如：PathMenu, MediumMenu 等。</p>\n<p>WZFlashButton - WZFlashButton，点击后button里面出现水波扩散效果。</p>\n<p>Twinkle - 为字体加上钻石版闪耀的效果。使用Swift编写。<br>ios-multi-back-button - 可替换内置的UInavigationController返回按钮，长按左上角的返回按钮，实现多层级的快速返回。<br>ASDayPicker - 适用于iOS (iPhone)的日期选择器，类似于Calendar app的周视图。<br>today extension - 用纯代码构建一个Widget(today extension) 。<br>FSCalendar - 日历视图，带有微妙和平滑的滚动效果，可自定义外观–国人。<br>HSDatePickerViewController - 带有Dropbox Mailbox感觉的时间日期选择器。启动是背景被模糊化。界面也是主流的扁平化风格。<br>CFCityPickerVC - 城市选取控制器。<br>JTCalendar - iOS下优美的 Calendar 组件，做 GTD 类 App 必备。<br>Persei - 动画隐藏或显示顶部菜单支持库及示例项目。–swift<br>PDTSimpleCalendar - 是iOS最棒的日历组件了。你可以在各个方面对它进行定制，无论是运行逻辑还是外观方面。<br>Form - JSON 驱动的 Form表单系统，复杂的表单填写类 App 极其需要（比如淘宝呢！）。<br>SwiftyFORM - swift 表单输入框架（亮点是表单验证规则引擎），是我见过地最易用的 Swift 表单组件。<br>SwiftSpinner - SwiftSpinner是使用swift制作的一款精致带感的指示器，并且连带有字体信息显示，模糊背景，半透明，扁平化等IOS8的效果。<br>AKPickerView-Swift - 一款小而美的 3D 效果选择器。<br>ImagePickerSheet - 图片或视频选择器（可多选）组件及其示例项目。<br>iOS-RatingBar - iOS-RatingBar swift版的评分控件,跟Android的RatingBar一样有两种模式，评分模式和只读模式’支持视图编辑，自定义星星数量，评分等级,另外还能支持非整数星，0.5颗星，0.1颗星,可以开启动画效果。<br>RKNotificationHub - 快速给 UIView 添加上炫酷的通知图标（Badge、红点、提示）。<br>WZLBadge - Badge，支持横竖屏支持iOS5~iOS8允许高度定制化，包括“红点”的背景颜色，文字(字体大小、颜色)，位置等。说明.<br>BubbleTransition - 以气泡膨胀和缩小的动画效果来显示和移除 controller，Uber的就是这种取消操作的方式。<br>KYFloatingBubble - 类似iOS7中Game Center浮动气泡的效果。<br>DKNightVersion - DKNightVersion 是一个支持夜间模式切换的框架。<br>EasyUIControl - 一个可以简化界面ui的控件框架。<br>LxGridView-oc LxGridView-swift - 利用UICollectionView模仿iOS系统桌面图标的交互，作用如动图。<br>QQBtn - 仿QQ未读消息弹性按钮动画，达到和手机QQ未读信息一样的动画效果，效果基本实现。<br>GMStepper - swift 带动画效果、支持手势滑动操作的步进标签。<br>TZStackView - OS 9 UIStackView 功能模拟实现于 iOS 7/ iOS 8 内。<br>LayoutTrait - swift 一个小类库。 做iPad 多任务分屏 适配的同学可以看一下。<br>HACursor - HACursor，是一个对横向ScrollView中的视图进行管理的UI控件。只要几行代码就可以集成类似于网易新闻对主题页面进行排序，删除操作的功能。<br>ZTPageController - 模仿网易新闻和其他新闻样式做的一个菜单栏，栏中有各自的控制器，其中有4中展示样式’网易style’ ’搜狐style’ ’腾讯style1’ ’网易style2’ 。<br>Ruler - 尺子。<br>HUMSlider - HUMSlider是一款能够自动显示刻度记号的滑竿，滑动到某处，该处的刻度会自动上升，两边还能配置图像。支持代码或storyboard中实现。<br>JDSelectedDemo - 仿京东筛选菜单实现。<br>BTNavigationDropdownMenu - 下拉列表暨导航标题组件。简单、直接、易用 -swift。<br>　动画</p>\n<p>Core Animation笔记，基本的使用方法 - Core Animation笔记，基本的使用方法：1.基本动画，2.多步动画，3.沿路径的动画，4.时间函数，5.动画组。<br>awesome-ios-animation - iOS Animation 主流炫酷动画框架(特效)收集整理 收集整理了下iOS平台下比较主流炫酷的几款动画框架。<br>　　侧滑与右滑返回手势</p>\n<p>SloppySwiper - iOS系统自带的UINavigationController要7.0才支持，但不过该手势只能从屏幕左侧边缘识别，如果要扩大到整个屏幕范围怎么办？配合一个SloppySwiper无需代码就可以轻松实现。此库支持iOS5.0以上版本（另外：Nav的title滑动不明显，本人写了2个类似的控件），SloppySwiper-demo ：代码方式与storyboard方式。<br>SCNavigation - UINavigation可以右滑返回，隐藏UINavigationBar。<br>UINavigationController-YRBackGesture - 支持右滑返回手势，标题栏不动。<br>GHSidebarNav - 现在比较流行使用侧开(侧滑)菜单设计。试了不少控件，感觉GHSidebarNav最成熟，尤其对纯代码创建的界面兼容性最好。在Storyboard中使用GHSidebarNav侧开菜单控件。<br>iOS-Slide-Menu - 能够类似Facebook和Path那样弹出左右边栏侧滑菜单,还支持手势。多种可以自定义的属性 (非常不错)。<br>ECSlidingViewController - 侧滑菜单。<br>JASidePanels - 侧滑菜单,有左右菜单，有pop功能，支持手势侧滑,本人使用中：简单。<br>animated-tab-bar - 让 Tabbar items能显示萌萌的动画。<br>tabbar图标动画 - tabbar上图标的动画实现，源码推荐说明。<br>SideMenu - swift实现，一款带动画效果可定制 Slide Menu，可以学习其动画实现思路。P.S. 对于Hamburger式菜单，虽然很常用，不过，苹果并不鼓励使用，甚至有开发小组对其弊病用自家上线应用前后数据对比进行了抨击。<br>RESideMenu - 侧开菜单，qq类似。<br>JHMenuTableViewDemo - 仿网易邮箱列表侧滑菜单。<br>SlideMenuView - 炫酷侧滑菜单布局框架，Android版本的一致实现。<br>QQConfiguration - swift，QQ-iPhone端框架，左侧菜单栏拖动手势。<br>KGFloatingDrawer - 侧滑菜单，qq类似，KyleGoddard/KGFloatingDrawer：一款适合于大屏手机或平板的浮动抽屉式导航界面组件。效果很赞- 侧开菜单，qq类似（与RESideMenu类似）。<br>AIFlatSwitch - 一款带平滑过渡动画的 Switch 组件类，类相同风格的 Menu/BackHamburgerButton,类似相同风格的 Menu/Closehamburger-button.<br>JHChainableAnimations - 在应用中采用链式写出酷炫的动画效果, 使代码更加清晰易读，利用block实现的链式编程。<br>WXGSlideMenuDemo - 个简单实现侧拉（侧滑）菜单的小demo，供初学者共同学习、练习使用。<br>PKRevealController - PKRevealController是一个可以滑动的侧边栏菜单（可向左、向右或者同时向两侧），只需手指轻轻一点（或者按一下按钮，但是这样滑动时不够炫酷），这类控制的其他库，而PKRevealController是最棒的。安装简便，高度定制且对手势识别良好。可以当做一个标准控件用在iOS SDK中。<br>SwiftPages - 高可定制类似 Instagram 视图滑动切换功能类库。API 简单、易用。<br>FlipBoardNavigationController - FlipBoardNavigationController。<br>MMDrawerController - 最多人用的一个有关侧边“抽屉”导航框架，里面还有很多你意想不到的交互效果，侧滑。<br>UIWebView翻页返回效果 - UIWebView翻页返回效果（变通方法）。<br>　　gif动画</p>\n<p>UIImageView-PlayGIF - UIImageView-PlayGIF。<br>YLGIFImage - YLGIFImage。<br>YLGIFImage-Swift - YLGIFImage-Swift。<br>　　其他动画</p>\n<p>popping - popping是一个POP 使用实例工程<br>SinaMenuView - 用POP动画引擎写的Sina微博的Menu菜单。<br>MMTweenAnimation - facebook POP的自定义动画扩展(基于POPCustomAnimation) 提供10种函数式动画。<br>ZQLRotateMenu - 这是一个旋转视图的选择器。<br>CoolLoadAniamtion - 一个简单但是效果不错的loading动画。<br>SequenRotateAnimation - 一个简单的loading次序动画。<br>SYAppStart - App启动插画的自定义过度。<br>VJDeviceSpecificMedia - 如何根据设备选择不同尺寸的图片 可以通过设置不同尺寸设备的LaunchImage，来使得App适配这些设备，要是在不同不同尺寸设备上使用不同大小的图片，则需要在代码中一一判断，然后加载。<br>RMParallax - RMParallax是一个app启动页引导开源项目，除了细微的翻页视差效果，描述文本的过渡也非常美观（版本新特性）。<br>ADo_GuideView - 转动的用户引导页(模仿网易bobo) 因为没有从app包里抓到@3x的图片,建议在iPhone5模拟器运行,保证效果~ （版本新特性）。<br>CoreNewFeatureVC - 版本新特性（引导页），1.封装并简化了版本新特性启动视图！2.添加了版本的本地缓存功能，3.集成简单，使用方便，没有耦合度，4.支持block回调。<br>Spring - Spring是一个Swift编写的开源库，可简化Swift编写的iOS动画。支持shake、pop、morph、squeeze、wobble、swing、flipX、flipY、fall、squeezeLeft、squeezeRight以及squeezeDown等多种动画形式，用 IBDesignable 让使用者可以在 Xcode 中快速设置动画效果。<br>KYBezierBounceView - 手势控制贝塞尔曲线，取消手势贝塞尔曲线会有反弹效果。<br>cadisplaylinkanduibezierpath - CADisplayLink结合UIBezierPath的神奇妙用。<br>KYCuteView - 实现类似QQ消息拖拽消失的交互+GameCenter的浮动小球效果，分析。<br>KYWaterWaveView - 一个内置波浪动画的UIView，里面有鱼跳跃水溅起来的效果。<br>KYPingTransition - 实现圆圈放大放小的转场动画，可以根据自己的需要使用Paper中的弹性效果，有Material风格。<br>KYNewtonCradleAnimiation - 牛顿摆动画。<br>LayerPlayer - 一款全面展示核心动画 API 示例项目（上架应用）。包括 CALayer, CAScrollLayer, CATextLayer, AVPlayerLayer, CAGradientLayer, CAReplicatorLayer, CATiledLayer, CAShapeLayer, CAEAGLLayer, CATransformLayer, CAEmitterLayer 等使用的互动演示。<br>JGTransitionCollectionView - swift，基于集合视图扩展实现完成自动布局及单元项 Flip式动画效果（效果很赞）。组件使用方便、自然（只需设置集合视图数据源的标准方式即可）。<br>KYShareMenu - 带弹性动画的分享菜单。<br>Context-Menu.iOS - 可以为app的菜单添加漂亮的动画内容，可自定义icon，并可根据自己的喜好设计单元格和布局。<br>DeformationButton - 一个简单的变换形状动画按钮。<br>UnReadBubbleView - UnReadBubbleView是一个能够拖拽并拉长的气泡视图。拖拽到一定的长度会消失，可以通过系数设置来控制拖拽的长度。气泡也支持多种属性设置。<br>PPDragDropBadgeView - 实现了类似于QQ 5.0 水滴拖拽效果. 支持iOS 5.0+ ARC，气泡能够带有数字标识，同时支持消失block方法。消失时还带有消失效果动画。<br>GiftCard-Implementation - 购买的炫酷动画。<br>iCarousel - iCarousel是一个类，它继承于UIView。用于简化实现各种类型的旋转木马(分页滚动视图），无限轮播 ，iOS开发之多图片无缝滚动组件封装与使用。<br>KIPageView - 无限循环PageView，横向TableView，无限轮播。<br>HotGirls - 卡片动画。<br>tispr-card-stack - swift 卡片风格动画切换组件及完整交互示例。<br>ZLSwipeableViewSwift - swift 卡片堆叠效果的实现（ZLSwipeableView)】可实现类似Tinder和Potluck应用程序的卡片堆叠效果，该项目基于ZLSwipeableView objective-c实现。1.自定义动画。2.自定义滑动切换。3.自定义方向。4.撤销。<br>Koloda - 基于卡片的 Tinder-style 动画效果示例。精细绝人。更赞的是额外附了详细开发教程 How We Built Tinder-Like Koloda Animation in Swift 网页链接 。Yalantis 出品动画程序款款精品。<br>QQPersonalInfoTransition - 仿照QQ的转场。<br>KYAnimatedPageControl - 除了滚动视图时PageControl会以动画的形式一起移动，点击目标页还可快速定位。支持两种样式：粘性小球和旋转方块。<br>KDIntroView - swift 动态介绍视图框架及演示。另外两个相似的类库是 RazzleDazzle和 Presentation，择需使用。<br>RazzleDazzle - 【IFTTT开源Swift编写的帧动画框架–RazzleDazzle】RazzleDazzle 是IFTTT开源的一个iOS帧动画框架，非常适用于APP初次使用时的介绍和引导信息。JazzHands是UIKit一个简单的关键帧基础动画框架，可通过手势、scrollview、KVO等控制动画，被IFTTT应用在IFTTT for iPhone上。<br>Presentation - 一个类似RazzleDazzle的框架。<br>FillableLoaders - 基于 CGPaths 可定制个性化填空式装载类库。附水波上涨式示例。<br>SXWaveAnimate - 实现非常美观的灌水动画。<br>LSPaomaView - 可循环滚动的较长文字，跑马灯，效果很好，一句话集成。<br>SIFloatingCollection_Swift - 可定制的 Apple Music 风格浮动形状动画组件及演示。<br>Cheetah - 易用、高可读链式动画类库。另一个类似类库是 DKChainableAnimationKit。<br>CKWaveCollectionViewTransition - swift， UICollectionViewController之间切换的动画。<br>TKSubmitTransition - 基于 UIButton 的登录加载、返回按钮转场动画组件及示例。<br>　网络相关</p>\n<p>　　网络连接</p>\n<p>AFNetworking - ASI不升级以后，最多人用的网络连接开源库，iOS网络编程之AFNetworking使用,iOS开发下载文件速度计算。<br>Alamofire - Alamofire是AFNetworking的作者mattt新写的网络请求的swift库。<br>YTKNetwork - 是基于 AFNetworking 封装的 iOS网络库，提供了更高层次的网络访问抽象。相比AFNetworking，YTKNetwork提供了以下更高级的功能：按时间或版本号缓存网络请求内容、检查返回 JSON 内容的合法性、文件的断点续传、批量的网络请求发送、filter和插件机制等。<br>LxFTPRequest - 支持获取FTP服务器资源列表，下载/上传文件，创建/销毁ftp服务器文件/目录，以及下载断点续传，下载/上传进度，自动判断地址格式合法性跟踪等功能！国人开发，QQ：349124555。<br>HSDownloadManager - HSDownloadManager，下载音乐、视频、图片各种资源，支持多任务、断点下载。<br>MutableUploadDemo - 模拟需求：图文混编，要求用户选择图片后就上传，可选择多图，并行上传，用户确定提交后后台执行，必须全部图片上传完才能提交文字。<br>WTRequestCenter - 方便缓存的请求库，提供了方便的HTTP请求方法，传入请求url和参数，返回成功和失败的回调。 UIKit扩展提供了许多不错的方法，快速缓存图片，图片查看，缩放功能， 颜色创建，设备UUID，网页缓存，数据缓存等功能。 无需任何import和配置，目前实现了基础需求。<br>MMWormhole - Message passing between iOS apps and extensions 2个iOS设备之间通信。<br>socket.io-client-swift - WebSockect 客户端类库。开放的通讯协议，有利于构建强大地跨平台应用。<br>Transporter - swift， 短小、精悍、易用的多文件（并发或顺序）上传和下载传输库。还支持后台运行、传输进程跟踪、暂停/续传/取消/重试控制等功能。<br>STNetTaskQueue - STNetTaskQueue Objective-C 可扩展网络请求管理库。<br>CocoaAsyncSocket - 在iOS开发中使用socket，一般都是用第三方库AsyncSocket，不得不承认这个库确实很强大，使用教程。<br>GCDAsyncSocket - GCDAsyncSocket ， 不错的Demo。<br>Just - 小而美的 HTTP 类。功能简单、直接、完整且健壮性高– swift。<br>Future - 基于微框架设计思想的异步执行及结果响应类，代码即简单又干净– swift。<br>MZDownloadManager - 下载管理。<br>DVR - 针对网络请求的测试框架，超实用的工具。且支持 iOS, OSX, watchOS 全平台。<br>HFDownLoad - iOS开发网络篇之文件下载、大文件下载、断点下载:NSData方式、NSURLConnection方式、NSURLSession下载方式 下载方式具体的思路、区别见Blog 。<br>　　图像获取</p>\n<p>SDWebImage - SDWebImage 网络图片获取及缓存处理。<br>Kingfisher - 纯 Swift 实现的类 SDWebImage 库，实现了异步下载和缓存图片。<br>KFSwiftImageLoader - Swift，一个图像缓存加载库。<br>FastImageCache - FastImageCache 网络图片获取及缓存处理，iOS图片加载速度极限优化—FastImageCache解析。<br>EGOCache - 十分知名的第三方缓存类库，可以缓存NSString、UIImage、NSImage以及NSData。除此，如果还可以缓存任何一个实现了接口的对象。所有缓存的数据都可以自定义过期的时间，默认是1天。EGOCache 支持多线程（thread-safe），UITableView加载多张照片导致内存上涨的问题。<br>　　网络聊天</p>\n<p>XMPPFramework - XMPPFramework openfire聊天。<br>SXTheQQ - 用xmppFramework框架编写QQ程序，主要为了练习通讯的一些原理，界面比较渣 必须要先在本地配置好环境才可以运行。<br>环信 - 给开发者更稳定IM云功能。8200万用户考验，好用！（暂无及时语音、视频通话）<br>融云 - 即时通讯云服务提供商。（暂无及时语音、视频通话）<br>容联云通讯 - 提供基于互联网通话,视频会议,呼叫中心/IVR,IM等通讯服务。<br>chatsecure - 基于XMPP的iphone、android加密式聊天软件， chatsecure官网 。 iOS代码1，iOS代码2， iOS中文版。<br>MessageDisplayKit - 仿微信聊天，参考JSQMessagesViewController。（国人写）<br>JSQMessagesViewController - 聊天 。<br>SunFlower - 环信聊天demo，比较多功能 。<br>BlueTalk蓝牙聊天 - 以MultipeerConnectivity为基础， 实现了简单的蓝牙聊天。<br>　　网络测试</p>\n<p>Reachability - 苹果提供过一个Reachability类，用于检测网络状态。但是该类由于年代久远，并不支持ARC。该项目旨在提供一个苹果的Reachability类的替代品，支持ARC和block的使用方式。iOS网络监测如何区分2、3、4G<br>SimpleCarrie - 简单的运营商信息获取!。<br>NetReachability - swift2.0 简单的方法检查网络连接的连通性，提供通知中心集成接口。<br>　　WebView</p>\n<p>MGTemplateEngine - MGTemplateEngine比较象 PHP 中的 Smarty、FreeMarker 和 Django的模版引擎，是一个轻量级的引擎，简单好用。只要设置很多不同的HMTL模版，就能轻松的实现一个View多种内容格式的显示，对于不熟悉HTML或者减轻 工作量而言，把这些工作让设计分担一下还是很好的，也比较容易实现设计想要的效果。<br>NJKWebViewProgress - 一个 UIWebView 的进度条接口库,UIWebView 本身是不提供进度条的。<br>GTMNSString-HTML - 谷歌开源的用于过滤HTML标签。<br>　　Model</p>\n<p>JSONKit - JSONKit库是非常简单易用而且效率又比较高的，重要的JSONKit适用于ios 5.0以下的版本,使用JSONKit库来解析json文件，只需要下载JSONKit.h 和JSONKit.m添加到工程中；然后加入libz.dylib即可。<br>JSONModel - 解析服务器返回的Json数据的库,JSONModel源码解析一。<br>Mantle - Mantle主要用来将JSON数据模型化为OC对象, 大系统中使用。为什么选择Mantle。<br>RFJModel - RFJModel是一个IOS类库，可以将JSON字典自动装填到OBJC对象。相比JSONModel有一些非常好的特性，使用上也比较简单。<br>XMLDictionary - ios与mac os平台下xml与NSDictionary相互转化开源类库。<br>MJExtension - 用于json转model进行使用，转换效率很高，使用也比较简单，只要前后台约定好，json直接就转成了model。<br>CFRuntime - “Swift 版的 MJExtension，运行时、反射与一键字典模型互转”。<br>DDModel - 快速搭建项目Model层，支持ORM映射关系，能从JSON/XML直接实例一个Model对象。支持SQLite本地数据持久化，封装了HTTP， 减少HTTP代码与UIViewController的代码耦合，支持Cache；类似RESTKit、Mantle的功能；使用该类库以后简化了网络层的开发工作，把更多的精力放在UI上面；目前只支持GET/POST方法的请求。使用到的第三方库有：1.SQLitePersistentObject; 2.JTObjectMapping; 3.AFNetworking; 4.XMLDictionary;<br>protobuf-swift - Protocol Buffers 的 Swift 语言实现库。P.S. Protocol Buffers 是 Google 开源项目，主要功能是实现直接序列化结构化的对象数据，方便跨平台快速传递，开发者也可以直接修改 protobuf 中的数据。相比 XML 和 JSON，protobuf 解析更快，存储更小。<br>JSONCodable - 基于 Swift 2.0 新特性（Protocol Extensions and Error Handling）的JSON 解析类。<br>SwiftyJSON - 使Swift的JSON解析变得简单。<br>　　其他</p>\n<p>DateTimeKit - 一个超赞的时间处理的库，Joda-Time ！ 他能帮你轻松处理时区，处理时间加减，计算到期时间等等场景下的问题。<br>SwiftDate - 特别完整、强大的日期时间操作管理类库。它几乎涵盖了已知开源日期类库所有优秀特性。 他能帮你轻松处理时区，处理时间加减，计算到期时间等等场景下的问题。<br>iOS私有API - 私有API，绿色 == public，红色 == private，蓝色 == dylib。<br>iOS源代码 - iOS源代码。<br>libfacedetection - C++ 人脸识别 包含正面和多视角人脸检测两个算法.优点:速度快(OpenCV haar+adaboost的2-3倍), 准确度高 (FDDB非公开类评测排名第二），能估计人脸角度。<br>Slidden - 一个老外开源的开发自定义键盘的库，利用这个开源库，可以方便的配置键位、颜色以及键位对应的图片。<br>TPKeyboardAvoiding - 用户键盘弹出自动计算高度，进行屏幕滚动操作。<br>CDPMonitorKeyboard - CDPMonitorKeyboard封装,可以解决输入视图(例如textField,textView等)被键盘覆盖问题，并可设置高于键盘多少。<br>自动监听键盘高度 - 自动监听键盘高度，初始界面，输入框在屏幕最下方，当键盘出现时，输入框随即移动到键盘上方。<br>SYKeyboardTextField - SYKeyboardTextField 是一个轻巧,简单,非侵入式的键盘附随输入框! 采用Swift编写。<br>BlocksKit - block框架，为 OC 常用类提供了强大的 Block 语法支持，使得编写 OC 代码变得舒适、快速、优雅。<br>KVOController - 在项目中有使用 KVO ，那么 KVOController 绝对是个好选择。它是 facebook 开源的一个 KVO 增强框架。<br>appirater - 用于提醒用户给你的 APP 打分的工具。<br>MotionKitr - 为核心运动框架（The Core Motion framework）提供友好的类库封装，以更方便使用三轴陀螺仪和加速感应器特性。<br>Review Monitor - 第一时间自动推送 Apple Store 的用户评论到你的邮件箱或者 Slack，第一时间跟进用户反馈，打造优秀 App 必备工具！类似的有：App annie 的类似功能。<br>WBWebViewConsole - 类似微博iPhone客户端的 “调试选项” 吗？把其中的 “内置浏览器网页调试” 开源在 Github 上了。<br>ios-good-practices - ios-good-practices iOS 开发最佳实践。<br>iOS开发最佳实践 - iOS 开发最佳实践 – 中文。<br>TodayExtensionSharingDefaults - TodayExtensionSharingDefaults是一个iOS 8 Today扩展示例，可以使用NSUserDefaults与其containing app分享数据。<br>QRCodeReader.swift - QRCodeReader.swift一款简单的 QR 二维码阅读组件及示例，提供前后相机切换功能。<br>QRCatcher - 一个简洁美观的二维码扫描应用， iOS学习：AVFoundation 视频流处理–二维码扫描。<br>Parsimmon - swift，小而美的语言学类库封装工具包。提供分词、标记词性、词形归并、朴素贝页斯分类、决策树等自然语言分析小工具。P.S. 英语分词效果好于中文，感兴趣的同学可以针对中文做一些优化开发。参考译文 NSHipster - NSLinguistic​Tagger。<br>Password-keyboard - 随机变换数字位置的密码键盘。 模仿银行类应用在付款时输入的随机密码键盘。<br>MKMapView-Extension - 这是关于 MKMapView 写的一个基于swift的扩展，可以扩展 MKMapView 的相关功能，减少复用代码量。<br>SemverKit - 针对符合『语义化版本规范 2.0.0』版本号的解析、比较运算类库。不仅支持 Major, Minor, Patch，还支持 Alpha 和 Beta 预发布版本，以及相应地递增运算扩展。<br>SwiftValidator - 基于规则的输入验证类库。项目良好的面向对象设计思想，使规则的扩展及自定义非常方便。更专业的规则引擎（甚至是基于自然语言的规则配置）解决方案，比如：开源的 Drools，商用的 ILOG 等。<br>Tesseract-OCR-iOS - 有关OCR文字识别项目。<br>Screenotate - 支持 OCR 文字识别的载屏笔记 Mac 完整应用。<br>iOS-Categories - 收集了许多有助于开发的iOS扩展,各种category。<br>Olla4iOS - 过去积累的一些方便复用的类和方法，还在整理中。<br>DKNightVersion - 用最快的方式给你的应用加上夜间和白天的切换效果。<br>TouchVisualizer - 实用的多点触摸可视化组件。扩展并作用于 UIWindows，结构上提供了简单地针对触摸显示定制，比如触摸点的颜色。<br>RegexKitLite - 用来处理正则表达式。<br>XcodeServerSDK - 非官方 Xcode Server SDK 封装库。 P.S. 该 SDK 分离自之前推荐的由该作者开发的自动测试框架 Buildasaur。<br>BFKit-Swift - BFKit-Swift 这套工具库可以提高应用开发效率。<br>CKSIncrementalStore - 基于 CloudKit 服务器实现多终端数据同步。<br>SwiftSequence - 简洁、灵活、多变的操作 SequenceType 的类库（基于微框架（μframework）设计思想）。<br>IDNFeedParser - 一个简单易用的Rss解析库。<br>CoreUmeng - 简单：友盟分享封装。<br>openshare - 不用官方SDK，利用社交软件移动客户端(微信/QQ/微博/人人/支付宝)分享/登录/支付。<br>Swifternalization - 一套实用的本地化工具库。使用教程及 API 文档完整。值得收入项目的“轮子”。<br>apous - 一款有趣的 Swift 应用 － 让 Swift 成为脚本语言。<br>Mirror - 通过反射（Refection）实现镜像对象封装库。从而可以更轻松获取（或输出）对象属性名、类型及值变量。<br>Proposer - Proposer 用单个 API 处理 iOS 上的权限请求，以便使用前确认可访问“相册”、“相机”、“麦克风”、“通讯录”或“用户位置”。<br>PermissionScope - 用这个库可以在询问用户前，就告知用户所需的系统权限，为用户带来更好的体验。接受度更高—&gt;更多活跃用户-&gt;更高的留存率-&gt;数据更好-&gt;下载率更高。<br>LocationManager - CoreLocation使用起来还是比较麻烦的，需要授权，判断系统版本等等，所以推荐使用第三方框架LocationManager，使用Block，十分简单！iOS-CoreLocation：无论你在哪里，我都要找到你！ 。<br>pangu.objective-c - 有多种语言实现版本～ Pangu.Objective-C：格式化中英文之间的空格（OC）。<br>objection - 一个轻量级的依赖注入框架Objection。<br>ControlOrientation - 如何用代码控制以不同屏幕方向打开新页面【iOS】， 使用说明。<br>iRate - 问卷调查。<br>GameCenterManager - 在iOS上管理GameCenter vanilla并不算难，但是有了这个库会更简单也更快。好上加好不是更好么。<br>SlackTextViewController - 用作极佳、定制的文本输入控制时，自适应文本区域，手势识别、自动填充、多媒体合并，快速drop-in解决方案。<br>IAPHelper - 应用内付费给我们提供了很多样本代码，而这个库丢掉了那些代码，将金钱交易相关的大多通用任务做了简单的封装。<br>TAPromotee - 交叉推广应用是你可以免费实现的最佳市场推广策略之一。使用这个库做起来非常简单，不用都不可能——将TAPromotee加入你的podfile中，免费配置与享受更多下载吧。<br>DownloadFontOnline - 实现了在线下载一些字体的功能，不用在工程中导入字体库，下载的字体也不会保存在你的应用中，所以可以放心使用。修复了一下崩溃的bug。<br>STClock - 仿锤子时钟。<br>GitUp - GitUp是一个可视化的Git客户端，能够实时的进行编辑、合并、回滚等多种操作，更多功能，请下载体验。<br>获取联系人信息，通讯录 - 获取联系人信息，通讯录。<br>Universal-Jump-ViewController - 根据规则跳转到指定的界面(runtime实用篇一)。<br>　　数据库</p>\n<p>FMDB - sqlite的工具， 多线程FMDatabaseQueue实例，FMDB数据库的使用演示和封装工具类。<br>GXDatabaseUtils - 在FMDB基础上的工具。<br>realm-cocoa - Realm是一个真正为移动设备打造的数据库，同时支持Objective-C和Swfit。Realm宣称其相比Sqlite，在移动设备上有着更好的性能表现,官方中文。<br>Breeze - 用Swift写的一个轻量级的CoreData管理工具，并且还支持iCloud 。<br>AlecrimCoreData - Swift，更容易地访问 CoreData 对象封装类库。除了 CRUD，还提供指针定位，强大的排序、筛选，异步数据获取，以及独立线程后台存取数据。<br>CoreStore - Core Data 管理类库。 其中事务管理及查询是其比较大的亮点，整套 API 功能完整。<br>MagicRecord<br>MagicalRecord - MagicalRecord就像是给Core Data提供了一层外包装，隐藏掉所有不相关的东西。 其中事务管理及查询是其比较大的亮点，整套 API 功能完整。<br>Presentation - 重量级好项目 Presentation，它可以方便你制作定制的动画式教程、Release Notes、个性化演讲稿等。<br>CoreValue - Swift 2 版 Core Data 封装库。相比另外两个 SwiftRecord和 CoreStore更轻量。<br>SQLCipher - SQLCipher使用256-bit AES加密，SQLCipher分为收费版本和免费版本。官方教程， 加密你的SQLite - 各种sqlite数据库加密介绍。 SQLCipherDemo下载 。<br>　　缓存处理</p>\n<p>YTKKeyValueStore - Key-Value存储工具类，说明。<br>TMCache - TMCache 是 Tumblr 开源的一个基于 key/value 的数据缓存类库,可以用于缓存一些临时数据或者需要频繁加载的数据,比如某些下载的数据或者一些临时处理结果。<br>JLKeychain - 快捷使用keychain存储数据的类，使keychain像NSUserDefaults一样工作。<br>sskeychain - SSKeyChains对苹果安全框架API进行了简单封装,支持对存储在钥匙串中密码、账户进行访问,包括读取、删除和设置。<br>KeychainAccess - 管理Keychain接入的小助手。<br>　　PDF</p>\n<p>Reader - Reader可提供类似iBooks的文档导航，支持屏幕旋转和所有方向，并通过密码保护加密PDF文件，支持PDF链接和旋转页面。<br>　　图像浏览及处理</p>\n<p>FLAnimatedImage - gif播放处理的工具。<br>CLImageEditor - 超强的图片编辑库，快速帮你实现旋转，防缩，滤镜等等一系列麻烦的事情。<br>ios-image-filters - 图像滤镜，库比较旧了，很容易崩溃。<br>XBImageFilters - 图像滤镜，。<br>VIPhotoView - 用于展示图片的工具类，因为是个 View，所以你可以放在任何地方显示。支持旋转，双击指定位置放大等。<br>MWPhotoBrowser - 一个非常不错的照片浏览器，在github的star接近3000个，解决MWPhotoBrowser中的SDWebImage加载大图导致的内存警告问题。<br>core-image-explorer - Core Image 滤镜处理图片– swift ，Core Image 介绍。<br>CoreImageShop - CoreImageShop图片滤镜处理– Mac app that let you create a complete Core Image Filter usable on iOS using SCRecorder。<br>GPUImage - 处理图片效果。<br>RSKImageCropper - 适用于iOS的图片裁剪器，类似Contacts app，可上下左右移动图片选取最合适的区域。<br>WZRecyclePhotoStackView - 删除照片交互–WZRecyclePhotoStackView，就是模拟生活中是删除或保留犹豫不决的情形而产生的。 在上滑，下滑的部分，借鉴了TinderSimpleSwipeCards。<br>TimingFunctionEditor - TimingFunctionEditor用swift编写， 贝塞尔曲线编辑器，编辑后可以预览或拷贝代码片段直接使用。P.S. 该项目采用更简单的依赖管理器 Carthage ，而非常用的 CocoaPods。Carthage介绍中文。<br>AAFaceDetection - AAFaceDetection–swift，简单、实用的面部识别封装库。虽然该技术从 iOS 5 发展，不过真正有趣的应用还不多。。<br>PhotoTweaks - 这个库挺赞的，正好是对图像操作的。<br>Concorde - swift, Concorde, 一个可用于下载和解码渐进式 JPEG 的库, 可用来改善应用的用户体验。<br>ZoomTransition - swift, 通过手势操控图片的放大、缩小、旋转等自由变化效果的组件及示例。<br>AFImageHelper - swift,一套针对 UIImage 和 UIImageView 的实用扩展库，功能包含填色和渐变、裁剪、缩放以及具有缓存机制的在线图片获取。<br>PinterestSwift - swift,Pinterest 风格图片缩放、切换示例。<br>KYElegantPhotoGallery - 一个优雅的图片浏览库。<br>SDCycleScrollView - 无限循环自动图片轮播器(一步设置即可使用)。<br>SDPhotoBrowser - 仿新浪动感图片浏览器,非常简单易用的图片浏览器，模仿微博图片浏览器动感效果，综合了图片展示和存储等多项功能。<br>HZPhotoBrowser - 一个类似于新浪微博图片浏览器的框架（支持显示和隐藏动画；支持双击缩放，手势放大缩小；支持图片存储；支持网络加载gif图片，长图滚动浏览；支持横竖屏显示）。<br>PhotoStackView-Swift - PhotoStackView——照片叠放视图，使用说明。<br>MarkingMenu - 基于手势、类似 Autodesk Maya 风格标记菜单及图片渲染。<br>SXPhotoShow - UICollectionViewFlowLayout流水布局 是当下collectionView中常用且普通的布局方式。本代码也写了三种好看的布局，其中LineLayout和流水布局有很大的相同点就直接继承UICollectionViewFlowLayout，然后StackLayout，CircleLayout这两种都是直接继承自最原始的UICollectionViewLayout 布局方案。<br>PictureWatermark - 主要实现了给图片加文字以及图片水印的功能，已封装成了UIImage的类别，方便使用。<br>CocoaPicker - 仿 QQ 图片选择器（OC）。<br>自定义宽高比的相册框 拍照 - 取出照片时 弹出自定义view。在这个自定义view上创建一个需要的相框大小的view层 把取出的图片赋值给UIImageView按缩放添加到这个层上。对uiimageView添加捏合、移动 手势。添加按钮 选取，最后根据位移和缩放比例 裁剪image。<br>　摄像照相视频音频处理</p>\n<p>SCRecorder - SCRecorder 短视频录制。<br>VideoPushDemo - 视频剪辑 视频特效制作1 视频特效制作2。<br>LLSimpleCamera - A simple, customizable camera control for iOS， 摄像头。<br>EZAudio - EZAudio 是一个 iOS 和 OSX 上简单易用的音频框架，根据音量实时显示波形图，基于Core Audio，适合实时低延迟音频处理，非常直观。中文介绍,官网。<br>ffmpeg - ffmpeg官网，FFmpeg在iOS上完美编译。<br>VCL - VCL官网。<br>kxmovie - 使用ffmpeg的影片播放器，修改说明， 修改代码。<br>ijkplayer - B站开源的视频播放器，支持Android和iOS。<br>StreamingKit - StreamingKit流媒体音乐播放器。<br>FreeStreamer - FreeStreamer流媒体音乐播放器，cpu占用非常小。<br>DOUAudioStreamer - DOUAudioStreamer豆瓣的音乐流媒体播放器。<br>fmpro - 电台播放器，支持锁屏歌词，支持基本播放流程，歌词展示，后台锁屏播放和控制以及锁屏后封面+歌词，fmpro_R 。<br>IPDFCameraViewController - 支持相机定焦拍摄、滤镜、闪光、实时边框检测以及透视矫正功能，并有简单易用的API。<br>SCRecorder - 酷似 Instagram/Vine 的音频/视频摄像记录器，以 Objective-C 为基础的过滤器框架。 你可以做很多如下的操作：记录多个视频录像片段。删除任何你不想要的记录段。可以使用任何视频播放器播放片段。保存的记录可以在序列化的 NSDictionary 中使用。（在 NSUserDefaults 的中操作）添加使用 Core Image 的视频滤波器。可自由选择你需要的 parameters 合并和导出视频。<br>Cool-iOS-Camera - Cool-iOS-Camera。<br>FastttCamera - FastttCamera 快速照相。<br>ICGVideoTrimmer - ICGVideoTrimmer提供提供视频剪切的视图（类似系统相册中浏览视频时顶部那个条状视图）。左右两个边界选择器还能够自定义。<br>IOS录音和播放功能demo - 比较完整的ios录音和播放功能的实现。<br>CameraManager - 相机管理封装类库。看着极好用的样子—-swift。<br>MCAudioInputQueue - 简易录音类，基于AudioQueue的。<br>DraggableYoutubeFloatingVideo - 展示像类似Youtube移动应用的那种浏览视频的效果，当点击某视频时能够从右下方弹出一个界面，并且该界面能够通过手势，再次收缩在右下方并继续播放。这是通过AutoLayout设计实现。<br>amr - 做即时通讯的音频处理，录音文件是m4a，便于web端的音频播放。<br>FSVoiceBubble - 一个轻量级播放录音音频的气泡：1.支持短时间的音频播放（支持网络音频）；2.播放时的声波动画；3.自定义包括声波的颜色，气泡的背景等。<br>KRVideoPlayer - 类似Weico的播放器，支持竖屏模式下全屏播放。<br>VideoBeautify - 功能酷似美拍,秒拍等应用的源码：对视频进行各种美化处理，采用主题形式进行分类，内含各种滤镜，动画特效和音效等。<br>　响应式框架</p>\n<p>ReactiveCocoa - ReactiveCocoa 受函数响应式编程激发。不同于使用可变的变量替换和就地修改，RAC提供Signals来捕获当前值和将来值（ 使用介绍 ），不错的例子,入门好教程：ReactiveCocoa入门教程：第一部分 。Reactive Cocoa 3.0 在 MVVM 中的应用 。<br>ReactiveAnimation - ReactiveCocoa 推出了一个叫 ReactiveAnimation 的子项目，直接用完全用 Swift 来实现了。<br>BeeFramework - 与ReactiveCocoa类似，BeeFramework用户指南 v1.0。<br>Objective-Chain - Objective-Chain是一个面向对象的响应式框架，作者表示该框架吸收了 ReactiveCocoa 的思想，并且想做得更面向对象一些。<br>　消息相关</p>\n<p>　　消息推送客户端</p>\n<p>SGPushDemo - 消息推送客户端<br>Orbiter - 消息推送客户端:Push Notification Registration for iOS.<br>PushDemo - 客户端消息接收消息代码，IOS开发之 —- IOS8推送消息注册 ， 分分钟搞定IOS远程消息推送。<br>　　消息推送服务端</p>\n<p>javapns源代码 - 消息推送的java服务端代码，注意：DeviceToken中间不能有空格。<br>pushMeBaby - Mac端消息推送端代码，注意：DeviceToken中间要有空格。<br>　　通知相关</p>\n<p>JSQNotificationObserverKit - 一款轻量、易用的通知发送及响应框架类库。作者是知名开源项目 JSQMessagesViewController（Objective-C 版即时聊天）的作者 Jesse Squires.<br>GLPubSub - 一个简短实用的 NSNotificationCenter 的封装。<br>Homeoff - 用swift写了一个模仿Launcher通知中心快捷方式的应用。支持20个应用，并增加了一个返回到桌面来解放Home键的功能。<br>JDStatusBarNotification - 在状态栏顶部显示通知。可以自定义颜色字体以及动画。支持进度显示以及显示状态指示器。<br>　版本新API的Demo</p>\n<p>appleSample - iOS 苹果官方Demo合集， 官方demo.<br>iOS7-Sampler - 整合了iOS7.0的一些十分有用的特性，比如：Dynamic Behaviors、碰撞检测、语音合成、视图切换、图像滤镜、三维地图、Sprite Kit（动画精灵）、Motion Effect（Parallax）、附近蓝牙或者wifi搜索连接、AirDrop、运动物体追踪（iPhone 5S以上，需要M7处理器）等等。对于日常的应用开发十分实用。<br>iOS8-Sampler - 日本的shuさん制作的 iOS8 参考代码集。01.Audio Effects ；02.New Image Filters；03.Custom Filters；04.Metal Basic；05.Metal Uniform Streaming；06.SceneKit；07.HealthKit；08.TouchID；09.Visual Effects；10.WebKit；11.UIAlertController；12.User Notification；13.Pedometer；14.AVKit；15.Histogram；16.Code Generator；17.New Fonts；18.Popover；19.Accordion Fold Transition<br>iOS-9-Sampler - 通过实例介绍了iOS 9 SDK中重要新特性的使用。<br>MTSwift-Learning - 通过一些简单项目实战演练开始学习 Swift 。<br>iOS8-day-by-day - swift。<br>iOS9-day-by-day - swfit iOS9 Day-by-Day :: Day 2 :: UI Testing。<br>iOS 9 分屏多任务 - iOS 9 分屏多任务：Slide Over &amp; Split View快速入门（中文版）。<br>　代码安全与密码</p>\n<p>ios-class-guard - 一个用于混淆iOS的类名、方法名以及变量名的开源库–有人反映编译出来的app运行不了。<br>《Protecting iOS Applications》：文章系统地介绍了如何保护iOS程序的代码安全，防止反汇编分析。<br>fishhook - fishhook是Facebook开源的一个可以hook系统方法的工具。<br>GesturePassword - 一个iOS手势密码功能实现，iPad/iPhone 都可以用，没有使用图片，里面可以通过view自己添加。keychain做的数据持久化，利用苹果官方KeychainItemWrapper类。操作部分都在controller了。删除直接用一下clear。<br>JMPasswordView - 简单实用的手势密码，效果可自行调控。<br>仿密码锁-九宫格 - 仿密码锁-九宫格，主要是使用UIButton 手势事件 UIBezierPath画图，解锁失败弹出“密码错误”。<br>CoreLock - 本框架是高仿支付宝，并集成了所有功能，并非一个简单的解锁界面展示。个人制作用时1周多，打造解锁终结者框架。<br>LikeAlipayLockCodeView - 高仿支付宝手势解锁（超级版）。<br>PCGestureUnlock - 目前最全面最高仿支付宝的手势解锁，而且提供方法进行参数修改，能解决项目开发中所有手势解锁的开发。<br>ICPayPassWordDemo - CPayPassWordDemo，一个模仿支付宝支付密码输入对话框小demo。<br>RSAESCryptor - 加密 RSA+AES Encryption/Decryption library for iOS. This library uses 2048-bit RSA and 256-bit key with 128-bit block size AES for encryption/decryption。<br>　测试及调试</p>\n<p>HeapInspector - HeapInspector是一个用于检测应用中的内存泄漏的开源调试工具。<br>Crashlytics - Crashlytics 崩溃报告 崩溃日志 使用说明 。<br>UIViewController-Swizzled - 把你进入的每一个controller的类名打出来,如果看一些特别复杂的项目的时候直接运行demo就可以知道执行次序了。<br>snoop-it - snoop-it比UIViewController-Swizzled好用，代码托管在google上。<br>Versions - 版本比较小工具。<br>MobileWebPageTest - MobileWebPageTest是用来测试移动网页性能的软件，它可以对页面的加载和渲染过程进行截屏，协助开发者分析出页面性能瓶颈。<br>KKLog - 一个日志管理系统。<br>CleanroomLogger - 相当于 CocoaLumberjack 或 Log4j 的 Swift 版本，功能上甚至更强大。另外，源代码中已经内含了完整的 API 文档，使用非常方便。 Buildasaur - 自动测试框架 Buildasaur。 MMPlaceHolder - 一行代码显示UIView的位置及相关参数。 使用Quick框架和Nimble来测试ViewControler - Quick是一个用于创建BDD测试的框架。配合Nimbl，可以为你创建更符合预期目标的测试。<br>fastlane - 一套iOS开发和持续集成的命令行工具fastlane，可以用来快速搭建CI甚至自动提交的开发环境。这套工具中包括了上传ipa文件，自动截取多语言截屏，生成推送证书，管理产品证书等一系列实用工具。<br>KIF - 是一个开源的用户界面UI测试框架. 使用 KIF, 并利用 iOS中的辅助功能 API, 你将能够编写模拟用户输入，诸如点击，触摸和文本输入，自动化的UI测试.<br>Quick - 用于Swift中的单元测试（也可用于Objective-C），与Xcode整合在一起。如果你是Objective-C的粉丝，我建议用Specta代替这个，但是对Swift使用者来说，Quick是最佳选择。<br>Sleipnir - Swift的测试框架。<br>kiwi-bdd - TDD或BDD，objective-c语言的测试框架，最流行的BDD测试框架了，Kiwi最受欢迎（根据github上的star数来推断，行为描述和期望写起来也比较易懂，至少我是这么认为的） iOS开发中的测试框架。<br>specta - TDD或BDD，objective-c语言的测试框架，用的人多。<br>cedar - TDD或BDD，objective-c语言的测试框架，用的人少。<br>　AppleWatch</p>\n<p>Tesla汽车AppleWatch app demo演示 - 通过AppleWatch控制特斯拉汽车，同时可以看到汽车的相关信息，比如剩余电量、可续行里程等，以及解锁/上锁车门、调节司机和乘客的四区域空调温度、开启车辆大灯、定位汽车等。源码推荐说明。<br>WatchKit-Apps - WatchKit 开源小项目示例集锦。是不可多得地学习 WatchKit 的示例式教程（1.如何创建一个简单的交互式计数器；2.如何从手表上控制iOS app；3.如何在WatchKit app和iOS app之间共享数据；4.如何创建一个拥有不同背景色的数字时钟；5.展示不同的UI层；6.如何创建支持滑动手势的应用程序。）。<br>KYVoiceCurve - 类似Apple Watch中语音的声音曲线动画。<br>IGInterfaceDataTable - IGInterfaceDataTable是WKInterfaceTable对象的一个类别，可以让开发者更简单地配置多维数据。该项目使用类似UITableViewDataSource的数据源模式配置Apple Watch表格，而不是将数据结构扁平化成为数组。<br>Apple Watch开发教程资料汇总 - Apple Watch开发教程资料汇总。<br>Stargate - 通过 iPhone 桥接实现 Mac 与 Watch 的即时通讯。Stargate 通过封装两个优秀的基础类库 MMWormhole 和 PeerKit 实现高效的通讯应用。–swift<br>soon - 一款倒计时 WatchKit 示例应用。作者从架构的角度，思考如何设计一款完整、通讯高效且性能又好的 WatchKit 扩展应用。该示例学习性非常强。–swift<br>watchOS-2-Sampler - 基于 watchOS 2 若干新特性，写了相应的示例代码供大家学习、参考。<br>HMWatch - HMWatch是个有待完善的watchOS 2.0 HomeKit 应用示例。<br>CocoaMultipeer - CocoaMultipeer这个开源框架支持OS X, iOS和watchOS设备间的点对点通信，解决watchOS和Mac之间通信的方案还是很有用的。<br>HighstreetWatchApp - 是电商平台Highstreet针对App Watch的一款应用，该demo中加载的是虚拟数据。<br>NKWatchChart - NKWatchChart是一个基于PNChart专门为Apple Watch 开发的图表库,目前支持 line, bar, pie, circle 和 radar 等 图表形式。<br>　VPN</p>\n<p>vpnon - swift的VPN On 的源码和本地化内容都是开放的: 官方网站。<br>Hydro.network - Hydro.network 的开发旅程, gitcafe。<br>　完整项目</p>\n<p>v2ex - v2ex 的客户端，新闻、论坛。<br>apps-ios-wikipedia - apps-ios-wikipedia 客户端。<br>jetstream-ios - 一款 Uber 的 MVC 框架。它同时提供了多用户实时通讯支持，一旦启动 JetStream 后端服务，通过 WebSocket 协议可以分分钟建立多用户实时通讯应用。<br>DeckRocket - 在相同 WiFi 网络环境内，通过iPhone 控制并播放 Mac 中的 PDF 文档。<br>ScanBook - 扫扫图书:可以扫描条形码查询图书，也可以关键字搜索，遇到合乎你口味的书，还可以看看别人的读书笔记，不同角度去体会。<br>DesignerNewsApp - Swift 开发的 DesignerNews 客户端，看着美美的！<br>KYWeibo - 调用新浪API自己写的第三方微博客户端。<br>DouQu_IOS - 逗趣IOS手机端（一款笑话软件）,拥有完整的功能的手机应用app 。<br>IT江湖iOS客户端 - IT江湖iOS客户端。<br>Eidolon - 艺术品拍卖的投标亭平台，用swift与反应式编程框架 ReactiveCocoa。<br>CrazyPuzzle - 模仿“看图猜成语”App，功能齐全，配有音效，效果很不错。游戏使用cocoa框架完成，没有使用cocos2d的框架。<br>WhoCall - 谁CALL我，iOS来电信息语音提醒，无需越狱。（需要iOS 7.0及以上版本。)骚扰电话预警、来电归属地提醒、联系人姓名播报，这些有中国特色人性化的电话功能，iOS上也应该有。电话提醒、私有API。<br>仿iOS猎豹垃圾清理(实现原理+源码) - 仿iOS猎豹垃圾清理(实现原理+源码),用到私有API。<br>DSLolita - 模仿新浪微博做的一款app，有发送博文，评论，点赞，私聊功能。<br>GSD_ZHIFUBAO - 支付宝高仿版。<br>Tropos - Tropos, 由 thoughtbot 推出的一款用 Objective-C 写的开源天气类应用, 截至今天, thoughtbot 已在 GitHub 上贡献了 174 个开源项目, 实在令人敬佩。<br>SmileWeather -开源天气类应用,天气图标很完整。<br>MVVMReactiveCocoa - GitBucket 2.0 通过审核啦，她是我在公司实践了一年多 MVVM 和 RAC 的基础上，利用业余时间开发的第三方 GitHub 客户端，旨在能够对想实践 MVVM 和 RAC 的 iOS 开发者有所帮助。AppStore地址，欢迎下载使用GitBucket和收藏MVVMReactiveCocoa。<br>Tomate - 这个圆盘式计时器让你更专注于工作或学习。P.S. App Store 上架收费应用（0.99 欧）。<br>StoveFireiOSMenu - 炉火餐饮系统iPad点餐端。<br>BaiduFM-Swift - 百度FM, swift语言实现，基于最新xcode6.3+swift1.2,初步只是为了实现功能，代码比较粗燥，后面有时间会整理，支持Apple Watch。<br>WNXHuntForCity - iOS高仿城觅项目（开发思路和代码）。<br>ZYChat - 关于聊天界面的可消息类型扩展，响应绑定设计。<br>NiceAppDemo - 仿最美应用-每日最美的钢琴律动效果。<br>meituan - 美团5.7iOS版（高仿），功能包括，团购首页，高德地图搜索附近美食并显示在地图上，上门服务，商家，友盟分享。<br>chuanke - 高仿百度传课iOS版。<br>Tuan - 模仿MJ老师iPad版美团（swift版），偶有bug 见谅。<br>SXNews - 模仿网易新闻做的新闻软件，完成了主导航页，新闻详情页，图片浏览页，评论页。效果不错，比网上流传的各种和网易新闻UI架构有关的代码都要完整，都要好。<br>Monkey - Monkey for GitHub是一个GitHub开发者和仓库排名的开源App。这次主要增加了登录GitHub的功能，随手follow和star，并且增加发现模块，包括GitHub的trending，动态，showcases等。<br>Uther - 跟蠢萌的外星人聊天，还能帮你记事”。itunes下载 。<br>　好的文章</p>\n<p>自定义转场动画 - 3 种方法～ 关于自定义转场动画。<br>iOS提高效率的方法和工具 - iOS提高效率的方法和工具。<br>用 JSON 构建 API 的标准指南 - 用 JSON 构建 API 的标准指南。<br>　Xcode插件</p>\n<p>iOS开发进阶，从Xcode开始 - 学习使用Xcode构建出色的应用程序！<br>在Xcode启动的时候，Xcode将会寻找位于~/Library/Application Support/Developer/Shared/Xcode/Plug-ins文件夹中的后缀名为.xcplugin的bundle作为插件进行加载（运行其中的可执行文件）。Xcode5 Plugins 开发简介 写个自己的Xcode4插件</p>\n<p>Xcode 4 插件制作入门 - Xcode 4 插件制作入门:Xcode所使用的所有库都包含在Xcode.app/Contents/的Frameworks，SharedFrameworks和OtherFrameworks三个文件夹下。其中和Xcode关系最为直接以及最为重要的是Frameworks中的IDEKit和IDEFoundation，以及SharedFrameworks中的DVTKit和DVTFoundation四个。</p>\n<p>RTImageAssets - 一个 Xcode 插件，用来生成 @3x 的图片资源对应的 @2x 和 @1x 版本。Asset Catalog Creator 功能强大，能自动生成全部尺寸：包括App Icons、Image Sets、Launch Screens Generator。</p>\n<p>VVDocumenter-Xcode - 一个Xcode插件，build后，随手打开一个你之前的项目，然后在任意一个方法上面连按三下”/“键盘，就ok了。</p>\n<p>Reveal-Plugin-for-XCode - 一个Reveal插件，可以使工程不作任何修改的情况下使用Reveal，该插件已在Alcatraz上架。Reveal：分析iOS UI的利器 。</p>\n<p>java2Objective-c - Google公司出得java转Obje-C转换工具，转换逻辑，不转换UI。</p>\n<p>RegX - 专治代码强迫症的 Xcode 插件，使用 Swift 和 Objective-C 编写。其用竖向对齐特定源代码的元素，使得代码更易读和易理解。说明 ； 菜单：xcode——》Edit-》Regx 。</p>\n<p>KSImageNamed - 自动完成，特别是如果你正在写Objective-C，如果Xcode能自动完成文件名难道不会很伟大吗？比如图像文件的名称。</p>\n<p>FuzzyAutocomplete - Xcode的实现自动完成还不完美，此插件能给出你所期望或想要的建议，设置：xcode-》Editor-》FuzzyAutocomplete-》plugin settings。</p>\n<p>GitDiff - Xcode的代码编辑器的一个微妙的补强，加上了足够的可见信息以了解上次git提交以来发生了什么变化，设置：xcode-》Edit-》GitDiff。</p>\n<p>XToDo - 这个插件不仅凸显TODO，FIXME，???，以及！！！注释，也在便利列表呈现他们。 菜单：xcode-》view-》snippets; 调出列表显示: xcode-》view-》ToDo List ： ctrl + T 。</p>\n<p>Backlight - 突出显示当前正在编辑的行。菜单：xcode-》view-》Backlight 。</p>\n<p>CocoaPods - 该CocoaPods的插件增加了一个CocoaPods菜单到Xcode的产品菜单。如果你不喜欢命令行，那么你一定会喜欢这个插件。 用CocoaPods做iOS程序的依赖管理 。</p>\n<p>Peckham - 添加import语句比较麻烦，此插件 按Command-Control-P，给出的选项列表中选择要的头文件。先要安装Alcatraz ,在终端输入： curl -fsSL <a href=\"https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh\" target=\"_blank\" rel=\"noopener\">https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh</a> | sh ； 重启xcode-》window-》Package Manager：搜索 Peckham 安装，打开Peckham.xcodeproj，编译 Peckham target，重启Xcode 。</p>\n<p>Auto-Importer - Auto-Importer是一个自动导入类对应的头文件的Xcode插件。</p>\n<p>Alcatraz -使用Alcatraz来管理Xcode插件 使用说明 。</p>\n<p>KSHObjcUML -KSHObjcUML 是一个 Objective-C 类引用关系图的 Xcode 插件。</p>\n<p>ColorSense-for-Xcode - 颜色插件，安装之后，就不用根据RGB选择颜色，直接从取色板中取颜色，会自动补齐RGB代码。。</p>\n<p>10款提高iOS开发效率的XCode插件 - 10款提高iOS开发效率的XCode插件：1. XcodeColors；5. ACCodeSnippetRepository；10. Dash for Xcode。</p>\n<p>ZLGotoSandboxPlugin - 支持Xcode快捷键了跳转当前应用沙盒了！快捷键是 Shift+Common+w。</p>\n<p>XcodeSwiftSnippets - XcodeSwiftSnippets, 提供了很多可在 Xcode 上使用的 Swift 代码片段, 通过自动补全的方式极大的提高了开发效率， 另外还有 Objective-C 版的。</p>\n<p>CoPilot - 通过此插件， Xcode 可以协同编程了（采用 WebSocket 通讯）。如此强大的“黑工具”，不爱它能行吗。</p>\n<p>ESJsonFormat-Xcode - 将Json格式化输出为模型的属性。<br>SCXcodeMiniMap - Xcode迷你小地图-SCXcodeMiniMap。<br>xTransCodelation - XCODE中英文翻译插件，提供API查询模式和网页模式，都是利用的百度翻译。另外集成了一个可以一键关闭其他所有APP的实用功能，方便开发者！<br>　美工资源</p>\n<p>TWG_Retina_Icons - 一套支持 Retina 高清屏的 iPhone 免费图标集。<br>ASCIImage - 使用 NSString 创建 image，说明。<br>my-sketch-colors - 配色。<br>Font Awesome - Font Awesome：一套绝佳的图标字体库和CSS框架，详细的安装方法请参考官方网站中文网站,GitHub地址 。<br>DynamicColor - 强大的颜色操作扩展类。通过该类，你可以通过扩展方法基于某个颜色得到不同深浅、饱和度、灰度、色相，以及反转后的新颜色。是不可多得的好类库。<br>Chameleon - Chameleon是一个iOS的色彩框架。它运用现代化flat color将UIColor扩展地非常美观。我们还可以通过它运用自定义颜色创建调色板。它还有很多功用，请浏览readme。<br>FontBlaster - 载入定制字体时更简单。<br>　其他资源</p>\n<p>githuber - 最好用的GitHub人才搜索工具。<br>codatlas - 源代码搜索利器。<br>searchcode - 源代码搜索利器：来自悉尼的代码搜索引擎汇聚了 Github, Bitbucket, Sourceforge…等多家开源站点超20万个项目、180亿行源代码，能以特殊字符、语言、仓库和源方式从90多种语言找到函数、API的真实代码。<br>kitematic - Mac 上使用 Docker 最简单的方案。<br>　开发资源</p>\n<p>　　开发资料</p>\n<p>豆瓣iOS开源库列表 - 豆瓣iOS开源库列表，很多开源项目。<br>iOS-Core-Animation-Advanced-Techniques - 中文版iOS 高级动画技术。<br>iOS开发的一些奇巧淫技1 - TableView不显示没内容的Cell怎么办; 键盘事件：IQKeyboardManager; app不流畅:KMCGeigerCounter; CoreData用起来好烦:MagicalRecord; CollectionView实现悬停的header:CSStickyHeaderFlowLayout。<br>iOS开发的一些奇巧淫技2 - 用一个pan手势来代替UISwipegesture的各个方向、拉伸图片、播放GIF、上拉刷新、把tableview里cell的小对勾的颜色改变、navigationbar弄成透明的而不是带模糊的效果、改变uitextfield placeholder的颜色和位置。<br>cocoapods安装指南 - cocoapods安装指南。<br>RemoteControl - Control your iPhone from inside Xcode for end-to-end testing 。<br>MVVM 介绍 - 替换MVC的开发模式。<br>第三方接口 - 基本所有第三方接口都在这，再也不用那么麻烦去找了。</p>\n<p>提高iOS开发效率的方法和工具 - 提高iOS开发效率的方法和工具。</p>\n<p>禅与 Objective-C 编程艺术 - 禅与 Objective-C 编程艺术 （Zen and the Art of the Objective-C Craftsmanship 中文翻译）。<br>Objective-C编码规范：26个方面解决iOS开发问题 - 【Objective-C编码规范：26个方面解决iOS开发问题：“我们制定Objective-C编码规范的原因是我们能够在我们的书，教程和初学者工具包的代码保持优雅和一致。”今天分享的规范来自raywenderlich.com团队成员共同完成的，希望对学习OC的朋友们有所指导和帮助。<br>　　swift</p>\n<p>Swift中文指南 - 中文版Apple官方Swift教程《The Swift Programming Language》，老码版本 历史版本更新说明。<br>The Swift Programming Language 中文版 - The Swift Programming Language 中文版。<br>swifttoolbox - swifttoolbox swift开发的开源库汇总。<br>SwiftGuide - 这份指南汇集了Swift语言主流学习资源，并以开发者的视角整理编排– 非常不错，值得推荐。<br>Swift开源项目精选 - Swift开源项目精选–推荐，每周都有更新。<br>Awesome Swift - 一个收集了很多 Swift 开发资源的网站。<br>Developing_iOS_8_Apps_With_Swift - Developing iOS 8 Apps with Swift 字幕简体中文翻译项目（斯坦福白胡子老头swift教学视频）。<br>Swift-On-iOS - JohnLui 的 Swift On iOS 代码仓库。<br>　　他人开源总结</p>\n<p>code4app - 最多国人用的代码库。<br>cocoachina - 国内最热门的iOS社区的代码库。<br>awesome-ios - 一个老外整理的，中文版。<br>awesome-ios-ui - 收集了不少 iOS UI/UX 库, 包含了很多酷炫的动画效果。<br>ios-cosmos - The iOS Cosmos：收录了IOS绝大部分的开源框架和工具。<br>Awesome Haskell资料大全 - Awesome Haskell 资料大全：框架，库和软件。<br>Cosmos - The iOS Cosmos：收录了IOS绝大部分的开源框架和工具。<br>cocoacontrols - 收集了很多UI控件效果代码，缺点是需要翻墙，而且代码分类不够好。<br>lexrus - lexrus国内出名的iOS开源coder，非常库的label动画、textfield动画。<br>open-source-ios-apps - iOS App集合，分：swift与Objective-C–国外人整理。</p>\n<p>适合iOS开发者的15大网站推荐 - 适合 iOS 开发者的 15 大网站推荐 — 英文网站。</p>\n<p>Objective-C GitHub 排名前 100 项目简介 - 主要对当前 GitHub 排名前 100 的项目做一个简单的简介, 方便初学者快速了解到当前 Objective-C 在 GitHub 的情况。</p>\n<p>Github-iOS备忘 -整理了比较常用的iOS第三方组件，以及github上的统计。</p>\n","site":{"data":{}},"excerpt":"<p><em>自己总结的iOS、mac开源项目及库。 github排名 <a href=\"https://github.com/trending,github搜索：https://github.com/search\" target=\"_blank\" rel=\"noopener\">https://github.com/trending,github搜索：https://github.com/search</a></em></p>\n<ul>\n<li><p>UI下拉刷新</p>\n</li>\n<li><p>EGOTableViewPullRefresh - 最早的下拉刷新控件。</p>\n</li>\n<li>SVPullToRefresh - 下拉刷新控件。<br>MJRefresh - 仅需一行代码就可以为UITableView或者CollectionView加上下拉刷新或者上拉刷新功能。可以自定义上下拉刷新的文字说明。具体使用看“使用方法”。 （国人写）<br>XHRefreshControl - XHRefreshControl 是一款高扩展性、低耦合度的下拉刷新、上提加载更多的组件。（国人写）<br>CBStoreHouseRefreshControl - 一个效果很酷炫的下拉刷新控件。<br>BreakOutToRefresh - 一个下拉刷新打砖块的开源 Swift 库，能让用户在等待下拉刷新的时候边玩撞球游戏边等待。<br>KYJellyPullToRefresh - 实现弹性物理效果的下拉刷新，神奇的贝塞尔曲线，配合UIDynamic写的一个拟物的下拉刷新动画。<br>MHYahooParallaxView - 类似于Yahoo Weather和News Digest首屏的视差滚动。<br>SDRefreshView - 简单易用的上拉和下拉刷新（多版本细节适配）。<br>ZLSwiftRefresh - swift下拉刷新/上拉加载更多，支持自定义动画，集成简单，兼容UITableView/CollectionView/ScrollView/WebView。<br>BreakOutToRefresh - swift，上拉和下拉刷新。<br>GearRefreshControl - swift，上拉和下拉刷新。<br>refresher - swift，上拉和下拉刷新。<br>可展开/收缩的下拉菜单–SvpplyTable - 一个可展开可收缩的下拉菜单，类似Svpply app。<br>ODRefreshControl - 原iOS6上的橡皮糖刷新样式，很有意思。现在也很多大的 App 在用，比如虾米音乐和 QQ 客户端。<br>PullToMakeSoup - PullToMakeSoup, 自定义下拉刷新的动画效果：煮饭, Yalantis新作！<br>TwitterCover - Twitter iOS客户端的下拉封面模糊效果。<br>Replace-iOS - Replace-iOS 让人眼前一亮的下拉刷新（iOS）。<br>Animations - 封装了一下，使用的时候只要两行代码。一些动画的飞机稿，都是一些单独分离出来的用于测试的子动画，现在统一归类一下。<br>PullToBounce - 下拉刷新的动画 for UIScrollView。<br>　　模糊效果","more":"</li>\n</ul>\n<p>FXBlurView - 是一个UIView子类，支持iOS5.0以上版本，支持静态、动态模糊效果，继承与UIView的模糊特效。<br>VVBlurPresentation -很简单易用的在原来viewconntroller基础上做模糊，然后present新的viewcontroller的。<br>UICustomActionSheet - 通过模糊背景来着重强调与菜单相关的元素–对话框 里面已经收藏。<br>SABlurImageView - 支持渐变动画效果的图像模糊化类库。P.S. 与前几天推存类库 SAHistoryNavigationViewController 是同一位作者。<br>　　AutoLayout</p>\n<p>Masonry - Masonry是一个轻量级的布局框架，拥有自己的描述语法，采用更优雅的链式语法封装自动布局，简洁明了并具有高可读性（ 使用介绍1 使用介绍2），iOS自适应前段库-Masonry的使用），Masonry、Classy、ClassyLiveLayout介绍。使用DEMO 视图居中显示、子视图含边距、视图等距离摆放、计算ScrollView的contentsize。<br>Classy - Classy是一个能与UIKit无缝结合stylesheet(样式)系统。它借鉴CSS的思想，但引入新的语法和命名规则，Classy官网，Masonry、Classy、ClassyLiveLayout介绍。<br>ClassyLiveLayout - ClassyLiveLayout通过结合Classy stylesheets与Masonry一起使用，能够在运行的模拟器中微调Auto Layout约束实时显示效果的工具，Masonry、Classy、ClassyLiveLayout介绍。<br>Snap - Snap是Masonry Auto Layout DSL的Swift版本，是一款轻量级的布局框架，使用了更良好的语法封装了AutoLayout。Snap支持iOS和OS X。<br>SnapKit - 就是“snap”， –swift 喜欢自动布局吗？当然喜欢！至少在storyboard中创建时会喜欢。 在代码中纯手工创建约束灰常痛苦，但幸运的是我们有了SnapKit，在board中用上它，你可以简单直观地编写约束了。。<br>PureLayout - PureLayout 是 iOS &amp; OS X Auto Layout 的终极 API——非常简单，又非常强大。PureLayout 通过一个全面的Auto Layout API 扩展了 UIView/NSView, NSArray 和 NSLayoutConstraint，仿照苹果自身的框架。<br>UIView-AutoLayout - Deprecated in favor of PureLayout, which includes OS X support:<a href=\"https://github.com/smileyborg/PureLayout。\" target=\"_blank\" rel=\"noopener\">https://github.com/smileyborg/PureLayout。</a><br>Cartography - Cartography 是用来声明 Swift 中的 Auto Layout，无需输入任何 stringly 就可设置自己 Auto Layout 的约束声明。<br>Auto-Layout-Showcase - swift,AutoLayout 进阶 Demo，宽高比约束、比例约束、不等约束、视差约束、低优先级约束等高级用法，无需写码即可进行复杂页面布局，Demo 还动态模拟了各屏幕下的效果。来自百度知道 iOS 小组的内部分享。<br>UIView-FDCollapsibleConstraints - 一个AutoLayout辅助工具，最优雅的方式解决自动布局中子View的动态显示和隐藏的问题。第二个Demo模拟了一个经典的FlowLayout，任意一个元素隐藏时，底下的元素需要自动“顶”上来，配合这个扩展，你可以在IB里连一连，选一选，不用一行代码就能搞定。<br>Autolayout_Demo - 在项目中用自动布局实现的类似抽屉效果。<br>当view隐藏的时候也隐藏其autolayout的NSLayoutAttribute - 当view隐藏的时候也隐藏其autolayout的NSLayoutAttribute，从而不用大量的代码工作。<br>　　富文本</p>\n<p>RTLabel - RTLabel 基于UILabel类的拓展,能够支持Html标记的富文本显示，它是基于Core Text,因此也支持Core Text上的一些东西。32位，很久没有更新了。<br>RTLabel - 富文本，RTLabel支持64位。<br>TYAttributedLabel - TYAttributedLabel。 简单易用的属性文本控件(无需了解CoreText)，支持富文本，图文混排显示，支持添加链接，image和UIView控件，支持自定义排版显示。<br>TQRichTextView - 用于做富文本视图控件显示，用于即时通讯的表情显示，以及资源评论的富文本显示。<br>TTTAttributedLabel - 一个文字视图开源组件，是UILabel的替代元件，可以以简单的方式展现渲染的属性字符串。另外，还支持链接植入，不管是手动还是使用UIDataDetectorTypes自动把电话号码、事件、地址以及其他信息变成链接。用TTTAttributedLabel创建变化丰富的UILabel - 网易新闻iOS版使用。<br>MLEmojiLabel - 自动识别网址、号码、邮箱、@、#话题#和表情的label。可以自定义自己的表情识别正则，和对应的表情图像。(默认是识别微信的表情符号)，继承自TTTAttributedLabel，所以可以像label一样使用。label的特性全都有，使用起来更友好更方便。<br>FXLabel - FXLabel是一个功能强大使用简单的类库，通过提供一个子类改进了标准的UILabel组件，为字体增加了阴影、内阴影和渐变色等，可以被用在任何标准的UILabel中。FXLabel还提供了更多控件，可以对字体行距、字体间距等进行调整。<br>WFReader - 一款简单的coretext阅读器，支持文本选择、高亮以及字体大小选择等。<br>WPAttributedMarkup - WPAttributedMarkup is a simple utility category that can be used to easily create an attributed string from text with markup tags and a style dictionary。<br>KMPlaceholderTextView - 可显示多行 placeholder 的 textView，可以在IB里面设置 – swift。<br>HHFlashSwitch - 一个另类的UISwitch，选择后，背景水波扩散变色效果。<br>UUColorSwitch - Switch 开关动画效果,当打开开关时，Switch可实现平滑渲染过渡到父视图的效果。<br>UITextViewDIYEmojiExample - UITextView编辑时插入自定义表情-简单的图文混编。<br>Shimmer - BlingBling闪光效果，酷炫的Label的效果，可以用于加载等待提示。<br>ZSSRichTextEditor - 适用于iOS的富文本WYSIWYG编辑器，支持语法高亮和源码查看。ZSSRichTextEditor包含所有WYSIWYG标准的编辑器工具。<br>RichEditorView - swift，一套可定制富文本编辑器组件及示例。功能完整、代码简练、实现逻辑巧妙（编辑器核心与 WebView 结合，采用 HTML5 contentEditable 编辑模式，执行JS 配套命令 execCommand 实现富文本编辑功能）。<br>DTCoreText - 可以解析HTML与CSS最终用CoreText绘制出来，通常用于在一些需要显示富文本的场景下代替低性能的UIWebView。DTCoreText源码解析。<br>CSGrowingTextView - 用作即时通讯文本框和评论文本框使用，可以显示多行输入。<br>MarkdownTextView - 显示Markdown的TextView。<br>高仿微信限定行数文字内容 - 采用Autolayout高仿微信纯文字限定行数。<br>FuriganaTextView - 实现复杂的日文韩文排版。<br>ParkedTextField - 带固定文本的输入组件。<br>LTMorphingLabel - swift 能够实现文字变形动画效果的Label，用Swift写的一个能够实现文字变形动画效果的Label，很炫。<br>GJCFCoreText - 图文混排。<br>AttributedLabel - 显示性能数量级 UILabel 的 AttributedLabel。无畏无惧、挑战权威。<br>FFLabel - 自动检测 URLs, @username, #topic# 等关链词（提供响应扩展）。实用的标签文本小组件。<br>TextFieldEffects - 标准的UITextField有些枯燥么？来认识一下TextFieldEffects吧！废话不多说，只要看几个例子,是啊，都是些简单的dropin控制器。甚至可以在storyboard中使用IBDesignables。<br>　　图表</p>\n<p>PNChart - 国内开源作者，动态的图表。<br>swift-linechart - 功能完整、实用的折线图组件。使用方便，参数配置简单。是不可多得的优质组件–swift。<br>ios-charts - 一款优秀 Android 图表开源库 MPAndroidChart 的 Swift 语言实现版（支持 Objective-C 和 Swift 调用）。缺省提供的示例代码为 Objective-C。<br>TEAChart - xhacker/TEAChart 一个简洁的 iOS 图表库，支持柱状图、饼图以及日历等。<br>YOChartImageKit - 支持在watchOS上绘制图表，看它最近更新挺勤快的，可以关注一下。<br>RealtimeGradientText - Fun With CALayer Mask 刚好今天开源了一个有趣的项目 RealtimeGradientText，所以也好聊一下 CALayer 的 Mask，说明。<br>　　表相关</p>\n<p>SWTableViewCell - 国内开源作者，带很多手势的表单元格。<br>MCSwipeTableViewCell - 带很多手势的表单元格。<br>TMQuiltView - 瀑布流。<br>WaterfallFlowDemo - 一个简单的UICollectionView瀑布流布局演示demo。<br>XLForm - 很多表格类的table,写法更高冷一点，推荐使用。<br>RETableViewManager - 可以十分方便地生成各种样式、各种功能的TableView。只要开发者能想到的列表效果或者功能，都可以利用这份代码迅速编写出来。比如，之前要实现一个填写各种资料的列表，可能需要很多代码，现在只需要几行代码就可以实现。<br>UIScrollSlidingPages - 允许添加多视图控件，并且可以横向滚动。有点类似于Groupon app。<br>HBHorizontalTableView - swift，TableView 横向滚动小示例（仿照 AppStore 应用展示）。<br>HorizontalScrollCell - HorizontalScrollCell是一款使用方便的水平方向可滚动的单元格，适用于UICollectionView中实现水片方向滚动视图。 。<br>SYJiugonggeTableView - tableView封装的九宫格。<br>UUChatTableView - UUChatTableView 气泡聊天界面，支持文本、图片以及音频的气泡聊天界面。源码推荐说明。<br>Chats - 聊天 UI 示例程序。此项目应该只为演示或学习之用，没有服务器 – swift。<br>Atlas-iOS - 快速在iOS里集成聊天功能，类似开源版本的环信。Layer家开源了一套聊天app界面的解决方案.看起来很赞，很多蛮复杂的东西直接都帮封好了。不得不说现在做app开发真是很简单，大部分时间搭积木就可以了。官方网站。<br>DLSlideView - DLSlideView对常见的顶部Tab页点击、滑动分页做了封装。它使用基于ViewController的container特性（而不是scrollview）来管理各个子页面，以支持无限分页，源码推荐说明。<br>VOVCManager - 页面管理器:1.跳转指定页面,只需要知道viewController的Class名,如果有storyboard,则需要指定storyboard名；2.无需添加基类；3.支持URLScheme跳转指定页面。<br>MBXPageViewController - 简洁快速的页面切换–MBXPageViewController，带有按钮控件的UIPageController，非常整洁、简单以及快速。该项目通过三种形式展示页面之间的切换，比如导航栏上的多个tab切换、页面左右两端箭头指示切换，以及使用分段控件。<br>PagerTab - UIScrollView实现滑动转换页面，类似网易云音乐iOS版的页面滑动切换效果。<br>GUITabPagerViewController - 多个tab滑动切换。<br>VOMetroLayoutDemo - Metro风格的UICollectionView, 目前只支持横向布局,仅在iPad上应用。<br>KYCellAnimation - 给UITableViewCell增加进入的动画。<br>COBezierTableView - swift，通过编辑 Bezier 曲线四点位置设置 TableView 内 Cell 及对应按扭位置。实验效果很赞。<br>RDVTabBarController - 一个TabBar组件，可以方便设置底部菜单的文字图片，点击效果，小红点提示等。<br>LxTabBarController - 改变了原生tabbar切换tab时的生硬效果，并加入滑动切换手势（有和界面上的其它手势发生冲突的风险，可根据具体项目予以关闭），swift版本。<br>横向展示文本内容的自定义cell - 可以横向展示文本内容的自定义cell，根据文本无限滚动。<br>UITableView-FDTemplateLayoutCell - UITableView-FDTemplateLayoutCell 是一个方便缓存 UITableViewCell 的高度的框架。<br>ExpandingStackCells - 采用 UIStackView 实现表格单元格扩展内容显示示例及解决方案。<br>Sapporo - swift 单元格模型驱动的集合视图管理器组件。又一个超实用的“轮子”。<br>MDIHorizontalSectionTableViewController - 根据产品需求开源了一个交互项目，可以理解为横向Section的TableView，section和cell同时支持拖拽，后续安卓版本也会开源出来。<br>JZNavigationExtension - 多功能导航控制器，可以透明返回栏。<br>QuickRearrangeTableView - 基于 UITableView 的快速重排功能扩展子类。通过长按选定单元格然后滚动移动到指定位置。<br>uicollectionview-reordering - UICollectionViews的拖拽(拖动、移动)效果,实例教程.<br>DZNEmptyDataSet - DZNEmptyDataSet算是一个很标准的iOS内建方式，适合用来处理空的table view和collection view。会自动将collection view处理完善，并将用户消息以合适美观的方式显示出来。每个iOS项目都可以自动处理。<br>MGSwipeTableCell - 另一个常见于很多应用中的UI组件，苹果应该考虑在标准的iOS SDK中加入一些类似的内容。Swipeable表格cell是这个pod的最佳描述，也是最好的。<br>　　隐藏与显示</p>\n<p>SlideTapBar - 滚动栏菜单，向上滚动时隐藏tabbar，向下滚动马上显示tabbar。<br>FoldingTabBar.iOS - 可折叠Tab Bar和Tab Bar Controller。<br>LTNavigationBar - LTNavigationBar为app导航栏添加动态着色效果，可自定义其背景色。Demo包含：1.变换背景色；2.滚动视图，导航栏和状态栏重叠。<br>BLKFlexibleHeightBar - 固定Header的效果库。<br>　　HUD与Toast</p>\n<p>MBProgressHUD - 最多人用的loading。<br>SVProgressHUD - SVProgressHUD的loading，如果你需要定制化的等待提示器，这个就是了（也许是最好的）。<br>ProgressHUD - ProgressHUD的loading，使用最简单。<br>MMProgressHUD - 设置HUD出现和消失的方式（包括上下、左右、淡入淡出、放大缩小等等），设置HUD的内容（可以在HUD中加入帧动画、动态图片等等），设置HUD出现时的底部覆盖层颜色，等等。总而言之，这是一份集大成的HUD代码。慢慢看视频吧，囊括了所有效果。<br>WSProgressHUD - 一个小巧精致的HUD,支持添加到自定义View上, 还有更多小细节.。<br>　　对话框</p>\n<p>WCAlertView - 自定义的对话框。<br>IOS7AlertView - IOS7AlertView的对话框。<br>AMSmoothAlert - 动画效果不错，最多star，但不支持arm64。<br>DQAlertView - 扁平化的样式不错。<br>HHAlertView - 一个简易的alertview 有三种样式，有成功，失败，和警告三种样式，支持Delegate和block两种回调。<br>MJPopupViewController - 实现弹出视图的各种弹出和消失效果，包括淡入淡出（fade in，fade out），从屏幕上方飞进，下方飞出，从屏幕左方飞进，右方飞出等等效果，弹窗。<br>Menu - 项目中可能会用到的常用菜单，以后有时间会继续补充，弹窗。<br>EasyTipView - 弹出提示框类及演示示例。同样地，API 简单、易用。好“轮子”，弹窗。<br>kxmenu - kxmenu弹出菜单，点击视图上任意位置的按钮，会弹出一个菜单，并且有个小箭头指向点击的按钮，类似气泡视图。弹出的菜单位置会根据按钮的位置来进行调整。<br>QBPopupMenu - QBPopupMenu弹出菜单，实现类似 UIMenuItem 的弹出菜单按钮。点击按钮，会弹出一个菜单，上面可以排列多个按钮。纯代码实现，不需要任何图片。<br>STModalDemo - 弹出视图（通知，提示，选择，窗口）。<br>TAOverlay - TAOverlay可通过叠加层展示有用的信息，可自定义文本和背景色，添加阴影和模糊效果，以及更改字体大小或者用自定义图片替换页面上的icon。<br>UICustomActionSheet - 通过模糊背景来着重强调与菜单相关的元素–模糊效果 里面已经收藏。<br>ActionSheetPicker-3.0 - 该项目是此前热门项目ActionSheetPicker的新版本，快速复制了iOS 8上的下拉 UIPickerView/ActionSheet功能。<br>MJAlertView - 3D效果转场效果警示图–MJAlertView。<br>SwiftyDrop - 轻量、易用的小清新弹出列表及信息提示组件真心不错。<br>　　其他UI</p>\n<p>AwesomeMenu - 最多人用的Path菜单。<br>DCPathButton - Path，4.0的弹出菜单，呼出或者关闭菜单时，多个小图标会分别按照逆时针和顺时针的方向进行滚动。<br>SphereMenu - 利用UIDynamicAnimator的有趣的菜单，path类似。<br>KYGooeyMenu - KYGooeyMenu 是一个具有 Gooey Effects 带粘性的扇形菜单控件(卫星菜单、path)。<br>TwitterPaggingViewer - 多个Tableview，左右滑动。<br>CircularProgressControl - Circular Progress Control using CAShapeLayer ，环形进度控制条。<br>KDCircularProgress - KDCircularProgress是使用swift制作的色彩炫丽的进度条，可以加入多种颜色来控制进度条的渐变效果。<br>TextProgress - 自定义实现数字进度条：1、可以自定义数字（0-100），填充的比例为当前设置的数字，2、可以实现自定义填充颜色，上下部分都可以，3、可以自定义边界的颜色4、实现了水波动画，可以设置打开或关闭。<br>SDProgressView - 简便美观的进度指示器，此系列共有六种样式的进度指示器。<br>NVActivityIndicatorView - loading 进度条动画，有20-30多种，是在此DGActivityIndicatorView 基础上做得修改。<br>LoopProgressDemo - 环形渐变进度条。<br>环形渐变进度条实现，<br>XLPagerTabStrip - 做的很棒的iOS下的PagerTabStrip。<br>RandomColorSwift - 一个自动生成好看的颜色的 Swift 库，RandomColorSwift。<br>HexColorService - 将16进制颜色字符串转成UIColor。<br>Rainbow - 旨在提高代码可读性及易用性的 UIColor 扩展，它使原先有限的预定义颜色（方法）选择，扩展至超过 1200 种。<br>UIColor-ChineseTraditionalColors - 中国传统颜色引用 UIColor 扩展。“UIColor.桃红()，UIColor.竹青() …”，共158种。<br>类似美团的下拉菜单 - 类似美团的下拉菜单，源码推荐说明。<br>类似美团的下拉选项 - 类似于美团、大众点评的下拉菜单选项，code4app代码，评论代码有瑕疵。<br>CRMediaPickerController - 一个简单易用的图片/视频选择器。1.可同时选择照片和视频。 2.挑选范围有Camera、Camera Roll、Photo Library以及最近拍摄的照片和视频。3.可自定义UIImagePickerController属性（Camera Overlay、Camera Device、Camera View Transform以及allowsEditing）。4.支持横屏和竖屏5.原生的iOS UI。，源码推荐说明。<br>MDCSwipeToChoose - MDCSwipeToChoose可简单地添加滑动手势来调用UIView，并使用该行为提供了一个组件以创建类似Tinder app的like或者dislike界面的轻扫。基于轻扫的方向，你可以决定执行什么样的行为，并且你可以自定义文本颜色和图片。该项目适用于教学用的抽认卡、图片查看器以及其他等。<br>iOS Material Design库 - 该项目借鉴于谷歌的Material Design guideline，用户可自定义背景色。<br>Material-Controls-For-iOS - Material Design风格的各种控件，非常完整全面。<br>ZMaterialDesignUIButton - Swift Material Design UIButton。<br>MediumScrollFullScreen - Medium的可扩展滚动页面，上下滚动时，全屏显示内容，并自然消隐上下菜单。由此项目感知，作者是一位很注重细节的开发者，他的另外几个菜单类项目也都不错，值得参考，比如：PathMenu, MediumMenu 等。</p>\n<p>WZFlashButton - WZFlashButton，点击后button里面出现水波扩散效果。</p>\n<p>Twinkle - 为字体加上钻石版闪耀的效果。使用Swift编写。<br>ios-multi-back-button - 可替换内置的UInavigationController返回按钮，长按左上角的返回按钮，实现多层级的快速返回。<br>ASDayPicker - 适用于iOS (iPhone)的日期选择器，类似于Calendar app的周视图。<br>today extension - 用纯代码构建一个Widget(today extension) 。<br>FSCalendar - 日历视图，带有微妙和平滑的滚动效果，可自定义外观–国人。<br>HSDatePickerViewController - 带有Dropbox Mailbox感觉的时间日期选择器。启动是背景被模糊化。界面也是主流的扁平化风格。<br>CFCityPickerVC - 城市选取控制器。<br>JTCalendar - iOS下优美的 Calendar 组件，做 GTD 类 App 必备。<br>Persei - 动画隐藏或显示顶部菜单支持库及示例项目。–swift<br>PDTSimpleCalendar - 是iOS最棒的日历组件了。你可以在各个方面对它进行定制，无论是运行逻辑还是外观方面。<br>Form - JSON 驱动的 Form表单系统，复杂的表单填写类 App 极其需要（比如淘宝呢！）。<br>SwiftyFORM - swift 表单输入框架（亮点是表单验证规则引擎），是我见过地最易用的 Swift 表单组件。<br>SwiftSpinner - SwiftSpinner是使用swift制作的一款精致带感的指示器，并且连带有字体信息显示，模糊背景，半透明，扁平化等IOS8的效果。<br>AKPickerView-Swift - 一款小而美的 3D 效果选择器。<br>ImagePickerSheet - 图片或视频选择器（可多选）组件及其示例项目。<br>iOS-RatingBar - iOS-RatingBar swift版的评分控件,跟Android的RatingBar一样有两种模式，评分模式和只读模式’支持视图编辑，自定义星星数量，评分等级,另外还能支持非整数星，0.5颗星，0.1颗星,可以开启动画效果。<br>RKNotificationHub - 快速给 UIView 添加上炫酷的通知图标（Badge、红点、提示）。<br>WZLBadge - Badge，支持横竖屏支持iOS5~iOS8允许高度定制化，包括“红点”的背景颜色，文字(字体大小、颜色)，位置等。说明.<br>BubbleTransition - 以气泡膨胀和缩小的动画效果来显示和移除 controller，Uber的就是这种取消操作的方式。<br>KYFloatingBubble - 类似iOS7中Game Center浮动气泡的效果。<br>DKNightVersion - DKNightVersion 是一个支持夜间模式切换的框架。<br>EasyUIControl - 一个可以简化界面ui的控件框架。<br>LxGridView-oc LxGridView-swift - 利用UICollectionView模仿iOS系统桌面图标的交互，作用如动图。<br>QQBtn - 仿QQ未读消息弹性按钮动画，达到和手机QQ未读信息一样的动画效果，效果基本实现。<br>GMStepper - swift 带动画效果、支持手势滑动操作的步进标签。<br>TZStackView - OS 9 UIStackView 功能模拟实现于 iOS 7/ iOS 8 内。<br>LayoutTrait - swift 一个小类库。 做iPad 多任务分屏 适配的同学可以看一下。<br>HACursor - HACursor，是一个对横向ScrollView中的视图进行管理的UI控件。只要几行代码就可以集成类似于网易新闻对主题页面进行排序，删除操作的功能。<br>ZTPageController - 模仿网易新闻和其他新闻样式做的一个菜单栏，栏中有各自的控制器，其中有4中展示样式’网易style’ ’搜狐style’ ’腾讯style1’ ’网易style2’ 。<br>Ruler - 尺子。<br>HUMSlider - HUMSlider是一款能够自动显示刻度记号的滑竿，滑动到某处，该处的刻度会自动上升，两边还能配置图像。支持代码或storyboard中实现。<br>JDSelectedDemo - 仿京东筛选菜单实现。<br>BTNavigationDropdownMenu - 下拉列表暨导航标题组件。简单、直接、易用 -swift。<br>　动画</p>\n<p>Core Animation笔记，基本的使用方法 - Core Animation笔记，基本的使用方法：1.基本动画，2.多步动画，3.沿路径的动画，4.时间函数，5.动画组。<br>awesome-ios-animation - iOS Animation 主流炫酷动画框架(特效)收集整理 收集整理了下iOS平台下比较主流炫酷的几款动画框架。<br>　　侧滑与右滑返回手势</p>\n<p>SloppySwiper - iOS系统自带的UINavigationController要7.0才支持，但不过该手势只能从屏幕左侧边缘识别，如果要扩大到整个屏幕范围怎么办？配合一个SloppySwiper无需代码就可以轻松实现。此库支持iOS5.0以上版本（另外：Nav的title滑动不明显，本人写了2个类似的控件），SloppySwiper-demo ：代码方式与storyboard方式。<br>SCNavigation - UINavigation可以右滑返回，隐藏UINavigationBar。<br>UINavigationController-YRBackGesture - 支持右滑返回手势，标题栏不动。<br>GHSidebarNav - 现在比较流行使用侧开(侧滑)菜单设计。试了不少控件，感觉GHSidebarNav最成熟，尤其对纯代码创建的界面兼容性最好。在Storyboard中使用GHSidebarNav侧开菜单控件。<br>iOS-Slide-Menu - 能够类似Facebook和Path那样弹出左右边栏侧滑菜单,还支持手势。多种可以自定义的属性 (非常不错)。<br>ECSlidingViewController - 侧滑菜单。<br>JASidePanels - 侧滑菜单,有左右菜单，有pop功能，支持手势侧滑,本人使用中：简单。<br>animated-tab-bar - 让 Tabbar items能显示萌萌的动画。<br>tabbar图标动画 - tabbar上图标的动画实现，源码推荐说明。<br>SideMenu - swift实现，一款带动画效果可定制 Slide Menu，可以学习其动画实现思路。P.S. 对于Hamburger式菜单，虽然很常用，不过，苹果并不鼓励使用，甚至有开发小组对其弊病用自家上线应用前后数据对比进行了抨击。<br>RESideMenu - 侧开菜单，qq类似。<br>JHMenuTableViewDemo - 仿网易邮箱列表侧滑菜单。<br>SlideMenuView - 炫酷侧滑菜单布局框架，Android版本的一致实现。<br>QQConfiguration - swift，QQ-iPhone端框架，左侧菜单栏拖动手势。<br>KGFloatingDrawer - 侧滑菜单，qq类似，KyleGoddard/KGFloatingDrawer：一款适合于大屏手机或平板的浮动抽屉式导航界面组件。效果很赞- 侧开菜单，qq类似（与RESideMenu类似）。<br>AIFlatSwitch - 一款带平滑过渡动画的 Switch 组件类，类相同风格的 Menu/BackHamburgerButton,类似相同风格的 Menu/Closehamburger-button.<br>JHChainableAnimations - 在应用中采用链式写出酷炫的动画效果, 使代码更加清晰易读，利用block实现的链式编程。<br>WXGSlideMenuDemo - 个简单实现侧拉（侧滑）菜单的小demo，供初学者共同学习、练习使用。<br>PKRevealController - PKRevealController是一个可以滑动的侧边栏菜单（可向左、向右或者同时向两侧），只需手指轻轻一点（或者按一下按钮，但是这样滑动时不够炫酷），这类控制的其他库，而PKRevealController是最棒的。安装简便，高度定制且对手势识别良好。可以当做一个标准控件用在iOS SDK中。<br>SwiftPages - 高可定制类似 Instagram 视图滑动切换功能类库。API 简单、易用。<br>FlipBoardNavigationController - FlipBoardNavigationController。<br>MMDrawerController - 最多人用的一个有关侧边“抽屉”导航框架，里面还有很多你意想不到的交互效果，侧滑。<br>UIWebView翻页返回效果 - UIWebView翻页返回效果（变通方法）。<br>　　gif动画</p>\n<p>UIImageView-PlayGIF - UIImageView-PlayGIF。<br>YLGIFImage - YLGIFImage。<br>YLGIFImage-Swift - YLGIFImage-Swift。<br>　　其他动画</p>\n<p>popping - popping是一个POP 使用实例工程<br>SinaMenuView - 用POP动画引擎写的Sina微博的Menu菜单。<br>MMTweenAnimation - facebook POP的自定义动画扩展(基于POPCustomAnimation) 提供10种函数式动画。<br>ZQLRotateMenu - 这是一个旋转视图的选择器。<br>CoolLoadAniamtion - 一个简单但是效果不错的loading动画。<br>SequenRotateAnimation - 一个简单的loading次序动画。<br>SYAppStart - App启动插画的自定义过度。<br>VJDeviceSpecificMedia - 如何根据设备选择不同尺寸的图片 可以通过设置不同尺寸设备的LaunchImage，来使得App适配这些设备，要是在不同不同尺寸设备上使用不同大小的图片，则需要在代码中一一判断，然后加载。<br>RMParallax - RMParallax是一个app启动页引导开源项目，除了细微的翻页视差效果，描述文本的过渡也非常美观（版本新特性）。<br>ADo_GuideView - 转动的用户引导页(模仿网易bobo) 因为没有从app包里抓到@3x的图片,建议在iPhone5模拟器运行,保证效果~ （版本新特性）。<br>CoreNewFeatureVC - 版本新特性（引导页），1.封装并简化了版本新特性启动视图！2.添加了版本的本地缓存功能，3.集成简单，使用方便，没有耦合度，4.支持block回调。<br>Spring - Spring是一个Swift编写的开源库，可简化Swift编写的iOS动画。支持shake、pop、morph、squeeze、wobble、swing、flipX、flipY、fall、squeezeLeft、squeezeRight以及squeezeDown等多种动画形式，用 IBDesignable 让使用者可以在 Xcode 中快速设置动画效果。<br>KYBezierBounceView - 手势控制贝塞尔曲线，取消手势贝塞尔曲线会有反弹效果。<br>cadisplaylinkanduibezierpath - CADisplayLink结合UIBezierPath的神奇妙用。<br>KYCuteView - 实现类似QQ消息拖拽消失的交互+GameCenter的浮动小球效果，分析。<br>KYWaterWaveView - 一个内置波浪动画的UIView，里面有鱼跳跃水溅起来的效果。<br>KYPingTransition - 实现圆圈放大放小的转场动画，可以根据自己的需要使用Paper中的弹性效果，有Material风格。<br>KYNewtonCradleAnimiation - 牛顿摆动画。<br>LayerPlayer - 一款全面展示核心动画 API 示例项目（上架应用）。包括 CALayer, CAScrollLayer, CATextLayer, AVPlayerLayer, CAGradientLayer, CAReplicatorLayer, CATiledLayer, CAShapeLayer, CAEAGLLayer, CATransformLayer, CAEmitterLayer 等使用的互动演示。<br>JGTransitionCollectionView - swift，基于集合视图扩展实现完成自动布局及单元项 Flip式动画效果（效果很赞）。组件使用方便、自然（只需设置集合视图数据源的标准方式即可）。<br>KYShareMenu - 带弹性动画的分享菜单。<br>Context-Menu.iOS - 可以为app的菜单添加漂亮的动画内容，可自定义icon，并可根据自己的喜好设计单元格和布局。<br>DeformationButton - 一个简单的变换形状动画按钮。<br>UnReadBubbleView - UnReadBubbleView是一个能够拖拽并拉长的气泡视图。拖拽到一定的长度会消失，可以通过系数设置来控制拖拽的长度。气泡也支持多种属性设置。<br>PPDragDropBadgeView - 实现了类似于QQ 5.0 水滴拖拽效果. 支持iOS 5.0+ ARC，气泡能够带有数字标识，同时支持消失block方法。消失时还带有消失效果动画。<br>GiftCard-Implementation - 购买的炫酷动画。<br>iCarousel - iCarousel是一个类，它继承于UIView。用于简化实现各种类型的旋转木马(分页滚动视图），无限轮播 ，iOS开发之多图片无缝滚动组件封装与使用。<br>KIPageView - 无限循环PageView，横向TableView，无限轮播。<br>HotGirls - 卡片动画。<br>tispr-card-stack - swift 卡片风格动画切换组件及完整交互示例。<br>ZLSwipeableViewSwift - swift 卡片堆叠效果的实现（ZLSwipeableView)】可实现类似Tinder和Potluck应用程序的卡片堆叠效果，该项目基于ZLSwipeableView objective-c实现。1.自定义动画。2.自定义滑动切换。3.自定义方向。4.撤销。<br>Koloda - 基于卡片的 Tinder-style 动画效果示例。精细绝人。更赞的是额外附了详细开发教程 How We Built Tinder-Like Koloda Animation in Swift 网页链接 。Yalantis 出品动画程序款款精品。<br>QQPersonalInfoTransition - 仿照QQ的转场。<br>KYAnimatedPageControl - 除了滚动视图时PageControl会以动画的形式一起移动，点击目标页还可快速定位。支持两种样式：粘性小球和旋转方块。<br>KDIntroView - swift 动态介绍视图框架及演示。另外两个相似的类库是 RazzleDazzle和 Presentation，择需使用。<br>RazzleDazzle - 【IFTTT开源Swift编写的帧动画框架–RazzleDazzle】RazzleDazzle 是IFTTT开源的一个iOS帧动画框架，非常适用于APP初次使用时的介绍和引导信息。JazzHands是UIKit一个简单的关键帧基础动画框架，可通过手势、scrollview、KVO等控制动画，被IFTTT应用在IFTTT for iPhone上。<br>Presentation - 一个类似RazzleDazzle的框架。<br>FillableLoaders - 基于 CGPaths 可定制个性化填空式装载类库。附水波上涨式示例。<br>SXWaveAnimate - 实现非常美观的灌水动画。<br>LSPaomaView - 可循环滚动的较长文字，跑马灯，效果很好，一句话集成。<br>SIFloatingCollection_Swift - 可定制的 Apple Music 风格浮动形状动画组件及演示。<br>Cheetah - 易用、高可读链式动画类库。另一个类似类库是 DKChainableAnimationKit。<br>CKWaveCollectionViewTransition - swift， UICollectionViewController之间切换的动画。<br>TKSubmitTransition - 基于 UIButton 的登录加载、返回按钮转场动画组件及示例。<br>　网络相关</p>\n<p>　　网络连接</p>\n<p>AFNetworking - ASI不升级以后，最多人用的网络连接开源库，iOS网络编程之AFNetworking使用,iOS开发下载文件速度计算。<br>Alamofire - Alamofire是AFNetworking的作者mattt新写的网络请求的swift库。<br>YTKNetwork - 是基于 AFNetworking 封装的 iOS网络库，提供了更高层次的网络访问抽象。相比AFNetworking，YTKNetwork提供了以下更高级的功能：按时间或版本号缓存网络请求内容、检查返回 JSON 内容的合法性、文件的断点续传、批量的网络请求发送、filter和插件机制等。<br>LxFTPRequest - 支持获取FTP服务器资源列表，下载/上传文件，创建/销毁ftp服务器文件/目录，以及下载断点续传，下载/上传进度，自动判断地址格式合法性跟踪等功能！国人开发，QQ：349124555。<br>HSDownloadManager - HSDownloadManager，下载音乐、视频、图片各种资源，支持多任务、断点下载。<br>MutableUploadDemo - 模拟需求：图文混编，要求用户选择图片后就上传，可选择多图，并行上传，用户确定提交后后台执行，必须全部图片上传完才能提交文字。<br>WTRequestCenter - 方便缓存的请求库，提供了方便的HTTP请求方法，传入请求url和参数，返回成功和失败的回调。 UIKit扩展提供了许多不错的方法，快速缓存图片，图片查看，缩放功能， 颜色创建，设备UUID，网页缓存，数据缓存等功能。 无需任何import和配置，目前实现了基础需求。<br>MMWormhole - Message passing between iOS apps and extensions 2个iOS设备之间通信。<br>socket.io-client-swift - WebSockect 客户端类库。开放的通讯协议，有利于构建强大地跨平台应用。<br>Transporter - swift， 短小、精悍、易用的多文件（并发或顺序）上传和下载传输库。还支持后台运行、传输进程跟踪、暂停/续传/取消/重试控制等功能。<br>STNetTaskQueue - STNetTaskQueue Objective-C 可扩展网络请求管理库。<br>CocoaAsyncSocket - 在iOS开发中使用socket，一般都是用第三方库AsyncSocket，不得不承认这个库确实很强大，使用教程。<br>GCDAsyncSocket - GCDAsyncSocket ， 不错的Demo。<br>Just - 小而美的 HTTP 类。功能简单、直接、完整且健壮性高– swift。<br>Future - 基于微框架设计思想的异步执行及结果响应类，代码即简单又干净– swift。<br>MZDownloadManager - 下载管理。<br>DVR - 针对网络请求的测试框架，超实用的工具。且支持 iOS, OSX, watchOS 全平台。<br>HFDownLoad - iOS开发网络篇之文件下载、大文件下载、断点下载:NSData方式、NSURLConnection方式、NSURLSession下载方式 下载方式具体的思路、区别见Blog 。<br>　　图像获取</p>\n<p>SDWebImage - SDWebImage 网络图片获取及缓存处理。<br>Kingfisher - 纯 Swift 实现的类 SDWebImage 库，实现了异步下载和缓存图片。<br>KFSwiftImageLoader - Swift，一个图像缓存加载库。<br>FastImageCache - FastImageCache 网络图片获取及缓存处理，iOS图片加载速度极限优化—FastImageCache解析。<br>EGOCache - 十分知名的第三方缓存类库，可以缓存NSString、UIImage、NSImage以及NSData。除此，如果还可以缓存任何一个实现了接口的对象。所有缓存的数据都可以自定义过期的时间，默认是1天。EGOCache 支持多线程（thread-safe），UITableView加载多张照片导致内存上涨的问题。<br>　　网络聊天</p>\n<p>XMPPFramework - XMPPFramework openfire聊天。<br>SXTheQQ - 用xmppFramework框架编写QQ程序，主要为了练习通讯的一些原理，界面比较渣 必须要先在本地配置好环境才可以运行。<br>环信 - 给开发者更稳定IM云功能。8200万用户考验，好用！（暂无及时语音、视频通话）<br>融云 - 即时通讯云服务提供商。（暂无及时语音、视频通话）<br>容联云通讯 - 提供基于互联网通话,视频会议,呼叫中心/IVR,IM等通讯服务。<br>chatsecure - 基于XMPP的iphone、android加密式聊天软件， chatsecure官网 。 iOS代码1，iOS代码2， iOS中文版。<br>MessageDisplayKit - 仿微信聊天，参考JSQMessagesViewController。（国人写）<br>JSQMessagesViewController - 聊天 。<br>SunFlower - 环信聊天demo，比较多功能 。<br>BlueTalk蓝牙聊天 - 以MultipeerConnectivity为基础， 实现了简单的蓝牙聊天。<br>　　网络测试</p>\n<p>Reachability - 苹果提供过一个Reachability类，用于检测网络状态。但是该类由于年代久远，并不支持ARC。该项目旨在提供一个苹果的Reachability类的替代品，支持ARC和block的使用方式。iOS网络监测如何区分2、3、4G<br>SimpleCarrie - 简单的运营商信息获取!。<br>NetReachability - swift2.0 简单的方法检查网络连接的连通性，提供通知中心集成接口。<br>　　WebView</p>\n<p>MGTemplateEngine - MGTemplateEngine比较象 PHP 中的 Smarty、FreeMarker 和 Django的模版引擎，是一个轻量级的引擎，简单好用。只要设置很多不同的HMTL模版，就能轻松的实现一个View多种内容格式的显示，对于不熟悉HTML或者减轻 工作量而言，把这些工作让设计分担一下还是很好的，也比较容易实现设计想要的效果。<br>NJKWebViewProgress - 一个 UIWebView 的进度条接口库,UIWebView 本身是不提供进度条的。<br>GTMNSString-HTML - 谷歌开源的用于过滤HTML标签。<br>　　Model</p>\n<p>JSONKit - JSONKit库是非常简单易用而且效率又比较高的，重要的JSONKit适用于ios 5.0以下的版本,使用JSONKit库来解析json文件，只需要下载JSONKit.h 和JSONKit.m添加到工程中；然后加入libz.dylib即可。<br>JSONModel - 解析服务器返回的Json数据的库,JSONModel源码解析一。<br>Mantle - Mantle主要用来将JSON数据模型化为OC对象, 大系统中使用。为什么选择Mantle。<br>RFJModel - RFJModel是一个IOS类库，可以将JSON字典自动装填到OBJC对象。相比JSONModel有一些非常好的特性，使用上也比较简单。<br>XMLDictionary - ios与mac os平台下xml与NSDictionary相互转化开源类库。<br>MJExtension - 用于json转model进行使用，转换效率很高，使用也比较简单，只要前后台约定好，json直接就转成了model。<br>CFRuntime - “Swift 版的 MJExtension，运行时、反射与一键字典模型互转”。<br>DDModel - 快速搭建项目Model层，支持ORM映射关系，能从JSON/XML直接实例一个Model对象。支持SQLite本地数据持久化，封装了HTTP， 减少HTTP代码与UIViewController的代码耦合，支持Cache；类似RESTKit、Mantle的功能；使用该类库以后简化了网络层的开发工作，把更多的精力放在UI上面；目前只支持GET/POST方法的请求。使用到的第三方库有：1.SQLitePersistentObject; 2.JTObjectMapping; 3.AFNetworking; 4.XMLDictionary;<br>protobuf-swift - Protocol Buffers 的 Swift 语言实现库。P.S. Protocol Buffers 是 Google 开源项目，主要功能是实现直接序列化结构化的对象数据，方便跨平台快速传递，开发者也可以直接修改 protobuf 中的数据。相比 XML 和 JSON，protobuf 解析更快，存储更小。<br>JSONCodable - 基于 Swift 2.0 新特性（Protocol Extensions and Error Handling）的JSON 解析类。<br>SwiftyJSON - 使Swift的JSON解析变得简单。<br>　　其他</p>\n<p>DateTimeKit - 一个超赞的时间处理的库，Joda-Time ！ 他能帮你轻松处理时区，处理时间加减，计算到期时间等等场景下的问题。<br>SwiftDate - 特别完整、强大的日期时间操作管理类库。它几乎涵盖了已知开源日期类库所有优秀特性。 他能帮你轻松处理时区，处理时间加减，计算到期时间等等场景下的问题。<br>iOS私有API - 私有API，绿色 == public，红色 == private，蓝色 == dylib。<br>iOS源代码 - iOS源代码。<br>libfacedetection - C++ 人脸识别 包含正面和多视角人脸检测两个算法.优点:速度快(OpenCV haar+adaboost的2-3倍), 准确度高 (FDDB非公开类评测排名第二），能估计人脸角度。<br>Slidden - 一个老外开源的开发自定义键盘的库，利用这个开源库，可以方便的配置键位、颜色以及键位对应的图片。<br>TPKeyboardAvoiding - 用户键盘弹出自动计算高度，进行屏幕滚动操作。<br>CDPMonitorKeyboard - CDPMonitorKeyboard封装,可以解决输入视图(例如textField,textView等)被键盘覆盖问题，并可设置高于键盘多少。<br>自动监听键盘高度 - 自动监听键盘高度，初始界面，输入框在屏幕最下方，当键盘出现时，输入框随即移动到键盘上方。<br>SYKeyboardTextField - SYKeyboardTextField 是一个轻巧,简单,非侵入式的键盘附随输入框! 采用Swift编写。<br>BlocksKit - block框架，为 OC 常用类提供了强大的 Block 语法支持，使得编写 OC 代码变得舒适、快速、优雅。<br>KVOController - 在项目中有使用 KVO ，那么 KVOController 绝对是个好选择。它是 facebook 开源的一个 KVO 增强框架。<br>appirater - 用于提醒用户给你的 APP 打分的工具。<br>MotionKitr - 为核心运动框架（The Core Motion framework）提供友好的类库封装，以更方便使用三轴陀螺仪和加速感应器特性。<br>Review Monitor - 第一时间自动推送 Apple Store 的用户评论到你的邮件箱或者 Slack，第一时间跟进用户反馈，打造优秀 App 必备工具！类似的有：App annie 的类似功能。<br>WBWebViewConsole - 类似微博iPhone客户端的 “调试选项” 吗？把其中的 “内置浏览器网页调试” 开源在 Github 上了。<br>ios-good-practices - ios-good-practices iOS 开发最佳实践。<br>iOS开发最佳实践 - iOS 开发最佳实践 – 中文。<br>TodayExtensionSharingDefaults - TodayExtensionSharingDefaults是一个iOS 8 Today扩展示例，可以使用NSUserDefaults与其containing app分享数据。<br>QRCodeReader.swift - QRCodeReader.swift一款简单的 QR 二维码阅读组件及示例，提供前后相机切换功能。<br>QRCatcher - 一个简洁美观的二维码扫描应用， iOS学习：AVFoundation 视频流处理–二维码扫描。<br>Parsimmon - swift，小而美的语言学类库封装工具包。提供分词、标记词性、词形归并、朴素贝页斯分类、决策树等自然语言分析小工具。P.S. 英语分词效果好于中文，感兴趣的同学可以针对中文做一些优化开发。参考译文 NSHipster - NSLinguistic​Tagger。<br>Password-keyboard - 随机变换数字位置的密码键盘。 模仿银行类应用在付款时输入的随机密码键盘。<br>MKMapView-Extension - 这是关于 MKMapView 写的一个基于swift的扩展，可以扩展 MKMapView 的相关功能，减少复用代码量。<br>SemverKit - 针对符合『语义化版本规范 2.0.0』版本号的解析、比较运算类库。不仅支持 Major, Minor, Patch，还支持 Alpha 和 Beta 预发布版本，以及相应地递增运算扩展。<br>SwiftValidator - 基于规则的输入验证类库。项目良好的面向对象设计思想，使规则的扩展及自定义非常方便。更专业的规则引擎（甚至是基于自然语言的规则配置）解决方案，比如：开源的 Drools，商用的 ILOG 等。<br>Tesseract-OCR-iOS - 有关OCR文字识别项目。<br>Screenotate - 支持 OCR 文字识别的载屏笔记 Mac 完整应用。<br>iOS-Categories - 收集了许多有助于开发的iOS扩展,各种category。<br>Olla4iOS - 过去积累的一些方便复用的类和方法，还在整理中。<br>DKNightVersion - 用最快的方式给你的应用加上夜间和白天的切换效果。<br>TouchVisualizer - 实用的多点触摸可视化组件。扩展并作用于 UIWindows，结构上提供了简单地针对触摸显示定制，比如触摸点的颜色。<br>RegexKitLite - 用来处理正则表达式。<br>XcodeServerSDK - 非官方 Xcode Server SDK 封装库。 P.S. 该 SDK 分离自之前推荐的由该作者开发的自动测试框架 Buildasaur。<br>BFKit-Swift - BFKit-Swift 这套工具库可以提高应用开发效率。<br>CKSIncrementalStore - 基于 CloudKit 服务器实现多终端数据同步。<br>SwiftSequence - 简洁、灵活、多变的操作 SequenceType 的类库（基于微框架（μframework）设计思想）。<br>IDNFeedParser - 一个简单易用的Rss解析库。<br>CoreUmeng - 简单：友盟分享封装。<br>openshare - 不用官方SDK，利用社交软件移动客户端(微信/QQ/微博/人人/支付宝)分享/登录/支付。<br>Swifternalization - 一套实用的本地化工具库。使用教程及 API 文档完整。值得收入项目的“轮子”。<br>apous - 一款有趣的 Swift 应用 － 让 Swift 成为脚本语言。<br>Mirror - 通过反射（Refection）实现镜像对象封装库。从而可以更轻松获取（或输出）对象属性名、类型及值变量。<br>Proposer - Proposer 用单个 API 处理 iOS 上的权限请求，以便使用前确认可访问“相册”、“相机”、“麦克风”、“通讯录”或“用户位置”。<br>PermissionScope - 用这个库可以在询问用户前，就告知用户所需的系统权限，为用户带来更好的体验。接受度更高—&gt;更多活跃用户-&gt;更高的留存率-&gt;数据更好-&gt;下载率更高。<br>LocationManager - CoreLocation使用起来还是比较麻烦的，需要授权，判断系统版本等等，所以推荐使用第三方框架LocationManager，使用Block，十分简单！iOS-CoreLocation：无论你在哪里，我都要找到你！ 。<br>pangu.objective-c - 有多种语言实现版本～ Pangu.Objective-C：格式化中英文之间的空格（OC）。<br>objection - 一个轻量级的依赖注入框架Objection。<br>ControlOrientation - 如何用代码控制以不同屏幕方向打开新页面【iOS】， 使用说明。<br>iRate - 问卷调查。<br>GameCenterManager - 在iOS上管理GameCenter vanilla并不算难，但是有了这个库会更简单也更快。好上加好不是更好么。<br>SlackTextViewController - 用作极佳、定制的文本输入控制时，自适应文本区域，手势识别、自动填充、多媒体合并，快速drop-in解决方案。<br>IAPHelper - 应用内付费给我们提供了很多样本代码，而这个库丢掉了那些代码，将金钱交易相关的大多通用任务做了简单的封装。<br>TAPromotee - 交叉推广应用是你可以免费实现的最佳市场推广策略之一。使用这个库做起来非常简单，不用都不可能——将TAPromotee加入你的podfile中，免费配置与享受更多下载吧。<br>DownloadFontOnline - 实现了在线下载一些字体的功能，不用在工程中导入字体库，下载的字体也不会保存在你的应用中，所以可以放心使用。修复了一下崩溃的bug。<br>STClock - 仿锤子时钟。<br>GitUp - GitUp是一个可视化的Git客户端，能够实时的进行编辑、合并、回滚等多种操作，更多功能，请下载体验。<br>获取联系人信息，通讯录 - 获取联系人信息，通讯录。<br>Universal-Jump-ViewController - 根据规则跳转到指定的界面(runtime实用篇一)。<br>　　数据库</p>\n<p>FMDB - sqlite的工具， 多线程FMDatabaseQueue实例，FMDB数据库的使用演示和封装工具类。<br>GXDatabaseUtils - 在FMDB基础上的工具。<br>realm-cocoa - Realm是一个真正为移动设备打造的数据库，同时支持Objective-C和Swfit。Realm宣称其相比Sqlite，在移动设备上有着更好的性能表现,官方中文。<br>Breeze - 用Swift写的一个轻量级的CoreData管理工具，并且还支持iCloud 。<br>AlecrimCoreData - Swift，更容易地访问 CoreData 对象封装类库。除了 CRUD，还提供指针定位，强大的排序、筛选，异步数据获取，以及独立线程后台存取数据。<br>CoreStore - Core Data 管理类库。 其中事务管理及查询是其比较大的亮点，整套 API 功能完整。<br>MagicRecord<br>MagicalRecord - MagicalRecord就像是给Core Data提供了一层外包装，隐藏掉所有不相关的东西。 其中事务管理及查询是其比较大的亮点，整套 API 功能完整。<br>Presentation - 重量级好项目 Presentation，它可以方便你制作定制的动画式教程、Release Notes、个性化演讲稿等。<br>CoreValue - Swift 2 版 Core Data 封装库。相比另外两个 SwiftRecord和 CoreStore更轻量。<br>SQLCipher - SQLCipher使用256-bit AES加密，SQLCipher分为收费版本和免费版本。官方教程， 加密你的SQLite - 各种sqlite数据库加密介绍。 SQLCipherDemo下载 。<br>　　缓存处理</p>\n<p>YTKKeyValueStore - Key-Value存储工具类，说明。<br>TMCache - TMCache 是 Tumblr 开源的一个基于 key/value 的数据缓存类库,可以用于缓存一些临时数据或者需要频繁加载的数据,比如某些下载的数据或者一些临时处理结果。<br>JLKeychain - 快捷使用keychain存储数据的类，使keychain像NSUserDefaults一样工作。<br>sskeychain - SSKeyChains对苹果安全框架API进行了简单封装,支持对存储在钥匙串中密码、账户进行访问,包括读取、删除和设置。<br>KeychainAccess - 管理Keychain接入的小助手。<br>　　PDF</p>\n<p>Reader - Reader可提供类似iBooks的文档导航，支持屏幕旋转和所有方向，并通过密码保护加密PDF文件，支持PDF链接和旋转页面。<br>　　图像浏览及处理</p>\n<p>FLAnimatedImage - gif播放处理的工具。<br>CLImageEditor - 超强的图片编辑库，快速帮你实现旋转，防缩，滤镜等等一系列麻烦的事情。<br>ios-image-filters - 图像滤镜，库比较旧了，很容易崩溃。<br>XBImageFilters - 图像滤镜，。<br>VIPhotoView - 用于展示图片的工具类，因为是个 View，所以你可以放在任何地方显示。支持旋转，双击指定位置放大等。<br>MWPhotoBrowser - 一个非常不错的照片浏览器，在github的star接近3000个，解决MWPhotoBrowser中的SDWebImage加载大图导致的内存警告问题。<br>core-image-explorer - Core Image 滤镜处理图片– swift ，Core Image 介绍。<br>CoreImageShop - CoreImageShop图片滤镜处理– Mac app that let you create a complete Core Image Filter usable on iOS using SCRecorder。<br>GPUImage - 处理图片效果。<br>RSKImageCropper - 适用于iOS的图片裁剪器，类似Contacts app，可上下左右移动图片选取最合适的区域。<br>WZRecyclePhotoStackView - 删除照片交互–WZRecyclePhotoStackView，就是模拟生活中是删除或保留犹豫不决的情形而产生的。 在上滑，下滑的部分，借鉴了TinderSimpleSwipeCards。<br>TimingFunctionEditor - TimingFunctionEditor用swift编写， 贝塞尔曲线编辑器，编辑后可以预览或拷贝代码片段直接使用。P.S. 该项目采用更简单的依赖管理器 Carthage ，而非常用的 CocoaPods。Carthage介绍中文。<br>AAFaceDetection - AAFaceDetection–swift，简单、实用的面部识别封装库。虽然该技术从 iOS 5 发展，不过真正有趣的应用还不多。。<br>PhotoTweaks - 这个库挺赞的，正好是对图像操作的。<br>Concorde - swift, Concorde, 一个可用于下载和解码渐进式 JPEG 的库, 可用来改善应用的用户体验。<br>ZoomTransition - swift, 通过手势操控图片的放大、缩小、旋转等自由变化效果的组件及示例。<br>AFImageHelper - swift,一套针对 UIImage 和 UIImageView 的实用扩展库，功能包含填色和渐变、裁剪、缩放以及具有缓存机制的在线图片获取。<br>PinterestSwift - swift,Pinterest 风格图片缩放、切换示例。<br>KYElegantPhotoGallery - 一个优雅的图片浏览库。<br>SDCycleScrollView - 无限循环自动图片轮播器(一步设置即可使用)。<br>SDPhotoBrowser - 仿新浪动感图片浏览器,非常简单易用的图片浏览器，模仿微博图片浏览器动感效果，综合了图片展示和存储等多项功能。<br>HZPhotoBrowser - 一个类似于新浪微博图片浏览器的框架（支持显示和隐藏动画；支持双击缩放，手势放大缩小；支持图片存储；支持网络加载gif图片，长图滚动浏览；支持横竖屏显示）。<br>PhotoStackView-Swift - PhotoStackView——照片叠放视图，使用说明。<br>MarkingMenu - 基于手势、类似 Autodesk Maya 风格标记菜单及图片渲染。<br>SXPhotoShow - UICollectionViewFlowLayout流水布局 是当下collectionView中常用且普通的布局方式。本代码也写了三种好看的布局，其中LineLayout和流水布局有很大的相同点就直接继承UICollectionViewFlowLayout，然后StackLayout，CircleLayout这两种都是直接继承自最原始的UICollectionViewLayout 布局方案。<br>PictureWatermark - 主要实现了给图片加文字以及图片水印的功能，已封装成了UIImage的类别，方便使用。<br>CocoaPicker - 仿 QQ 图片选择器（OC）。<br>自定义宽高比的相册框 拍照 - 取出照片时 弹出自定义view。在这个自定义view上创建一个需要的相框大小的view层 把取出的图片赋值给UIImageView按缩放添加到这个层上。对uiimageView添加捏合、移动 手势。添加按钮 选取，最后根据位移和缩放比例 裁剪image。<br>　摄像照相视频音频处理</p>\n<p>SCRecorder - SCRecorder 短视频录制。<br>VideoPushDemo - 视频剪辑 视频特效制作1 视频特效制作2。<br>LLSimpleCamera - A simple, customizable camera control for iOS， 摄像头。<br>EZAudio - EZAudio 是一个 iOS 和 OSX 上简单易用的音频框架，根据音量实时显示波形图，基于Core Audio，适合实时低延迟音频处理，非常直观。中文介绍,官网。<br>ffmpeg - ffmpeg官网，FFmpeg在iOS上完美编译。<br>VCL - VCL官网。<br>kxmovie - 使用ffmpeg的影片播放器，修改说明， 修改代码。<br>ijkplayer - B站开源的视频播放器，支持Android和iOS。<br>StreamingKit - StreamingKit流媒体音乐播放器。<br>FreeStreamer - FreeStreamer流媒体音乐播放器，cpu占用非常小。<br>DOUAudioStreamer - DOUAudioStreamer豆瓣的音乐流媒体播放器。<br>fmpro - 电台播放器，支持锁屏歌词，支持基本播放流程，歌词展示，后台锁屏播放和控制以及锁屏后封面+歌词，fmpro_R 。<br>IPDFCameraViewController - 支持相机定焦拍摄、滤镜、闪光、实时边框检测以及透视矫正功能，并有简单易用的API。<br>SCRecorder - 酷似 Instagram/Vine 的音频/视频摄像记录器，以 Objective-C 为基础的过滤器框架。 你可以做很多如下的操作：记录多个视频录像片段。删除任何你不想要的记录段。可以使用任何视频播放器播放片段。保存的记录可以在序列化的 NSDictionary 中使用。（在 NSUserDefaults 的中操作）添加使用 Core Image 的视频滤波器。可自由选择你需要的 parameters 合并和导出视频。<br>Cool-iOS-Camera - Cool-iOS-Camera。<br>FastttCamera - FastttCamera 快速照相。<br>ICGVideoTrimmer - ICGVideoTrimmer提供提供视频剪切的视图（类似系统相册中浏览视频时顶部那个条状视图）。左右两个边界选择器还能够自定义。<br>IOS录音和播放功能demo - 比较完整的ios录音和播放功能的实现。<br>CameraManager - 相机管理封装类库。看着极好用的样子—-swift。<br>MCAudioInputQueue - 简易录音类，基于AudioQueue的。<br>DraggableYoutubeFloatingVideo - 展示像类似Youtube移动应用的那种浏览视频的效果，当点击某视频时能够从右下方弹出一个界面，并且该界面能够通过手势，再次收缩在右下方并继续播放。这是通过AutoLayout设计实现。<br>amr - 做即时通讯的音频处理，录音文件是m4a，便于web端的音频播放。<br>FSVoiceBubble - 一个轻量级播放录音音频的气泡：1.支持短时间的音频播放（支持网络音频）；2.播放时的声波动画；3.自定义包括声波的颜色，气泡的背景等。<br>KRVideoPlayer - 类似Weico的播放器，支持竖屏模式下全屏播放。<br>VideoBeautify - 功能酷似美拍,秒拍等应用的源码：对视频进行各种美化处理，采用主题形式进行分类，内含各种滤镜，动画特效和音效等。<br>　响应式框架</p>\n<p>ReactiveCocoa - ReactiveCocoa 受函数响应式编程激发。不同于使用可变的变量替换和就地修改，RAC提供Signals来捕获当前值和将来值（ 使用介绍 ），不错的例子,入门好教程：ReactiveCocoa入门教程：第一部分 。Reactive Cocoa 3.0 在 MVVM 中的应用 。<br>ReactiveAnimation - ReactiveCocoa 推出了一个叫 ReactiveAnimation 的子项目，直接用完全用 Swift 来实现了。<br>BeeFramework - 与ReactiveCocoa类似，BeeFramework用户指南 v1.0。<br>Objective-Chain - Objective-Chain是一个面向对象的响应式框架，作者表示该框架吸收了 ReactiveCocoa 的思想，并且想做得更面向对象一些。<br>　消息相关</p>\n<p>　　消息推送客户端</p>\n<p>SGPushDemo - 消息推送客户端<br>Orbiter - 消息推送客户端:Push Notification Registration for iOS.<br>PushDemo - 客户端消息接收消息代码，IOS开发之 —- IOS8推送消息注册 ， 分分钟搞定IOS远程消息推送。<br>　　消息推送服务端</p>\n<p>javapns源代码 - 消息推送的java服务端代码，注意：DeviceToken中间不能有空格。<br>pushMeBaby - Mac端消息推送端代码，注意：DeviceToken中间要有空格。<br>　　通知相关</p>\n<p>JSQNotificationObserverKit - 一款轻量、易用的通知发送及响应框架类库。作者是知名开源项目 JSQMessagesViewController（Objective-C 版即时聊天）的作者 Jesse Squires.<br>GLPubSub - 一个简短实用的 NSNotificationCenter 的封装。<br>Homeoff - 用swift写了一个模仿Launcher通知中心快捷方式的应用。支持20个应用，并增加了一个返回到桌面来解放Home键的功能。<br>JDStatusBarNotification - 在状态栏顶部显示通知。可以自定义颜色字体以及动画。支持进度显示以及显示状态指示器。<br>　版本新API的Demo</p>\n<p>appleSample - iOS 苹果官方Demo合集， 官方demo.<br>iOS7-Sampler - 整合了iOS7.0的一些十分有用的特性，比如：Dynamic Behaviors、碰撞检测、语音合成、视图切换、图像滤镜、三维地图、Sprite Kit（动画精灵）、Motion Effect（Parallax）、附近蓝牙或者wifi搜索连接、AirDrop、运动物体追踪（iPhone 5S以上，需要M7处理器）等等。对于日常的应用开发十分实用。<br>iOS8-Sampler - 日本的shuさん制作的 iOS8 参考代码集。01.Audio Effects ；02.New Image Filters；03.Custom Filters；04.Metal Basic；05.Metal Uniform Streaming；06.SceneKit；07.HealthKit；08.TouchID；09.Visual Effects；10.WebKit；11.UIAlertController；12.User Notification；13.Pedometer；14.AVKit；15.Histogram；16.Code Generator；17.New Fonts；18.Popover；19.Accordion Fold Transition<br>iOS-9-Sampler - 通过实例介绍了iOS 9 SDK中重要新特性的使用。<br>MTSwift-Learning - 通过一些简单项目实战演练开始学习 Swift 。<br>iOS8-day-by-day - swift。<br>iOS9-day-by-day - swfit iOS9 Day-by-Day :: Day 2 :: UI Testing。<br>iOS 9 分屏多任务 - iOS 9 分屏多任务：Slide Over &amp; Split View快速入门（中文版）。<br>　代码安全与密码</p>\n<p>ios-class-guard - 一个用于混淆iOS的类名、方法名以及变量名的开源库–有人反映编译出来的app运行不了。<br>《Protecting iOS Applications》：文章系统地介绍了如何保护iOS程序的代码安全，防止反汇编分析。<br>fishhook - fishhook是Facebook开源的一个可以hook系统方法的工具。<br>GesturePassword - 一个iOS手势密码功能实现，iPad/iPhone 都可以用，没有使用图片，里面可以通过view自己添加。keychain做的数据持久化，利用苹果官方KeychainItemWrapper类。操作部分都在controller了。删除直接用一下clear。<br>JMPasswordView - 简单实用的手势密码，效果可自行调控。<br>仿密码锁-九宫格 - 仿密码锁-九宫格，主要是使用UIButton 手势事件 UIBezierPath画图，解锁失败弹出“密码错误”。<br>CoreLock - 本框架是高仿支付宝，并集成了所有功能，并非一个简单的解锁界面展示。个人制作用时1周多，打造解锁终结者框架。<br>LikeAlipayLockCodeView - 高仿支付宝手势解锁（超级版）。<br>PCGestureUnlock - 目前最全面最高仿支付宝的手势解锁，而且提供方法进行参数修改，能解决项目开发中所有手势解锁的开发。<br>ICPayPassWordDemo - CPayPassWordDemo，一个模仿支付宝支付密码输入对话框小demo。<br>RSAESCryptor - 加密 RSA+AES Encryption/Decryption library for iOS. This library uses 2048-bit RSA and 256-bit key with 128-bit block size AES for encryption/decryption。<br>　测试及调试</p>\n<p>HeapInspector - HeapInspector是一个用于检测应用中的内存泄漏的开源调试工具。<br>Crashlytics - Crashlytics 崩溃报告 崩溃日志 使用说明 。<br>UIViewController-Swizzled - 把你进入的每一个controller的类名打出来,如果看一些特别复杂的项目的时候直接运行demo就可以知道执行次序了。<br>snoop-it - snoop-it比UIViewController-Swizzled好用，代码托管在google上。<br>Versions - 版本比较小工具。<br>MobileWebPageTest - MobileWebPageTest是用来测试移动网页性能的软件，它可以对页面的加载和渲染过程进行截屏，协助开发者分析出页面性能瓶颈。<br>KKLog - 一个日志管理系统。<br>CleanroomLogger - 相当于 CocoaLumberjack 或 Log4j 的 Swift 版本，功能上甚至更强大。另外，源代码中已经内含了完整的 API 文档，使用非常方便。 Buildasaur - 自动测试框架 Buildasaur。 MMPlaceHolder - 一行代码显示UIView的位置及相关参数。 使用Quick框架和Nimble来测试ViewControler - Quick是一个用于创建BDD测试的框架。配合Nimbl，可以为你创建更符合预期目标的测试。<br>fastlane - 一套iOS开发和持续集成的命令行工具fastlane，可以用来快速搭建CI甚至自动提交的开发环境。这套工具中包括了上传ipa文件，自动截取多语言截屏，生成推送证书，管理产品证书等一系列实用工具。<br>KIF - 是一个开源的用户界面UI测试框架. 使用 KIF, 并利用 iOS中的辅助功能 API, 你将能够编写模拟用户输入，诸如点击，触摸和文本输入，自动化的UI测试.<br>Quick - 用于Swift中的单元测试（也可用于Objective-C），与Xcode整合在一起。如果你是Objective-C的粉丝，我建议用Specta代替这个，但是对Swift使用者来说，Quick是最佳选择。<br>Sleipnir - Swift的测试框架。<br>kiwi-bdd - TDD或BDD，objective-c语言的测试框架，最流行的BDD测试框架了，Kiwi最受欢迎（根据github上的star数来推断，行为描述和期望写起来也比较易懂，至少我是这么认为的） iOS开发中的测试框架。<br>specta - TDD或BDD，objective-c语言的测试框架，用的人多。<br>cedar - TDD或BDD，objective-c语言的测试框架，用的人少。<br>　AppleWatch</p>\n<p>Tesla汽车AppleWatch app demo演示 - 通过AppleWatch控制特斯拉汽车，同时可以看到汽车的相关信息，比如剩余电量、可续行里程等，以及解锁/上锁车门、调节司机和乘客的四区域空调温度、开启车辆大灯、定位汽车等。源码推荐说明。<br>WatchKit-Apps - WatchKit 开源小项目示例集锦。是不可多得地学习 WatchKit 的示例式教程（1.如何创建一个简单的交互式计数器；2.如何从手表上控制iOS app；3.如何在WatchKit app和iOS app之间共享数据；4.如何创建一个拥有不同背景色的数字时钟；5.展示不同的UI层；6.如何创建支持滑动手势的应用程序。）。<br>KYVoiceCurve - 类似Apple Watch中语音的声音曲线动画。<br>IGInterfaceDataTable - IGInterfaceDataTable是WKInterfaceTable对象的一个类别，可以让开发者更简单地配置多维数据。该项目使用类似UITableViewDataSource的数据源模式配置Apple Watch表格，而不是将数据结构扁平化成为数组。<br>Apple Watch开发教程资料汇总 - Apple Watch开发教程资料汇总。<br>Stargate - 通过 iPhone 桥接实现 Mac 与 Watch 的即时通讯。Stargate 通过封装两个优秀的基础类库 MMWormhole 和 PeerKit 实现高效的通讯应用。–swift<br>soon - 一款倒计时 WatchKit 示例应用。作者从架构的角度，思考如何设计一款完整、通讯高效且性能又好的 WatchKit 扩展应用。该示例学习性非常强。–swift<br>watchOS-2-Sampler - 基于 watchOS 2 若干新特性，写了相应的示例代码供大家学习、参考。<br>HMWatch - HMWatch是个有待完善的watchOS 2.0 HomeKit 应用示例。<br>CocoaMultipeer - CocoaMultipeer这个开源框架支持OS X, iOS和watchOS设备间的点对点通信，解决watchOS和Mac之间通信的方案还是很有用的。<br>HighstreetWatchApp - 是电商平台Highstreet针对App Watch的一款应用，该demo中加载的是虚拟数据。<br>NKWatchChart - NKWatchChart是一个基于PNChart专门为Apple Watch 开发的图表库,目前支持 line, bar, pie, circle 和 radar 等 图表形式。<br>　VPN</p>\n<p>vpnon - swift的VPN On 的源码和本地化内容都是开放的: 官方网站。<br>Hydro.network - Hydro.network 的开发旅程, gitcafe。<br>　完整项目</p>\n<p>v2ex - v2ex 的客户端，新闻、论坛。<br>apps-ios-wikipedia - apps-ios-wikipedia 客户端。<br>jetstream-ios - 一款 Uber 的 MVC 框架。它同时提供了多用户实时通讯支持，一旦启动 JetStream 后端服务，通过 WebSocket 协议可以分分钟建立多用户实时通讯应用。<br>DeckRocket - 在相同 WiFi 网络环境内，通过iPhone 控制并播放 Mac 中的 PDF 文档。<br>ScanBook - 扫扫图书:可以扫描条形码查询图书，也可以关键字搜索，遇到合乎你口味的书，还可以看看别人的读书笔记，不同角度去体会。<br>DesignerNewsApp - Swift 开发的 DesignerNews 客户端，看着美美的！<br>KYWeibo - 调用新浪API自己写的第三方微博客户端。<br>DouQu_IOS - 逗趣IOS手机端（一款笑话软件）,拥有完整的功能的手机应用app 。<br>IT江湖iOS客户端 - IT江湖iOS客户端。<br>Eidolon - 艺术品拍卖的投标亭平台，用swift与反应式编程框架 ReactiveCocoa。<br>CrazyPuzzle - 模仿“看图猜成语”App，功能齐全，配有音效，效果很不错。游戏使用cocoa框架完成，没有使用cocos2d的框架。<br>WhoCall - 谁CALL我，iOS来电信息语音提醒，无需越狱。（需要iOS 7.0及以上版本。)骚扰电话预警、来电归属地提醒、联系人姓名播报，这些有中国特色人性化的电话功能，iOS上也应该有。电话提醒、私有API。<br>仿iOS猎豹垃圾清理(实现原理+源码) - 仿iOS猎豹垃圾清理(实现原理+源码),用到私有API。<br>DSLolita - 模仿新浪微博做的一款app，有发送博文，评论，点赞，私聊功能。<br>GSD_ZHIFUBAO - 支付宝高仿版。<br>Tropos - Tropos, 由 thoughtbot 推出的一款用 Objective-C 写的开源天气类应用, 截至今天, thoughtbot 已在 GitHub 上贡献了 174 个开源项目, 实在令人敬佩。<br>SmileWeather -开源天气类应用,天气图标很完整。<br>MVVMReactiveCocoa - GitBucket 2.0 通过审核啦，她是我在公司实践了一年多 MVVM 和 RAC 的基础上，利用业余时间开发的第三方 GitHub 客户端，旨在能够对想实践 MVVM 和 RAC 的 iOS 开发者有所帮助。AppStore地址，欢迎下载使用GitBucket和收藏MVVMReactiveCocoa。<br>Tomate - 这个圆盘式计时器让你更专注于工作或学习。P.S. App Store 上架收费应用（0.99 欧）。<br>StoveFireiOSMenu - 炉火餐饮系统iPad点餐端。<br>BaiduFM-Swift - 百度FM, swift语言实现，基于最新xcode6.3+swift1.2,初步只是为了实现功能，代码比较粗燥，后面有时间会整理，支持Apple Watch。<br>WNXHuntForCity - iOS高仿城觅项目（开发思路和代码）。<br>ZYChat - 关于聊天界面的可消息类型扩展，响应绑定设计。<br>NiceAppDemo - 仿最美应用-每日最美的钢琴律动效果。<br>meituan - 美团5.7iOS版（高仿），功能包括，团购首页，高德地图搜索附近美食并显示在地图上，上门服务，商家，友盟分享。<br>chuanke - 高仿百度传课iOS版。<br>Tuan - 模仿MJ老师iPad版美团（swift版），偶有bug 见谅。<br>SXNews - 模仿网易新闻做的新闻软件，完成了主导航页，新闻详情页，图片浏览页，评论页。效果不错，比网上流传的各种和网易新闻UI架构有关的代码都要完整，都要好。<br>Monkey - Monkey for GitHub是一个GitHub开发者和仓库排名的开源App。这次主要增加了登录GitHub的功能，随手follow和star，并且增加发现模块，包括GitHub的trending，动态，showcases等。<br>Uther - 跟蠢萌的外星人聊天，还能帮你记事”。itunes下载 。<br>　好的文章</p>\n<p>自定义转场动画 - 3 种方法～ 关于自定义转场动画。<br>iOS提高效率的方法和工具 - iOS提高效率的方法和工具。<br>用 JSON 构建 API 的标准指南 - 用 JSON 构建 API 的标准指南。<br>　Xcode插件</p>\n<p>iOS开发进阶，从Xcode开始 - 学习使用Xcode构建出色的应用程序！<br>在Xcode启动的时候，Xcode将会寻找位于~/Library/Application Support/Developer/Shared/Xcode/Plug-ins文件夹中的后缀名为.xcplugin的bundle作为插件进行加载（运行其中的可执行文件）。Xcode5 Plugins 开发简介 写个自己的Xcode4插件</p>\n<p>Xcode 4 插件制作入门 - Xcode 4 插件制作入门:Xcode所使用的所有库都包含在Xcode.app/Contents/的Frameworks，SharedFrameworks和OtherFrameworks三个文件夹下。其中和Xcode关系最为直接以及最为重要的是Frameworks中的IDEKit和IDEFoundation，以及SharedFrameworks中的DVTKit和DVTFoundation四个。</p>\n<p>RTImageAssets - 一个 Xcode 插件，用来生成 @3x 的图片资源对应的 @2x 和 @1x 版本。Asset Catalog Creator 功能强大，能自动生成全部尺寸：包括App Icons、Image Sets、Launch Screens Generator。</p>\n<p>VVDocumenter-Xcode - 一个Xcode插件，build后，随手打开一个你之前的项目，然后在任意一个方法上面连按三下”/“键盘，就ok了。</p>\n<p>Reveal-Plugin-for-XCode - 一个Reveal插件，可以使工程不作任何修改的情况下使用Reveal，该插件已在Alcatraz上架。Reveal：分析iOS UI的利器 。</p>\n<p>java2Objective-c - Google公司出得java转Obje-C转换工具，转换逻辑，不转换UI。</p>\n<p>RegX - 专治代码强迫症的 Xcode 插件，使用 Swift 和 Objective-C 编写。其用竖向对齐特定源代码的元素，使得代码更易读和易理解。说明 ； 菜单：xcode——》Edit-》Regx 。</p>\n<p>KSImageNamed - 自动完成，特别是如果你正在写Objective-C，如果Xcode能自动完成文件名难道不会很伟大吗？比如图像文件的名称。</p>\n<p>FuzzyAutocomplete - Xcode的实现自动完成还不完美，此插件能给出你所期望或想要的建议，设置：xcode-》Editor-》FuzzyAutocomplete-》plugin settings。</p>\n<p>GitDiff - Xcode的代码编辑器的一个微妙的补强，加上了足够的可见信息以了解上次git提交以来发生了什么变化，设置：xcode-》Edit-》GitDiff。</p>\n<p>XToDo - 这个插件不仅凸显TODO，FIXME，???，以及！！！注释，也在便利列表呈现他们。 菜单：xcode-》view-》snippets; 调出列表显示: xcode-》view-》ToDo List ： ctrl + T 。</p>\n<p>Backlight - 突出显示当前正在编辑的行。菜单：xcode-》view-》Backlight 。</p>\n<p>CocoaPods - 该CocoaPods的插件增加了一个CocoaPods菜单到Xcode的产品菜单。如果你不喜欢命令行，那么你一定会喜欢这个插件。 用CocoaPods做iOS程序的依赖管理 。</p>\n<p>Peckham - 添加import语句比较麻烦，此插件 按Command-Control-P，给出的选项列表中选择要的头文件。先要安装Alcatraz ,在终端输入： curl -fsSL <a href=\"https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh\" target=\"_blank\" rel=\"noopener\">https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh</a> | sh ； 重启xcode-》window-》Package Manager：搜索 Peckham 安装，打开Peckham.xcodeproj，编译 Peckham target，重启Xcode 。</p>\n<p>Auto-Importer - Auto-Importer是一个自动导入类对应的头文件的Xcode插件。</p>\n<p>Alcatraz -使用Alcatraz来管理Xcode插件 使用说明 。</p>\n<p>KSHObjcUML -KSHObjcUML 是一个 Objective-C 类引用关系图的 Xcode 插件。</p>\n<p>ColorSense-for-Xcode - 颜色插件，安装之后，就不用根据RGB选择颜色，直接从取色板中取颜色，会自动补齐RGB代码。。</p>\n<p>10款提高iOS开发效率的XCode插件 - 10款提高iOS开发效率的XCode插件：1. XcodeColors；5. ACCodeSnippetRepository；10. Dash for Xcode。</p>\n<p>ZLGotoSandboxPlugin - 支持Xcode快捷键了跳转当前应用沙盒了！快捷键是 Shift+Common+w。</p>\n<p>XcodeSwiftSnippets - XcodeSwiftSnippets, 提供了很多可在 Xcode 上使用的 Swift 代码片段, 通过自动补全的方式极大的提高了开发效率， 另外还有 Objective-C 版的。</p>\n<p>CoPilot - 通过此插件， Xcode 可以协同编程了（采用 WebSocket 通讯）。如此强大的“黑工具”，不爱它能行吗。</p>\n<p>ESJsonFormat-Xcode - 将Json格式化输出为模型的属性。<br>SCXcodeMiniMap - Xcode迷你小地图-SCXcodeMiniMap。<br>xTransCodelation - XCODE中英文翻译插件，提供API查询模式和网页模式，都是利用的百度翻译。另外集成了一个可以一键关闭其他所有APP的实用功能，方便开发者！<br>　美工资源</p>\n<p>TWG_Retina_Icons - 一套支持 Retina 高清屏的 iPhone 免费图标集。<br>ASCIImage - 使用 NSString 创建 image，说明。<br>my-sketch-colors - 配色。<br>Font Awesome - Font Awesome：一套绝佳的图标字体库和CSS框架，详细的安装方法请参考官方网站中文网站,GitHub地址 。<br>DynamicColor - 强大的颜色操作扩展类。通过该类，你可以通过扩展方法基于某个颜色得到不同深浅、饱和度、灰度、色相，以及反转后的新颜色。是不可多得的好类库。<br>Chameleon - Chameleon是一个iOS的色彩框架。它运用现代化flat color将UIColor扩展地非常美观。我们还可以通过它运用自定义颜色创建调色板。它还有很多功用，请浏览readme。<br>FontBlaster - 载入定制字体时更简单。<br>　其他资源</p>\n<p>githuber - 最好用的GitHub人才搜索工具。<br>codatlas - 源代码搜索利器。<br>searchcode - 源代码搜索利器：来自悉尼的代码搜索引擎汇聚了 Github, Bitbucket, Sourceforge…等多家开源站点超20万个项目、180亿行源代码，能以特殊字符、语言、仓库和源方式从90多种语言找到函数、API的真实代码。<br>kitematic - Mac 上使用 Docker 最简单的方案。<br>　开发资源</p>\n<p>　　开发资料</p>\n<p>豆瓣iOS开源库列表 - 豆瓣iOS开源库列表，很多开源项目。<br>iOS-Core-Animation-Advanced-Techniques - 中文版iOS 高级动画技术。<br>iOS开发的一些奇巧淫技1 - TableView不显示没内容的Cell怎么办; 键盘事件：IQKeyboardManager; app不流畅:KMCGeigerCounter; CoreData用起来好烦:MagicalRecord; CollectionView实现悬停的header:CSStickyHeaderFlowLayout。<br>iOS开发的一些奇巧淫技2 - 用一个pan手势来代替UISwipegesture的各个方向、拉伸图片、播放GIF、上拉刷新、把tableview里cell的小对勾的颜色改变、navigationbar弄成透明的而不是带模糊的效果、改变uitextfield placeholder的颜色和位置。<br>cocoapods安装指南 - cocoapods安装指南。<br>RemoteControl - Control your iPhone from inside Xcode for end-to-end testing 。<br>MVVM 介绍 - 替换MVC的开发模式。<br>第三方接口 - 基本所有第三方接口都在这，再也不用那么麻烦去找了。</p>\n<p>提高iOS开发效率的方法和工具 - 提高iOS开发效率的方法和工具。</p>\n<p>禅与 Objective-C 编程艺术 - 禅与 Objective-C 编程艺术 （Zen and the Art of the Objective-C Craftsmanship 中文翻译）。<br>Objective-C编码规范：26个方面解决iOS开发问题 - 【Objective-C编码规范：26个方面解决iOS开发问题：“我们制定Objective-C编码规范的原因是我们能够在我们的书，教程和初学者工具包的代码保持优雅和一致。”今天分享的规范来自raywenderlich.com团队成员共同完成的，希望对学习OC的朋友们有所指导和帮助。<br>　　swift</p>\n<p>Swift中文指南 - 中文版Apple官方Swift教程《The Swift Programming Language》，老码版本 历史版本更新说明。<br>The Swift Programming Language 中文版 - The Swift Programming Language 中文版。<br>swifttoolbox - swifttoolbox swift开发的开源库汇总。<br>SwiftGuide - 这份指南汇集了Swift语言主流学习资源，并以开发者的视角整理编排– 非常不错，值得推荐。<br>Swift开源项目精选 - Swift开源项目精选–推荐，每周都有更新。<br>Awesome Swift - 一个收集了很多 Swift 开发资源的网站。<br>Developing_iOS_8_Apps_With_Swift - Developing iOS 8 Apps with Swift 字幕简体中文翻译项目（斯坦福白胡子老头swift教学视频）。<br>Swift-On-iOS - JohnLui 的 Swift On iOS 代码仓库。<br>　　他人开源总结</p>\n<p>code4app - 最多国人用的代码库。<br>cocoachina - 国内最热门的iOS社区的代码库。<br>awesome-ios - 一个老外整理的，中文版。<br>awesome-ios-ui - 收集了不少 iOS UI/UX 库, 包含了很多酷炫的动画效果。<br>ios-cosmos - The iOS Cosmos：收录了IOS绝大部分的开源框架和工具。<br>Awesome Haskell资料大全 - Awesome Haskell 资料大全：框架，库和软件。<br>Cosmos - The iOS Cosmos：收录了IOS绝大部分的开源框架和工具。<br>cocoacontrols - 收集了很多UI控件效果代码，缺点是需要翻墙，而且代码分类不够好。<br>lexrus - lexrus国内出名的iOS开源coder，非常库的label动画、textfield动画。<br>open-source-ios-apps - iOS App集合，分：swift与Objective-C–国外人整理。</p>\n<p>适合iOS开发者的15大网站推荐 - 适合 iOS 开发者的 15 大网站推荐 — 英文网站。</p>\n<p>Objective-C GitHub 排名前 100 项目简介 - 主要对当前 GitHub 排名前 100 的项目做一个简单的简介, 方便初学者快速了解到当前 Objective-C 在 GitHub 的情况。</p>\n<p>Github-iOS备忘 -整理了比较常用的iOS第三方组件，以及github上的统计。</p>"},{"title":"别人总结的开源项目和库","date":"2016-07-21T03:52:34.000Z","_content":"# 吃水不忘挖井人[原文地址](https://github.com/Tim9Liu9/TimLiu-iOS#%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0)\n\n> 想那些辛勤的收集者表示感谢！\n========\n自己总结的iOS、mac开源项目及库，持续更新。。。。\ngithub排名 [https://github.com/trending](https://github.com/trending),github搜索：[https://github.com/search](https://github.com/search)\n\n###  目录\n- [UI](#UI)\n    - [下拉刷新](#下拉刷新)\n    - [模糊效果](#模糊效果)\n    - [AutoLayout](#AutoLayout)\n    - [富文本](#富文本)\n    - [图表](#图表)\n    - [表相关与Tabbar](#表相关与Tabbar) \n    - [隐藏与显示](#隐藏与显示)\n    - [HUD与Toast](#HUD与Toast)\n    - [对话框](#对话框)\n    - [其他UI](#其他UI)\n- [动画](#动画)\n    - [侧滑与右滑返回手势](#侧滑与右滑返回手势)\n    - [gif动画](#gif动画)\n    - [其他动画](#其他动画)\n- [网络相关](#网络相关)\n    - [网络连接](#网络连接)\n    - [图像获取](#图像获取)\n    - [网络聊天](#网络聊天)\n    - [网络测试](#网络测试)\n    - [WebView](#WebView)\n- [Model](#Model)\n- [通讯录](#通讯录)\n- [其他](#其他)\n- [数据库](#数据库)\n- [缓存处理](#缓存处理)\n- [PDF](#PDF)\n- [图像浏览及处理](#图像浏览及处理)\n- [摄像照相视频音频处理](#摄像照相视频音频处理)\n- [响应式框架](#响应式框架)\n- [消息相关](#消息相关)\n    - [消息推送客户端](#消息推送客户端)\n    - [消息推送服务器端](#消息推送服务器端)\n    - [通知相关](#通知相关)\n- [版本新API的Demo](#版本新API的Demo)\n- [代码安全与密码](#代码安全与密码)\n- [测试及调试](#测试及调试)\n- [AppleWatch](#AppleWatch)\n- [完整项目](#完整项目)\n- [好的文章](#好的文章)\n- [VPN](#VPN)\n- [Xcode插件](#Xcode插件)\n- [美工资源](#美工资源)\n- [开发资源](#开发资源)\n    - [开发资料](#开发资料)\n    - [swift](#swift)\n    - [他人开源总结](#他人开源总结)\n    - [开发博客列表](#开发博客列表)\n\n========\n\n<!--more-->\n\n### 具体内容 \n#### UI\n##### 下拉刷新\n * [EGOTableViewPullRefresh](https://github.com/enormego/EGOTableViewPullRefresh) - 最早的下拉刷新控件。\n * [SVPullToRefresh](https://github.com/samvermette/SVPullToRefresh) - 下拉刷新控件。 \n * [MJRefresh](https://github.com/CoderMJLee/MJRefresh) - 仅需一行代码就可以为UITableView或者CollectionView加上下拉刷新或者上拉刷新功能。可以自定义上下拉刷新的文字说明。具体使用看“使用方法”。 （国人写）\n * [XHRefreshControl](https://github.com/xhzengAIB/XHRefreshControl) - XHRefreshControl 是一款高扩展性、低耦合度的下拉刷新、上提加载更多的组件。（国人写）\n * [CBStoreHouseRefreshControl](https://github.com/coolbeet/CBStoreHouseRefreshControl) - 一个效果很酷炫的下拉刷新控件。\n * [BreakOutToRefresh](https://github.com/dasdom/BreakOutToRefresh) - 一个下拉刷新打砖块的开源 Swift 库，能让用户在等待下拉刷新的时候边玩撞球游戏边等待。\n * [KYJellyPullToRefresh](https://github.com/KittenYang/KYJellyPullToRefresh) - 实现弹性物理效果的下拉刷新，神奇的贝塞尔曲线，配合UIDynamic写的一个拟物的下拉刷新动画。\n * [MHYahooParallaxView](https://github.com/michaelhenry/MHYahooParallaxView) - 类似于Yahoo Weather和News Digest首屏的视差滚动。 \n * [SDRefreshView](https://github.com/gsdios/SDRefreshView) - 简单易用的上拉和下拉刷新（多版本细节适配）。\n * [ZLSwiftRefresh](https://github.com/MakeZL/ZLSwiftRefresh) - swift下拉刷新/上拉加载更多，支持自定义动画，集成简单，兼容UITableView/CollectionView/ScrollView/WebView。\n * [BreakOutToRefresh](https://github.com/dasdom/BreakOutToRefresh) - swift，上拉和下拉刷新。\n * [GearRefreshControl](https://github.com/andreamazz/GearRefreshControl) -  swift，上拉和下拉刷新。\n * [refresher](https://github.com/jcavar/refresher) -  swift，上拉和下拉刷新。\n * [可展开/收缩的下拉菜单--SvpplyTable](http://d.cocoachina.com/code/detail/237753) -  一个可展开可收缩的下拉菜单，类似Svpply app。\n * [ODRefreshControl](https://github.com/Sephiroth87/ODRefreshControl) - 原iOS6上的橡皮糖刷新样式，很有意思。现在也很多大的 App 在用，比如虾米音乐和 QQ 客户端。\n * [PullToMakeSoup](https://github.com/Yalantis/PullToMakeSoup) - PullToMakeSoup, 自定义下拉刷新的动画效果：煮饭, Yalantis新作！\n * [TwitterCover](https://github.com/cyndibaby905/TwitterCover) -  Twitter iOS客户端的下拉封面模糊效果。\n * [Replace-iOS](https://github.com/MartinRGB/Replace-iOS) - Replace-iOS 让人眼前一亮的下拉刷新（iOS）。\n * [Animations](https://github.com/KittenYang/Animations) - 封装了一下，使用的时候只要两行代码。一些动画的飞机稿，都是一些单独分离出来的用于测试的子动画，现在统一归类一下。\n * [PullToBounce](https://github.com/entotsu/PullToBounce) - 下拉刷新的动画 for UIScrollView。\n * [WaterDropRefresh](https://github.com/li6185377/WaterDropRefresh) - 仿Path 水滴的下拉刷新效果 还有视差滚动。\n * [ESRefreshControl](https://github.com/EnjoySR/ESRefreshControl) - 仿新浪微博、百度外卖、网易新闻下拉刷新样式Demo（仅供参考）。\n * [WaveRefresh](https://github.com/alienjun/WaveRefresh) - 下拉刷新水波纹动画。\n * [DGElasticPullToRefresh](https://github.com/gontovnik/DGElasticPullToRefresh) - 是一款带有弹性效果的 iOS 下拉刷新组件。\n * [CALayerAnimationDemoh](https://github.com/wuwen1030/CALayerAnimationDemoh) - 双向注水动画下拉刷新组件,使用CALayer的mask实现。\n * [BanTangAnimation](https://github.com/zangqilong198812/BanTangAnimation) - 半塘下拉刷新的原理。简单来说是利用CGGlyph，字符图形转换成cgpath，然后绘制strokeEnd动画。把timeoffset和scrolloffset结合就行了。\n\n##### 模糊效果\n * [FXBlurView](https://github.com/nicklockwood/FXBlurView) - 是一个UIView子类，支持iOS5.0以上版本，支持静态、动态模糊效果，继承与UIView的模糊特效。\n * [VVBlurPresentation](https://github.com/onevcat/VVBlurPresentation) -很简单易用的在原来viewconntroller基础上做模糊，然后present新的viewcontroller的。\n * [UICustomActionSheet](https://github.com/pchernovolenko/UICustomActionSheet) - 通过模糊背景来着重强调与菜单相关的元素--对话框 里面已经收藏。\n * [SABlurImageView](https://github.com/szk-atmosphere/SABlurImageView) - 支持渐变动画效果的图像模糊化类库。P.S. 与前几天推存类库 SAHistoryNavigationViewController 是同一位作者。\n * [Blurable.swift](https://github.com/FlexMonkey/Blurable) - swift模糊组件。\n\n##### AutoLayout\n * [Masonry](https://github.com/Masonry/Masonry) - Masonry是一个轻量级的布局框架，拥有自己的描述语法，采用更优雅的链式语法封装自动布局，简洁明了并具有高可读性（ [使用介绍1](http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/)  [使用介绍2](http://ios.jobbole.com/81483/)），[iOS自适应前段库-Masonry的使用](http://www.cocoachina.com/ios/20150702/12217.html)），[Masonry、Classy、ClassyLiveLayout介绍](http://www.jianshu.com/p/2ed5f7444900)。[使用DEMO](https://github.com/lcddhr/DDMasonryTest) 视图居中显示、子视图含边距、视图等距离摆放、计算ScrollView的contentsize。\n * [Classy](https://github.com/cloudkite/Classy/) - Classy是一个能与UIKit无缝结合stylesheet(样式)系统。它借鉴CSS的思想，但引入新的语法和命名规则，[Classy官网](http://classy.as/getting-started/)，[Masonry、Classy、ClassyLiveLayout介绍](http://www.jianshu.com/p/2ed5f7444900)。\n * [ClassyLiveLayout](https://github.com/olegam/ClassyLiveLayout) - ClassyLiveLayout通过结合Classy stylesheets与Masonry一起使用，能够在运行的模拟器中微调Auto Layout约束实时显示效果的工具，[Masonry、Classy、ClassyLiveLayout介绍](http://www.jianshu.com/p/2ed5f7444900)。\n * [Snap](https://github.com/Masonry/Snap) - Snap是Masonry Auto Layout DSL的Swift版本，是一款轻量级的布局框架，使用了更良好的语法封装了AutoLayout。Snap支持iOS和OS X。\n * [SnapKit](https://github.com/SnapKit/SnapKit) - 就是“snap”， --swift 喜欢自动布局吗？当然喜欢！至少在storyboard中创建时会喜欢。 在代码中纯手工创建约束灰常痛苦，但幸运的是我们有了SnapKit，在board中用上它，你可以简单直观地编写约束了。\n * [PureLayout](https://github.com/smileyborg/PureLayout) - PureLayout 是 iOS & OS X Auto Layout 的终极 API——非常简单，又非常强大。PureLayout 通过一个全面的Auto Layout API 扩展了 UIView/NSView, NSArray 和 NSLayoutConstraint，仿照苹果自身的框架。\n * [UIView-AutoLayout](https://github.com/smileyborg/UIView-AutoLayout) - \nDeprecated in favor of PureLayout, which includes OS X support:https://github.com/smileyborg/PureLayout。\n * [Cartography](https://github.com/robb/Cartography) - Cartography 是用来声明 Swift 中的 Auto Layout，无需输入任何 stringly 就可设置自己 Auto Layout 的约束声明。\n * [Auto-Layout-Showcase](https://github.com/philcn/Auto-Layout-Showcase) - swift,AutoLayout 进阶 Demo，宽高比约束、比例约束、不等约束、视差约束、低优先级约束等高级用法，无需写码即可进行复杂页面布局，Demo 还动态模拟了各屏幕下的效果。来自百度知道 iOS 小组的内部分享。\n * [UIView-FDCollapsibleConstraints](https://github.com/forkingdog/UIView-FDCollapsibleConstraints) - 一个AutoLayout辅助工具，最优雅的方式解决自动布局中子View的动态显示和隐藏的问题。第二个Demo模拟了一个经典的FlowLayout，任意一个元素隐藏时，底下的元素需要自动“顶”上来，配合这个扩展，你可以在IB里连一连，选一选，不用一行代码就能搞定。\n * [Autolayout_Demo](https://github.com/luodezhao/Autolayout_Demo) - 在项目中用自动布局实现的类似抽屉效果。\n * [当view隐藏的时候也隐藏其autolayout的NSLayoutAttribute](http://code.cocoachina.com/detail/320405/) - 当view隐藏的时候也隐藏其autolayout的NSLayoutAttribute，从而不用大量的代码工作。\n * [SDAutoLayout](https://github.com/gsdios/SDAutoLayout) - AutoLayout 一行代码搞定自动布局！支持Cell、Label和Tableview高度自适应，致力于做最简单易用的AutoLayout库。\n * [Neon.swift](https://github.com/mamaral/Neon) - 功能强大的 UI 布局神器。\n\n##### 富文本\n * [RTLabel](https://github.com/honcheng/RTLabel) - RTLabel 基于UILabel类的拓展,能够支持Html标记的富文本显示，它是基于Core Text,因此也支持Core Text上的一些东西。32位，很久没有更新了。\n * [RTLabel](https://github.com/bingxue314159/RTLabel) - 富文本，RTLabel支持64位。 \n * [TYAttributedLabel](https://github.com/12207480/TYAttributedLabel) -  TYAttributedLabel。 简单易用的属性文本控件(无需了解CoreText)，支持富文本，图文混排显示，支持添加链接，image和UIView控件，支持自定义排版显示。\n * [TQRichTextView](https://github.com/TinyQ/TQRichTextView) - 用于做富文本视图控件显示，用于即时通讯的表情显示，以及资源评论的富文本显示。\n * [TTTAttributedLabel](https://github.com/mattt/TTTAttributedLabel) - 一个文字视图开源组件，是UILabel的替代元件，可以以简单的方式展现渲染的属性字符串。另外，还支持链接植入，不管是手动还是使用UIDataDetectorTypes自动把电话号码、事件、地址以及其他信息变成链接。[用TTTAttributedLabel创建变化丰富的UILabel](http://blog.csdn.net/prevention/article/details/9998575) - 网易新闻iOS版使用。\n * [MLEmojiLabel](https://github.com/molon/MLEmojiLabel) - 自动识别网址、号码、邮箱、@、#话题#和表情的label。可以自定义自己的表情识别正则，和对应的表情图像。(默认是识别微信的表情符号)，继承自TTTAttributedLabel，所以可以像label一样使用。label的特性全都有，使用起来更友好更方便。\n * [FXLabel](https://github.com/nicklockwood/FXLabel) - FXLabel是一个功能强大使用简单的类库，通过提供一个子类改进了标准的UILabel组件，为字体增加了阴影、内阴影和渐变色等，可以被用在任何标准的UILabel中。FXLabel还提供了更多控件，可以对字体行距、字体间距等进行调整。\n * [WFReader](https://github.com/TigerWf/WFReader) - 一款简单的coretext阅读器，支持文本选择、高亮以及字体大小选择等。\n * [WPAttributedMarkup](https://github.com/nigelgrange/WPAttributedMarkup) - WPAttributedMarkup is a simple utility category that can be used to easily create an attributed string from text with markup tags and a style dictionary。\n * [KMPlaceholderTextView](https://github.com/MoZhouqi/KMPlaceholderTextView) - 可显示多行 placeholder 的 textView，可以在IB里面设置 -- swift。\n * [HHFlashSwitch](https://github.com/mrchenhao/HHFlashSwitch) - 一个另类的UISwitch，选择后，背景水波扩散变色效果。 \n * [UUColorSwitch](https://github.com/zhangyu9050/UUColorSwitch) - Switch 开关动画效果,当打开开关时，Switch可实现平滑渲染过渡到父视图的效果。\n * [UITextViewDIYEmojiExample](https://github.com/zekunyan/UITextViewDIYEmojiExample) - [UITextView编辑时插入自定义表情-简单的图文混编](http://tutuge.me/2015/03/07/UITextView%E7%BC%96%E8%BE%91%E6%97%B6%E6%8F%92%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E6%83%85-%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%BE%E6%96%87%E6%B7%B7%E7%BC%96/)。 \n * [Shimmer](https://github.com/facebook/Shimmer) - BlingBling闪光效果，酷炫的Label的效果，可以用于加载等待提示。\n * [ZSSRichTextEditor](https://github.com/nnhubbard/ZSSRichTextEditor) - 适用于iOS的富文本WYSIWYG编辑器，支持语法高亮和源码查看。ZSSRichTextEditor包含所有WYSIWYG标准的编辑器工具。\n * [RichEditorView](https://github.com/cjwirth/RichEditorView) - swift，一套可定制富文本编辑器组件及示例。功能完整、代码简练、实现逻辑巧妙（编辑器核心与 WebView 结合，采用 HTML5 contentEditable 编辑模式，执行JS 配套命令 execCommand 实现富文本编辑功能）。\n * [DTCoreText](https://github.com/Cocoanetics/DTCoreText) - 可以解析HTML与CSS最终用CoreText绘制出来，通常用于在一些需要显示富文本的场景下代替低性能的UIWebView。[DTCoreText源码解析](http://blog.cnbang.net/tech/2630/)。\n * [CSGrowingTextView](https://github.com/cloverstudio/CSGrowingTextView) - 用作即时通讯文本框和评论文本框使用，可以显示多行输入。 \n * [MarkdownTextView](https://github.com/indragiek/MarkdownTextView) - 显示Markdown的TextView。 \n * [高仿微信限定行数文字内容](http://d.cocoachina.com/code/detail/300299) - 采用Autolayout高仿微信纯文字限定行数。\n * [FuriganaTextView](https://github.com/lingochamp/FuriganaTextView) - 实现复杂的日文韩文排版。\n * [ParkedTextField](https://github.com/gmertk/ParkedTextField) - 带固定文本的输入组件。 \n * [LTMorphingLabel](https://github.com/lexrus/LTMorphingLabel) - swift 能够实现文字变形动画效果的Label，用Swift写的一个能够实现文字变形动画效果的Label，很炫。\n * [GJCFCoreText](https://github.com/zyprosoft/GJCFCoreText) - 图文混排。\n * [AttributedLabel](https://github.com/KyoheiG3/AttributedLabel) - 显示性能数量级 UILabel 的 AttributedLabel。无畏无惧、挑战权威。\n * [FFLabel](https://github.com/liufan321/FFLabel) - 自动检测 URLs, @username, #topic# 等关链词（提供响应扩展）。实用的标签文本小组件。\n * [TextFieldEffects](https://github.com/raulriera/TextFieldEffects) - 标准的UITextField有些枯燥么？来认识一下TextFieldEffects吧！废话不多说，只要看几个例子,是啊，都是些简单的dropin控制器。甚至可以在storyboard中使用IBDesignables。\n * [AutocompleteField](https://github.com/filipstefansson/AutocompleteField) - 可应用于 iOS 应用中文字输入框自动补全的场景, 兼容到 iOS 8。\n * [Splitflap.swift](https://github.com/yannickl/Splitflap) - 可用于快速给 iOS 应用创建文字翻转的动画效果。\n * [WordPress-Editor-iOS](https://github.com/wordpress-mobile/WordPress-Editor-iOS) - 一个文本编辑器 简书和新浪博客都在用。\n * [YYText](https://github.com/ibireme/YYText) - 功能强大的 iOS 富文本框架。\n * [placeholder_TextView](http://code.cocoachina.com/view/129099) - 带有placeholder的TextView：带有提示信息的textview，使用懒加载的思想，支持扩展、自定义，类似许多APP内部的意见反馈页面 。\n\n##### 图表\n * [PNChart](https://github.com/kevinzhow/PNChart) - 国内开源作者，动态的图表。\n * [swift-linechart](https://github.com/zemirco/swift-linechart) - 功能完整、实用的折线图组件。使用方便，参数配置简单。是不可多得的优质组件--swift。\n * [ios-charts](https://github.com/danielgindi/ios-charts) - 一款优秀 Android 图表开源库 MPAndroidChart 的 Swift 语言实现版（支持 Objective-C 和 Swift 调用）。缺省提供的示例代码为 Objective-C。\n * [TEAChart](https://github.com/xhacker/TEAChart) - xhacker/TEAChart 一个简洁的 iOS 图表库，支持柱状图、饼图以及日历等。\n * [YOChartImageKit](https://github.com/yasuoza/YOChartImageKit) - 支持在watchOS上绘制图表，看它最近更新挺勤快的，可以关注一下。\n * [RealtimeGradientText](https://github.com/kevinzhow/RealtimeGradientText) - Fun With CALayer Mask 刚好今天开源了一个有趣的项目 RealtimeGradientText，所以也好聊一下 CALayer 的 Mask，[说明](http://blog.zhowkev.in/2015/07/06/fun-with-mask/)。\n\n##### 表相关与Tabbar\n * [SWTableViewCell](https://github.com/onevcat/SWTableViewCell) - 国内开源作者，带很多手势的表单元格。\n * [MCSwipeTableViewCell](https://github.com/alikaragoz/MCSwipeTableViewCell) - 带很多手势的表单元格。\n * [TMQuiltView](https://github.com/1000Memories/TMQuiltView) - 瀑布流。\n * [WaterfallFlowDemo](https://github.com/lengmolehongyan/WaterfallFlowDemo) - 一个简单的UICollectionView瀑布流布局演示demo。\n * [XLForm](https://github.com/xmartlabs/XLForm) - 很多表格类的table,写法更高冷一点，推荐使用。\n * [Eureka.swift](https://github.com/xmartlabs/Eureka) - Eureka 是 XLForm 的 Swift 的移植版本, 一个可以帮助开发者们快速构建 iOS 各种复杂表单的库, 具有较高的可扩展性, 方便自定制样式。\n * [RETableViewManager](https://github.com/romaonthego/RETableViewManager) - 可以十分方便地生成各种样式、各种功能的TableView。只要开发者能想到的列表效果或者功能，都可以利用这份代码迅速编写出来。比如，之前要实现一个填写各种资料的列表，可能需要很多代码，现在只需要几行代码就可以实现。 \n * [UIScrollSlidingPages](https://github.com/TomThorpe/UIScrollSlidingPages) - 允许添加多视图控件，并且可以横向滚动。有点类似于Groupon app。\n * [HBHorizontalTableView](https://github.com/izyhuang/HBHorizontalTableView) - swift，TableView 横向滚动小示例（仿照 AppStore 应用展示）。\n * [HorizontalScrollCell](https://github.com/mcelayir/HorizontalScrollCell) - HorizontalScrollCell是一款使用方便的水平方向可滚动的单元格，适用于UICollectionView中实现水片方向滚动视图。 。\n * [SYJiugonggeTableView](https://github.com/shiyuan17/SYJiugonggeTableView) - tableView封装的九宫格。\n * [UUChatTableView](https://github.com/ZhipingYang/UUChatTableView) - UUChatTableView 气泡聊天界面，支持文本、图片以及音频的气泡聊天界面。[源码推荐说明](http://www.cocoachina.com/ios/20150205/11116.html)。\n * [Chats](https://github.com/acani/Chats) - 聊天 UI 示例程序。此项目应该只为演示或学习之用，没有服务器 -- swift。 \n * [Atlas-iOS](https://github.com/layerhq/Atlas-iOS) - 快速在iOS里集成聊天功能，类似开源版本的环信。Layer家开源了一套聊天app界面的解决方案.看起来很赞，很多蛮复杂的东西直接都帮封好了。不得不说现在做app开发真是很简单，大部分时间搭积木就可以了。[官方网站](https://atlas.layer.com/)。\n * [Chatto.swift](https://github.com/badoo/Chatto) - Chatto.swift:轻量级聊天应用框架及示例。文字及图片可扩展输入栏，汽泡效果等聊天核心特性，分页及自动布局完善。\n * [DLSlideView](https://github.com/agdsdl/DLSlideView) - DLSlideView对常见的顶部Tab页点击、滑动分页做了封装。它使用基于ViewController的container特性（而不是scrollview）来管理各个子页面，以支持无限分页，[源码推荐说明](http://www.cocoachina.com/ios/20150205/11116.html)。\n * [VOVCManager](https://github.com/pozi119/VOVCManager) - 页面管理器:1.跳转指定页面,只需要知道viewController的Class名,如果有storyboard,则需要指定storyboard名；2.无需添加基类；3.支持URLScheme跳转指定页面。\n * [MBXPageViewController](https://github.com/Moblox/MBXPageViewController) - 简洁快速的页面切换--MBXPageViewController，带有按钮控件的UIPageController，非常整洁、简单以及快速。该项目通过三种形式展示页面之间的切换，比如导航栏上的多个tab切换、页面左右两端箭头指示切换，以及使用分段控件。\n * [PagerTab](https://github.com/ming1016/PagerTab) - UIScrollView实现滑动转换页面，类似网易云音乐iOS版的页面滑动切换效果。\n * [GUITabPagerViewController](https://github.com/guilhermearaujo/GUITabPagerViewController) - 多个tab滑动切换。\n * [VOMetroLayoutDemo](https://github.com/pozi119/VOMetroLayoutDemo) - Metro风格的UICollectionView, 目前只支持横向布局,仅在iPad上应用。\n * [KYCellAnimation](https://github.com/KittenYang/KYCellAnimation) - 给UITableViewCell增加进入的动画。\n * [COBezierTableView](https://github.com/knutigro/COBezierTableView) - swift，通过编辑 Bezier 曲线四点位置设置 TableView 内 Cell 及对应按扭位置。实验效果很赞。\n * [RDVTabBarController](https://github.com/robbdimitrov/RDVTabBarController) - 一个TabBar组件，可以方便设置底部菜单的文字图片，点击效果，小红点提示等。\n * [LxTabBarController](https://github.com/DeveloperLx/LxTabBarController) - 改变了原生tabbar切换tab时的生硬效果，并加入滑动切换手势（有和界面上的其它手势发生冲突的风险，可根据具体项目予以关闭），[swift版本](https://github.com/DeveloperLx/LxTabBarController-swift)。\n * [WXTabBarController](https://github.com/leichunfeng/WXTabBarController) - 在系统 UITabBarController 的基础上完美实现了安卓版微信 TabBar 的滑动切换功能，单手操作 iPhone 6 Plus 切换 TabBar 一直是一件很痛苦的事情，而滑动切换是一种不错的解决方案，支持屏幕旋转。\n * [GooeyTabbar](https://github.com/KittenYang/GooeyTabbar) - 皮筋式弹性缩放工具栏示例及演示。\n * [横向展示文本内容的自定义cell](http://d.cocoachina.com/code/detail/298409) - 可以横向展示文本内容的自定义cell，根据文本无限滚动。\n * [UITableView-FDTemplateLayoutCell](https://github.com/forkingdog/UITableView-FDTemplateLayoutCell) - UITableView-FDTemplateLayoutCell 是一个方便缓存 UITableViewCell 的高度的框架。\n * [ExpandingStackCells](https://github.com/jozsef-vesza/ExpandingStackCells) - 采用 UIStackView 实现表格单元格扩展内容显示示例及解决方案。\n * [FDStackView](https://github.com/forkingdog/FDStackView) - 可以将 UIStackView 的最低支持版本拉低到 iOS6，无需配置，没有代码侵染，扔到工程里后直接用系统 UIStackView 的 API 即可，同时兼容 Storyboard。 \n * [Sapporo](https://github.com/nghialv/Sapporo) - swift 单元格模型驱动的集合视图管理器组件。又一个超实用的“轮子”。\n * [MDIHorizontalSectionTableViewController](https://github.com/WeeTom/MDIHorizontalSectionTableViewController) - 根据产品需求开源了一个交互项目，可以理解为横向Section的TableView，section和cell同时支持拖拽，后续安卓版本也会开源出来。\n * [JZNavigationExtension](https://github.com/JazysYu/JZNavigationExtension) - 多功能导航控制器，可以透明返回栏。\n * [QuickRearrangeTableView](https://github.com/okla/QuickRearrangeTableView) - 基于 UITableView 的快速重排功能扩展子类。通过长按选定单元格然后滚动移动到指定位置。\n * [uicollectionview-reordering](https://github.com/nshintio/uicollectionview-reordering) - UICollectionViews的拖拽(拖动、移动)效果,[实例教程](http://nshint.io/blog/2015/07/16/uicollectionviews-now-have-easy-reordering/).\n * [DZNEmptyDataSet](https://github.com/dzenbot/DZNEmptyDataSet) - DZNEmptyDataSet算是一个很标准的iOS内建方式，适合用来处理空的table view和collection view。会自动将collection view处理完善，并将用户消息以合适美观的方式显示出来。每个iOS项目都可以自动处理。\n * [MGSwipeTableCell](https://github.com/MortimerGoro/MGSwipeTableCell) - 另一个常见于很多应用中的UI组件，苹果应该考虑在标准的iOS SDK中加入一些类似的内容。Swipeable表格cell是这个pod的最佳描述，也是最好的。\n * [XLPlainFlowLayout](https://github.com/HebeTienCoder/XLPlainFlowLayout) - 可以让UICollectionView的header也支持悬停效果，类似于tableView的Plain风格。\n * [WMPageController](https://github.com/wangmchn/WMPageController) - 一个方便的 pageContrller 的控件，里面还包括滚动视图。\n * [PSTCollectionView](https://github.com/steipete/PSTCollectionView) - PSTCollectionView。\n * [LLRiseTabBar-iOS](https://github.com/lianleven/LLRiseTabBar-iOS) - 直接使用系统的特性实现的tabbar，比较简单。\n * [MTMaterialDelete](https://github.com/MartinRGB/MTMaterialDelete) - 非常有趣的Material Design动画，动画删除表里面的单元格。\n * [BusyNavigationBar](https://github.com/gmertk/BusyNavigationBar) - 进度条式NavigationBar导航条。\n * [ReorderableGridView-Swift](https://github.com/cemolcay/ReorderableGridView-Swift) - 拖拽排序卡片。\n * [LGSettingView](https://github.com/LiGoEX/LGSettingView) - LGSettingView仅需三句代码即可快速集成设置界面，免去每次开发新应用都要重新布置设置界面的烦恼。\n * [微博cell自动布局](http://code.cocoachina.com/view/129212) - 使用autoLayout对微博的cell进行自动布局，自适应cell的高度。\n * [TreeTableView](https://github.com/TyroneWing/TreeTableView) - ZYTreeTableView：TreeView 模仿好友列表的实现方式。\n\n##### 隐藏与显示\n * [SlideTapBar](http://d.cocoachina.com/code/detail/286102) - 滚动栏菜单，向上滚动时隐藏tabbar，向下滚动马上显示tabbar。\n * [FoldingTabBar.iOS](https://github.com/Yalantis/FoldingTabBar.iOS) - 可折叠Tab Bar和Tab Bar Controller。\n * [LTNavigationBar](https://github.com/ltebean/LTNavigationBar) - LTNavigationBar为app导航栏添加动态着色效果，可自定义其背景色。Demo包含：1.变换背景色；2.滚动视图，导航栏和状态栏重叠。\n * [BLKFlexibleHeightBar](https://github.com/bryankeller/BLKFlexibleHeightBar) - 固定Header的效果库，一个拥有非常灵活高度的标题栏，可以为使用软件的用户提供更多的阅读和滑动空间，现在已经被众多app所采用。\n\n##### HUD与Toast\n * [MBProgressHUD](https://github.com/jdg/MBProgressHUD) - 最多人用的loading。\n * [EBuyCommon](https://github.com/LvJianfeng/EBuyCommon) - 1.基于MBProgressHUD实现得图形加载提示方式，及其它标题方式提醒。2.弹窗。\n * [SVProgressHUD](https://github.com/TransitApp/SVProgressHUD) - SVProgressHUD的loading，如果你需要定制化的等待提示器，这个就是了（也许是最好的）。\n * [ProgressHUD](https://github.com/relatedcode/ProgressHUD) - ProgressHUD的loading，使用最简单。\n * [MMProgressHUD](https://github.com/mutualmobile/MMProgressHUD) - 设置HUD出现和消失的方式（包括上下、左右、淡入淡出、放大缩小等等），设置HUD的内容（可以在HUD中加入帧动画、动态图片等等），设置HUD出现时的底部覆盖层颜色，等等。总而言之，这是一份集大成的HUD代码。慢慢看视频吧，囊括了所有效果。\n * [WSProgressHUD](https://github.com/devSC/WSProgressHUD) - 一个小巧精致的HUD,支持添加到自定义View上, 还有更多小细节.。\n\n##### 对话框\n * [WCAlertView](https://github.com/m1entus/WCAlertView) - 自定义的对话框。\n * [IOS7AlertView](https://github.com/wimagguc/ios-custom-alertview) - IOS7AlertView的对话框。\n * [AMSmoothAlert](https://github.com/mtonio91/AMSmoothAlert) - 动画效果不错，最多star，但不支持arm64。\n * [DQAlertView](https://github.com/dinhquan/DQAlertView) - 扁平化的样式不错。\n * [HHAlertView](https://github.com/mrchenhao/HHAlertView) - 一个简易的alertview  有三种样式，有成功，失败，和警告三种样式，支持Delegate和block两种回调。\n * [MJPopupViewController](https://github.com/martinjuhasz/MJPopupViewController) - 实现弹出视图的各种弹出和消失效果，包括淡入淡出（fade in，fade out），从屏幕上方飞进，下方飞出，从屏幕左方飞进，右方飞出等等效果，弹窗。\n * [MMPopupView](https://github.com/adad184/MMPopupView) - 弹出框的基类组件（弹窗）。\n * [Menu](https://github.com/fengchuanxiang/Menu) - 项目中可能会用到的常用菜单，以后有时间会继续补充，弹窗。 \n * [EasyTipView](https://github.com/teodorpatras/EasyTipView) - 弹出提示框类及演示示例。同样地，API 简单、易用。好“轮子”，弹窗。  \n * [kxmenu](https://github.com/kolyvan/kxmenu) - kxmenu弹出菜单，点击视图上任意位置的按钮，会弹出一个菜单，并且有个小箭头指向点击的按钮，类似气泡视图。弹出的菜单位置会根据按钮的位置来进行调整。 \n * [QBPopupMenu](https://github.com/questbeat/QBPopupMenu) - QBPopupMenu弹出菜单，实现类似 UIMenuItem 的弹出菜单按钮。点击按钮，会弹出一个菜单，上面可以排列多个按钮。纯代码实现，不需要任何图片。\n * [STModalDemo](https://github.com/zhenlintie/STModalDemo) - 弹出视图（通知，提示，选择，窗口）。\n * [TAOverlay](https://github.com/TaimurAyaz/TAOverlay) - TAOverlay可通过叠加层展示有用的信息，可自定义文本和背景色，添加阴影和模糊效果，以及更改字体大小或者用自定义图片替换页面上的icon。\n * [UICustomActionSheet](https://github.com/pchernovolenko/UICustomActionSheet) - 通过模糊背景来着重强调与菜单相关的元素--模糊效果 里面已经收藏。\n * [ActionSheetPicker-3.0](http://code.cocoachina.com/detail/232178) - 该项目是此前热门项目ActionSheetPicker的新版本，快速复制了iOS 8上的下拉 UIPickerView/ActionSheet功能。\n * [MJAlertView](https://github.com/mayuur/MJAlertView) - 3D效果转场效果警示图--MJAlertView。\n * [SwiftyDrop](https://github.com/morizotter/SwiftyDrop) - 轻量、易用的小清新弹出列表及信息提示组件真心不错。\n * [PSTAlertController](https://github.com/steipete/PSTAlertController) - 兼容 iOS7的 XXAlertController，接口跟UIAlertController 一模一样，做到高低版本通用。\n * [PCLBlurEffectAlert.swfit](https://github.com/hryk224/PCLBlurEffectAlert) - 细节定制较丰富的弹出警报窗口组件。\n * [GSAlert.swfit](https://github.com/wxxsw/GSAlert) - 苹果在iOS8推出了全新的UIAlertController，旧的UIAlertView和UIActionSheet渐渐被废弃，但如果你仍然支持iOS7系统，你将不得不写两套代码。GSAlert解决了这个问题。\n\n##### 其他UI\n * [AwesomeMenu](https://github.com/levey/AwesomeMenu) - 最多人用的Path菜单。\n * [DCPathButton](https://github.com/Tangdixi/DCPathButton) - Path，4.0的弹出菜单，呼出或者关闭菜单时，多个小图标会分别按照逆时针和顺时针的方向进行滚动。\n * [SphereMenu](https://github.com/itouch2/SphereMenu) - 利用UIDynamicAnimator的有趣的菜单，path类似。 \n * [KYGooeyMenu](https://github.com/KittenYang/KYGooeyMenu) - KYGooeyMenu 是一个具有 Gooey Effects 带粘性的扇形菜单控件(卫星菜单、path)。\n * [LiquidFloatingActionButton](https://github.com/yoavlt/LiquidFloatingActionButton) - 卫星弹出菜单。\n * [JZMultiChoicesCircleButton](https://github.com/JustinFincher/JZMultiChoicesCircleButton) - 三维多选按钮。\n * [TwitterPaggingViewer](https://github.com/xhzengAIB/TwitterPaggingViewer)  - 多个Tableview，左右滑动。\n * [CircularProgressControl](https://github.com/carantes/CircularProgressControl) - Circular Progress Control using CAShapeLayer ，环形进度控制条。\n * [KDCircularProgress](https://github.com/kaandedeoglu/KDCircularProgress) -  KDCircularProgress是使用swift制作的色彩炫丽的进度条，可以加入多种颜色来控制进度条的渐变效果。 \n * [TextProgress](https://github.com/cgwangding/TextProgress) - 自定义实现数字进度条：1、可以自定义数字（0-100），填充的比例为当前设置的数字，2、可以实现自定义填充颜色，上下部分都可以，3、可以自定义边界的颜色4、实现了水波动画，可以设置打开或关闭。\n * [SDProgressView](https://github.com/gsdios/SDProgressView) - 简便美观的进度指示器，此系列共有六种样式的进度指示器。\n * [NVActivityIndicatorView](https://github.com/ninjaprox/NVActivityIndicatorView) -  loading 进度条动画，有20-30多种，是在此[DGActivityIndicatorView](https://github.com/gontovnik/DGActivityIndicatorView) 基础上做得修改。\n * [LoopProgressDemo](https://github.com/saitjr/LoopProgressDemo) - 环形渐变进度条。\n * [环形渐变进度条实现](http://www.superqq.com/blog/2015/08/12/realization-circular-gradient-progress/)， \n * [XLPagerTabStrip](https://github.com/xmartlabs/XLPagerTabStrip) - 做的很棒的iOS下的PagerTabStrip。 \n * [ASProgressPopUpView](https://github.com/alskipp/ASProgressPopUpView) - 弹出的进度条显示进度。\n * [RandomColorSwift](https://github.com/onevcat/RandomColorSwift) - 一个自动生成好看的颜色的 Swift 库，RandomColorSwift。\n * [Hue.Swift](https://github.com/hyperoslo/Hue) - Hue.Swift：颜色常规功能集于一身的定义、使用 Color 工具类库（含图片取色）。\n * [HexColorService](https://github.com/ChangweiZhang/HexColorService) - 将16进制颜色字符串转成UIColor。\n * [Rainbow](https://github.com/NorthernRealities/Rainbow) - 旨在提高代码可读性及易用性的 UIColor 扩展，它使原先有限的预定义颜色（方法）选择，扩展至超过 1200 种。\n * [UIColor-ChineseTraditionalColors](https://github.com/zhxnlai/UIColor-ChineseTraditionalColors) - 中国传统颜色引用 UIColor 扩展。“UIColor.桃红()，UIColor.竹青() ...”，共158种。 \n * [类似美团的下拉菜单](http://code.cocoachina.com/detail/284158) - 类似美团的下拉菜单，[源码推荐说明](http://www.cocoachina.com/ios/20150205/11116.html)。 \n * [类似美团的下拉选项](http://code4app.com/ios/%E7%B1%BB%E4%BC%BC%E7%BE%8E%E5%9B%A2%E7%9A%84%E4%B8%8B%E6%8B%89%E9%80%89%E9%A1%B9/538606d4933bf06e0a8b496e) -  类似于美团、大众点评的下拉菜单选项，code4app代码，评论代码有瑕疵。\n * [CRMediaPickerController](http://code.cocoachina.com/detail/284267) - 一个简单易用的图片/视频选择器。1.可同时选择照片和视频。 2.挑选范围有Camera、Camera Roll、Photo Library以及最近拍摄的照片和视频。3.可自定义UIImagePickerController属性（Camera Overlay、Camera Device、Camera View Transform以及allowsEditing）。4.支持横屏和竖屏5.原生的iOS UI。，[源码推荐说明](http://www.cocoachina.com/ios/20150205/11116.html)。 \n * [MDCSwipeToChoose](https://github.com/modocache/MDCSwipeToChoose) - MDCSwipeToChoose可简单地添加滑动手势来调用UIView，并使用该行为提供了一个组件以创建类似Tinder app的like或者dislike界面的轻扫。基于轻扫的方向，你可以决定执行什么样的行为，并且你可以自定义文本颜色和图片。该项目适用于教学用的抽认卡、图片查看器以及其他等。 \n * [iOS Material Design库](http://d.cocoachina.com/code/detail/285611) - 该项目借鉴于谷歌的Material Design guideline，用户可自定义背景色。 \n  * [Material-Controls-For-iOS](https://github.com/fpt-software/Material-Controls-For-iOS) - Material Design风格的各种控件，非常完整全面。 \n * [ZMaterialDesignUIButton](https://github.com/richzertuche/ZMaterialDesignUIButton) - Swift Material Design UIButton。\n * [MediumScrollFullScreen](https://github.com/pixyzehn/MediumScrollFullScreen) - Medium的可扩展滚动页面，上下滚动时，全屏显示内容，并自然消隐上下菜单。由此项目感知，作者是一位很注重细节的开发者，他的另外[几个菜单类项目](https://github.com/pixyzehn)也都不错，值得参考，比如：PathMenu, MediumMenu 等。\n * [WZFlashButton](https://github.com/SatanWoo/WZFlashButton) - WZFlashButton，点击后button里面出现水波扩散效果。\n * [Twinkle](https://github.com/piemonte/Twinkle) - 为字体加上钻石版闪耀的效果。使用Swift编写。 \n * [ios-multi-back-button](https://github.com/palmin/ios-multi-back-button) - 可替换内置的UInavigationController返回按钮，长按左上角的返回按钮，实现多层级的快速返回。\n * [ASDayPicker](http://code.cocoachina.com/detail/226543) - 适用于iOS (iPhone)的日期选择器(时间选择器)，类似于Calendar app的周视图。\n * [today extension](http://adad184.com/2014/10/29/2014-10-29-how-to-setup-today-extension-programmatically/) - 用纯代码构建一个Widget(today extension) 。\n * [FSCalendar](https://github.com/f33chobits/FSCalendar) - 日历视图，带有微妙和平滑的滚动效果，可自定义外观--国人。\n * [CVCalendar](https://github.com/Mozharovsky/CVCalendar) - 是一个方便开发者集成自定义日历视图到自己 iOS 应用的项目, 支持 Storyboard 和手动配置, 使用 CocoaPods 进行安装, 提供了丰富的 API 供开发者使用。\n * [HSDatePickerViewController](https://github.com/EmilYo/HSDatePickerViewController) - 带有Dropbox Mailbox感觉的时间日期选择器(时间选择器)。启动是背景被模糊化。界面也是主流的扁平化风格。 \n * [HZQDatePickerView](https://github.com/huzhiqin/HZQDatePickerView) - 自定义时间选择器(日期选择器)，包括开始日期和结束日期两种类型。\n * [CFCityPickerVC](https://github.com/nsdictionary/CFCityPickerVC) - 城市选取控制器。\n * [JTCalendar](https://github.com/jonathantribouharet/JTCalendar) - iOS下优美的 Calendar 组件，做 GTD 类 App 必备。\n * [Persei](https://github.com/Yalantis/Persei) - 动画隐藏或显示顶部菜单支持库及示例项目。--swift\n * [PDTSimpleCalendar](https://github.com/jivesoftware/PDTSimpleCalendar) - 是iOS最棒的日历组件了。你可以在各个方面对它进行定制，无论是运行逻辑还是外观方面。\n * [DateRangePicker.swift](https://github.com/MrMage/DateRangePicker) - 可能是目前最好的 OS X 日期选择器,高扩展性，界面风格看起来很舒服，不过注意，是 OS X 开发专用。\n * [Form](https://github.com/hyperoslo/Form) - JSON 驱动的 Form表单系统，复杂的表单填写类 App 极其需要（比如淘宝呢！）。\n * [SwiftyFORM](https://github.com/neoneye/SwiftyFORM) - swift 表单输入框架（亮点是表单验证规则引擎），是我见过地最易用的 Swift 表单组件。\n * [SwiftSpinner](https://github.com/icanzilb/SwiftSpinner) - SwiftSpinner是使用swift制作的一款精致带感的指示器，并且连带有字体信息显示，模糊背景，半透明，扁平化等IOS8的效果。\n * [AKPickerView-Swift](https://github.com/Akkyie/AKPickerView-Swift) - 一款小而美的 3D 效果选择器。\n * [ImagePickerSheet](https://github.com/larcus94/ImagePickerSheet) - 图片或视频选择器（可多选）组件及其示例项目。\n * [iOS-RatingBar](https://github.com/saiwu-bigkoo/iOS-RatingBar) - iOS-RatingBar swift版的评分控件,跟Android的RatingBar一样有两种模式，评分模式和只读模式'支持视图编辑，自定义星星数量，评分等级,另外还能支持非整数星，0.5颗星，0.1颗星,可以开启动画效果。\n * [RKNotificationHub](https://github.com/cwRichardKim/RKNotificationHub) - 快速给 UIView 添加上炫酷的通知图标（Badge、红点、提示）。  * [WZLBadge](https://github.com/weng1250/WZLBadge) - Badge，支持横竖屏支持iOS5~iOS8允许高度定制化，包括“红点”的背景颜色，文字(字体大小、颜色)，位置等。[说明](http://code.cocoachina.com/detail/316890/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%A4%9A%E9%A3%8E%E6%A0%BC%E7%9A%84%E6%8E%A8%E9%80%81%E5%B0%8F%E7%BA%A2%E7%82%B9/). \n * [BubbleTransition](https://github.com/andreamazz/BubbleTransition) - 以气泡膨胀和缩小的动画效果来显示和移除 controller，Uber的就是这种取消操作的方式。\n * [KYFloatingBubble](https://github.com/KittenYang/KYFloatingBubble) - 类似iOS7中Game Center浮动气泡的效果。\n * [DKNightVersion](https://github.com/Draveness/DKNightVersion) - DKNightVersion 是一个支持夜间模式切换的框架。\n * [EasyUIControl](https://github.com/sx1989827/EasyUIControl) - 一个可以简化界面ui的控件框架。\n * [LxGridView-oc](https://github.com/DeveloperLx/LxGridView) [LxGridView-swift](https://github.com/DeveloperLx/LxGridView-swift) - 利用UICollectionView模仿iOS系统桌面图标的交互，作用如动图。\n * [QQBtn](https://github.com/ZhongTaoTian/QQBtn) - 仿QQ未读消息弹性按钮动画，达到和手机QQ未读信息一样的动画效果，效果基本实现。\n * [GMStepper](https://github.com/gmertk/GMStepper) - swift 带动画效果、支持手势滑动操作的步进标签。\n * [TZStackView](https://github.com/tomvanzummeren/TZStackView) - OS 9 UIStackView 功能模拟实现于 iOS 7/ iOS 8 内。\n * [LayoutTrait](https://github.com/441088327/LayoutTrait) - swift 一个小类库。 做iPad 多任务分屏 适配的同学可以看一下。\n * [HACursor](https://github.com/HAHAKea/HACursor) - HACursor，是一个对横向ScrollView中的视图进行管理的UI控件。只要几行代码就可以集成类似于网易新闻对主题页面进行排序，删除操作的功能。\n * [ZTPageController](https://github.com/IOStao/ZTPageController) - 模仿网易新闻和其他新闻样式做的一个菜单栏，栏中有各自的控制器，其中有4中展示样式’网易style' ’搜狐style' ’腾讯style1' ’网易style2' 。 \n * [Ruler](https://github.com/nixzhu/Ruler) - 尺子。\n * [HUMSlider](https://github.com/justhum/HUMSlider) - HUMSlider是一款能够自动显示刻度记号的滑竿，滑动到某处，该处的刻度会自动上升，两边还能配置图像。支持代码或storyboard中实现。\n * [JDSelectedDemo](https://github.com/zhangli4659507/JDSelectedDemo) - 仿京东筛选菜单实现。\n * [BTNavigationDropdownMenu](https://github.com/PhamBaTho/BTNavigationDropdownMenu) -  下拉列表暨导航标题组件。简单、直接、易用 -swift。\n * [3DTouchDemo](https://github.com/luzefeng/3DTouchDemo) - 详细介绍了每个参数的含义和3Dtouch的入口，保证包学包会。\n * [3DTouchSample](https://github.com/RichardLeung/3DTouchSample) - 3D-Touch的功能分为两个部分：Shortcut和Preview。\n * [SBShortcutMenuSimulator](https://github.com/DeskConnect/SBShortcutMenuSimulator) - 教你如何在模拟器上测试 3D Touch 功能!\n * [InceptionTouch.swift](https://github.com/richzertuche/InceptionTouch) - 让没有 3D Touch 设备也有类似交互体验的 InceptionTouch 类（基于 UITextView 实现，支持日期，链接，电话号码，地址触摸响应）。\n * [仿LOL滚动视图](http://code.cocoachina.com/view/128287) - 仿LOL滚动视图。\n * [答题选择切换页](http://code.cocoachina.com/view/128281) - 将scrollview和tableview封装在一起，在初始化的时候简单的将数据带上，就可以一页一页的左右来回滑动。\n * [SCTrelloNavigation](https://github.com/SergioChan/SCTrelloNavigation) - 类似trello的导航动效控件实现。\n * [XTPaster](https://github.com/Akateason/XTPaster) - 贴纸功能出现在很多图片社交中, 就是图片上面贴图片, 对贴纸而言就是需要控制贴纸的位置,旋转,大小,[如何使用](http://www.jianshu.com/p/d873d348bbfb)。\n * [RGCategoryView](https://github.com/refinemobi/RGCategoryView) - 仿了个苏宁易购的分类页面。\n * [TWControls.swift](https://github.com/txaidw/TWControls) - 简单的开关和按钮控制器,使用闭包来执行由控件触发的操作。\n * [Instructions.swift](https://github.com/ephread/Instructions) - 可定制嵌入式操作指引框架及演示。\n * [LLPieCharts](https://github.com/Lves/LLPieCharts) - LLPieCharts iOS 绘制饼图，[教程](http://www.lvesli.com/?p=339)。\n * [BEMCheckBox](https://github.com/Boris-Em/BEMCheckBox) - BEMCheckBox 是一个用于 iOS 应用上构建漂亮, 高度可定制化动画效果的复选框类库, 最低支持到 iOS 7 系统, 有多种不同风格的动画效果可供选择。\n * [STPopup](https://github.com/kevin0571/STPopup) - 提供了一个可在 iPhone 和 iPad 上使用的具有 UINavigationController 弹出效果的 STPopupController 类, 并能在 Storyboard 上很好的工。\n * [VBFPopFlatButton](https://github.com/victorBaro/VBFPopFlatButton) - 通过几条线段实现的非常Q萌的动画按钮效果。\n * [ZSeatSelector](https://github.com/richzertuche/ZSeatSelector) - 电影院位置排座位。\n * [CustomSearchBar](https://github.com/zangqilong198812/CustomSearchBar) - 自定义searchbar,类似于instagram的搜索框效果。\n * [LNPopupController](https://github.com/LeoNatan/LNPopupController) - AppleMusic式pop up，弹出是页面，可以上下拉动。\n * [DGRunkeeperSwitch](https://github.com/gontovnik/DGRunkeeperSwitch/) - 动画segment，节选器。\n * [YXFilmSelectView](https://github.com/yixiangboy/YXFilmSelectView) - 仿造时光网选择电影票的UI而开发的一个自定义View。\n * [FJTagCollectionView](http://code.cocoachina.com/view/129152) - 标签（适配宽度）。\n * [Gecco.Swift](https://github.com/yukiasai/Gecco) - Gecco.Swift 是一款支持对视图进行局部高亮的 Swift 库, 帮助 iOS 开发者快速创建产品的新手指导界面。\n * [DFTimelineView](https://github.com/anyunzhong/DFTimelineView) - DFTimelineView仿微信朋友圈 时间轴。\n\n========\n#### 动画\n * [Core Animation笔记，基本的使用方法](http://www.starming.com/index.php?v=index&view=62) - Core Animation笔记，基本的使用方法：1.基本动画，2.多步动画，3.沿路径的动画，4.时间函数，5.动画组。\n * [awesome-ios-animation](https://github.com/sxyx2008/awesome-ios-animation) - [iOS Animation 主流炫酷动画框架(特效)收集整理](https://github.com/sxyx2008/DevArticles/issues/91) 收集整理了下iOS平台下比较主流炫酷的几款动画框架。\n * [awesome-animation](https://github.com/Animatious/awesome-animation) -  在内的十多位童鞋们一起发起的一起动画开源组正式成立啦~Github组织名称：Animatious，这是我们第一期成员先前开源的一些动效库，我们的第一个合作开源项目正在紧锣密鼓的准备~请大家期待设计和代码的碰撞吧。\n\n##### 侧滑与右滑返回手势\n * [SloppySwiper](https://github.com/fastred/SloppySwiper) - iOS系统自带的UINavigationController要7.0才支持，但不过该手势只能从屏幕左侧边缘识别，如果要扩大到整个屏幕范围怎么办？配合一个SloppySwiper无需代码就可以轻松实现。此库支持iOS5.0以上版本（另外：Nav的title滑动不明显，本人写了2个类似的控件），[SloppySwiper-demo](https://github.com/Tim9Liu9/SloppySwiper-Example) ：代码方式与storyboard方式。\n * [SCNavigation](https://github.com/singro/SCNavigation) - UINavigation可以右滑返回，隐藏UINavigationBar。\n * [UINavigationController-YRBackGesture](https://github.com/YueRuo/UINavigationController-YRBackGesture) - 支持右滑返回手势，标题栏不动。\n * [GHSidebarNav](https://github.com/gresrun/GHSidebarNav) - 现在比较流行使用侧开(侧滑)菜单设计。试了不少控件，感觉GHSidebarNav最成熟，尤其对纯代码创建的界面兼容性最好。[在Storyboard中使用GHSidebarNav侧开菜单控件](http://www.cnblogs.com/zyl910/archive/2013/06/14/ios_storyboard_sidemenu.html)。\n * [iOS-Slide-Menu](https://github.com/aryaxt/iOS-Slide-Menu) - 能够类似Facebook和Path那样弹出左右边栏侧滑菜单,还支持手势。多种可以自定义的属性 (非常不错)。\n * [ECSlidingViewController](https://github.com/ECSlidingViewController/ECSlidingViewController) - 侧滑菜单。\n * [JASidePanels](https://github.com/gotosleep/JASidePanels) - 侧滑菜单,有左右菜单，有pop功能，支持手势侧滑,本人使用中：简单。\n * [animated-tab-bar](https://github.com/Ramotion/animated-tab-bar) - 让 Tabbar items能显示萌萌的动画。\n * [tabbar图标动画](http://code.cocoachina.com/detail/284346) - tabbar上图标的动画实现，[源码推荐说明](http://www.cocoachina.com/ios/20150205/11116.html)。\n * [SideMenu](https://github.com/Yalantis/Side-Menu.iOS/tree/master/SideMenu) - swift实现，一款带动画效果可定制 Slide Menu，可以学习其动画实现思路。P.S. 对于Hamburger式菜单，虽然很常用，不过，苹果并不鼓励使用，甚至有开发小组对其弊病用自家上线应用前后数据对比进行了抨击。\n * [RESideMenu](https://github.com/romaonthego/RESideMenu) - 侧开菜单，qq类似。\n * [JHMenuTableViewDemo](https://github.com/Jiahai/JHMenuTableViewDemo) - 仿网易邮箱列表侧滑菜单。\n * [SlideMenuView](https://github.com/xudafeng/SlideMenuView) - 炫酷侧滑菜单布局框架，[Android版本的一致实现](Android 版本的一致实现请见：https://github.com/xudafeng/SlidingMenu)。\n * [QQConfiguration](https://github.com/shinept/QQConfiguration) - swift，QQ-iPhone端框架，左侧菜单栏拖动手势。\n * [KGFloatingDrawer](https://github.com/KyleGoddard/KGFloatingDrawer) - 侧滑菜单，qq类似，KyleGoddard/KGFloatingDrawer：一款适合于大屏手机或平板的浮动抽屉式导航界面组件。效果很赞- 侧开菜单，qq类似（与RESideMenu类似）。\n * [AIFlatSwitch](https://github.com/cocoatoucher/AIFlatSwitch) - 一款带平滑过渡动画的 Switch 组件类，类相同风格的 Menu/Back[HamburgerButton](https://github.com/fastred/HamburgerButton),类似相同风格的 Menu/Close[hamburger-button](https://github.com/robb/hamburger-button).\n * [JHChainableAnimations](https://github.com/jhurray/JHChainableAnimations) - 在应用中采用链式写出酷炫的动画效果, 使代码更加清晰易读，利用block实现的链式编程。\n * [WXGSlideMenuDemo](https://github.com/WXGBridgeQ/WXGSlideMenuDemo) - 个简单实现侧拉（侧滑）菜单的小demo，供初学者共同学习、练习使用。\n * [PKRevealController](https://github.com/pkluz/PKRevealController) - PKRevealController是一个可以滑动的侧边栏菜单（可向左、向右或者同时向两侧），只需手指轻轻一点（或者按一下按钮，但是这样滑动时不够炫酷），这类控制的其他库，而PKRevealController是最棒的。安装简便，高度定制且对手势识别良好。可以当做一个标准控件用在iOS SDK中。\n * [SwiftPages](https://github.com/GabrielAlva/SwiftPages) - 高可定制类似 Instagram 视图滑动切换功能类库。API 简单、易用。\n * [FlipBoardNavigationController](https://github.com/michaelhenry/FlipBoardNavigationController) - FlipBoardNavigationController。\n * [MMDrawerController](https://github.com/mutualmobile/MMDrawerController) - 最多人用的一个有关侧边“抽屉”导航框架，里面还有很多你意想不到的交互效果，侧滑。\n * [UIWebView翻页返回效果](http://code.cocoachina.com/detail/316925/UIWebView%E7%BF%BB%E9%A1%B5%E8%BF%94%E5%9B%9E%E6%95%88%E6%9E%9C%EF%BC%88%E5%8F%98%E9%80%9A%E6%96%B9%E6%B3%95%EF%BC%89/) - UIWebView翻页返回效果（变通方法）。\n * [LLSlideMenu](https://github.com/lilei644/LLSlideMenu) - 一个弹性侧滑菜单,弹性动画原理借鉴该项目中阻尼函数实现。\n\n\n##### gif动画\n * [UIImageView-PlayGIF](https://github.com/yfme/UIImageView-PlayGIF) - UIImageView-PlayGIF。\n * [YLGIFImage](https://github.com/liyong03/YLGIFImage) - YLGIFImage。\n * [YLGIFImage-Swift](https://github.com/liyong03/YLGIFImage-Swift) - YLGIFImage-Swift。\n * [droptogif](https://github.com/mortenjust/droptogif) -  droptogif视频拖拽到应用窗口后自动转换为 GIF 动画（其转换进程动画效果也超赞）。\n\n##### 其他动画\n * [popping](https://github.com/schneiderandre/popping) - popping是一个POP 使用实例工程 \n * [SinaMenuView](https://github.com/xhzengAIB/SinaMenuView) - 用POP动画引擎写的Sina微博的Menu菜单。\n * [MMTweenAnimation](https://github.com/adad184/MMTweenAnimation) - facebook POP的自定义动画扩展(基于POPCustomAnimation) 提供10种函数式动画。\n * [ZQLRotateMenu](https://github.com/pingguo-zangqilong/ZQLRotateMenu) - 这是一个旋转视图的选择器。\n * [CoolLoadAniamtion](https://github.com/pingguo-zangqilong/CoolLoadAniamtion) - 一个简单但是效果不错的loading动画。\n * [SequenRotateAnimation](https://github.com/pingguo-zangqilong/SequenRotateAnimation) - 一个简单的loading次序动画。\n * [SYAppStart](https://github.com/441088327/SYAppStart) - App启动插画的自定义过度。\n * [VJDeviceSpecificMedia](https://github.com/victorjiang/UIImage-VJDeviceSpecificMedia/) - [如何根据设备选择不同尺寸的图片](http://www.imooc.com/wenda/detail/249271) 可以通过设置不同尺寸设备的LaunchImage，来使得App适配这些设备，要是在不同不同尺寸设备上使用不同大小的图片，则需要在代码中一一判断，然后加载。 \n * [RMParallax](https://github.com/michaelbabiy/RMParallax) - RMParallax是一个app启动页引导开源项目，除了细微的翻页视差效果，描述文本的过渡也非常美观（版本新特性、导航页、引导页）。\n * [ADo_GuideView](https://github.com/Nododo/ADo_GuideView) - 转动的用户引导页(模仿网易bobo) 因为没有从app包里抓到@3x的图片,建议在iPhone5模拟器运行,保证效果~ （版本新特性、导航页、引导页）。\n * [CoreNewFeatureVC](https://github.com/nsdictionary/CoreNewFeatureVC) - 版本新特性（引导页），1.封装并简化了版本新特性启动视图！2.添加了版本的本地缓存功能，3.集成简单，使用方便，没有耦合度，4.支持block回调（版本新特性、导航页、引导页）。\n * [MZGuidePages](https://github.com/MachelleZhang/MZGuidePages) - 自己写的通用导航页，可以直接引入工程使用，请参考案例（版本新特性、导航页、引导页）。\n * [ABCIntroView](https://github.com/AdamBCo/ABCIntroView) - ABCIntroView是一个易于使用的入门类，让你到达主屏幕之前介绍你的应用程序（版本新特性、导航页、引导页）。\n * [Spring](https://github.com/MengTo/Spring) - Spring是一个Swift编写的开源库，可简化Swift编写的iOS动画。支持shake、pop、morph、squeeze、wobble、swing、flipX、flipY、fall、squeezeLeft、squeezeRight以及squeezeDown等多种动画形式，用 IBDesignable 让使用者可以在 Xcode 中快速设置动画效果。\n * [KYBezierBounceView](https://github.com/KittenYang/KYBezierBounceView) - 手势控制贝塞尔曲线，取消手势贝塞尔曲线会有反弹效果。\n * [cadisplaylinkanduibezierpath](http://kittenyang.com/cadisplaylinkanduibezierpath/) - CADisplayLink结合UIBezierPath的神奇妙用。\n * [KYCuteView](https://github.com/KittenYang/KYCuteView) - 实现类似QQ消息拖拽消失的交互+GameCenter的浮动小球效果，[分析](http://kittenyang.com/drawablebubble/)。\n * [KYWaterWaveView](https://github.com/KittenYang/KYWaterWaveView) - 一个内置波浪动画的UIView，里面有鱼跳跃水溅起来的效果。\n * [WaveLoadingView](https://github.com/liuzhiyi1992/WaveLoadingView) - iOS 唯一完美的波浪进度加载指示器，[实现说明](http://zyden.vicp.cc/waveloadingindicator/)。\n * [KYPingTransition](https://github.com/KittenYang/KYPingTransition) - 实现圆圈放大放小的转场动画，可以根据自己的需要使用Paper中的弹性效果，有Material风格。\n * [KYNewtonCradleAnimiation](https://github.com/KittenYang/KYNewtonCradleAnimiation) - 牛顿摆动画。\n * [LayerPlayer](https://github.com/scotteg/LayerPlayer) - 一款全面展示核心动画 API 示例项目（上架应用）。包括 CALayer, CAScrollLayer, CATextLayer, AVPlayerLayer, CAGradientLayer, CAReplicatorLayer, CATiledLayer, CAShapeLayer, CAEAGLLayer, CATransformLayer, CAEmitterLayer 等使用的互动演示。\n * [JGTransitionCollectionView](https://github.com/JayGajjar/JGTransitionCollectionView) - swift，基于集合视图扩展实现完成自动布局及单元项 Flip式动画效果（效果很赞）。组件使用方便、自然（只需设置集合视图数据源的标准方式即可）。\n * [KYShareMenu](https://github.com/KittenYang/KYShareMenu) - 带弹性动画的分享菜单。\n * [Context-Menu.iOS](https://github.com/Yalantis/Context-Menu.iOS) - 可以为app的菜单添加漂亮的动画内容，可自定义icon，并可根据自己的喜好设计单元格和布局。\n * [DeformationButton](https://github.com/LuciusLu/DeformationButton) - 一个简单的变换形状动画按钮。\n * [UnReadBubbleView](https://github.com/heroims/UnReadBubbleView) - UnReadBubbleView是一个能够拖拽并拉长的气泡视图。拖拽到一定的长度会消失，可以通过系数设置来控制拖拽的长度。气泡也支持多种属性设置。 \n * [PPDragDropBadgeView](https://github.com/smallmuou/PPDragDropBadgeView) - 实现了类似于QQ 5.0 水滴拖拽效果. 支持iOS 5.0+ ARC，气泡能够带有数字标识，同时支持消失block方法。消失时还带有消失效果动画。\n * [GiftCard-Implementation](https://github.com/MartinRGB/GiftCard-Implementation) - 购买的炫酷动画。\n * [SDCycleScrollView](https://github.com/gsdios/SDCycleScrollView) - 无限循环自动图片轮播器(一步设置即可使用)。\n * [BuildAnInfiniteCarousel](https://github.com/johnlui/Swift-On-iOS/tree/master/BuildAnInfiniteCarousel) - 自己动手造无限循环图片轮播，[教程](https://autolayout.club/2015/10/29/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E9%80%A0%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF%E5%9B%BE%E7%89%87%E8%BD%AE%E6%92%AD/)。\n * [iCarousel](https://github.com/nicklockwood/iCarousel) - iCarousel是一个类，它继承于UIView。用于简化实现各种类型的旋转木马(分页滚动视图），无限轮播 ，[iOS开发之多图片无缝滚动组件封装与使用](http://www.cocoachina.com/ios/20150828/13198.html)。\n * [KIPageView](https://github.com/smartwalle/KIPageView) - 无限循环PageView，横向TableView，无限轮播。\n * [简单实用的无限循环轮播图](http://code.cocoachina.com/view/128288) - 简单实用的无限循环轮播图 。\n * [XTLoopScroll](https://github.com/Akateason/XTLoopScroll) - 用两个 timer 三个重用的 view 实现无限循环 scrollView，1自动轮播 2点击监听回调当前图片 3手动滑动后重新计算轮播的开始时间, 良好的用户体验。\n * [HotGirls](https://github.com/zangqilong198812/HotGirls) - 卡片动画。\n * [tispr-card-stack](https://github.com/tispr/tispr-card-stack) - swift 卡片风格动画切换组件及完整交互示例。\n * [ZLSwipeableViewSwift](https://github.com/zhxnlai/ZLSwipeableViewSwift) - swift 卡片堆叠效果的实现（ZLSwipeableView)】可实现类似Tinder和Potluck应用程序的卡片堆叠效果，该项目基于[ZLSwipeableView objective-c](https://github.com/zhxnlai/ZLSwipeableView/)实现。1.自定义动画。2.自定义滑动切换。3.自定义方向。4.撤销。\n * [Koloda](https://github.com/Yalantis/Koloda) - 基于卡片的 Tinder-style 动画效果示例。精细绝人。更赞的是额外附了详细开发教程 How We Built Tinder-Like Koloda Animation in Swift [网页链接](https://yalantis.com/blog/how-we-built-tinder-like-koloda-in-swift/) 。Yalantis 出品动画程序款款精品。\n * [QQPersonalInfoTransition](https://github.com/zangqilong198812/QQPersonalInfoTransition) - 仿照QQ的转场。\n * [KYAnimatedPageControl](https://github.com/KittenYang/KYAnimatedPageControl) - 除了滚动视图时PageControl会以动画的形式一起移动，点击目标页还可快速定位。支持两种样式：粘性小球和旋转方块。\n * [KDIntroView](https://github.com/likedan/KDIntroView) - swift 动态介绍视图框架及演示。另外两个相似的类库是 RazzleDazzle和 Presentation，择需使用。 \n * [RazzleDazzle](https://github.com/IFTTT/RazzleDazzle) - 【IFTTT开源Swift编写的帧动画框架--RazzleDazzle】RazzleDazzle 是IFTTT开源的一个iOS帧动画框架，非常适用于APP初次使用时的介绍和引导信息。JazzHands是UIKit一个简单的关键帧基础动画框架，可通过手势、scrollview、KVO等控制动画，被IFTTT应用在IFTTT for iPhone上。\n * [Presentation](https://github.com/hyperoslo/Presentation) - 一个类似RazzleDazzle的框架。\n * [FillableLoaders](https://github.com/poolqf/FillableLoaders) - 基于 CGPaths 可定制个性化填空式装载类库。附水波上涨式示例。\n * [SXWaveAnimate](https://github.com/dsxNiubility/SXWaveAnimate) - 实现非常美观的灌水动画。\n * [LSPaomaView](https://github.com/liusen001/LSPaomaView) - 可循环滚动的较长文字，跑马灯，效果很好，一句话集成。\n * [SIFloatingCollection_Swift](https://github.com/ProudOfZiggy/SIFloatingCollection_Swift) - 可定制的 Apple Music 风格浮动形状动画组件及演示。\n * [Cheetah](https://github.com/suguru/Cheetah) - 易用、高可读链式动画类库。另一个类似类库是 [DKChainableAnimationKit](https://github.com/Draveness/DKChainableAnimationKit)。\n * [CKWaveCollectionViewTransition](https://github.com/CezaryKopacz/CKWaveCollectionViewTransition) - swift， UICollectionViewController之间切换的动画。\n * [TKSubmitTransition](https://github.com/entotsu/TKSubmitTransition) - 基于 UIButton 的登录加载、返回按钮转场动画组件及示例。\n * [ARAnimation](https://github.com/AugustRush/ARAnimation) - ARAnimation 对 Core Animation 进行了封装, 帮助 iOS 开发者能更加便捷的在项目中使用动画。\n * [CardsAnimationDemo]https://github.com/adow/CardsAnimationDemo) - swift， [《使用 UICollectionView 实现的一个卡片动画》](http://swiftcn.io/topics/64?f=w)不是直接操作所有 UIView 和 CALayer 的 transform3D 属性来实现整个效果的，而是使用 UICollectionView 来完成所有的视图管理和实现。\n * [TKRubberIndicator.swift](https://github.com/TBXark/TKRubberIndicator) - 一个很不错的 page control。\n * [渐变特效文字](http://code.cocoachina.com/view/127174) - 做了一个仿iPhone的移动滑块来解锁的渐变特效文字,还有一个类似ktv歌词显示的文字特效。\n * [TTGEmojiRate.swift](https://github.com/zekunyan/TTGEmojiRate) - TTGEmojiRate.swift以Emoji表情为基础绘图，[Swift开源项目: TTGEmojiRate的实现](http://tutuge.me/2015/10/25/ttgemojirate-lib/)。\n * [HYAwesomeTransition](https://github.com/nathanwhy/HYAwesomeTransition) - 模仿格瓦拉的转场效果。\n * [CardAnimation.swift](https://github.com/seedante/CardAnimation) - CardAnimation 是国人开发的一个用 Swift 实现卡片垂直翻转动画的 Demo, [实现思路](http://www.jianshu.com/p/286222d4edf8)。\n * [TaskSwitcherDemon](https://github.com/Glow-Inc/TaskSwitcherDemon) -  是仿造iOS9的Task Switcher做出来的动画效果, 具体的实现思路可参照[这篇文章](http://tech.glowing.com/cn/implement-ios9-task-switcher-animation/)。\n * [CoreAnimationCode.swift](https://github.com/lzwjava/CoreAnimationCode) - 提供了 \"iOS Core Animation Advanced Techniques\" 书籍中的代码实例, 方便开发者们进行参考学习。\n * [UIViewXXYBoom.swift](https://github.com/xxycode/UIViewXXYBoom) - 一个炫酷好玩的爆炸效果，[如何实现这个效果](http://xxycode.com/ru-he-zhi-zuo-ge-xuan-ku-hao-wan-de-bao-zha-xiao-guo-2/)。\n * [ZLSwipeableViewSwift](https://github.com/zhxnlai/ZLSwipeableViewSwift) - [ZLSwipeableView](https://github.com/zhxnlai/ZLSwipeableView) - ZLSwipeableViewSwift在Tinder and Potluck中的动画效果实现思路（连续卡片翻页效果），最贴心的是作者提供了OC和Swift两个版本来供开发者使用，非常丝滑顺畅的效果。\n * [RYCuteView](https://github.com/Resory/RYCuteView) - 用UIBezierPath实现果冻效果。 [教程](http://www.jianshu.com/p/21db20189c40)\n * [IBAnimatable.swift](https://github.com/JakeLin/IBAnimatable) - 第三方开源库IBAnimatable可以帮助我们在Interface Builder和Swift Playground里面设计UI, 交互, 导航模式, 换场和动画。\n * [circle-menu.swift](https://github.com/Ramotion/circle-menu) - 动画效率很赞的圆形缩放菜单演示及类库。\n\n========\n#### 网络相关\n##### 网络连接\n* [AFNetworking](https://github.com/AFNetworking/AFNetworking) - ASI不升级以后，最多人用的网络连接开源库，[iOS网络编程之AFNetworking使用](http://www.superqq.com/blog/2014/11/07/ioswang-luo-bian-cheng-zhi-afnetworkingshi-yong/),[iOS开发下载文件速度计算](http://www.superqq.com/blog/2015/01/29/ioskai-fa-xia-zai-wen-jian-su-du-ji-suan/) , [AFNetworking 3.0迁移指南](http://www.cocoachina.com/ios/20151022/13831.html) , [AFNetworking2.0源码解析<一>](http://www.cocoachina.com/ios/20140829/9480.html) 、[AFNetworking2.0源码解析<二>](http://www.cocoachina.com/ios/20140904/9523.html)、[AFNetworking源码解析<三>](http://www.cocoachina.com/ios/20140916/9632.html)、[AFNetworking源码解析<四>](http://www.cocoachina.com/ios/20141120/10265.html)。\n* [Alamofire](https://github.com/Alamofire/Alamofire) - Alamofire是AFNetworking的作者mattt新写的网络请求的swift库。\n* [YTKNetwork](https://github.com/yuantiku/YTKNetwork) - 是基于 AFNetworking 封装的 iOS网络库，提供了更高层次的网络访问抽象。相比AFNetworking，YTKNetwork提供了以下更高级的功能：按时间或版本号缓存网络请求内容、检查返回 JSON 内容的合法性、文件的断点续传、批量的网络请求发送、filter和插件机制等。\n* [HYBNetworking](https://github.com/CoderJackyHuang/HYBNetworking) - 基于AFN封装的网络库，可以通用。[基于AFNetworking封装网络库说明](http://www.henishuo.com/base-on-afnetworking-wrapper/)目前已经提供了通用的GET/POST、上传、下载API等。\n* [LxFTPRequest](https://github.com/DeveloperLx/LxFTPRequest) - 支持获取FTP服务器资源列表，下载/上传文件，创建/销毁ftp服务器文件/目录，以及下载断点续传，下载/上传进度，自动判断地址格式合法性跟踪等功能！国人开发，QQ：349124555。\n* [HSDownloadManager](https://github.com/HHuiHao/HSDownloadManager) - HSDownloadManager，下载音乐、视频、图片各种资源，支持多任务、断点下载。\n* [MutableUploadDemo](https://github.com/HHuiHao/MutableUploadDemo) - 模拟需求：图文混编，要求用户选择图片后就上传，可选择多图，并行上传，用户确定提交后后台执行，必须全部图片上传完才能提交文字。\n* [WTRequestCenter](https://github.com/swtlovewtt/WTRequestCenter) - 方便缓存的请求库，提供了方便的HTTP请求方法，传入请求url和参数，返回成功和失败的回调。 UIKit扩展提供了许多不错的方法，快速缓存图片，图片查看，缩放功能， 颜色创建，设备UUID，网页缓存，数据缓存等功能。 无需任何import和配置，目前实现了基础需求。\n* [MMWormhole](https://github.com/mutualmobile/MMWormhole) - Message passing between iOS apps and extensions 2个iOS设备之间通信。 \n* [socket.io-client-swift](https://github.com/socketio/socket.io-client-swift) - WebSockect 客户端类库。开放的通讯协议，有利于构建强大地跨平台应用。 \n* [Transporter](https://github.com/nghialv/Transporter) - swift， 短小、精悍、易用的多文件（并发或顺序）上传和下载传输库。还支持后台运行、传输进程跟踪、暂停/续传/取消/重试控制等功能。 \n* [STNetTaskQueue](https://github.com/kevin0571/STNetTaskQueue) - STNetTaskQueue Objective-C 可扩展网络请求管理库。\n* [CocoaAsyncSocket](https://github.com/robbiehanson/CocoaAsyncSocket) - 在iOS开发中使用socket，一般都是用第三方库AsyncSocket，不得不承认这个库确实很强大，[使用教程](http://www.superqq.com/blog/2015/04/03/ioskai-fa-zhi-asyncsocketshi-yong-jiao-cheng/)。\n* [AsyncSocket](https://github.com/roustem/AsyncSocket) - AsyncSocket。\n* [Socket通信](http://code.cocoachina.com/view/128711) - 通过AsyncSocket封装的Socket通讯方法，简单实用，通俗易懂，初学者不能错过 。\n* [GCDAsyncSocket](https://github.com/eugenehp/GCDAsyncSocket) - GCDAsyncSocket ， [不错的Demo](https://github.com/smalltask/TestTcpConnection)。\n* [Just](https://github.com/JustHTTP/Just) - 小而美的 HTTP 类。功能简单、直接、完整且健壮性高-- swift。\n* [Future](https://github.com/nghialv/Future) - 基于微框架设计思想的异步执行及结果响应类，代码即简单又干净-- swift。\n* [MZDownloadManager](https://github.com/mzeeshanid/MZDownloadManager) - 下载管理。 \n* [DVR](https://github.com/venmo/DVR) - 针对网络请求的测试框架，超实用的工具。且支持 iOS, OSX, watchOS 全平台。\n* [HFDownLoad](https://github.com/hongfenglt/HFDownLoad) - iOS开发网络篇之文件下载、大文件下载、断点下载:NSData方式、NSURLConnection方式、NSURLSession下载方式 [下载方式具体的思路、区别见Blog](http://blog.csdn.net/hongfengkt/article/details/48290561) 。\n* [Pitaya.swift](https://github.com/johnlui/Pitaya) - Pitaya 是纯 Swift 写的 iOS 网络库，支持 Basic Authorization、SSL 钢钉、HTTP raw body / JSON body、快速文件上传等特性，并通过内置 JSONNeverDie 实现了对 JSON 的完全支持，开箱即用。 [中文文档](https://github.com/johnlui/Pitaya/wiki/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3)\n\n##### 图像获取\n* [SDWebImage](https://github.com/rs/SDWebImage) - SDWebImage 网络图片获取及缓存处理。\n* [Kingfisher](https://github.com/onevcat/Kingfisher) - 纯 Swift 实现的类 SDWebImage 库，实现了异步下载和缓存图片。\n* [KFSwiftImageLoader](https://github.com/kiavashfaisali/KFSwiftImageLoader) - Swift，一个图像缓存加载库。 \n* [FastImageCache](https://github.com/path/FastImageCache) - FastImageCache 网络图片获取及缓存处理，[iOS图片加载速度极限优化—FastImageCache解析](http://www.imooc.com/wenda/detail/247239)。\n* [EGOCache](https://github.com/enormego/EGOCache) - 十分知名的第三方缓存类库，可以缓存NSString、UIImage、NSImage以及NSData。除此，如果还可以缓存任何一个实现了<NSCoding>接口的对象。所有缓存的数据都可以自定义过期的时间，默认是1天。EGOCache 支持多线程（thread-safe），[UITableView加载多张照片导致内存上涨的问题](http://www.superqq.com/blog/2014/11/06/ioskai-fa-:uitableviewjia-zai-duo-zhang-zhao-pian-dao-zhi-nei-cun-shang-zhang-de-wen-ti/)。\n * [YYWebImage](https://github.com/ibireme/YYWebImage/) - 一个图片加载库 YYWebImage，支持 APNG、WebP、GIF 播放，支持渐进式图片加载，更高性能的缓存，更多图像处理方法，可以替代 SDWebImage 等开源库，[相关文章](http://blog.ibireme.com/2015/11/02/mobile_image_benchmark/)。\n\n##### 网络聊天\n* [XMPPFramework](https://github.com/robbiehanson/XMPPFramework) - XMPPFramework openfire聊天。\n* [SXTheQQ](https://github.com/dsxNiubility/SXTheQQ) - 用xmppFramework框架编写QQ程序，主要为了练习通讯的一些原理，界面比较渣 必须要先在本地配置好环境才可以运行。\n* [环信](http://www.easemob.com/) - 给开发者更稳定IM云功能。8200万用户考验，好用！（暂无及时语音、视频通话）\n* [融云](http://www.rongcloud.cn/) - 即时通讯云服务提供商。（暂无及时语音、视频通话）\n* [容联云通讯](http://www.yuntongxun.com) - 提供基于互联网通话,视频会议,呼叫中心/IVR,IM等通讯服务。\n* [chatsecure](https://github.com/ChatSecure/ChatSecure-iOS) - 基于XMPP的iphone、android加密式聊天软件， [chatsecure官网](https://chatsecure.org/) 。 [iOS代码1](https://github.com/chrisballinger/Off-the-Record-iOS)，[iOS代码2](https://github.com/chrisballinger/ChatSecure-iOS)， [iOS中文版](http://www.cocoachina.com/bbs/read.php?tid=153156)。\n* [MessageDisplayKit](https://github.com/xhzengAIB/MessageDisplayKit) - 仿微信聊天，参考JSQMessagesViewController。（国人写）\n* [JSQMessagesViewController](https://github.com/jessesquires/JSQMessagesViewController) - 聊天 。 \n* [SunFlower](https://github.com/HanYaZhou1990/-SunFlower) - 环信聊天demo，比较多功能 。\n* [BlueTalk蓝牙聊天](http://code4app.com/ios/BlueTalk%E8%93%9D%E7%89%99%E8%81%8A%E5%A4%A9-%E6%89%8B%E6%9C%BA%E4%B9%8B%E9%97%B4/552b8190933bf0291e8b4748) - 以MultipeerConnectivity为基础， 实现了简单的蓝牙聊天。\n\n\n##### 网络测试\n * [Reachability](https://github.com/tonymillion/Reachability) - 苹果提供过一个Reachability类，用于检测网络状态。但是该类由于年代久远，并不支持ARC。该项目旨在提供一个苹果的Reachability类的替代品，支持ARC和block的使用方式。[iOS网络监测如何区分2、3、4G](http://www.jianshu.com/p/efcfa3c87306)   \n * [Reachability.swift](https://github.com/ashleymills/Reachability.swift) - 用于替换苹果的 Reachability 类，可以方便地检测当前是否联网以及具体的联网状态。 \n * [SimpleCarrie](https://github.com/crazypoo/SimpleCarrie) - 简单的运营商信息获取!。\n * [NetReachability](https://github.com/crazypoo/SimpleCarrie) - swift2.0 简单的方法检查网络连接的连通性，提供通知中心集成接口。 \n * [NetworkEye](https://github.com/coderyi/NetworkEye) - 一个网络调试库，可以监控App内HTTP请求并显示请求相关的详细信息，方便App开发的网络调试。 \n * [SimpleBS.swift](https://github.com/bin1991/SimpleBS) - 网络测试小工具。\n\n##### WebView\n * [MGTemplateEngine](https://github.com/mattgemmell/MGTemplateEngine) - MGTemplateEngine比较象 PHP 中的 Smarty、FreeMarker 和 Django的模版引擎，是一个轻量级的引擎，简单好用。只要设置很多不同的HMTL模版，就能轻松的实现一个View多种内容格式的显示，对于不熟悉HTML或者减轻 工作量而言，把这些工作让设计分担一下还是很好的，也比较容易实现设计想要的效果。\n * [NJKWebViewProgress](https://github.com/ninjinkun/NJKWebViewProgress) - 一个 UIWebView 的进度条接口库,UIWebView 本身是不提供进度条的。 \n * [GTMNSString-HTML](https://github.com/siriusdely/GTMNSString-HTML) - 谷歌开源的用于过滤HTML标签。 \n * [js-in-ios](https://github.com/WangXiaoxi/IOSLearing/) - webView与js的交互。 \n* [D3Generator](https://github.com/mozhenhau/D3Generator/) - D3Generator根据dict字典生成对象。 适用webview和push推送时，根据后台传回字典实现动态跳转。[实现说明](http://mozhenhau.com/2016/02/07/D3Generator实现万能跳转界面，UIWebview与js随意交互/)\n\n========\n#### Model\n * [JSONKit](https://github.com/johnezang/JSONKit) - JSONKit库是非常简单易用而且效率又比较高的，重要的JSONKit适用于ios 5.0以下的版本,使用JSONKit库来解析json文件，只需要下载JSONKit.h 和JSONKit.m添加到工程中；然后加入libz.dylib即可。\n * [JSONModel](https://github.com/icanzilb/JSONModel) - 解析服务器返回的Json数据的库,[JSONModel源码解析一](http://www.jianshu.com/p/3d795ea37835)。\n * [Mantle](https://github.com/Mantle/Mantle) - Mantle主要用来将JSON数据模型化为OC对象, 大系统中使用。[为什么选择Mantle](http://www.iwangke.me/2014/10/13/Why-Changba-iOS-choose-Mantle/)。\n * [RFJModel](https://github.com/refusebt/RFJModel) - RFJModel是一个IOS类库，可以将JSON字典自动装填到OBJC对象。相比JSONModel有一些非常好的特性，使用上也比较简单。\n * [XMLDictionary](https://github.com/nicklockwood/XMLDictionary) - ios与mac os平台下xml与NSDictionary相互转化开源类库。\n * [MJExtension](https://github.com/CoderMJLee/MJExtension) - 用于json转model进行使用，转换效率很高，使用也比较简单，只要前后台约定好，json直接就转成了model。\n * [CFRuntime](https://github.com/CoderMJLee/MJExtension) - “Swift 版的 MJExtension，运行时、反射与一键字典模型互转”。 \n * [DDModel](https://github.com/openboy2012/DDModel) - 快速搭建项目Model层，支持ORM映射关系，能从JSON/XML直接实例一个Model对象。支持SQLite本地数据持久化，封装了HTTP， 减少HTTP代码与UIViewController的代码耦合，支持Cache；类似RESTKit、Mantle的功能；使用该类库以后简化了网络层的开发工作，把更多的精力放在UI上面；目前只支持GET/POST方法的请求。使用到的第三方库有：1.SQLitePersistentObject; 2.JTObjectMapping; 3.AFNetworking; 4.XMLDictionary;\n * [protobuf-swift](https://github.com/alexeyxo/protobuf-swift) - Protocol Buffers 的 Swift 语言实现库。P.S. Protocol Buffers 是 Google 开源项目，主要功能是实现直接序列化结构化的对象数据，方便跨平台快速传递，开发者也可以直接修改 protobuf 中的数据。相比 XML 和 JSON，protobuf 解析更快，存储更小。\n * [JSONCodable](https://github.com/matthewcheok/JSONCodable) - 基于 Swift 2.0 新特性（Protocol Extensions and Error Handling）的JSON 解析类。\n * [SwiftyJSON](https://github.com/SwiftyJSON/SwiftyJSON) - 使Swift的JSON解析变得简单。\n * [JSONNeverDie.swift](https://github.com/johnlui/JSONNeverDie) - JSON 到 Model 类的自动映射工具。\n * [Fuzi.swift](https://github.com/cezheng/Fuzi) - Swift实现的轻量快速的 XML/HTML 解析器。\n * [SWXMLHash.swift](https://github.com/drmohundro/SWXMLHash) - 易用的 XML 解析类库。非常实用的“轮子”。\n * [YYModel](https://github.com/ibireme/YYModel) - 高性能的 iOS JSON 模型框架。\n * [TidyJSON.swift](https://github.com/benloong/TidyJSON) - TidyJSON.swift一款简单、易用、明了的 JSON 解析小类库。\n * [PMJSON.swift](https://github.com/postmates/PMJSON) - PMJSON.swift简单、实用、高效的 JSON 解析类库。\n\n\n========\n#### 通讯录\n* [快速查找联系人](http://code.cocoachina.com/view/128245) - 类似微信联系人搜索的界面,快速查找联系人,并支持点击查询结果 。\n\n\n========\n#### 其他\n * [DateTimeKit](https://github.com/exsortis/DateTimeKit) - 一个超赞的时间处理的库，Joda-Time ！ 他能帮你轻松处理时区，处理时间加减，计算到期时间等等场景下的问题。\n * [SwiftDate](https://github.com/malcommac/SwiftDate) - 特别完整、强大的日期时间操作管理类库。它几乎涵盖了已知开源日期类库所有优秀特性。 他能帮你轻松处理时区，处理时间加减，计算到期时间等等场景下的问题。\n * [iOS私有API](https://github.com/nst/iOS-Runtime-Headers) - 私有API，绿色 == public，红色 == private，蓝色 == dylib。\n * [iOS源代码](http://opensource.apple.com/source/CF/) - iOS源代码。\n * [libfacedetection](https://github.com/ShiqiYu/libfacedetection) - C++ 人脸识别 包含正面和多视角人脸检测两个算法.优点:速度快(OpenCV haar+adaboost的2-3倍), 准确度高 (FDDB非公开类评测排名第二），能估计人脸角度。 \n * [Slidden](https://github.com/Brimizer/Slidden) - 一个老外开源的开发自定义键盘的库，利用这个开源库，可以方便的配置键位、颜色以及键位对应的图片。\n * [TPKeyboardAvoiding](https://github.com/michaeltyson/TPKeyboardAvoiding) - 用户键盘弹出自动计算高度，进行屏幕滚动操作。\n * [CDPMonitorKeyboard](http://d.cocoachina.com/code/detail/298267) - CDPMonitorKeyboard封装,可以解决输入视图(例如textField,textView等)被键盘覆盖问题，并可设置高于键盘多少。 \n * [自动监听键盘高度](http://code.cocoachina.com/detail/297973/%E8%87%AA%E5%8A%A8%E7%9B%91%E5%90%AC%E9%94%AE%E7%9B%98%E9%AB%98%E5%BA%A6/) - 自动监听键盘高度，初始界面，输入框在屏幕最下方，当键盘出现时，输入框随即移动到键盘上方。 \n * [KeyboardToolBar](https://github.com/Jiar/KeyboardToolBar/) - 从此不再担心键盘遮住输入框，[文档](http://www.jianshu.com/p/48993ff982c1)。\n * [SYKeyboardTextField](https://github.com/441088327/SYKeyboardTextField) - SYKeyboardTextField 是一个轻巧,简单,非侵入式的键盘附随输入框! 采用Swift编写。\n * [BlocksKit](https://github.com/zwaldowski/BlocksKit) - block框架，为 OC 常用类提供了强大的 Block 语法支持，使得编写 OC 代码变得舒适、快速、优雅。\n * [KVOController](https://github.com/facebook/KVOController) - 在项目中有使用 KVO ，那么 KVOController 绝对是个好选择。它是 facebook 开源的一个 KVO 增强框架。 \n * [appirater](https://github.com/arashpayan/appirater) - 用于提醒用户给你的 APP 打分的工具。\n * [MotionKitr](https://github.com/MHaroonBaig/MotionKitr) - 为核心运动框架（The Core Motion framework）提供友好的类库封装，以更方便使用三轴陀螺仪和加速感应器特性。\n * [Review Monitor](https://launchkit.io/reviews/) -  第一时间自动推送 Apple Store 的用户评论到你的邮件箱或者 Slack，第一时间跟进用户反馈，打造优秀 App 必备工具！类似的有：App annie 的类似功能。\n * [WBWebViewConsole](https://github.com/Naituw/WBWebViewConsole) - 类似微博iPhone客户端的 “调试选项” 吗？把其中的 “内置浏览器网页调试” 开源在 Github 上了。\n * [ios-good-practices](https://github.com/futurice/ios-good-practices) - ios-good-practices iOS 开发最佳实践。\n * [iOS开发最佳实践](http://ios.jobbole.com/81830/) - iOS 开发最佳实践 -- 中文。\n * [TodayExtensionSharingDefaults](http://code.cocoachina.com/detail/232160) - TodayExtensionSharingDefaults是一个iOS 8 Today扩展示例，可以使用NSUserDefaults与其containing app分享数据。\n * [原生实现扫描二维码条码](http://code.cocoachina.com/view/129108) - iOS原生实现扫描二维码条码.\n * [QRCodeReader.swift](https://github.com/yannickl/QRCodeReader.swift) - QRCodeReader.swift一款简单的 QR 二维码阅读组件及示例，提供前后相机切换功能。\n * [swiftScan](https://github.com/MxABC/swiftScan) - 具有丰富功能的二维码扫描组件及类库。[对应OC版本LBXScan](https://github.com/MxABC/LBXScan)。\n * [QR-Code-Generator.swift](https://github.com/appcoda/QR-Code-Generator) - 生成二维码。\n * [QRCatcher](https://github.com/100mango/QRCatcher) - 一个简洁美观的二维码扫描应用， [iOS学习：AVFoundation 视频流处理--二维码扫描](https://github.com/100mango/zen/blob/master/iOS%E5%AD%A6%E4%B9%A0%EF%BC%9AAVFoundation%20%E8%A7%86%E9%A2%91%E6%B5%81%E5%A4%84%E7%90%86/iOS%E5%AD%A6%E4%B9%A0%EF%BC%9AAVFoundation%20%E8%A7%86%E9%A2%91%E6%B5%81%E5%A4%84%E7%90%86%20.md)。\n * [MQRCodeReaderViewController](https://github.com/zhengjinghua/MQRCodeReaderViewController) - 二维码扫描控件, UI 做了优化, 仿造微信, 直接拖进项目就可使用。\n * [Parsimmon](https://github.com/ayanonagon/Parsimmon) - swift，小而美的语言学类库封装工具包。提供分词、标记词性、词形归并、朴素贝页斯分类、决策树等自然语言分析小工具。P.S. 英语分词效果好于中文，感兴趣的同学可以针对中文做一些优化开发。参考译文 NSHipster - [NSLinguistic​Tagger](http://nshipster.cn/nslinguistictagger/)。\n * [Password-keyboard](https://github.com/liuchunlao/Password-keyboard) - 随机变换数字位置的密码键盘。 模仿银行类应用在付款时输入的随机密码键盘。\n * [MKMapView-Extension](https://github.com/SemperIdem/MKMapView-Extension) - 这是关于 MKMapView 写的一个基于swift的扩展，可以扩展 MKMapView 的相关功能，减少复用代码量。\n * [SemverKit](https://github.com/nomothetis/SemverKit) - 针对符合『语义化版本规范 2.0.0』版本号的解析、比较运算类库。不仅支持 Major, Minor, Patch，还支持 Alpha 和 Beta 预发布版本，以及相应地递增运算扩展。\n * [SwiftValidator](https://github.com/jpotts18/SwiftValidator) - 基于规则的输入验证类库。项目良好的面向对象设计思想，使规则的扩展及自定义非常方便。更专业的规则引擎（甚至是基于自然语言的规则配置）解决方案，比如：开源的 Drools，商用的 ILOG 等。\n * [Tesseract-OCR-iOS](https://github.com/gali8/Tesseract-OCR-iOS) - 有关OCR文字识别项目。\n * [Screenotate](https://github.com/osnr/Screenotate) - 支持 OCR 文字识别的载屏笔记 Mac 完整应用。\n * [cocoacats](http://cocoacats.com/) - 【分类汇总】里面收集了 iOS 中常用的分类文件，一直在更新。\n * [Olla4iOS](https://github.com/nonstriater/Olla4iOS) - 过去积累的一些方便复用的类和方法，还在整理中。\n * [DKNightVersion](https://github.com/Draveness/DKNightVersion) - 用最快的方式给你的应用加上夜间和白天的切换效果。 \n * [TouchVisualizer](https://github.com/morizotter/TouchVisualizer) - 实用的多点触摸可视化组件。扩展并作用于 UIWindows，结构上提供了简单地针对触摸显示定制，比如触摸点的颜色。\n * [RegexKitLite](https://github.com/wezm/RegexKitLite) - 用来处理正则表达式。 \n * [Regex.swift](https://github.com/sharplet/Regex) - 实用的正则表达式微框架类库。\n * [PySwiftyRegex.swift](https://github.com/cezheng/PySwiftyRegex) - 像Python一样简洁高效地作正则处理。\n * [PhoneNumberKit.swift](https://github.com/marmelroy/PhoneNumberKit) -  解析、格式化及验证国际电话号码工具库（相当于 Google 的 libphonenumber 库的 Swift 版本）。\n * [XcodeServerSDK](https://github.com/czechboy0/XcodeServerSDK) - 非官方 Xcode Server SDK 封装库。 P.S. 该 SDK 分离自之前推荐的由该作者开发的自动测试框架 [Buildasaur](https://github.com/czechboy0/Buildasaur)。\n * [BFKit-Swift](https://github.com/FabrizioBrancati/BFKit-Swift) - BFKit-Swift 这套工具库可以提高应用开发效率。 \n * [CKSIncrementalStore](https://github.com/CloudKitSpace/CKSIncrementalStore) - 基于 CloudKit 服务器实现多终端数据同步。\n * [SwiftSequence](https://github.com/oisdk/SwiftSequence) - 简洁、灵活、多变的操作 SequenceType 的类库（基于微框架（μframework）设计思想）。\n * [IDNFeedParser](https://github.com/photondragon/IDNFeedParser) - 一个简单易用的Rss解析库。\n * [CoreUmeng](https://github.com/nsdictionary/CoreUmeng) - 简单：友盟分享封装。\n * [openshare](https://github.com/100apps/openshare) - 不用官方SDK，利用社交软件移动客户端(微信/QQ/微博/人人/支付宝)分享/登录/支付。\n * [Swifternalization](https://github.com/tomkowz/Swifternalization) - 一套实用的本地化工具库。使用教程及 API 文档完整。值得收入项目的“轮子”。\n  * [Localize-Swift](https://github.com/marmelroy/Localize-Swift) - Localize-Swift一款开发者不可或缺的国际化及本地化字符串框架支持类库。同样地，使用简单、直观又方便。\n * [apous](https://github.com/owensd/apous) - 一款有趣的 Swift 应用 － 让 Swift 成为脚本语言。\n * [Mirror](https://github.com/kostiakoval/Mirror) - 通过反射（Refection）实现镜像对象封装库。从而可以更轻松获取（或输出）对象属性名、类型及值变量。\n * [Proposer](https://github.com/nixzhu/Proposer) - Proposer 用单个 API 处理 iOS 上的权限请求，以便使用前确认可访问“相册”、“相机”、“麦克风”、“通讯录”或“用户位置”。 \n * [PermissionScope](https://github.com/nickoneill/PermissionScope) - 用这个库可以在询问用户前，就告知用户所需的系统权限，为用户带来更好的体验。接受度更高—>更多活跃用户->更高的留存率->数据更好->下载率更高。 \n * [LocationManager](https://github.com/intuit/LocationManager) - CoreLocation使用起来还是比较麻烦的，需要授权，判断系统版本等等，所以推荐使用第三方框架LocationManager，使用Block，十分简单！[iOS-CoreLocation：无论你在哪里，我都要找到你！](http://www.cocoachina.com/ios/20150721/12611.html) 。\n * [pangu.objective-c](https://github.com/Cee/pangu.objective-c) - 有多种语言实现版本～ Pangu.Objective-C：格式化中英文之间的空格（OC）。\n * [objection](https://github.com/atomicobject/objection) - 一个轻量级的依赖注入框架Objection。\n * [ControlOrientation](https://github.com/johnlui/Swift-On-iOS/tree/master/ControlOrientation/ControlOrientation) - 如何用代码控制以不同屏幕方向打开新页面【iOS】， [使用说明](http://lvwenhan.com/ios/458.html)。\n * [iRate](https://github.com/nicklockwood/iRate) - 问卷调查。\n * [GameCenterManager](https://github.com/nihalahmed/GameCenterManager) - 在iOS上管理GameCenter vanilla并不算难，但是有了这个库会更简单也更快。好上加好不是更好么。\n * [SlackTextViewController](https://github.com/slackhq/SlackTextViewController) - 用作极佳、定制的文本输入控制时，自适应文本区域，手势识别、自动填充、多媒体合并，快速drop-in解决方案。\n * [IAPHelper](https://github.com/saturngod/IAPHelper) - 应用内付费给我们提供了很多样本代码，而这个库丢掉了那些代码，将金钱交易相关的大多通用任务做了简单的封装。\n * [TAPromotee](https://github.com/JanC/TAPromotee) - 交叉推广应用是你可以免费实现的最佳市场推广策略之一。使用这个库做起来非常简单，不用都不可能——将TAPromotee加入你的podfile中，免费配置与享受更多下载吧。\n * [DownloadFontOnline](https://github.com/cgwangding/DownloadFontOnline) - 实现了在线下载一些字体的功能，不用在工程中导入字体库，下载的字体也不会保存在你的应用中，所以可以放心使用。修复了一下崩溃的bug。\n * [STClock](https://github.com/zhenlintie/STClock) - 仿锤子时钟。\n * [GitUp](https://github.com/git-up/GitUp) - GitUp是一个可视化的Git客户端，能够实时的进行编辑、合并、回滚等多种操作，更多功能，请下载体验。\n * [获取联系人信息，通讯录](http://code.cocoachina.com/detail/320392/) - 获取联系人信息，通讯录。\n * [Universal-Jump-ViewController](https://github.com/HHuiHao/Universal-Jump-ViewController) - 根据规则跳转到指定的界面(runtime实用篇一)。\n * [Device-swift](https://github.com/Ekhoo/Device) - 可以非常方便的获取设备型号和屏幕尺寸，实现起来难度不大，大家可以学习一下源码。\n * [RunKit.swift](https://github.com/khoiln/RunKit) - 针对 GCD 框架的一个友好访问封装库（支持方法链式调用）。\n * [Plum-O-Meter](https://github.com/FlexMonkey/Plum-O-Meter) - swift 称重应用， (3D Touch之我见)[http://swift.gg/2015/10/23/3d-touch-impressions-and-thoughts/]。\n * [打开自带地图、百度地图、腾讯地图](http://code.cocoachina.com/view/128249) - 打开自带地图、百度地图、腾讯地图。\n * [batteryLevelTest](https://github.com/colin1994/batteryLevelTest) - runtime精准获取电池电量，[文档](http://www.jianshu.com/p/11c1afdf5415)。\n * [openshare](https://github.com/100apps/openshare) - 不用官方SDK，利用社交软件移动客户端(微信/QQ/微博/人人/支付宝)分享/登录/支付。\n * [DateTools](https://github.com/MatthewYork/DateTools) - 用于提高Objective-C中日期和时间相关操作的效率。灵感来源于 DateTime和Time Period Library。\n * [DDSlackFeedback](https://github.com/deepdevelop/DDSlackFeedback) - 用这个接口实现的摇一摇上传文字或者截屏反馈到你的 Slack channel，特别适合测试 app 的时候用，集成也很简单。\n * [BabyBluetooth](https://github.com/coolnameismy/BabyBluetooth) - 是一个非常容易使用的蓝牙库, 适用于 iOS 和 Mac OS, 基于原生 CoreBluetooth 框架封装, 可以帮开发者们更简单地使用 CoreBluetooth API, 使用链式方法体, 使得代码更简洁、优雅。[iOS蓝牙开发（四）：BabyBluetooth蓝牙库介绍](http://www.cocoachina.com/ios/20160219/15301.html)\n * [BluetoothKit.swift](https://github.com/rasmusth/BluetoothKit) - 基于 CoreBluetooth API 实现iOS/OS X 设备间蓝牙通讯封装类库。功能强大、传输稳定，示例完整，很酷。\n * [CoreDataStack.swift](https://github.com/bignerdranch/CoreDataStack) - 存储栈。\n * [SYNQueue.swift](https://github.com/THREDOpenSource/SYNQueue) - 执行队列类库。\n * [DDMathParser.swift](https://github.com/davedelong/DDMathParser) - 相比 NSExpression 和 GCMathPaser，功能更强大的数学表达式解析器。\n * [RateLimit.swift](https://github.com/soffes/RateLimit) - 简单、实用定时执行任务工具类库。\n * [iOS-Categories](https://github.com/shaojiankui/IOS-Categories) - 收集了许多有助于开发的iOS扩展,各种category分类。\n * [YYCategories](https://github.com/ibireme/YYCategories) - 功能丰富的 Category 类型工具库。\n * [YYAsyncLayers](https://github.com/ibireme/YYAsyncLayers) -  iOS 异步绘制与显示的工具。\n * [YYDispatchQueuePool](https://github.com/ibireme/YYDispatchQueuePool) -  iOS 全局并发队列管理工具。\n * [YYKeyboardManager](https://github.com/ibireme/YYKeyboardManager) -   iOS 键盘监听管理工具。\n * [shoppingCart.swift](https://github.com/6ag/shoppingCart) - swift的购物车demo，采用纯代码UI，autolayout自动布局，core animation动画效果。\n * [ShoppingCartExample](https://github.com/gbaldera/ShoppingCartExample) - 购物车最多star demo。\n * [shoppingCart1](https://github.com/yhangeline/shoppingCart) - 仿美团购物车效果。\n * [ZFShoppingCart](https://github.com/WZF-Fei/ZFShoppingCart) - 仿照美团外卖加入购物车的动态效果。\n * [shoppingCart2](https://github.com/spxvszero/ShoppingCart) - 一个购物车demo，包含购物车动画效果、购物车多选、删除、编辑等功能。\n * [shoppingCart-demo](https://github.com/DrYrw/shoppingCart-demo) - 一个简单的购物车功能实现demo。\n * [OC_ShoppingCart_Demo](https://github.com/ZyZwei/OC_ShoppingCart_Demo) - 简单实现购物车常见的筛选功能。\n * [XNQShoppingTrolley](https://github.com/342261733/XNQShoppingTrolley) - 购物车功能 基本功能仿照淘宝的购物车。\n  * [shopCarDemobyCX](http://code.cocoachina.com/view/129430) - shopCarDemobyCX一个简易购物车效果，最重要的是可以分单结算，分单个商品结算，代理是主要技术。\n * [MVVM KVO购物车](http://code.cocoachina.com/view/128713) - MVVM KVO 购物车(一处计算总价钱)。\n * [BHBDrawBoarderDemo车](https://github.com/bb-coder/BHBDrawBoarderDemo) - 仿写猿题库练题画板功能，没有用drawRect，而是用CAShapeLayer来做画板绘画，特别省内存，赞1个，[实现分析](http://bihongbo.com/2016/01/03/memoryGhostdrawRect/)。\n * [SwiftyGPIO](https://github.com/uraimo/SwiftyGPIO) - 通过 Swift 语言去控制基于 Linux 主板（比如：C.H.I.P. 和 树莓派） 的 GPIO（General Purpose Input Output ），去完成简单的工控功能（比如 LED 灯的显示）。\n * [Scale.swifty](https://github.com/onmyway133/Scale) - 简单直观的单位计算及换算类库（支持常用计量类型）。代码简洁性、直观性杠杠的。\n * [SwiftString](https://github.com/amayne/SwiftString) - SwiftString:String 扩展功能很丰富（无论格式化杂乱字符串，还是子串查找，亦或是格式转换都很强大）。\n * [jrswizzle](https://github.com/rentzsch/jrswizzle) - runtime实现的Method Swizzling第三方框架。\n * [FileBrowser.swift](https://github.com/marmelroy/FileBrowser) - FileBrowser.swift 一款开源的 iOS 文件浏览器, 支持文件搜索, 文件预览和 3D touch 功能。\n\n========\n#### 数据库\n * [FMDB](https://github.com/ccgus/fmdb) - sqlite的工具， [多线程FMDatabaseQueue实例](https://github.com/tangqiaoboy/FmdbSample)，[FMDB数据库的使用演示和封装工具类](https://github.com/liuchunlao/LVDatabaseDemo)，[基于fmdb 的基本操作](http://code.cocoachina.com/view/128312) 通过 fmdb 进行的数据库的 基本操作(增删改查 )查找是使用 UISearchBar 和UISearchDisplayController 进行混合使用。\n * [GXDatabaseUtils](https://github.com/Gerry1218/GXDatabaseUtils) - 在FMDB基础上的工具。\n * [realm-cocoa](https://github.com/realm/realm-cocoa) - Realm是一个真正为移动设备打造的数据库，同时支持Objective-C和Swfit。Realm宣称其相比Sqlite，在移动设备上有着更好的性能表现,[官方中文](https://realm.io/cn/) ，[iOS：选择 Realm 而不是 CoreData](http://swift.gg/2015/12/08/ios-realm-instead-of-coredata/), [使用 Realm 和 Swift 创建 ToDo 应用](http://swift.gg/2015/12/08/building-a-todo-app-using-realm-and-swift/)。\n * [Breeze](https://github.com/andrelind/Breeze) - 用Swift写的一个轻量级的CoreData管理工具，并且还支持iCloud 。\n * [AlecrimCoreData](https://github.com/Alecrim/AlecrimCoreData) - Swift，更容易地访问 CoreData 对象封装类库。除了 CRUD，还提供指针定位，强大的排序、筛选，异步数据获取，以及独立线程后台存取数据。\n * [CoreStore](https://github.com/JohnEstropia/CoreStore) -  Core Data 管理类库。 其中事务管理及查询是其比较大的亮点，整套 API 功能完整。\n * [MagicalRecord](https://github.com/magicalpanda/MagicalRecord) - CoreData第一库，MagicalRecord就像是给Core Data提供了一层外包装，隐藏掉所有不相关的东西。 其中事务管理及查询是其比较大的亮点，整套 API 功能完整。\n * [mogenerator](http://rentzsch.github.io/mogenerator/) - mogenerator为你定义了的Core Data生成默认的数据类。与xCode不一样的是(xCode一个Entity只生成一个NSManagedObject的子类)，mogenerator会为每一个Entity生成两个类。一个为机器准备，一个为人类准备。为机器准备的类一直去匹配data model。为人类准备的类就给你轻松愉快的去修改和保存。\n * [Presentation](https://github.com/hyperoslo/Presentation) - 重量级好项目 Presentation，它可以方便你制作定制的动画式教程、Release Notes、个性化演讲稿等。\n * [CoreValue](https://github.com/terhechte/CoreValue) - Swift 2 版 Core Data 封装库。相比另外两个 [SwiftRecord](https://github.com/arkverse/SwiftRecord)和 [CoreStore](https://github.com/JohnEstropia/CoreStore)更轻量。\n * [SQLCipher](https://github.com/sqlcipher/sqlcipher) - SQLCipher使用256-bit AES加密，SQLCipher分为收费版本和免费版本。[官方教程](https://www.zetetic.net/sqlcipher/ios-tutorial/)， [加密你的SQLite](http://foggry.com/blog/2014/05/19/jia-mi-ni-de-sqlite/) - 各种sqlite数据库加密介绍。 [SQLCipherDemo下载](http://download.csdn.net/detail/wzzvictory_tjsd/7379055) 。\n * [SQLite.swift](https://github.com/stephencelis/SQLite.swift) - 纯swift实现的类型安全的SQLite3封装，数据存储和JSON解析是永恒的话题。\n * [fluent.swift](https://github.com/qutheory/fluent) - 纯swift实现的类型安全的SQLite3封装，数据存储和JSON解析是永恒的话题。\n\n========\n#### 缓存处理\n * [YTKKeyValueStore](https://github.com/yuantiku/YTKKeyValueStore) - Key-Value存储工具类，[说明](http://tangqiaoboy.gitcafe.io/blog/2014/10/03/opensouce-a-key-value-storage-tool/)。\n * [TMCache](https://github.com/tumblr/TMCache) - TMCache 是 Tumblr 开源的一个基于 key/value 的数据缓存类库,可以用于缓存一些临时数据或者需要频繁加载的数据,比如某些下载的数据或者一些临时处理结果。\n * [JLKeychain](https://github.com/jl322137/JLKeychain) - 快捷使用keychain存储数据的类，使keychain像NSUserDefaults一样工作。\n * [sskeychain](https://github.com/soffes/sskeychain) - SSKeyChains对苹果安全框架API进行了简单封装,支持对存储在钥匙串中密码、账户进行访问,包括读取、删除和设置。\n * [KeychainAccess](https://github.com/kishikawakatsumi/KeychainAccess) - 管理Keychain接入的小助手。\n * [YYCache](https://github.com/ibireme/YYCache) - 高性能的 iOS 缓存框架。\n * [RuntimeDemo](https://github.com/CoderJackyHuang/RuntimeDemo) - runtime自动归档/解档,[源码分析](http://www.henishuo.com/runtime-archive-unarchive-automaticly/)。\n\n========\n#### PDF\n * [Reader](https://github.com/vfr/Reader) - Reader可提供类似iBooks的文档导航，支持屏幕旋转和所有方向，并通过密码保护加密PDF文件，支持PDF链接和旋转页面。\n\n========\n#### 图像浏览及处理\n * [FLAnimatedImage](https://github.com/liric28/FLAnimatedImage) - gif播放处理的工具。\n * [CLImageEditor](https://github.com/yackle/CLImageEditor) - 超强的图片编辑库，快速帮你实现旋转，防缩，滤镜等等一系列麻烦的事情。\n * [ios-image-filters](https://github.com/esilverberg/ios-image-filters) - 图像滤镜，库比较旧了，很容易崩溃。 \n * [XBImageFilters](https://github.com/xissburg/XBImageFilters) - 图像滤镜。\n * [MWPhotoBrowser](https://github.com/mwaterfall/MWPhotoBrowser) - 一个非常不错的照片浏览器，在github的star接近3000个，[解决MWPhotoBrowser中的SDWebImage加载大图导致的内存警告问题](http://www.superqq.com/blog/2015/01/22/jie-jue-mwphotobrowserzhong-de-sdwebimagejia-zai-da-tu-dao-zhi-de-nei-cun-jing-gao-wen-ti/)。\n * [core-image-explorer](https://github.com/objcio/issue-21-core-image-explorer) -  Core Image 滤镜处理图片-- swift ，[Core Image 介绍](http://objccn.io/issue-21-6/)。 \n * [CoreImageShop](https://github.com/rFlex/CoreImageShop) - CoreImageShop图片滤镜处理-- Mac app that let you create a complete Core Image Filter usable on iOS using SCRecorder。\n * [GPUImage](https://github.com/BradLarson/GPUImage) - 处理图片效果。\n * [RSKImageCropper](https://github.com/ruslanskorb/RSKImageCropper) - 适用于iOS的图片裁剪器，类似Contacts app，可上下左右移动图片选取最合适的区域。\n * [WZRecyclePhotoStackView](http://code.cocoachina.com/detail/232156) - 删除照片交互--WZRecyclePhotoStackView，就是模拟生活中是删除或保留犹豫不决的情形而产生的。 在上滑，下滑的部分，借鉴了[TinderSimpleSwipeCards](https://github.com/cwRichardKim/TinderSimpleSwipeCards)。\n * [TimingFunctionEditor](https://github.com/schwa/TimingFunctionEditor) - TimingFunctionEditor用swift编写， 贝塞尔曲线编辑器，编辑后可以预览或拷贝代码片段直接使用。P.S. 该项目采用更简单的依赖管理器 [Carthage](https://github.com/Carthage/Carthage) ，而非常用的 CocoaPods。[Carthage介绍中文](http://www.cocoachina.com/ios/20141204/10528.html)。\n * [AAFaceDetection](https://github.com/aaronabentheuer/AAFaceDetection) - AAFaceDetection--swift，简单、实用的面部识别封装库。虽然该技术从 iOS 5 发展，不过真正有趣的应用还不多。\n * [PhotoTweaks](https://github.com/itouch2/PhotoTweaks) - 这个库挺赞的，正好是对图像操作的。\n * [Concorde](https://github.com/contentful-labs/Concorde) - swift, Concorde, 一个可用于下载和解码渐进式 JPEG 的库, 可用来改善应用的用户体验。\n * [ZoomTransition](https://github.com/tristanhimmelman/ZoomTransition) - swift, 通过手势操控图片的放大、缩小、旋转等自由变化效果的组件及示例。\n * [AFImageHelper](https://github.com/melvitax/AFImageHelper) - swift,一套针对 UIImage 和 UIImageView 的实用扩展库，功能包含填色和渐变、裁剪、缩放以及具有缓存机制的在线图片获取。\n * [PinterestSwift](https://github.com/demon1105/PinterestSwift) - swift,Pinterest 风格图片缩放、切换示例。\n * [KYElegantPhotoGallery](https://github.com/KittenYang/KYElegantPhotoGallery) - 一个优雅的图片浏览库。\n * [SDPhotoBrowser](https://github.com/gsdios/SDPhotoBrowser) - 仿新浪动感图片浏览器,非常简单易用的图片浏览器，模仿微博图片浏览器动感效果，综合了图片展示和存储等多项功能。\n * [HZPhotoBrowser](https://github.com/chennyhuang/HZPhotoBrowser) - 一个类似于新浪微博图片浏览器的框架（支持显示和隐藏动画；支持双击缩放，手势放大缩小；支持图片存储；支持网络加载gif图片，长图滚动浏览；支持横竖屏显示）。 \n * [PhotoStackView-Swift](https://github.com/YiZhuoChen/PhotoStackView-Swift) - PhotoStackView——照片叠放视图，[使用说明](http://blog.csdn.net/u013604612/article/details/46336657)。\n * [MarkingMenu](https://github.com/FlexMonkey/MarkingMenu) - 基于手势、类似 Autodesk Maya 风格标记菜单及图片渲染。\n * [SXPhotoShow](https://github.com/dsxNiubility/SXPhotoShow) - UICollectionViewFlowLayout流水布局 是当下collectionView中常用且普通的布局方式。本代码也写了三种好看的布局，其中LineLayout和流水布局有很大的相同点就直接继承UICollectionViewFlowLayout，然后StackLayout，CircleLayout这两种都是直接继承自最原始的UICollectionViewLayout 布局方案。\n * [PictureWatermark](https://github.com/cgwangding/PictureWatermark) - 主要实现了给图片加文字以及图片水印的功能，已封装成了UIImage的类别，方便使用。\n * [自定义宽高比的相册框 拍照](http://code.cocoachina.com/detail/320603/) - 取出照片时 弹出自定义view。在这个自定义view上创建一个需要的相框大小的view层 把取出的图片赋值给UIImageView按缩放添加到这个层上。对uiimageView添加捏合、移动 手势。添加按钮 选取，最后根据位移和缩放比例 裁剪image。\n * [LGPhotoBrowser](https://github.com/gang544043963/LGPhotoBrowser) - LGPhotoBrowser:相册选择/浏览器/照相机（仿微信）,包含三个模块：照片浏览器，相册选择器，照相机。\n * [PhotoBrowser](https://github.com/oscarWyz/PhotoBrowser) - 一个简单的好用的的图片浏览器。\n * [BeautyHour](https://github.com/xujingzhou/BeautyHour) - 完整应用，功能与“美图秀秀”雷同。\n * [MPParallaxView](https://github.com/DroidsOnRoids/MPParallaxView) - 是用 Swift 写的类似 Apple TV Parallax 效果的视图。\n * [StitchingImage](https://github.com/zhengjinghua/StitchingImage) - 仿微信群组封面拼接控件, 直接拖进项目就可使用，[教程](http://gold.xitu.io/entry/56395f5360b20b143a9178f6)。\n * [SDECollectionViewAlbumTransition](https://github.com/seedante/SDECollectionViewAlbumTransition) - 用自定义的 push 和 pop 实现了有趣的 iOS 相册翻开动画效果。\n * [SKPhotoBrowser.swift](https://github.com/xujingzhou/BeautyHour) - swift中规中矩、实用的图片浏览类库。示例也很完整。\n * [Nuke.swift](https://github.com/kean/Nuke) - 完整、强大、实用的图片管理类库。主要功能包括可定制装载，缓存，滤镜及尺寸变换。\n * [DNImagePicker](https://github.com/AwesomeDennis/DNImagePicker) - 类似wechat的图片选择。\n * [CocoaPicker](https://github.com/lioonline/CocoaPicker) - 仿QQ图片选择器（OC）。\n * [JFImagePickerController](https://github.com/johnil/JFImagePickerController) - vvebo作者：多选照片、预览已选照片、针对超大图片优化。\n * [VIPhotoView](https://github.com/vitoziv/VIPhotoView) - 图片浏览，用于展示图片的工具类，因为是个 View，所以你可以放在任何地方显示。支持旋转，双击指定位置放大等。\n * [AGImagePickerController](https://github.com/SpringOx/AGImagePickerController) - 是一个图片选择器，支持图片多选，支持大图横滑预览，支持放大预览，支持横竖屏，支持所有的iOS设备。\n * [YYImage](https://github.com/ibireme/YYImage) - 功能强大的 iOS 图像框架，支持大部分动画图像、静态图像的播放/编码/解码。\n * [PagingView.swift](https://github.com/KyoheiG3/PagingView) - 注重细节的自动布局分页视图组件。\n * [TZImagePickerController](https://github.com/banchichen/TZImagePickerController) - 一个支持多选、选原图和视频的图片选择器，同时有预览功能，适配了iOS6789系统。[教程](http://www.cocoachina.com/ios/20160112/14942.html).\n * [更换头像](http://code.cocoachina.com/view/129134) - 用户选取从相机或者相册获取图片，并且显示在View上。\n * [DouBanMeinv.swift](https://github.com/luzefeng/DouBanMeinv) - 抓取豆瓣美女图片，瀑布流显示。\n * [ZZPhotoKit](https://github.com/ACEYL/ZZPhotoKit) - 基于Photos和AVFoundation框架开源，相册多选与相机连拍。\n * [SwViewCapture.swift](https://github.com/startry/SwViewCapture) - SwViewCapture.swift一个用起来还不错的iOS截图库.(支持截取所有内容, 适用于所有ScrollView组成的视图, 包括WebView)。\n\n========\n#### 摄像照相视频音频处理\n * [SCRecorder](https://github.com/rFlex/SCRecorder) - SCRecorder 短视频录制。\n * [VideoPushDemo](https://github.com/pingguo-zangqilong/VideoPushDemo) - 视频剪辑 [视频特效制作1](http://www.jianshu.com/p/3006502912aa) [视频特效制作2](http://www.jianshu.com/p/6313025349a9)。\n * [LLSimpleCamera](https://github.com/omergul123/LLSimpleCamera) - A simple, customizable camera control for iOS， 摄像头。\n * [EZAudio](https://github.com/syedhali/EZAudio) - EZAudio 是一个 iOS 和 OSX 上简单易用的音频框架，根据音量实时显示波形图，基于Core Audio，适合实时低延迟音频处理，非常直观。[中文介绍](http://segmentfault.com/blog/news/1190000000370957),[官网](http://www.syedharisali.com/about)。\n * [ffmpeg](http://ffmpeg.org/) - ffmpeg官网，[FFmpeg在iOS上完美编译](http://www.cocoachina.com/ios/20150514/11827.html)。\n * [VCL](http://www.videolan.org/) - VCL官网。 \n * [kxmovie](https://github.com/kolyvan/kxmovie) - 使用ffmpeg的影片播放器，[修改说明](http://www.cocoachina.com/bbs/read.php?tid=145575)， [修改代码](https://github.com/kinglonghuang)，[基于FFmpeg的kxMoive艰难的编译运行](https://github.com/namebryant/FFmpeg-Compilation)。\n * [ijkplayer](https://github.com/Bilibili/ijkplayer) - B站开源的视频播放器，支持Android和iOS。 \n * [StreamingKit](https://github.com/tumtumtum/StreamingKit) - StreamingKit流媒体音乐播放器。 \n * [FreeStreamer](https://github.com/muhku/FreeStreamer) - FreeStreamer流媒体音乐播放器，cpu占用非常小。\n * [DOUAudioStreamer](https://github.com/douban/DOUAudioStreamer) - DOUAudioStreamer豆瓣的音乐流媒体播放器。\n * [fmpro](https://github.com/fmpro/fmpro) - 电台播放器，支持锁屏歌词，支持基本播放流程，歌词展示，后台锁屏播放和控制以及锁屏后封面+歌词，[fmpro_R](https://github.com/jovisayhehe/fmpro_R) 。\n * [IPDFCameraViewController](https://github.com/mmackh/IPDFCameraViewController) - 支持相机定焦拍摄、滤镜、闪光、实时边框检测以及透视矫正功能，并有简单易用的API。 \n * [SCRecorder](https://github.com/rFlex/SCRecorder) - 酷似 Instagram/Vine 的音频/视频摄像记录器，以 Objective-C 为基础的过滤器框架。 你可以做很多如下的操作：记录多个视频录像片段。删除任何你不想要的记录段。可以使用任何视频播放器播放片段。保存的记录可以在序列化的 NSDictionary 中使用。（在 NSUserDefaults 的中操作）添加使用 Core Image 的视频滤波器。可自由选择你需要的 parameters 合并和导出视频。\n * [Cool-iOS-Camera](https://github.com/GabrielAlva/Cool-iOS-Camera) - Cool-iOS-Camera。\n * [FastttCamera](https://github.com/IFTTT/FastttCamera) - FastttCamera 快速照相。\n * [ICGVideoTrimmer](https://github.com/itsmeichigo/ICGVideoTrimmer) - ICGVideoTrimmer提供提供视频剪切的视图（类似系统相册中浏览视频时顶部那个条状视图）。左右两个边界选择器还能够自定义。\n * [IOS录音和播放功能demo](http://d.cocoachina.com/code/detail/285717) - 比较完整的ios录音和播放功能的实现。\n * [CameraManager](https://github.com/imaginary-cloud/CameraManager) - 相机管理封装类库。看着极好用的样子----swift。\n * [MCAudioInputQueue](https://github.com/msching/MCAudioInputQueue) - 简易录音类，基于AudioQueue的。\n * [DraggableYoutubeFloatingVideo](https://github.com/vizllx/DraggableYoutubeFloatingVideo) - 展示像类似Youtube移动应用的那种浏览视频的效果，当点击某视频时能够从右下方弹出一个界面，并且该界面能够通过手势，再次收缩在右下方并继续播放。这是通过AutoLayout设计实现。\n * [amr](http://www.penguin.cz/~utx/amr) - 做即时通讯的音频处理，录音文件是m4a，便于web端的音频播放。\n * [FSVoiceBubble](https://github.com/f33chobits/FSVoiceBubble) - 一个轻量级播放录音音频的气泡：1.支持短时间的音频播放（支持网络音频）；2.播放时的声波动画；3.自定义包括声波的颜色，气泡的背景等。\n * [KRVideoPlayer](https://github.com/36Kr-Mobile/KRVideoPlayer) - 类似Weico的播放器，支持竖屏模式下全屏播放。\n * [自定义视频播放器AVPlayer](http://code.cocoachina.com/view/128253) - 利用系统类AVPlayer实现完全自定义视频播放器，显示播放时间，缓存等功能。代码清晰，注释详细。\n * [VideoBeautify](https://github.com/xujingzhou/VideoBeautify) - 功能酷似美拍,秒拍等应用的源码：对视频进行各种美化处理，采用主题形式进行分类，内含各种滤镜，动画特效和音效等。\n * [HTY360Player](https://github.com/hanton/HTY360Player) - 是一款提供在 iOS 中使用 360 度无死角拖拽视频进行不同角度播放的视频播放器。\n * [ALCameraViewController](https://github.com/AlexLittlejohn/ALCameraViewController) - ALCameraViewController 摄像头视图控制器（含可定制照片选择器，图片简单裁切功能）及演示。\n * [recordDemo.swift](https://github.com/lfb-cd/recordDemo) - 一个Swift语言实现直接可以用的录音Demo，[实现说明](http://www.jianshu.com/p/f0b88355d7cb)。\n * [Swift-Radio-Pro](https://github.com/swiftcodex/Swift-Radio-Pro) - 集成 LastFM 的专业电台应用（基于 Swift 2.0）。\n * [Eleven](https://github.com/coderyi/Eleven) - Eleven Player - 一个使用 FFmpeg 实现的简单强大的 iOS 开源播放器。 \n * [mobileplayer-ios.swift](https://github.com/mobileplayer/mobileplayer-ios) - 很不错的高度可定制播放器项目。 \n * [iFrameExtractor](https://github.com/lajos/iFrameExtractor) - 开源视频播放器， ffmpeg在iOS的使用-iFrameExtractor源码解析，[文章](http://ios.jobbole.com/82408/)。\n * [Periscope-VideoViewController.swift](https://github.com/gontovnik/Periscope-VideoViewController) - 简洁实用的视频快进、倒带控制视图类库。\n * [AudioKit.swift](https://github.com/audiokit/AudioKit) - 音频合成、加工及分析平台（支持 iOS、OS X、tvOS）框架库。无论其易用性，还是功能性及专业性。\n * [MusicPlayert](https://github.com/menxu/MusicPlayert) - MusicPlayert本地音乐播放+音乐信息显示+在线歌词搜索显示（千千静听服务器）。\n * [MusicPlayert](https://github.com/liuFangQiang/MusicPlayer) - MusicPlayert音乐播放器，用reveal可以查看层次关系，主要实现了歌词的同步显示。\n * [音乐播放器](http://code.cocoachina.com/view/129435) - 音乐播放器：显示歌词。\n * [TBPlayer](https://github.com/suifengqjn/TBPlayer) - 视频变下变播，把播放器播放过的数据流缓存到本地，支持拖动。采用avplayer。[实现说明](http://www.jianshu.com/p/990ee3db0563)\n\n========\n#### 响应式框架\n * [ReactiveCocoa](https://github.com/ReactiveCocoa/ReactiveCocoa) - ReactiveCocoa 受函数响应式编程激发。不同于使用可变的变量替换和就地修改，RAC提供Signals来捕获当前值和将来值（ [使用介绍](http://yulingtianxia.com/blog/2014/07/29/reactivecocoa/) ），[不错的例子](http://iiiyu.com/2014/12/26/learning-ios-notes-thirty-six/),入门好教程：[ReactiveCocoa入门教程：第一部分 ](http://www.cocoachina.com/ios/20150123/10994.html)。[Reactive Cocoa 3.0 在 MVVM 中的应用](http://ios.jobbole.com/82232/) ,[小码哥：快速让你上手ReactiveCocoa之基础篇](http://www.jianshu.com/p/87ef6720a096)。\n * [ReactiveAnimation](https://github.com/ReactiveCocoa/ReactiveAnimation) - ReactiveCocoa 推出了一个叫 ReactiveAnimation 的子项目，直接用完全用 Swift 来实现了。\n * [BeeFramework](https://github.com/gavinkwoe/BeeFramework) -  与ReactiveCocoa类似，[BeeFramework用户指南 v1.0](http://www.lanrenios.com/tutorials/all/2012/1220/641.html)。\n * [Objective-Chain](https://github.com/iMartinKiss/Objective-Chain) - Objective-Chain是一个面向对象的响应式框架，作者表示该框架吸收了 ReactiveCocoa 的思想，并且想做得更面向对象一些。\n * [RxSwift](https://github.com/ReactiveX/RxSwift) - RxSwift。 \n * [Swiftest](https://github.com/bppr/Swiftest) - BDD 全称 Behavior Driven Development，行为驱动开发。各种 DD 数不胜数，孰优孰劣争论不休，其实归根结底还是要根据使用场景进行选择。\n * [MVVMFramework](https://github.com/lovemo/MVVMFramework) - (OC版)总结整理下一个快速开发框架，分离控制器中创建tableView和collectionView的代码，已加入cell自适应高度，降低代码耦合，提高开发效率。[MVVMFramework-Swift](https://github.com/lovemo/MVVMFramework-Swift) - swift版本。\n\n========\n#### 消息相关\n##### 消息推送客户端\n * [SGPushDemo](https://github.com/sagiwei/SGPush/tree/master/SGPushDemo) - 消息推送客户端\n * [Orbiter](https://github.com/mattt/Orbiter) - 消息推送客户端:Push Notification Registration for iOS.\n * [PushDemo](https://github.com/ios44first/PushDemo) - 客户端消息接收消息代码，[IOS开发之 ---- IOS8推送消息注册](http://blog.sina.com.cn/s/blog_71715bf80102uy2k.html) ， [分分钟搞定IOS远程消息推送](http://my.oschina.net/u/2340880/blog/413584)。\n\n##### 消息推送服务端\n * [javapns源代码](https://code.google.com/p/javapns/downloads/list) - 消息推送的java服务端代码，注意：DeviceToken中间不能有空格。\n * [pushMeBaby](https://github.com/stefanhafeneger/PushMeBaby) - Mac端消息推送端代码，注意：DeviceToken中间要有空格。\n\n\n##### 通知相关\n * [JSQNotificationObserverKit](https://github.com/jessesquires/JSQNotificationObserverKit) - 一款轻量、易用的通知发送及响应框架类库。作者是知名开源项目 JSQMessagesViewController（Objective-C 版即时聊天）的作者 Jesse Squires.\n * [GLPubSub](https://github.com/Glow-Inc/GLPubSub) - 一个简短实用的 NSNotificationCenter 的封装。\n * [Homeoff](https://github.com/lizyyy/Homeoff) - 用swift写了一个模仿Launcher通知中心快捷方式的应用。支持20个应用，并增加了一个返回到桌面来解放Home键的功能。\n * [JDStatusBarNotification](https://github.com/jaydee3/JDStatusBarNotification) - 在状态栏顶部显示通知。可以自定义颜色字体以及动画。支持进度显示以及显示状态指示器。\n\n========\n#### 版本新API的Demo\n * [appleSample](https://github.com/WildDylan/appleSample) - iOS 苹果官方Demo合集， [官方demo](https://developer.apple.com/library/ios/navigation/#section=Resource%20Types&topic=Sample%20Code).\n * [iOS7-Sampler](https://github.com/shu223/iOS7-Sampler) - 整合了iOS7.0的一些十分有用的特性，比如：Dynamic Behaviors、碰撞检测、语音合成、视图切换、图像滤镜、三维地图、Sprite Kit（动画精灵）、Motion Effect（Parallax）、附近蓝牙或者wifi搜索连接、AirDrop、运动物体追踪（iPhone 5S以上，需要M7处理器）等等。对于日常的应用开发十分实用。 \n * [iOS8-Sampler](https://github.com/shu223/iOS8-Sampler) - 日本的shuさん制作的 iOS8 参考代码集。01.Audio Effects ；02.New Image Filters；03.Custom Filters；04.Metal Basic；05.Metal Uniform Streaming；06.SceneKit；07.HealthKit；08.TouchID；09.Visual Effects；10.WebKit；11.UIAlertController；12.User Notification；13.Pedometer；14.AVKit；15.Histogram；16.Code Generator；17.New Fonts；18.Popover；19.Accordion Fold Transition\n * [iOS-9-Sampler](https://github.com/shu223/iOS-9-Sampler) - 通过实例介绍了iOS 9 SDK中重要新特性的使用。\n * [MTSwift-Learning](https://github.com/MartinRGB/MTSwift-Learning) - 通过一些简单项目实战演练开始学习 Swift 。\n * [iOS8-day-by-day](https://github.com/shinobicontrols/iOS8-day-by-day) - swift。\n * [iOS9-day-by-day](https://github.com/shinobicontrols/iOS9-day-by-day) - swfit [iOS9 Day-by-Day :: Day 2 :: UI Testing](http://www.jianshu.com/p/039f8de6ee4d)。\n * [iOS 9 分屏多任务](http://www.cocoachina.com/ios/20150714/12557.html) - iOS 9 分屏多任务：Slide Over & Split View快速入门（中文版）。\n * [uistackview-sample.swift](https://github.com/uraimo/uistackview-sample) - iOS 9 引进了 UIStackViews，提供 auto-layout 特性。如果你开发过 Android 应用，会发现它和 LinearLayouts 概念上很类似，它是增强版。你可以手动创建，也可以使用 IB 自动创建，本文用的是代码实现。\n\n========\n#### 代码安全与密码\n * [ios-class-guard](https://github.com/Polidea/ios-class-guard) - 一个用于混淆iOS的类名、方法名以及变量名的开源库--有人反映编译出来的app运行不了。\n * [《Protecting iOS Applications》](https://www.polidea.com/#!heartbeat/blog/Protecting_iOS_Applications)：文章系统地介绍了如何保护iOS程序的代码安全，防止反汇编分析。\n * [fishhook](https://github.com/facebook/fishhook) - fishhook是Facebook开源的一个可以hook系统方法的工具。\n * [GesturePassword](https://github.com/smilingxinyi/GesturePassword) - 一个iOS手势密码功能实现，iPad/iPhone 都可以用，没有使用图片，里面可以通过view自己添加。keychain做的数据持久化，利用苹果官方KeychainItemWrapper类。操作部分都在controller了。删除直接用一下clear。\n * [JMPasswordView](https://github.com/Juuman/JMPasswordView) - 简单实用的手势密码，效果可自行调控。\n * [仿密码锁-九宫格](http://code.cocoachina.com/detail/298556/%E4%BB%BF%E5%AF%86%E7%A0%81%E9%94%81-%E4%B9%9D%E5%AE%AB%E6%A0%BC/) - 仿密码锁-九宫格，主要是使用UIButton 手势事件  UIBezierPath画图，解锁失败弹出“密码错误”。\n * [CoreLock](https://github.com/nsdictionary/CoreLock) - 本框架是高仿支付宝，并集成了所有功能，并非一个简单的解锁界面展示。个人制作用时1周多，打造解锁终结者框架。\n * [LikeAlipayLockCodeView](https://github.com/crazypoo/LikeAlipayLockCodeView) - 高仿支付宝手势解锁（超级版）。\n * [PCGestureUnlock](https://github.com/iosdeveloperpanc/PCGestureUnlock) - 目前最全面最高仿支付宝的手势解锁，而且提供方法进行参数修改，能解决项目开发中所有手势解锁的开发。\n * [ICPayPassWordDemo](https://github.com/icoder20150719/ICPayPassWordDemo) - CPayPassWordDemo，一个模仿支付宝支付密码输入对话框小demo。\n * [RSAESCryptor](https://github.com/bigsan/RSAESCryptor) - 加密 RSA+AES Encryption/Decryption library for iOS. This library uses 2048-bit RSA and 256-bit key with 128-bit block size AES for encryption/decryption。\n * [WJTouchID](https://github.com/bringbird/WJTouchID) - 用法简单的TouchID验证框架：两行代码搞定。\n\n========\n#### 测试及调试\n * [HeapInspector](https://github.com/tapwork/HeapInspector-for-iOS) - HeapInspector是一个用于检测应用中的内存泄漏的开源调试工具。\n * [Crashlytics](http://try.crashlytics.com/) - Crashlytics 崩溃报告 崩溃日志   [使用说明](http://www.infoq.com/cn/articles/crashlytics-crash-statistics-tools) 。\n * [UIViewController-Swizzled](https://github.com/RuiAAPeres/UIViewController-Swizzled) - 把你进入的每一个controller的类名打出来,如果看一些特别复杂的项目的时候直接运行demo就可以知道执行次序了。\n * [snoop-it](https://code.google.com/p/snoop-it/) - snoop-it比UIViewController-Swizzled好用，代码托管在google上。\n * [Versions](https://github.com/zenangst/Versions) - 版本比较小工具。\n * [MobileWebPageTest](http://code4app.com/ios/MobileWebPerformanceTest/5465d3e9933bf00c658b4f43) - MobileWebPageTest是用来测试移动网页性能的软件，它可以对页面的加载和渲染过程进行截屏，协助开发者分析出页面性能瓶颈。\n * [KKLog](https://github.com/Coneboy-k/KKLog) - 一个日志管理系统。\n * [CleanroomLogger](https://github.com/emaloney/CleanroomLogger) - 相当于 CocoaLumberjack 或 Log4j 的 Swift 版本，功能上甚至更强大。另外，源代码中已经内含了完整的 API 文档，使用非常方便。\n * [Buildasaur](https://github.com/czechboy0/Buildasaur) - 自动测试框架 Buildasaur。\n * [使用Quick框架和Nimble来测试ViewControler](http://www.devtf.cn/?p=739) - Quick是一个用于创建BDD测试的框架。配合Nimbl，可以为你创建更符合预期目标的测试。\n * [fastlane](https://github.com/KrauseFx/fastlane) - 一套iOS开发和持续集成的命令行工具fastlane，可以用来快速搭建CI甚至自动提交的开发环境。这套工具中包括了上传ipa文件，自动截取多语言截屏，生成推送证书，管理产品证书等一系列实用工具。\n * [KIF](https://github.com/kif-framework/KIF) - 是一个开源的用户界面UI测试框架. 使用 KIF, 并利用 iOS中的辅助功能 API, 你将能够编写模拟用户输入，诸如点击，触摸和文本输入，自动化的UI测试.\n * [Quick](https://github.com/Quick/Quick) - 用于Swift中的单元测试（也可用于Objective-C），与Xcode整合在一起。如果你是Objective-C的粉丝，我建议用Specta代替这个，但是对Swift使用者来说，Quick是最佳选择。\n * [Sleipnir](https://github.com/railsware/Sleipnir) - Swift的测试框架。\n * [kiwi-bdd](https://github.com/kiwi-bdd/Kiwi/wiki) - TDD或BDD，objective-c语言的测试框架，最流行的BDD测试框架了，Kiwi最受欢迎（根据github上的star数来推断，行为描述和期望写起来也比较易懂，至少我是这么认为的） [iOS开发中的测试框架](http://www.jianshu.com/p/7e3f197504c1#)。\n * [specta](https://github.com/specta/specta) -  TDD或BDD，objective-c语言的测试框架，用的人多。\n * [cedar](https://github.com/pivotal/cedar) -  TDD或BDD，objective-c语言的测试框架，用的人少。\n * [ViewMonitor](https://github.com/daisuke0131/ViewMonitor) - 能够帮助 iOS 开发者们精确的测量视图, 可直接在调试应用中查看具体某个视图的坐标, 宽高等参数。\n * [MMPlaceHolder](https://github.com/adad184/MMPlaceHolder) - 一行代码显示UIView的位置及相关参数。\n * [XXPlaceHolder.swift](https://github.com/adad184/XXPlaceHolder) - MMPlaceHolder的swift版本。 \n * [KMCGeigerCounter](https://github.com/kconner/KMCGeigerCounter) - KMCGeigerCounter通过复杂和简单的视图演示了类似盖革计数器的帧速计算功能。掉帧通常是可见的，但是很难区分55fps和60fps之间的不同，而KMCGeigerCounter可以让你观测到掉落5帧的情况。\n * [SwiftyBeaver](https://github.com/SwiftyBeaver/SwiftyBeaver) - 一个完善的日志工具，支持彩色输出、输出内容到文件、重要性分级、多输出目标。工具执行在后台，不影响性能，可以极大提高开发效率。\n * [Cuckoo.swift](https://github.com/SwiftKit/Cuckoo) - Cuckoo.swift一款用法更接近于传统单元测试 Mock 框架库（区别之处在于需要用脚本预先生成 Mock 类）。\n\n========\n#### AppleWatch\n * [Tesla汽车AppleWatch app demo演示](https://github.com/eleks/rnd-apple-watch-tesla) - 通过AppleWatch控制特斯拉汽车，同时可以看到汽车的相关信息，比如剩余电量、可续行里程等，以及解锁/上锁车门、调节司机和乘客的四区域空调温度、开启车辆大灯、定位汽车等。[源码推荐说明](http://www.cocoachina.com/ios/20150205/11116.html)。 \n * [WatchKit-Apps](https://github.com/kostiakoval/WatchKit-Apps) - WatchKit 开源小项目示例集锦。是不可多得地学习 WatchKit 的示例式教程（1.如何创建一个简单的交互式计数器；2.如何从手表上控制iOS app；3.如何在WatchKit app和iOS app之间共享数据；4.如何创建一个拥有不同背景色的数字时钟；5.展示不同的UI层；6.如何创建支持滑动手势的应用程序。）。 \n * [KYVoiceCurve](https://github.com/KittenYang/KYVoiceCurve) - 类似Apple Watch中语音的声音曲线动画。  \n * [IGInterfaceDataTable](https://github.com/Instagram/IGInterfaceDataTable) - IGInterfaceDataTable是WKInterfaceTable对象的一个类别，可以让开发者更简单地配置多维数据。该项目使用类似UITableViewDataSource的数据源模式配置Apple Watch表格，而不是将数据结构扁平化成为数组。  \n * [Apple Watch开发教程资料汇总](http://www.swiftkiller.com/?p=613) - Apple Watch开发教程资料汇总。\n * [Stargate](https://github.com/contentful-labs/Stargate) - 通过 iPhone 桥接实现 Mac 与 Watch 的即时通讯。Stargate 通过封装两个优秀的基础类库 MMWormhole 和 PeerKit 实现高效的通讯应用。--swift\n * [soon](https://github.com/sandofsky/soon) - 一款倒计时 WatchKit 示例应用。作者从架构的角度，思考如何设计一款完整、通讯高效且性能又好的 WatchKit 扩展应用。该示例学习性非常强。--swift\n * [watchOS-2-Sampler](https://github.com/shu223/watchOS-2-Sampler) - 基于 watchOS 2 若干新特性，写了相应的示例代码供大家学习、参考。\n * [HMWatch](https://github.com/KhaosT/HMWatch) - HMWatch是个有待完善的watchOS 2.0 HomeKit 应用示例。\n * [CocoaMultipeer](https://github.com/manavgabhawala/CocoaMultipeer) - CocoaMultipeer这个开源框架支持OS X, iOS和watchOS设备间的点对点通信，解决watchOS和Mac之间通信的方案还是很有用的。\n * [HighstreetWatchApp](https://github.com/GetHighstreet/HighstreetWatchApp) - 是电商平台Highstreet针对App Watch的一款应用，该demo中加载的是虚拟数据。\n * [NKWatchChart](https://github.com/NilStack/NKWatchChart) - NKWatchChart是一个基于PNChart专门为Apple Watch 开发的图表库,目前支持 line, bar, pie, circle 和 radar 等 图表形式。\n * [BeijingAirWatch](https://github.com/diwu/BeijingAirWatch) - 国人的开源项目代码 ！WatchOS 2.0 Complication of Real-time Air Quality for Major Chinese Cities 苹果表盘实时刷新北上广沈蓉空气质量。\n\n========\n#### VPN\n * [vpnon](https://github.com/lexrus/vpnon/) - swift的VPN On 的源码和本地化内容都是开放的: [官方网站](https://crowdin.com/project/vpnon)。\n * [Hydro.network](https://github.com/CatchChat/Hydro.network) - [Hydro.network 的开发旅程](http://zhowkev.in/2015/03/09/hydro-network-de-kai-fa-lu-cheng/), [gitcafe](https://gitcafe.com/Catch/Hydro.network)。\n\n========\n#### 完整项目\n * [v2ex](https://github.com/singro/v2ex) - v2ex 的客户端，新闻、论坛。\n * [iBBS-Swift](https://github.com/iAugux/iBBS-Swift) - “新手开源一个用Swift（2.0）写的论坛客户端”。[BBS 服务端](http://obbs.sinaapp.com/)。 \n * [apps-ios-wikipedia](https://github.com/wikimedia/apps-ios-wikipedia) - apps-ios-wikipedia 客户端。 \n * [jetstream-ios](https://github.com/uber/jetstream-ios) - 一款 Uber 的 MVC 框架。它同时提供了多用户实时通讯支持，一旦启动 JetStream 后端服务，通过 WebSocket 协议可以分分钟建立多用户实时通讯应用。\n * [DeckRocket](https://github.com/jpsim/DeckRocket) - 在相同 WiFi 网络环境内，通过iPhone 控制并播放 Mac 中的 PDF 文档。\n * [ScanBook](https://github.com/JayFang1993/ScanBook) - 扫扫图书:可以扫描条形码查询图书，也可以关键字搜索，遇到合乎你口味的书，还可以看看别人的读书笔记，不同角度去体会。\n * [DesignerNewsApp](https://github.com/MengTo/DesignerNewsApp) - Swift 开发的 DesignerNews 客户端，看着美美的！\n * [KYWeibo](https://github.com/KittenYang/KYWeibo) - 调用新浪API自己写的第三方微博客户端。\n * [DouQu_IOS](https://github.com/li6185377/DouQu_IOS) - 逗趣IOS手机端（一款笑话软件）,拥有完整的功能的手机应用app 。\n * [IT江湖iOS客户端](https://github.com/itjhDev/itjh) - IT江湖iOS客户端。\n * [Eidolon](https://github.com/artsy/eidolon) - 艺术品拍卖的投标亭平台，用swift与反应式编程框架 ReactiveCocoa。\n * [CrazyPuzzle](https://github.com/nonstriater/CrazyPuzzle) - 模仿“看图猜成语”App，功能齐全，配有音效，效果很不错。游戏使用cocoa框架完成，没有使用cocos2d的框架。\n * [WhoCall](https://github.com/Tim9Liu9/WhoCall) - 谁CALL我，iOS来电信息语音提醒，无需越狱。（需要iOS 7.0及以上版本。)骚扰电话预警、来电归属地提醒、联系人姓名播报，这些有中国特色人性化的电话功能，iOS上也应该有。电话提醒、私有API。\n * [仿iOS猎豹垃圾清理(实现原理+源码)](http://www.devtf.cn/?p=562) -  仿iOS猎豹垃圾清理(实现原理+源码),用到私有API。\n * [DSLolita](https://github.com/sam408130/DSLolita) - 模仿新浪微博做的一款app，有发送博文，评论，点赞，私聊功能。\n * [STPhotoBrowser](https://github.com/STShenZhaoliang/STPhotoBrowser) - 高仿新浪微博的图片浏览器，极佳的编写方式，易扩展，低耦合。\n * [GSD_ZHIFUBAO](https://github.com/gsdios/GSD_ZHIFUBAO) - 支付宝高仿版。 \n * [Tropos](https://github.com/thoughtbot/Tropos) - Tropos, 由 thoughtbot 推出的一款用 Objective-C 写的开源天气类应用, 截至今天, thoughtbot 已在 GitHub 上贡献了 174 个开源项目, 实在令人敬佩。 \n * [SmileWeather](https://github.com/liu044100/SmileWeather) -开源天气类应用,天气图标很完整。  \n * [MVVMReactiveCocoa](https://github.com/leichunfeng/MVVMReactiveCocoa) - GitBucket 2.0 通过审核啦，她是我在公司实践了一年多 MVVM 和 RAC 的基础上，利用业余时间开发的第三方 GitHub 客户端，旨在能够对想实践 MVVM 和 RAC 的 iOS 开发者有所帮助。[AppStore地址](https://itunes.apple.com/cn/app/id961330940?mt=8)，欢迎下载使用GitBucket和收藏MVVMReactiveCocoa。 \n * [Tomate](https://github.com/dasdom/Tomate) - 这个圆盘式计时器让你更专注于工作或学习。P.S. App Store 上架收费应用（0.99 欧）。\n * [StoveFireiOSMenu](https://github.com/joeshang/StoveFireiOSMenu) - 炉火餐饮系统iPad点餐端。\n * [BaiduFM-Swift](https://github.com/belm/BaiduFM-Swift) - 百度FM, swift语言实现，基于最新xcode6.3+swift1.2,初步只是为了实现功能，代码比较粗燥，后面有时间会整理，支持Apple Watch。\n * [WNXHuntForCity](https://github.com/ZhongTaoTian/WNXHuntForCity) - iOS高仿城觅项目（开发思路和代码）。\n * [ZYChat](https://github.com/zyprosoft/ZYChat) - 关于聊天界面的可消息类型扩展，响应绑定设计。\n * [NiceAppDemo](https://github.com/minxiaoming/NiceAppDemo) - 仿最美应用-每日最美的钢琴律动效果。\n * [meituan](https://github.com/lookingstars/meituan) - 美团5.7iOS版（高仿），功能包括，团购首页，高德地图搜索附近美食并显示在地图上，上门服务，商家，友盟分享。\n * [MeituanDemo](https://github.com/zangqilong198812/MeituanDemo) - 造美团应用界面构建的 iOS 应用, 第一个是 @叶孤城___ 的 MeituanDemo。\n * [JFMeiTuan](https://github.com/tubie/JFMeiTuan) - 造美团应用界面构建的 iOS 应用, 第二个是 @tubiebutu 的 JFMeiTuan。\n * [chuanke](https://github.com/lookingstars/chuanke) - 高仿百度传课iOS版。 \n * [Tuan](https://github.com/aiqiuqiu/Tuan) - 模仿MJ老师iPad版美团（swift版），偶有bug 见谅。\n * [SXNews](https://github.com/dsxNiubility/SXNews) - 模仿网易新闻做的新闻软件，完成了主导航页，新闻详情页，图片浏览页，评论页。效果不错，比网上流传的各种和网易新闻UI架构有关的代码都要完整，都要好。\n * [Monkey](https://github.com/coderyi/Monkey) - Monkey for GitHub是一个GitHub开发者和仓库排名的开源App。这次主要增加了登录GitHub的功能，随手follow和star，并且增加发现模块，包括GitHub的trending，动态，showcases等。\n * [Uther](https://github.com/callmewhy/Uther) -  跟蠢萌的外星人聊天，还能帮你记事”。[itunes下载](https://itunes.apple.com/cn/app/uther/id1024104920) 。\n * [CocoaChinaPlus](https://github.com/zixun/CocoaChinaPlus) - CocoaChina+是一款开源的第三方CocoaChina移动端。整个App都用Swift2.0编写(除部分第三方OC代码外，比如JPush和友盟)。\n * [高仿斗鱼TV](http://code.cocoachina.com/view/128246) - 高仿斗鱼TV，点击头部滚动视图可以播放视频。\n * [LXZEALER](https://github.com/LonelyTown/LXZEALER) - 模仿着做了zealer客户端,App里几乎所有请求都是Post,所以内容都是固定的URL加载的,登录功能只做了微博的第三方登录。\n * [ShiXiSeng_ios](https://github.com/pengleelove/ShiXiSeng_ios) - 完整app的UI框架。\n * [Coding-iPad](https://github.com/Coding/Coding-iPad) - Coding-iPad 是@Coding的官方 iPad 客户端, 又是一个完整的开源应用。\n * [SimpleMemo](https://github.com/likumb/SimpleMemo) - 易便签已经转到Swift2.0，全面适配iOS9和Watch OS2，并支持iPhone6s和iPhone6sPlus的3D Touch功能，包括图标快捷键和内容预览。\n * [XXYAudioEngine.swift](https://github.com/xxycode/XXYAudioEngine) - 基于NSURLSession 和 AVAudoPlayer的在线音乐的工具，可以把音乐保存在本地，也可以支持后台播放，后台下载，最低支持iOS7，swift版本1.2。\n * [furni-ios.swift](https://github.com/twitterdev/furni-ios) - furni-ios.swift是由 Twitter 开发团队出品的一款用 Swift 写的 iOS 家居商城应用, 其主要目的在于让开发者从这款 Demo 应用中看出 Fabric 的强大。\n * [SelectionOfZhihu.swift](https://github.com/sheepy1/SelectionOfZhihu) - 『看知乎』iOS 客户端, [项目说明](http://www.jianshu.com/p/2c3a0f109788)。\n * [WFZhiHu](https://github.com/TigerWf/WFZhiHu) - WFZhiHu仿知乎日报客户端app。\n * [Yep.swift](https://github.com/CatchChat/Yep) - Yep 一个由天才开发给天才们使用的社交软件。\n * [LoveFreshBeen.swift](https://github.com/ZhongTaoTian/LoveFreshBeen) - 高仿爱鲜蜂 - Swift2.0\n * [trySwiftApp.swift](https://github.com/ZhongTaoTian/LoveFreshBeen) - trySwiftApp一款较为完整的会议原型应用。有需求的同学可以做为开发参考。\n * [PinGo.swift](https://github.com/gaowanli/PinGo) - PinGo.swift：纯Swift编写的仿“随遇”App。\n * [UmbrellaWeather.swift](https://github.com/ZeroJian/UmbrellaWeather) - UmbrellaWeather.swift使用 Swift 编写的一款天气应用,现已上架 AppStore。\n * [Phonetic.swift](https://github.com/iAugux/Phonetic) - Phonetic一个 iOS 版的 Phonetic Contacts，功能很多，其中昵称功能非常实用，已在 GitHub 开源并上架 App Store。\n\n========\n#### 好的文章\n * [自定义转场动画](http://www.jianshu.com/p/38cd35968864) - 3 种方法～ 关于自定义转场动画。\n * [iOS提高效率的方法和工具](https://github.com/icepy/_posts/blob/master/iOS%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E5%B7%A5%E5%85%B7.md) - iOS提高效率的方法和工具。 \n * [用 JSON 构建 API 的标准指南](http://jsonapi.org.cn/) - 用 JSON 构建 API 的标准指南。\n * [RxSwift入坑手册](http://blog.callmewhy.com/2015/09/21/rxswift-getting-started-0/) - RxSwift入坑手册。\n\n========\n#### Xcode插件\n * [iOS开发进阶，从Xcode开始](http://www.cocoachina.com/special/xcode/) - 学习使用Xcode构建出色的应用程序！\n * 在Xcode启动的时候，Xcode将会寻找位于~/Library/Application Support/Developer/Shared/Xcode/Plug-ins文件夹中的后缀名为.xcplugin的bundle作为插件进行加载（运行其中的可执行文件）。[Xcode5 Plugins 开发简介](http://studentdeng.github.io/blog/2014/02/21/xcode-plugin-fun/)  [写个自己的Xcode4插件](http://joeyio.com/ios/2013/07/25/write_xcode4_plugin_of_your_own/)\n\n * [Xcode 4 插件制作入门](http://www.onevcat.com/2013/02/xcode-plugin/) - Xcode 4 插件制作入门:Xcode所使用的所有库都包含在Xcode.app/Contents/的Frameworks，SharedFrameworks和OtherFrameworks三个文件夹下。其中和Xcode关系最为直接以及最为重要的是Frameworks中的IDEKit和IDEFoundation，以及SharedFrameworks中的DVTKit和DVTFoundation四个。\n \n * [RTImageAssets](https://github.com/rickytan/RTImageAssets) - 一个 Xcode 插件，用来生成 @3x 的图片资源对应的 @2x 和 @1x 版本。[Asset Catalog Creator](https://itunes.apple.com/app/asset-catalog-creator-free/id866571115?mt=12) 功能强大，能自动生成全部尺寸：包括App Icons、Image Sets、Launch Screens Generator。\n\n * [VVDocumenter-Xcode](https://github.com/onevcat/VVDocumenter-Xcode) - 一个Xcode插件，build后，随手打开一个你之前的项目，然后在任意一个方法上面连按三下\"/\"键盘，就ok了。\n * [Reveal-Plugin-for-XCode](https://github.com/shjborage/Reveal-Plugin-for-XCode) - 一个Reveal插件，可以使工程不作任何修改的情况下使用Reveal，该插件已在Alcatraz上架。[Reveal：分析iOS UI的利器](http://security.ios-wiki.com/issue-3-4/) 。\n\n * [java2Objective-c](https://github.com/google/j2objc) - Google公司出得java转Obje-C转换工具，转换逻辑，不转换UI。\n\n * [RegX](https://github.com/kzaher/RegX) - 专治代码强迫症的 Xcode 插件，使用 Swift 和 Objective-C 编写。其用竖向对齐特定源代码的元素，使得代码更易读和易理解。[说明](http://www.cocoachina.com/ios/20141224/10743.html) ； 菜单：xcode——》Edit-》Regx 。\n\n * [KSImageNamed](https://github.com/ksuther/KSImageNamed-Xcode) - 自动完成，特别是如果你正在写Objective-C，如果Xcode能自动完成文件名难道不会很伟大吗？比如图像文件的名称。\n\n * [FuzzyAutocomplete](https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin) - Xcode的实现自动完成还不完美，此插件能给出你所期望或想要的建议，设置：xcode-》Editor-》FuzzyAutocomplete-》plugin settings。\n\n * [GitDiff](https://github.com/johnno1962/GitDiff) - Xcode的代码编辑器的一个微妙的补强，加上了足够的可见信息以了解上次git提交以来发生了什么变化，设置：xcode-》Edit-》GitDiff。\n\n * [XToDo](https://github.com/trawor/XToDo) - 这个插件不仅凸显TODO，FIXME，???，以及！！！注释，也在便利列表呈现他们。 菜单：xcode-》view-》snippets;   调出列表显示: xcode-》view-》ToDo List ： ctrl + T 。 \n\n * [Backlight](https://github.com/limejelly/Backlight-for-XCode) - 突出显示当前正在编辑的行。菜单：xcode-》view-》Backlight 。\n\n * [CocoaPods](https://github.com/kattrali/cocoapods-xcode-plugin) - 该CocoaPods的插件增加了一个CocoaPods菜单到Xcode的产品菜单。如果你不喜欢命令行，那么你一定会喜欢这个插件。 [用CocoaPods做iOS程序的依赖管理 ]( \nhttp://tangqiaoboy.gitcafe.io/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/)。\n\n * [Peckham](https://github.com/markohlebar/Peckham) - 添加import语句比较麻烦，此插件 按Command-Control-P，给出的选项列表中选择要的头文件。先要安装[Alcatraz](http://alcatraz.io/) ,在终端输入： **curl -fsSL https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh | sh** ； 重启xcode-》window-》Package Manager：搜索 **Peckham** 安装，打开Peckham.xcodeproj，编译 Peckham target，重启Xcode 。\n\n * [Auto-Importer](https://github.com/lucholaf/Auto-Importer-for-Xcode) - Auto-Importer是一个自动导入类对应的头文件的Xcode插件。\n\n * [Alcatraz](http://alcatraz.io/) -使用Alcatraz来管理Xcode插件 [使用说明](http://tangqiaoboy.gitcafe.io/blog/2014/03/05/use-alcatraz-to-manage-xcode-plugins/) 。\n\n * [KSHObjcUML](https://github.com/kimsungwhee/KSHObjcUML) -KSHObjcUML 是一个 Objective-C 类引用关系图的 Xcode 插件。 \n\n * [ColorSense-for-Xcode](https://github.com/omz/ColorSense-for-Xcode) - 颜色插件，安装之后，就不用根据RGB选择颜色，直接从取色板中取颜色，会自动补齐RGB代码。\n\n * [10款提高iOS开发效率的XCode插件](http://www.imooc.com/wenda/detail/237132) - 10款提高iOS开发效率的XCode插件：1. XcodeColors；5. ACCodeSnippetRepository；10. Dash for Xcode。 \n\n * [ZLGotoSandboxPlugin](https://github.com/MakeZL/ZLGotoSandboxPlugin) - 支持Xcode快捷键了跳转当前应用沙盒了！快捷键是 Shift+Common+w。 \n\n * [XcodeSwiftSnippets](https://github.com/burczyk/XcodeSwiftSnippets) - XcodeSwiftSnippets, 提供了很多可在 Xcode 上使用的 Swift 代码片段, 通过自动补全的方式极大的提高了开发效率， [另外还有 Objective-C 版的](https://github.com/Xcode-Snippets/Objective-C)。 \n\n * [CoPilot](https://vimeo.com/128713880) - 通过此插件， Xcode 可以协同编程了（采用 WebSocket 通讯）。如此强大的“黑工具”，不爱它能行吗。 \n * [ESJsonFormat-Xcode](https://github.com/EnjoySR/ESJsonFormat-Xcode) - 将Json格式化输出为模型的属性。\n * [SCXcodeMiniMap](https://github.com/stefanceriu/SCXcodeMiniMap) - Xcode迷你小地图-SCXcodeMiniMap。\n * [xTransCodelation](http://code.cocoachina.com/detail/316095/xTransCodelation/) - XCODE中英文翻译插件，提供API查询模式和网页模式，都是利用的百度翻译。另外集成了一个可以一键关闭其他所有APP的实用功能，方便开发者！\n * [SuggestedColors](https://github.com/jwaitzel/SuggestedColors/) - Xcode 插件SuggestedColors，用于 IB颜色设置 辅助插件，非常好用。\n * [Colors](https://github.com/paulot/Colorsp) - 打印彩色字符串，可以修改 Swift 中终端输出的字符串颜色，有趣的小工具。\n\n========\n#### 美工资源\n * [TWG_Retina_Icons](https://github.com/markohlebar/Peckham) - 一套支持 Retina 高清屏的 iPhone 免费图标集。\n * [ASCIImage](https://github.com/cparnot/ASCIImage) - 使用 NSString 创建 image，[说明](http://cocoamine.net/blog/2015/03/20/replacing-photoshop-with-nsstring/)。\n * [my-sketch-colors](https://github.com/RayPS/my-sketch-colors) - 配色。\n * [Font Awesome](http://www.imooc.com/wenda/detail/250367) - Font Awesome：一套绝佳的图标字体库和CSS框架，详细的安装方法请参考[官方网站](http://fortawesome.github.io/Font-Awesome/icons/)[中文网站](http://fontawesome.dashgame.com/),[GitHub地址](https://github.com/FortAwesome/Font-Awesome) 。\n * [DynamicColor](https://github.com/yannickl/DynamicColor) - 强大的颜色操作扩展类。通过该类，你可以通过扩展方法基于某个颜色得到不同深浅、饱和度、灰度、色相，以及反转后的新颜色。是不可多得的好类库。\n * [Chameleon](https://github.com/ViccAlexander/Chameleon) - Chameleon是一个iOS的色彩框架。它运用现代化flat color将UIColor扩展地非常美观。我们还可以通过它运用自定义颜色创建调色板。它还有很多功用，请浏览readme。\n * [FontBlaster](https://github.com/ArtSabintsev/FontBlaster) - 载入定制字体时更简单。\n\n#### 其他资源\n * [githuber](http://githuber.info/#/index) - 最好用的GitHub人才搜索工具。   \n * [codatlas](https://www.codatlas.com) - 源代码搜索利器。\n * [searchcode](https://searchcode.com/) - 源代码搜索利器：来自悉尼的代码搜索引擎汇聚了 Github, Bitbucket, Sourceforge...等多家开源站点超20万个项目、180亿行源代码，能以特殊字符、语言、仓库和源方式从90多种语言找到函数、API的真实代码。\n * [kitematic](https://github.com/kitematic/kitematic) - Mac 上使用 Docker 最简单的方案。 \n\n\n\n========\n#### 开发资源\n##### 开发资料\n * [豆瓣iOS开源库列表](http://www.douban.com/note/276160185/?type=like) - 豆瓣iOS开源库列表，很多开源项目。\n * [iOS-Core-Animation-Advanced-Techniques](https://github.com/AttackOnDobby/iOS-Core-Animation-Advanced-Techniques) - 中文版iOS 高级动画技术。 \n * [iOS开发的一些奇巧淫技1](http://www.jianshu.com/p/50b63a221f09) - TableView不显示没内容的Cell怎么办; 键盘事件：[IQKeyboardManager](https://github.com/hackiftekhar/IQKeyboardManager);  app不流畅:[KMCGeigerCounter](https://github.com/kconner/KMCGeigerCounter);  CoreData用起来好烦:[MagicalRecord](https://github.com/magicalpanda/MagicalRecord);  CollectionView实现悬停的header:[CSStickyHeaderFlowLayout](https://github.com/jamztang/CSStickyHeaderFlowLayout)。\n * [iOS开发的一些奇巧淫技2](http://www.jianshu.com/p/08f194e9904c) -  用一个pan手势来代替UISwipegesture的各个方向、拉伸图片、播放GIF、上拉刷新、把tableview里cell的小对勾的颜色改变、navigationbar弄成透明的而不是带模糊的效果、改变uitextfield placeholder的颜色和位置。\n * [cocoapods安装指南](http://code4app.com/article/cocoapods-install-usage) - cocoapods安装指南。\n * [RemoteControl](https://github.com/johnno1962/Remote) - Control your iPhone from inside Xcode for end-to-end testing 。\n * [MVVM 介绍](http://objccn.io/issue-13-1/) - 替换MVC的开发模式。\n * [第三方接口](http://apistore.baidu.com/astore/index) - 基本所有第三方接口都在这，再也不用那么麻烦去找了。\n\n* [提高iOS开发效率的方法和工具](http://yyny.me/ios/%E6%8F%90%E9%AB%98iOS%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E5%B7%A5%E5%85%B7/) - 提高iOS开发效率的方法和工具。\n* [禅与 Objective-C 编程艺术](https://github.com/oa414/objc-zen-book-cn) - 禅与 Objective-C 编程艺术 （Zen and the Art of the Objective-C Craftsmanship 中文翻译）。\n* [Objective-C编码规范：26个方面解决iOS开发问题](http://www.imooc.com/article/1216) - 【Objective-C编码规范：26个方面解决iOS开发问题：“我们制定Objective-C编码规范的原因是我们能够在我们的书，教程和初学者工具包的代码保持优雅和一致。”今天分享的规范来自raywenderlich.com团队成员共同完成的，希望对学习OC的朋友们有所指导和帮助。\n\n\n###### swift\n * [Swift中文指南](https://github.com/numbbbbb/the-swift-programming-language-in-chinese) - 中文版Apple官方Swift教程《The Swift Programming Language》，[老码版本](http://numbbbbb.gitbooks.io/-the-swift-programming-language-/content/)  [历史版本更新说明](http://numbbbbb.gitbooks.io/-the-swift-programming-language-/content/chapter1/03_revision_history.html)。 \n * [The Swift Programming Language 中文版](http://wiki.jikexueyuan.com/project/swift/) - The Swift Programming Language 中文版。 \n * [swifttoolbox](http://www.swifttoolbox.io/) -  swifttoolbox swift开发的开源库汇总。 \n * [SwiftGuide](https://github.com/ipader/SwiftGuide) -  这份指南汇集了Swift语言主流学习资源，并以开发者的视角整理编排-- 非常不错，值得推荐。\n * [Swift开源项目精选](https://github.com/ipader/SwiftGuide/blob/master/Featured.md) - Swift开源项目精选--推荐，每周都有更新。\n * [Awesome Swift](https://swift.zeef.com/robin.eggenkamp) - 一个收集了很多 Swift 开发资源的网站。\n * [Developing_iOS_8_Apps_With_Swift](https://github.com/x140yu/Developing_iOS_8_Apps_With_Swift) - Developing iOS 8 Apps with Swift 字幕简体中文翻译项目（斯坦福白胡子老头swift教学视频）。\n * [Swift-On-iOS](https://github.com/johnlui/Swift-On-iOS) - JohnLui 的 Swift On iOS 代码仓库。\n * [Perfect](https://github.com/PerfectlySoft/Perfect) - Perfect 致力于 Swift 服务端应用，从打造专业应用服务器开始。\n * [swift-http](https://github.com/huytd/swift-http) - Swift HTTP Server，又一个 Swift 服务器，最大的亮点是支持 Docker 部署。\n * [30DaysofSwift](https://github.com/allenwong/30DaysofSwiftp) - 30DaysofSwift 自学 iOS - [三十天三十个 Swift 项目](http://weibo.com/ttarticle/p/show?id=2309403942494873235448)。\n\n##### 他人开源总结\n * [awesome-osx](https://github.com/iCHAIT/awesome-osx) - Awesome OS X。\n * [code4app](http://www.code4app.com/) - 最多国人用的代码库。\n * [cocoachina](http://code.cocoachina.com/) - 国内最热门的iOS社区的代码库。\n * [awesome-ios](https://github.com/vsouza/awesome-ios) - 一个老外整理的，[中文版](http://app.memect.com/doc/ios.html)。\n * [awesome-ios-ui](https://github.com/cjwirth/awesome-ios-ui) - 收集了不少 iOS UI/UX 库, 包含了很多酷炫的动画效果。\n * [ios-cosmos](http://ios-cosmos.com/) - The iOS Cosmos：收录了IOS绝大部分的开源框架和工具。\n * [Awesome Haskell资料大全](https://haskell.zeef.com/konstantin.skipor#block_28362_basics) -    Awesome Haskell 资料大全：框架，库和软件。\n * [Cosmos](http://ios-cosmos.com) - The iOS Cosmos：收录了IOS绝大部分的开源框架和工具。\n * [cocoacontrols](http://cocoacontrols.com) -  收集了很多UI控件效果代码，缺点是需要翻墙，而且代码分类不够好。\n * [lexrus](https://github.com/lexrus) -  lexrus国内出名的iOS开源coder，非常酷的label动画、textfield动画。\n * [open-source-ios-apps](https://github.com/dkhamsing/open-source-ios-apps) - iOS App集合，分：swift与Objective-C--国外人整理。 \n\n * [适合iOS开发者的15大网站推荐](http://www.csdn.net/article/2015-03-04/2824108-ios-developers-sites) -  适合 iOS 开发者的 15 大网站推荐 --- 英文网站。\n\n * [Objective-C GitHub 排名前 100 项目简介](https://github.com/Aufree/trip-to-iOS/blob/master/Top-100.md) -  主要对当前 GitHub 排名前 100 的项目做一个简单的简介, 方便初学者快速了解到当前 Objective-C 在 GitHub 的情况。 \n\n * [Github-iOS备忘](http://github.ibireme.com/github/list/ios/) -整理了比较常用的iOS第三方组件，以及github上的统计。\n * [超全！整理常用的iOS第三方资源](http://www.cocoachina.com/ios/20160121/14988.html) - 超全！整理常用的iOS第三方资源。\n * [MyGithubMark](https://github.com/JanzTam/MyGithubMark) - Github上的iOS资料-个人记录（持续更新）。\n\n\n##### 开发博客列表\n * [唐巧整理](https://github.com/tangqiaoboy/iOSBlogCN) - 猿题库唐巧整理。\n * [11个超棒的iOS开发学习国外网站](http://www.cocoachina.com/ios/20150626/11348.html) - 11个超棒的iOS开发学习网站:[objc.io](https://www.objc.io) ;[subjc.com](http://subjc.com) ;[NSHipster](http://nshipster.com) ;[Peter Steinberger](http://petersteinberger.com) ;[Ole Begemann](http://oleb.net) ;[Florian Kugler](http://floriankugler.com) ;[NSBlog](https://www.mikeash.com/pyblog/) ;[Cocoa](http://cocoa.tumblr.com) ;[iOS Dev Weekly](http://iosdevweekly.com) ;[iOS Developer Tips](http://iosdevelopertips.com) ;[iOS Goodies](http://ios-goodies.com) ;[AppCoda](http://www.appcoda.com) 香港人创建;[Krzysztof Zab?ocki](http://merowing.info) ;[iOS Development tips](http://iosdevtips.co) ;\n\n博客地址 | RSS地址\n----- | -----\n[南峰子的技术博客](http://southpeak.github.io/) | 南峰子的技术博客。\n[唐巧的技术博客](http://blog.devtang.com) | <http://blog.devtang.com/atom.xml>\n[OneV's Den](http://onevcat.com) | <http://onevcat.com/atom.xml>\n[objc 中国](http://objccn.io/) | 为中国 Objective-C 社区带来最佳实践和先进技术。\n[破船之家](http://beyondvincent.com) | <http://beyondvincent.com/atom.xml>\n[NSHipster](http://nshipster.cn) | <http://nshipster.cn/feed.xml>\n[Limboy 无网不剩](http://blog.leezhong.com/) | <http://feeds.feedburner.com/lzyy>\n[Lex iOS notes](http://ios.lextang.com) | <http://ios.lextang.com/rss>\n[念茜的博客](http://nianxi.net) | <http://nianxi.net/feed.xml>\n[Xcode Dev](http://blog.xcodev.com) | <http://blog.xcodev.com/atom.xml>\n[Ted's Homepage](http://wufawei.com/)| <http://wufawei.com/feed>\n[txx's blog](http://blog.t-xx.me) | <http://blog.t-xx.me/atom.xml>\n[KEVIN BLOG](http://imkevin.me) | <http://imkevin.me/rss>\n[阿毛的蛋疼地](http://www.xiangwangfeng.com) | <http://www.xiangwangfeng.com/atom.xml>\n[亚庆的 Blog](http://billwang1990.github.io) | <http://billwang1990.github.io/atom.xml>\n[Nonomori](http://nonomori.farbox.com) | <http://nonomori.farbox.com/feed>\n[言无不尽](http://tang3w.com) | <http://tang3w.com/atom.xml>\n[Wonderffee's Blog](http://wonderffee.github.io) | <http://wonderffee.github.io/atom.xml>\n[I'm TualatriX](http://imtx.me) | <http://imtx.me/feed/latest/>\n[vclwei](http://vclwei.com) | <http://vclwei.com/posts.rss>\n[Cocoabit](http://blog.cocoabit.com) | <http://blog.cocoabit.com/atom.xml>\n[nixzhu on scriptogr.am](http://nixzhu.me) | <http://nixzhu.me/feed>\n[不会开机的男孩](http://studentdeng.github.io) | <http://studentdeng.github.io/atom.xml>\n[Nico](http://www.taofengping.com) | <http://www.taofengping.com/rss.xml>\n[阿峰的技术窝窝](http://hufeng825.github.io) | <http://hufeng825.github.io/atom.xml>\n[answer_huang](http://answerhuang.duapp.com) | <http://answerhuang.duapp.com/index.php/feed/>\n[webfrogs](http://webfrogs.me) | <http://webfrogs.me/feed/>\n[代码手工艺人](http://joeyio.com) | <http://joeyio.com/atom.xml>\n[Lancy's Blog](http://gracelancy.com) | <http://gracelancy.com/atom.xml>\n[I'm Allen](http://www.imallen.com) | <http://www.imallen.com/atom.xml>\n[Travis' Blog](http://imi.im/)| <http://imi.im/feed>\n[王中周的技术博客](http://wangzz.github.io/) |<http://wangzz.github.io/atom.xml>\n[会写代码的猪](http://jiajun.org/)|<http://gaosboy.com/feed/atom/>\n[克伟的博客](http://wangkewei.cnblogs.com/)|<http://feed.cnblogs.com/blog/u/23857/rss>\n[摇滚诗人](http://cnblogs.com/biosli)|<http://feed.cnblogs.com/blog/u/35410/rss>\n[Luke's Homepage](http://geeklu.com/) | <http://geeklu.com/feed/>\n[萧宸宇](http://iiiyu.com/) | <http://iiiyu.com/atom.xml>\n[Yuan博客](http://www.heyuan110.com/) | <http://www.heyuan110.com/?feed=rss2>\n[Shining IO](http://shiningio.com/) | <http://shiningio.com/atom.xml>\n[YIFEIYANG--易飞扬的博客](http://www.yifeiyang.net/) | <http://www.yifeiyang.net/feed>\n[KooFrank's Blog](http://koofrank.com/) | <http://koofrank.com/rss>\n[hello it works](http://helloitworks.com) | <http://helloitworks.com/feed>\n[码农人生](http://msching.github.io/) | <http://msching.github.io/atom.xml>\n[玉令天下的Blog](http://yulingtianxia.com) | <http://yulingtianxia.com/atom.xml>\n[不掏蜂窝的熊](http://www.hotobear.com/) | <http://www.hotobear.com/?feed=rss2>\n[猫·仁波切](https://andelf.github.io/) | <https://andelf.github.io/atom.xml>\n[煲仔饭](http://ivoryxiong.org/) | <http://ivoryxiong.org/feed.xml>\n[里脊串的开发随笔](http://adad184.com) | <http://adad184.com/atom.xml>\n[ibireme伽蓝之堂](http://blog.ibireme.com/) | <http://blog.ibireme.com/feed/>\n\n#### 物联网\n * [awesome-iot](https://github.com/phodal/awesome-iot) - 这份物联网学习参考大全太给力。从物联网协议、嵌入式系统、相关开源库、相关书籍、博客、学习笔记、标准应有尽有。\n","source":"_posts/2016/7月/别人总结的开源项目和库.md","raw":"---\ntitle: 别人总结的开源项目和库\ndate: 2016-07-21 11:52:34\ntags:\n---\n# 吃水不忘挖井人[原文地址](https://github.com/Tim9Liu9/TimLiu-iOS#%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0)\n\n> 想那些辛勤的收集者表示感谢！\n========\n自己总结的iOS、mac开源项目及库，持续更新。。。。\ngithub排名 [https://github.com/trending](https://github.com/trending),github搜索：[https://github.com/search](https://github.com/search)\n\n###  目录\n- [UI](#UI)\n    - [下拉刷新](#下拉刷新)\n    - [模糊效果](#模糊效果)\n    - [AutoLayout](#AutoLayout)\n    - [富文本](#富文本)\n    - [图表](#图表)\n    - [表相关与Tabbar](#表相关与Tabbar) \n    - [隐藏与显示](#隐藏与显示)\n    - [HUD与Toast](#HUD与Toast)\n    - [对话框](#对话框)\n    - [其他UI](#其他UI)\n- [动画](#动画)\n    - [侧滑与右滑返回手势](#侧滑与右滑返回手势)\n    - [gif动画](#gif动画)\n    - [其他动画](#其他动画)\n- [网络相关](#网络相关)\n    - [网络连接](#网络连接)\n    - [图像获取](#图像获取)\n    - [网络聊天](#网络聊天)\n    - [网络测试](#网络测试)\n    - [WebView](#WebView)\n- [Model](#Model)\n- [通讯录](#通讯录)\n- [其他](#其他)\n- [数据库](#数据库)\n- [缓存处理](#缓存处理)\n- [PDF](#PDF)\n- [图像浏览及处理](#图像浏览及处理)\n- [摄像照相视频音频处理](#摄像照相视频音频处理)\n- [响应式框架](#响应式框架)\n- [消息相关](#消息相关)\n    - [消息推送客户端](#消息推送客户端)\n    - [消息推送服务器端](#消息推送服务器端)\n    - [通知相关](#通知相关)\n- [版本新API的Demo](#版本新API的Demo)\n- [代码安全与密码](#代码安全与密码)\n- [测试及调试](#测试及调试)\n- [AppleWatch](#AppleWatch)\n- [完整项目](#完整项目)\n- [好的文章](#好的文章)\n- [VPN](#VPN)\n- [Xcode插件](#Xcode插件)\n- [美工资源](#美工资源)\n- [开发资源](#开发资源)\n    - [开发资料](#开发资料)\n    - [swift](#swift)\n    - [他人开源总结](#他人开源总结)\n    - [开发博客列表](#开发博客列表)\n\n========\n\n<!--more-->\n\n### 具体内容 \n#### UI\n##### 下拉刷新\n * [EGOTableViewPullRefresh](https://github.com/enormego/EGOTableViewPullRefresh) - 最早的下拉刷新控件。\n * [SVPullToRefresh](https://github.com/samvermette/SVPullToRefresh) - 下拉刷新控件。 \n * [MJRefresh](https://github.com/CoderMJLee/MJRefresh) - 仅需一行代码就可以为UITableView或者CollectionView加上下拉刷新或者上拉刷新功能。可以自定义上下拉刷新的文字说明。具体使用看“使用方法”。 （国人写）\n * [XHRefreshControl](https://github.com/xhzengAIB/XHRefreshControl) - XHRefreshControl 是一款高扩展性、低耦合度的下拉刷新、上提加载更多的组件。（国人写）\n * [CBStoreHouseRefreshControl](https://github.com/coolbeet/CBStoreHouseRefreshControl) - 一个效果很酷炫的下拉刷新控件。\n * [BreakOutToRefresh](https://github.com/dasdom/BreakOutToRefresh) - 一个下拉刷新打砖块的开源 Swift 库，能让用户在等待下拉刷新的时候边玩撞球游戏边等待。\n * [KYJellyPullToRefresh](https://github.com/KittenYang/KYJellyPullToRefresh) - 实现弹性物理效果的下拉刷新，神奇的贝塞尔曲线，配合UIDynamic写的一个拟物的下拉刷新动画。\n * [MHYahooParallaxView](https://github.com/michaelhenry/MHYahooParallaxView) - 类似于Yahoo Weather和News Digest首屏的视差滚动。 \n * [SDRefreshView](https://github.com/gsdios/SDRefreshView) - 简单易用的上拉和下拉刷新（多版本细节适配）。\n * [ZLSwiftRefresh](https://github.com/MakeZL/ZLSwiftRefresh) - swift下拉刷新/上拉加载更多，支持自定义动画，集成简单，兼容UITableView/CollectionView/ScrollView/WebView。\n * [BreakOutToRefresh](https://github.com/dasdom/BreakOutToRefresh) - swift，上拉和下拉刷新。\n * [GearRefreshControl](https://github.com/andreamazz/GearRefreshControl) -  swift，上拉和下拉刷新。\n * [refresher](https://github.com/jcavar/refresher) -  swift，上拉和下拉刷新。\n * [可展开/收缩的下拉菜单--SvpplyTable](http://d.cocoachina.com/code/detail/237753) -  一个可展开可收缩的下拉菜单，类似Svpply app。\n * [ODRefreshControl](https://github.com/Sephiroth87/ODRefreshControl) - 原iOS6上的橡皮糖刷新样式，很有意思。现在也很多大的 App 在用，比如虾米音乐和 QQ 客户端。\n * [PullToMakeSoup](https://github.com/Yalantis/PullToMakeSoup) - PullToMakeSoup, 自定义下拉刷新的动画效果：煮饭, Yalantis新作！\n * [TwitterCover](https://github.com/cyndibaby905/TwitterCover) -  Twitter iOS客户端的下拉封面模糊效果。\n * [Replace-iOS](https://github.com/MartinRGB/Replace-iOS) - Replace-iOS 让人眼前一亮的下拉刷新（iOS）。\n * [Animations](https://github.com/KittenYang/Animations) - 封装了一下，使用的时候只要两行代码。一些动画的飞机稿，都是一些单独分离出来的用于测试的子动画，现在统一归类一下。\n * [PullToBounce](https://github.com/entotsu/PullToBounce) - 下拉刷新的动画 for UIScrollView。\n * [WaterDropRefresh](https://github.com/li6185377/WaterDropRefresh) - 仿Path 水滴的下拉刷新效果 还有视差滚动。\n * [ESRefreshControl](https://github.com/EnjoySR/ESRefreshControl) - 仿新浪微博、百度外卖、网易新闻下拉刷新样式Demo（仅供参考）。\n * [WaveRefresh](https://github.com/alienjun/WaveRefresh) - 下拉刷新水波纹动画。\n * [DGElasticPullToRefresh](https://github.com/gontovnik/DGElasticPullToRefresh) - 是一款带有弹性效果的 iOS 下拉刷新组件。\n * [CALayerAnimationDemoh](https://github.com/wuwen1030/CALayerAnimationDemoh) - 双向注水动画下拉刷新组件,使用CALayer的mask实现。\n * [BanTangAnimation](https://github.com/zangqilong198812/BanTangAnimation) - 半塘下拉刷新的原理。简单来说是利用CGGlyph，字符图形转换成cgpath，然后绘制strokeEnd动画。把timeoffset和scrolloffset结合就行了。\n\n##### 模糊效果\n * [FXBlurView](https://github.com/nicklockwood/FXBlurView) - 是一个UIView子类，支持iOS5.0以上版本，支持静态、动态模糊效果，继承与UIView的模糊特效。\n * [VVBlurPresentation](https://github.com/onevcat/VVBlurPresentation) -很简单易用的在原来viewconntroller基础上做模糊，然后present新的viewcontroller的。\n * [UICustomActionSheet](https://github.com/pchernovolenko/UICustomActionSheet) - 通过模糊背景来着重强调与菜单相关的元素--对话框 里面已经收藏。\n * [SABlurImageView](https://github.com/szk-atmosphere/SABlurImageView) - 支持渐变动画效果的图像模糊化类库。P.S. 与前几天推存类库 SAHistoryNavigationViewController 是同一位作者。\n * [Blurable.swift](https://github.com/FlexMonkey/Blurable) - swift模糊组件。\n\n##### AutoLayout\n * [Masonry](https://github.com/Masonry/Masonry) - Masonry是一个轻量级的布局框架，拥有自己的描述语法，采用更优雅的链式语法封装自动布局，简洁明了并具有高可读性（ [使用介绍1](http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/)  [使用介绍2](http://ios.jobbole.com/81483/)），[iOS自适应前段库-Masonry的使用](http://www.cocoachina.com/ios/20150702/12217.html)），[Masonry、Classy、ClassyLiveLayout介绍](http://www.jianshu.com/p/2ed5f7444900)。[使用DEMO](https://github.com/lcddhr/DDMasonryTest) 视图居中显示、子视图含边距、视图等距离摆放、计算ScrollView的contentsize。\n * [Classy](https://github.com/cloudkite/Classy/) - Classy是一个能与UIKit无缝结合stylesheet(样式)系统。它借鉴CSS的思想，但引入新的语法和命名规则，[Classy官网](http://classy.as/getting-started/)，[Masonry、Classy、ClassyLiveLayout介绍](http://www.jianshu.com/p/2ed5f7444900)。\n * [ClassyLiveLayout](https://github.com/olegam/ClassyLiveLayout) - ClassyLiveLayout通过结合Classy stylesheets与Masonry一起使用，能够在运行的模拟器中微调Auto Layout约束实时显示效果的工具，[Masonry、Classy、ClassyLiveLayout介绍](http://www.jianshu.com/p/2ed5f7444900)。\n * [Snap](https://github.com/Masonry/Snap) - Snap是Masonry Auto Layout DSL的Swift版本，是一款轻量级的布局框架，使用了更良好的语法封装了AutoLayout。Snap支持iOS和OS X。\n * [SnapKit](https://github.com/SnapKit/SnapKit) - 就是“snap”， --swift 喜欢自动布局吗？当然喜欢！至少在storyboard中创建时会喜欢。 在代码中纯手工创建约束灰常痛苦，但幸运的是我们有了SnapKit，在board中用上它，你可以简单直观地编写约束了。\n * [PureLayout](https://github.com/smileyborg/PureLayout) - PureLayout 是 iOS & OS X Auto Layout 的终极 API——非常简单，又非常强大。PureLayout 通过一个全面的Auto Layout API 扩展了 UIView/NSView, NSArray 和 NSLayoutConstraint，仿照苹果自身的框架。\n * [UIView-AutoLayout](https://github.com/smileyborg/UIView-AutoLayout) - \nDeprecated in favor of PureLayout, which includes OS X support:https://github.com/smileyborg/PureLayout。\n * [Cartography](https://github.com/robb/Cartography) - Cartography 是用来声明 Swift 中的 Auto Layout，无需输入任何 stringly 就可设置自己 Auto Layout 的约束声明。\n * [Auto-Layout-Showcase](https://github.com/philcn/Auto-Layout-Showcase) - swift,AutoLayout 进阶 Demo，宽高比约束、比例约束、不等约束、视差约束、低优先级约束等高级用法，无需写码即可进行复杂页面布局，Demo 还动态模拟了各屏幕下的效果。来自百度知道 iOS 小组的内部分享。\n * [UIView-FDCollapsibleConstraints](https://github.com/forkingdog/UIView-FDCollapsibleConstraints) - 一个AutoLayout辅助工具，最优雅的方式解决自动布局中子View的动态显示和隐藏的问题。第二个Demo模拟了一个经典的FlowLayout，任意一个元素隐藏时，底下的元素需要自动“顶”上来，配合这个扩展，你可以在IB里连一连，选一选，不用一行代码就能搞定。\n * [Autolayout_Demo](https://github.com/luodezhao/Autolayout_Demo) - 在项目中用自动布局实现的类似抽屉效果。\n * [当view隐藏的时候也隐藏其autolayout的NSLayoutAttribute](http://code.cocoachina.com/detail/320405/) - 当view隐藏的时候也隐藏其autolayout的NSLayoutAttribute，从而不用大量的代码工作。\n * [SDAutoLayout](https://github.com/gsdios/SDAutoLayout) - AutoLayout 一行代码搞定自动布局！支持Cell、Label和Tableview高度自适应，致力于做最简单易用的AutoLayout库。\n * [Neon.swift](https://github.com/mamaral/Neon) - 功能强大的 UI 布局神器。\n\n##### 富文本\n * [RTLabel](https://github.com/honcheng/RTLabel) - RTLabel 基于UILabel类的拓展,能够支持Html标记的富文本显示，它是基于Core Text,因此也支持Core Text上的一些东西。32位，很久没有更新了。\n * [RTLabel](https://github.com/bingxue314159/RTLabel) - 富文本，RTLabel支持64位。 \n * [TYAttributedLabel](https://github.com/12207480/TYAttributedLabel) -  TYAttributedLabel。 简单易用的属性文本控件(无需了解CoreText)，支持富文本，图文混排显示，支持添加链接，image和UIView控件，支持自定义排版显示。\n * [TQRichTextView](https://github.com/TinyQ/TQRichTextView) - 用于做富文本视图控件显示，用于即时通讯的表情显示，以及资源评论的富文本显示。\n * [TTTAttributedLabel](https://github.com/mattt/TTTAttributedLabel) - 一个文字视图开源组件，是UILabel的替代元件，可以以简单的方式展现渲染的属性字符串。另外，还支持链接植入，不管是手动还是使用UIDataDetectorTypes自动把电话号码、事件、地址以及其他信息变成链接。[用TTTAttributedLabel创建变化丰富的UILabel](http://blog.csdn.net/prevention/article/details/9998575) - 网易新闻iOS版使用。\n * [MLEmojiLabel](https://github.com/molon/MLEmojiLabel) - 自动识别网址、号码、邮箱、@、#话题#和表情的label。可以自定义自己的表情识别正则，和对应的表情图像。(默认是识别微信的表情符号)，继承自TTTAttributedLabel，所以可以像label一样使用。label的特性全都有，使用起来更友好更方便。\n * [FXLabel](https://github.com/nicklockwood/FXLabel) - FXLabel是一个功能强大使用简单的类库，通过提供一个子类改进了标准的UILabel组件，为字体增加了阴影、内阴影和渐变色等，可以被用在任何标准的UILabel中。FXLabel还提供了更多控件，可以对字体行距、字体间距等进行调整。\n * [WFReader](https://github.com/TigerWf/WFReader) - 一款简单的coretext阅读器，支持文本选择、高亮以及字体大小选择等。\n * [WPAttributedMarkup](https://github.com/nigelgrange/WPAttributedMarkup) - WPAttributedMarkup is a simple utility category that can be used to easily create an attributed string from text with markup tags and a style dictionary。\n * [KMPlaceholderTextView](https://github.com/MoZhouqi/KMPlaceholderTextView) - 可显示多行 placeholder 的 textView，可以在IB里面设置 -- swift。\n * [HHFlashSwitch](https://github.com/mrchenhao/HHFlashSwitch) - 一个另类的UISwitch，选择后，背景水波扩散变色效果。 \n * [UUColorSwitch](https://github.com/zhangyu9050/UUColorSwitch) - Switch 开关动画效果,当打开开关时，Switch可实现平滑渲染过渡到父视图的效果。\n * [UITextViewDIYEmojiExample](https://github.com/zekunyan/UITextViewDIYEmojiExample) - [UITextView编辑时插入自定义表情-简单的图文混编](http://tutuge.me/2015/03/07/UITextView%E7%BC%96%E8%BE%91%E6%97%B6%E6%8F%92%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E6%83%85-%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%BE%E6%96%87%E6%B7%B7%E7%BC%96/)。 \n * [Shimmer](https://github.com/facebook/Shimmer) - BlingBling闪光效果，酷炫的Label的效果，可以用于加载等待提示。\n * [ZSSRichTextEditor](https://github.com/nnhubbard/ZSSRichTextEditor) - 适用于iOS的富文本WYSIWYG编辑器，支持语法高亮和源码查看。ZSSRichTextEditor包含所有WYSIWYG标准的编辑器工具。\n * [RichEditorView](https://github.com/cjwirth/RichEditorView) - swift，一套可定制富文本编辑器组件及示例。功能完整、代码简练、实现逻辑巧妙（编辑器核心与 WebView 结合，采用 HTML5 contentEditable 编辑模式，执行JS 配套命令 execCommand 实现富文本编辑功能）。\n * [DTCoreText](https://github.com/Cocoanetics/DTCoreText) - 可以解析HTML与CSS最终用CoreText绘制出来，通常用于在一些需要显示富文本的场景下代替低性能的UIWebView。[DTCoreText源码解析](http://blog.cnbang.net/tech/2630/)。\n * [CSGrowingTextView](https://github.com/cloverstudio/CSGrowingTextView) - 用作即时通讯文本框和评论文本框使用，可以显示多行输入。 \n * [MarkdownTextView](https://github.com/indragiek/MarkdownTextView) - 显示Markdown的TextView。 \n * [高仿微信限定行数文字内容](http://d.cocoachina.com/code/detail/300299) - 采用Autolayout高仿微信纯文字限定行数。\n * [FuriganaTextView](https://github.com/lingochamp/FuriganaTextView) - 实现复杂的日文韩文排版。\n * [ParkedTextField](https://github.com/gmertk/ParkedTextField) - 带固定文本的输入组件。 \n * [LTMorphingLabel](https://github.com/lexrus/LTMorphingLabel) - swift 能够实现文字变形动画效果的Label，用Swift写的一个能够实现文字变形动画效果的Label，很炫。\n * [GJCFCoreText](https://github.com/zyprosoft/GJCFCoreText) - 图文混排。\n * [AttributedLabel](https://github.com/KyoheiG3/AttributedLabel) - 显示性能数量级 UILabel 的 AttributedLabel。无畏无惧、挑战权威。\n * [FFLabel](https://github.com/liufan321/FFLabel) - 自动检测 URLs, @username, #topic# 等关链词（提供响应扩展）。实用的标签文本小组件。\n * [TextFieldEffects](https://github.com/raulriera/TextFieldEffects) - 标准的UITextField有些枯燥么？来认识一下TextFieldEffects吧！废话不多说，只要看几个例子,是啊，都是些简单的dropin控制器。甚至可以在storyboard中使用IBDesignables。\n * [AutocompleteField](https://github.com/filipstefansson/AutocompleteField) - 可应用于 iOS 应用中文字输入框自动补全的场景, 兼容到 iOS 8。\n * [Splitflap.swift](https://github.com/yannickl/Splitflap) - 可用于快速给 iOS 应用创建文字翻转的动画效果。\n * [WordPress-Editor-iOS](https://github.com/wordpress-mobile/WordPress-Editor-iOS) - 一个文本编辑器 简书和新浪博客都在用。\n * [YYText](https://github.com/ibireme/YYText) - 功能强大的 iOS 富文本框架。\n * [placeholder_TextView](http://code.cocoachina.com/view/129099) - 带有placeholder的TextView：带有提示信息的textview，使用懒加载的思想，支持扩展、自定义，类似许多APP内部的意见反馈页面 。\n\n##### 图表\n * [PNChart](https://github.com/kevinzhow/PNChart) - 国内开源作者，动态的图表。\n * [swift-linechart](https://github.com/zemirco/swift-linechart) - 功能完整、实用的折线图组件。使用方便，参数配置简单。是不可多得的优质组件--swift。\n * [ios-charts](https://github.com/danielgindi/ios-charts) - 一款优秀 Android 图表开源库 MPAndroidChart 的 Swift 语言实现版（支持 Objective-C 和 Swift 调用）。缺省提供的示例代码为 Objective-C。\n * [TEAChart](https://github.com/xhacker/TEAChart) - xhacker/TEAChart 一个简洁的 iOS 图表库，支持柱状图、饼图以及日历等。\n * [YOChartImageKit](https://github.com/yasuoza/YOChartImageKit) - 支持在watchOS上绘制图表，看它最近更新挺勤快的，可以关注一下。\n * [RealtimeGradientText](https://github.com/kevinzhow/RealtimeGradientText) - Fun With CALayer Mask 刚好今天开源了一个有趣的项目 RealtimeGradientText，所以也好聊一下 CALayer 的 Mask，[说明](http://blog.zhowkev.in/2015/07/06/fun-with-mask/)。\n\n##### 表相关与Tabbar\n * [SWTableViewCell](https://github.com/onevcat/SWTableViewCell) - 国内开源作者，带很多手势的表单元格。\n * [MCSwipeTableViewCell](https://github.com/alikaragoz/MCSwipeTableViewCell) - 带很多手势的表单元格。\n * [TMQuiltView](https://github.com/1000Memories/TMQuiltView) - 瀑布流。\n * [WaterfallFlowDemo](https://github.com/lengmolehongyan/WaterfallFlowDemo) - 一个简单的UICollectionView瀑布流布局演示demo。\n * [XLForm](https://github.com/xmartlabs/XLForm) - 很多表格类的table,写法更高冷一点，推荐使用。\n * [Eureka.swift](https://github.com/xmartlabs/Eureka) - Eureka 是 XLForm 的 Swift 的移植版本, 一个可以帮助开发者们快速构建 iOS 各种复杂表单的库, 具有较高的可扩展性, 方便自定制样式。\n * [RETableViewManager](https://github.com/romaonthego/RETableViewManager) - 可以十分方便地生成各种样式、各种功能的TableView。只要开发者能想到的列表效果或者功能，都可以利用这份代码迅速编写出来。比如，之前要实现一个填写各种资料的列表，可能需要很多代码，现在只需要几行代码就可以实现。 \n * [UIScrollSlidingPages](https://github.com/TomThorpe/UIScrollSlidingPages) - 允许添加多视图控件，并且可以横向滚动。有点类似于Groupon app。\n * [HBHorizontalTableView](https://github.com/izyhuang/HBHorizontalTableView) - swift，TableView 横向滚动小示例（仿照 AppStore 应用展示）。\n * [HorizontalScrollCell](https://github.com/mcelayir/HorizontalScrollCell) - HorizontalScrollCell是一款使用方便的水平方向可滚动的单元格，适用于UICollectionView中实现水片方向滚动视图。 。\n * [SYJiugonggeTableView](https://github.com/shiyuan17/SYJiugonggeTableView) - tableView封装的九宫格。\n * [UUChatTableView](https://github.com/ZhipingYang/UUChatTableView) - UUChatTableView 气泡聊天界面，支持文本、图片以及音频的气泡聊天界面。[源码推荐说明](http://www.cocoachina.com/ios/20150205/11116.html)。\n * [Chats](https://github.com/acani/Chats) - 聊天 UI 示例程序。此项目应该只为演示或学习之用，没有服务器 -- swift。 \n * [Atlas-iOS](https://github.com/layerhq/Atlas-iOS) - 快速在iOS里集成聊天功能，类似开源版本的环信。Layer家开源了一套聊天app界面的解决方案.看起来很赞，很多蛮复杂的东西直接都帮封好了。不得不说现在做app开发真是很简单，大部分时间搭积木就可以了。[官方网站](https://atlas.layer.com/)。\n * [Chatto.swift](https://github.com/badoo/Chatto) - Chatto.swift:轻量级聊天应用框架及示例。文字及图片可扩展输入栏，汽泡效果等聊天核心特性，分页及自动布局完善。\n * [DLSlideView](https://github.com/agdsdl/DLSlideView) - DLSlideView对常见的顶部Tab页点击、滑动分页做了封装。它使用基于ViewController的container特性（而不是scrollview）来管理各个子页面，以支持无限分页，[源码推荐说明](http://www.cocoachina.com/ios/20150205/11116.html)。\n * [VOVCManager](https://github.com/pozi119/VOVCManager) - 页面管理器:1.跳转指定页面,只需要知道viewController的Class名,如果有storyboard,则需要指定storyboard名；2.无需添加基类；3.支持URLScheme跳转指定页面。\n * [MBXPageViewController](https://github.com/Moblox/MBXPageViewController) - 简洁快速的页面切换--MBXPageViewController，带有按钮控件的UIPageController，非常整洁、简单以及快速。该项目通过三种形式展示页面之间的切换，比如导航栏上的多个tab切换、页面左右两端箭头指示切换，以及使用分段控件。\n * [PagerTab](https://github.com/ming1016/PagerTab) - UIScrollView实现滑动转换页面，类似网易云音乐iOS版的页面滑动切换效果。\n * [GUITabPagerViewController](https://github.com/guilhermearaujo/GUITabPagerViewController) - 多个tab滑动切换。\n * [VOMetroLayoutDemo](https://github.com/pozi119/VOMetroLayoutDemo) - Metro风格的UICollectionView, 目前只支持横向布局,仅在iPad上应用。\n * [KYCellAnimation](https://github.com/KittenYang/KYCellAnimation) - 给UITableViewCell增加进入的动画。\n * [COBezierTableView](https://github.com/knutigro/COBezierTableView) - swift，通过编辑 Bezier 曲线四点位置设置 TableView 内 Cell 及对应按扭位置。实验效果很赞。\n * [RDVTabBarController](https://github.com/robbdimitrov/RDVTabBarController) - 一个TabBar组件，可以方便设置底部菜单的文字图片，点击效果，小红点提示等。\n * [LxTabBarController](https://github.com/DeveloperLx/LxTabBarController) - 改变了原生tabbar切换tab时的生硬效果，并加入滑动切换手势（有和界面上的其它手势发生冲突的风险，可根据具体项目予以关闭），[swift版本](https://github.com/DeveloperLx/LxTabBarController-swift)。\n * [WXTabBarController](https://github.com/leichunfeng/WXTabBarController) - 在系统 UITabBarController 的基础上完美实现了安卓版微信 TabBar 的滑动切换功能，单手操作 iPhone 6 Plus 切换 TabBar 一直是一件很痛苦的事情，而滑动切换是一种不错的解决方案，支持屏幕旋转。\n * [GooeyTabbar](https://github.com/KittenYang/GooeyTabbar) - 皮筋式弹性缩放工具栏示例及演示。\n * [横向展示文本内容的自定义cell](http://d.cocoachina.com/code/detail/298409) - 可以横向展示文本内容的自定义cell，根据文本无限滚动。\n * [UITableView-FDTemplateLayoutCell](https://github.com/forkingdog/UITableView-FDTemplateLayoutCell) - UITableView-FDTemplateLayoutCell 是一个方便缓存 UITableViewCell 的高度的框架。\n * [ExpandingStackCells](https://github.com/jozsef-vesza/ExpandingStackCells) - 采用 UIStackView 实现表格单元格扩展内容显示示例及解决方案。\n * [FDStackView](https://github.com/forkingdog/FDStackView) - 可以将 UIStackView 的最低支持版本拉低到 iOS6，无需配置，没有代码侵染，扔到工程里后直接用系统 UIStackView 的 API 即可，同时兼容 Storyboard。 \n * [Sapporo](https://github.com/nghialv/Sapporo) - swift 单元格模型驱动的集合视图管理器组件。又一个超实用的“轮子”。\n * [MDIHorizontalSectionTableViewController](https://github.com/WeeTom/MDIHorizontalSectionTableViewController) - 根据产品需求开源了一个交互项目，可以理解为横向Section的TableView，section和cell同时支持拖拽，后续安卓版本也会开源出来。\n * [JZNavigationExtension](https://github.com/JazysYu/JZNavigationExtension) - 多功能导航控制器，可以透明返回栏。\n * [QuickRearrangeTableView](https://github.com/okla/QuickRearrangeTableView) - 基于 UITableView 的快速重排功能扩展子类。通过长按选定单元格然后滚动移动到指定位置。\n * [uicollectionview-reordering](https://github.com/nshintio/uicollectionview-reordering) - UICollectionViews的拖拽(拖动、移动)效果,[实例教程](http://nshint.io/blog/2015/07/16/uicollectionviews-now-have-easy-reordering/).\n * [DZNEmptyDataSet](https://github.com/dzenbot/DZNEmptyDataSet) - DZNEmptyDataSet算是一个很标准的iOS内建方式，适合用来处理空的table view和collection view。会自动将collection view处理完善，并将用户消息以合适美观的方式显示出来。每个iOS项目都可以自动处理。\n * [MGSwipeTableCell](https://github.com/MortimerGoro/MGSwipeTableCell) - 另一个常见于很多应用中的UI组件，苹果应该考虑在标准的iOS SDK中加入一些类似的内容。Swipeable表格cell是这个pod的最佳描述，也是最好的。\n * [XLPlainFlowLayout](https://github.com/HebeTienCoder/XLPlainFlowLayout) - 可以让UICollectionView的header也支持悬停效果，类似于tableView的Plain风格。\n * [WMPageController](https://github.com/wangmchn/WMPageController) - 一个方便的 pageContrller 的控件，里面还包括滚动视图。\n * [PSTCollectionView](https://github.com/steipete/PSTCollectionView) - PSTCollectionView。\n * [LLRiseTabBar-iOS](https://github.com/lianleven/LLRiseTabBar-iOS) - 直接使用系统的特性实现的tabbar，比较简单。\n * [MTMaterialDelete](https://github.com/MartinRGB/MTMaterialDelete) - 非常有趣的Material Design动画，动画删除表里面的单元格。\n * [BusyNavigationBar](https://github.com/gmertk/BusyNavigationBar) - 进度条式NavigationBar导航条。\n * [ReorderableGridView-Swift](https://github.com/cemolcay/ReorderableGridView-Swift) - 拖拽排序卡片。\n * [LGSettingView](https://github.com/LiGoEX/LGSettingView) - LGSettingView仅需三句代码即可快速集成设置界面，免去每次开发新应用都要重新布置设置界面的烦恼。\n * [微博cell自动布局](http://code.cocoachina.com/view/129212) - 使用autoLayout对微博的cell进行自动布局，自适应cell的高度。\n * [TreeTableView](https://github.com/TyroneWing/TreeTableView) - ZYTreeTableView：TreeView 模仿好友列表的实现方式。\n\n##### 隐藏与显示\n * [SlideTapBar](http://d.cocoachina.com/code/detail/286102) - 滚动栏菜单，向上滚动时隐藏tabbar，向下滚动马上显示tabbar。\n * [FoldingTabBar.iOS](https://github.com/Yalantis/FoldingTabBar.iOS) - 可折叠Tab Bar和Tab Bar Controller。\n * [LTNavigationBar](https://github.com/ltebean/LTNavigationBar) - LTNavigationBar为app导航栏添加动态着色效果，可自定义其背景色。Demo包含：1.变换背景色；2.滚动视图，导航栏和状态栏重叠。\n * [BLKFlexibleHeightBar](https://github.com/bryankeller/BLKFlexibleHeightBar) - 固定Header的效果库，一个拥有非常灵活高度的标题栏，可以为使用软件的用户提供更多的阅读和滑动空间，现在已经被众多app所采用。\n\n##### HUD与Toast\n * [MBProgressHUD](https://github.com/jdg/MBProgressHUD) - 最多人用的loading。\n * [EBuyCommon](https://github.com/LvJianfeng/EBuyCommon) - 1.基于MBProgressHUD实现得图形加载提示方式，及其它标题方式提醒。2.弹窗。\n * [SVProgressHUD](https://github.com/TransitApp/SVProgressHUD) - SVProgressHUD的loading，如果你需要定制化的等待提示器，这个就是了（也许是最好的）。\n * [ProgressHUD](https://github.com/relatedcode/ProgressHUD) - ProgressHUD的loading，使用最简单。\n * [MMProgressHUD](https://github.com/mutualmobile/MMProgressHUD) - 设置HUD出现和消失的方式（包括上下、左右、淡入淡出、放大缩小等等），设置HUD的内容（可以在HUD中加入帧动画、动态图片等等），设置HUD出现时的底部覆盖层颜色，等等。总而言之，这是一份集大成的HUD代码。慢慢看视频吧，囊括了所有效果。\n * [WSProgressHUD](https://github.com/devSC/WSProgressHUD) - 一个小巧精致的HUD,支持添加到自定义View上, 还有更多小细节.。\n\n##### 对话框\n * [WCAlertView](https://github.com/m1entus/WCAlertView) - 自定义的对话框。\n * [IOS7AlertView](https://github.com/wimagguc/ios-custom-alertview) - IOS7AlertView的对话框。\n * [AMSmoothAlert](https://github.com/mtonio91/AMSmoothAlert) - 动画效果不错，最多star，但不支持arm64。\n * [DQAlertView](https://github.com/dinhquan/DQAlertView) - 扁平化的样式不错。\n * [HHAlertView](https://github.com/mrchenhao/HHAlertView) - 一个简易的alertview  有三种样式，有成功，失败，和警告三种样式，支持Delegate和block两种回调。\n * [MJPopupViewController](https://github.com/martinjuhasz/MJPopupViewController) - 实现弹出视图的各种弹出和消失效果，包括淡入淡出（fade in，fade out），从屏幕上方飞进，下方飞出，从屏幕左方飞进，右方飞出等等效果，弹窗。\n * [MMPopupView](https://github.com/adad184/MMPopupView) - 弹出框的基类组件（弹窗）。\n * [Menu](https://github.com/fengchuanxiang/Menu) - 项目中可能会用到的常用菜单，以后有时间会继续补充，弹窗。 \n * [EasyTipView](https://github.com/teodorpatras/EasyTipView) - 弹出提示框类及演示示例。同样地，API 简单、易用。好“轮子”，弹窗。  \n * [kxmenu](https://github.com/kolyvan/kxmenu) - kxmenu弹出菜单，点击视图上任意位置的按钮，会弹出一个菜单，并且有个小箭头指向点击的按钮，类似气泡视图。弹出的菜单位置会根据按钮的位置来进行调整。 \n * [QBPopupMenu](https://github.com/questbeat/QBPopupMenu) - QBPopupMenu弹出菜单，实现类似 UIMenuItem 的弹出菜单按钮。点击按钮，会弹出一个菜单，上面可以排列多个按钮。纯代码实现，不需要任何图片。\n * [STModalDemo](https://github.com/zhenlintie/STModalDemo) - 弹出视图（通知，提示，选择，窗口）。\n * [TAOverlay](https://github.com/TaimurAyaz/TAOverlay) - TAOverlay可通过叠加层展示有用的信息，可自定义文本和背景色，添加阴影和模糊效果，以及更改字体大小或者用自定义图片替换页面上的icon。\n * [UICustomActionSheet](https://github.com/pchernovolenko/UICustomActionSheet) - 通过模糊背景来着重强调与菜单相关的元素--模糊效果 里面已经收藏。\n * [ActionSheetPicker-3.0](http://code.cocoachina.com/detail/232178) - 该项目是此前热门项目ActionSheetPicker的新版本，快速复制了iOS 8上的下拉 UIPickerView/ActionSheet功能。\n * [MJAlertView](https://github.com/mayuur/MJAlertView) - 3D效果转场效果警示图--MJAlertView。\n * [SwiftyDrop](https://github.com/morizotter/SwiftyDrop) - 轻量、易用的小清新弹出列表及信息提示组件真心不错。\n * [PSTAlertController](https://github.com/steipete/PSTAlertController) - 兼容 iOS7的 XXAlertController，接口跟UIAlertController 一模一样，做到高低版本通用。\n * [PCLBlurEffectAlert.swfit](https://github.com/hryk224/PCLBlurEffectAlert) - 细节定制较丰富的弹出警报窗口组件。\n * [GSAlert.swfit](https://github.com/wxxsw/GSAlert) - 苹果在iOS8推出了全新的UIAlertController，旧的UIAlertView和UIActionSheet渐渐被废弃，但如果你仍然支持iOS7系统，你将不得不写两套代码。GSAlert解决了这个问题。\n\n##### 其他UI\n * [AwesomeMenu](https://github.com/levey/AwesomeMenu) - 最多人用的Path菜单。\n * [DCPathButton](https://github.com/Tangdixi/DCPathButton) - Path，4.0的弹出菜单，呼出或者关闭菜单时，多个小图标会分别按照逆时针和顺时针的方向进行滚动。\n * [SphereMenu](https://github.com/itouch2/SphereMenu) - 利用UIDynamicAnimator的有趣的菜单，path类似。 \n * [KYGooeyMenu](https://github.com/KittenYang/KYGooeyMenu) - KYGooeyMenu 是一个具有 Gooey Effects 带粘性的扇形菜单控件(卫星菜单、path)。\n * [LiquidFloatingActionButton](https://github.com/yoavlt/LiquidFloatingActionButton) - 卫星弹出菜单。\n * [JZMultiChoicesCircleButton](https://github.com/JustinFincher/JZMultiChoicesCircleButton) - 三维多选按钮。\n * [TwitterPaggingViewer](https://github.com/xhzengAIB/TwitterPaggingViewer)  - 多个Tableview，左右滑动。\n * [CircularProgressControl](https://github.com/carantes/CircularProgressControl) - Circular Progress Control using CAShapeLayer ，环形进度控制条。\n * [KDCircularProgress](https://github.com/kaandedeoglu/KDCircularProgress) -  KDCircularProgress是使用swift制作的色彩炫丽的进度条，可以加入多种颜色来控制进度条的渐变效果。 \n * [TextProgress](https://github.com/cgwangding/TextProgress) - 自定义实现数字进度条：1、可以自定义数字（0-100），填充的比例为当前设置的数字，2、可以实现自定义填充颜色，上下部分都可以，3、可以自定义边界的颜色4、实现了水波动画，可以设置打开或关闭。\n * [SDProgressView](https://github.com/gsdios/SDProgressView) - 简便美观的进度指示器，此系列共有六种样式的进度指示器。\n * [NVActivityIndicatorView](https://github.com/ninjaprox/NVActivityIndicatorView) -  loading 进度条动画，有20-30多种，是在此[DGActivityIndicatorView](https://github.com/gontovnik/DGActivityIndicatorView) 基础上做得修改。\n * [LoopProgressDemo](https://github.com/saitjr/LoopProgressDemo) - 环形渐变进度条。\n * [环形渐变进度条实现](http://www.superqq.com/blog/2015/08/12/realization-circular-gradient-progress/)， \n * [XLPagerTabStrip](https://github.com/xmartlabs/XLPagerTabStrip) - 做的很棒的iOS下的PagerTabStrip。 \n * [ASProgressPopUpView](https://github.com/alskipp/ASProgressPopUpView) - 弹出的进度条显示进度。\n * [RandomColorSwift](https://github.com/onevcat/RandomColorSwift) - 一个自动生成好看的颜色的 Swift 库，RandomColorSwift。\n * [Hue.Swift](https://github.com/hyperoslo/Hue) - Hue.Swift：颜色常规功能集于一身的定义、使用 Color 工具类库（含图片取色）。\n * [HexColorService](https://github.com/ChangweiZhang/HexColorService) - 将16进制颜色字符串转成UIColor。\n * [Rainbow](https://github.com/NorthernRealities/Rainbow) - 旨在提高代码可读性及易用性的 UIColor 扩展，它使原先有限的预定义颜色（方法）选择，扩展至超过 1200 种。\n * [UIColor-ChineseTraditionalColors](https://github.com/zhxnlai/UIColor-ChineseTraditionalColors) - 中国传统颜色引用 UIColor 扩展。“UIColor.桃红()，UIColor.竹青() ...”，共158种。 \n * [类似美团的下拉菜单](http://code.cocoachina.com/detail/284158) - 类似美团的下拉菜单，[源码推荐说明](http://www.cocoachina.com/ios/20150205/11116.html)。 \n * [类似美团的下拉选项](http://code4app.com/ios/%E7%B1%BB%E4%BC%BC%E7%BE%8E%E5%9B%A2%E7%9A%84%E4%B8%8B%E6%8B%89%E9%80%89%E9%A1%B9/538606d4933bf06e0a8b496e) -  类似于美团、大众点评的下拉菜单选项，code4app代码，评论代码有瑕疵。\n * [CRMediaPickerController](http://code.cocoachina.com/detail/284267) - 一个简单易用的图片/视频选择器。1.可同时选择照片和视频。 2.挑选范围有Camera、Camera Roll、Photo Library以及最近拍摄的照片和视频。3.可自定义UIImagePickerController属性（Camera Overlay、Camera Device、Camera View Transform以及allowsEditing）。4.支持横屏和竖屏5.原生的iOS UI。，[源码推荐说明](http://www.cocoachina.com/ios/20150205/11116.html)。 \n * [MDCSwipeToChoose](https://github.com/modocache/MDCSwipeToChoose) - MDCSwipeToChoose可简单地添加滑动手势来调用UIView，并使用该行为提供了一个组件以创建类似Tinder app的like或者dislike界面的轻扫。基于轻扫的方向，你可以决定执行什么样的行为，并且你可以自定义文本颜色和图片。该项目适用于教学用的抽认卡、图片查看器以及其他等。 \n * [iOS Material Design库](http://d.cocoachina.com/code/detail/285611) - 该项目借鉴于谷歌的Material Design guideline，用户可自定义背景色。 \n  * [Material-Controls-For-iOS](https://github.com/fpt-software/Material-Controls-For-iOS) - Material Design风格的各种控件，非常完整全面。 \n * [ZMaterialDesignUIButton](https://github.com/richzertuche/ZMaterialDesignUIButton) - Swift Material Design UIButton。\n * [MediumScrollFullScreen](https://github.com/pixyzehn/MediumScrollFullScreen) - Medium的可扩展滚动页面，上下滚动时，全屏显示内容，并自然消隐上下菜单。由此项目感知，作者是一位很注重细节的开发者，他的另外[几个菜单类项目](https://github.com/pixyzehn)也都不错，值得参考，比如：PathMenu, MediumMenu 等。\n * [WZFlashButton](https://github.com/SatanWoo/WZFlashButton) - WZFlashButton，点击后button里面出现水波扩散效果。\n * [Twinkle](https://github.com/piemonte/Twinkle) - 为字体加上钻石版闪耀的效果。使用Swift编写。 \n * [ios-multi-back-button](https://github.com/palmin/ios-multi-back-button) - 可替换内置的UInavigationController返回按钮，长按左上角的返回按钮，实现多层级的快速返回。\n * [ASDayPicker](http://code.cocoachina.com/detail/226543) - 适用于iOS (iPhone)的日期选择器(时间选择器)，类似于Calendar app的周视图。\n * [today extension](http://adad184.com/2014/10/29/2014-10-29-how-to-setup-today-extension-programmatically/) - 用纯代码构建一个Widget(today extension) 。\n * [FSCalendar](https://github.com/f33chobits/FSCalendar) - 日历视图，带有微妙和平滑的滚动效果，可自定义外观--国人。\n * [CVCalendar](https://github.com/Mozharovsky/CVCalendar) - 是一个方便开发者集成自定义日历视图到自己 iOS 应用的项目, 支持 Storyboard 和手动配置, 使用 CocoaPods 进行安装, 提供了丰富的 API 供开发者使用。\n * [HSDatePickerViewController](https://github.com/EmilYo/HSDatePickerViewController) - 带有Dropbox Mailbox感觉的时间日期选择器(时间选择器)。启动是背景被模糊化。界面也是主流的扁平化风格。 \n * [HZQDatePickerView](https://github.com/huzhiqin/HZQDatePickerView) - 自定义时间选择器(日期选择器)，包括开始日期和结束日期两种类型。\n * [CFCityPickerVC](https://github.com/nsdictionary/CFCityPickerVC) - 城市选取控制器。\n * [JTCalendar](https://github.com/jonathantribouharet/JTCalendar) - iOS下优美的 Calendar 组件，做 GTD 类 App 必备。\n * [Persei](https://github.com/Yalantis/Persei) - 动画隐藏或显示顶部菜单支持库及示例项目。--swift\n * [PDTSimpleCalendar](https://github.com/jivesoftware/PDTSimpleCalendar) - 是iOS最棒的日历组件了。你可以在各个方面对它进行定制，无论是运行逻辑还是外观方面。\n * [DateRangePicker.swift](https://github.com/MrMage/DateRangePicker) - 可能是目前最好的 OS X 日期选择器,高扩展性，界面风格看起来很舒服，不过注意，是 OS X 开发专用。\n * [Form](https://github.com/hyperoslo/Form) - JSON 驱动的 Form表单系统，复杂的表单填写类 App 极其需要（比如淘宝呢！）。\n * [SwiftyFORM](https://github.com/neoneye/SwiftyFORM) - swift 表单输入框架（亮点是表单验证规则引擎），是我见过地最易用的 Swift 表单组件。\n * [SwiftSpinner](https://github.com/icanzilb/SwiftSpinner) - SwiftSpinner是使用swift制作的一款精致带感的指示器，并且连带有字体信息显示，模糊背景，半透明，扁平化等IOS8的效果。\n * [AKPickerView-Swift](https://github.com/Akkyie/AKPickerView-Swift) - 一款小而美的 3D 效果选择器。\n * [ImagePickerSheet](https://github.com/larcus94/ImagePickerSheet) - 图片或视频选择器（可多选）组件及其示例项目。\n * [iOS-RatingBar](https://github.com/saiwu-bigkoo/iOS-RatingBar) - iOS-RatingBar swift版的评分控件,跟Android的RatingBar一样有两种模式，评分模式和只读模式'支持视图编辑，自定义星星数量，评分等级,另外还能支持非整数星，0.5颗星，0.1颗星,可以开启动画效果。\n * [RKNotificationHub](https://github.com/cwRichardKim/RKNotificationHub) - 快速给 UIView 添加上炫酷的通知图标（Badge、红点、提示）。  * [WZLBadge](https://github.com/weng1250/WZLBadge) - Badge，支持横竖屏支持iOS5~iOS8允许高度定制化，包括“红点”的背景颜色，文字(字体大小、颜色)，位置等。[说明](http://code.cocoachina.com/detail/316890/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%A4%9A%E9%A3%8E%E6%A0%BC%E7%9A%84%E6%8E%A8%E9%80%81%E5%B0%8F%E7%BA%A2%E7%82%B9/). \n * [BubbleTransition](https://github.com/andreamazz/BubbleTransition) - 以气泡膨胀和缩小的动画效果来显示和移除 controller，Uber的就是这种取消操作的方式。\n * [KYFloatingBubble](https://github.com/KittenYang/KYFloatingBubble) - 类似iOS7中Game Center浮动气泡的效果。\n * [DKNightVersion](https://github.com/Draveness/DKNightVersion) - DKNightVersion 是一个支持夜间模式切换的框架。\n * [EasyUIControl](https://github.com/sx1989827/EasyUIControl) - 一个可以简化界面ui的控件框架。\n * [LxGridView-oc](https://github.com/DeveloperLx/LxGridView) [LxGridView-swift](https://github.com/DeveloperLx/LxGridView-swift) - 利用UICollectionView模仿iOS系统桌面图标的交互，作用如动图。\n * [QQBtn](https://github.com/ZhongTaoTian/QQBtn) - 仿QQ未读消息弹性按钮动画，达到和手机QQ未读信息一样的动画效果，效果基本实现。\n * [GMStepper](https://github.com/gmertk/GMStepper) - swift 带动画效果、支持手势滑动操作的步进标签。\n * [TZStackView](https://github.com/tomvanzummeren/TZStackView) - OS 9 UIStackView 功能模拟实现于 iOS 7/ iOS 8 内。\n * [LayoutTrait](https://github.com/441088327/LayoutTrait) - swift 一个小类库。 做iPad 多任务分屏 适配的同学可以看一下。\n * [HACursor](https://github.com/HAHAKea/HACursor) - HACursor，是一个对横向ScrollView中的视图进行管理的UI控件。只要几行代码就可以集成类似于网易新闻对主题页面进行排序，删除操作的功能。\n * [ZTPageController](https://github.com/IOStao/ZTPageController) - 模仿网易新闻和其他新闻样式做的一个菜单栏，栏中有各自的控制器，其中有4中展示样式’网易style' ’搜狐style' ’腾讯style1' ’网易style2' 。 \n * [Ruler](https://github.com/nixzhu/Ruler) - 尺子。\n * [HUMSlider](https://github.com/justhum/HUMSlider) - HUMSlider是一款能够自动显示刻度记号的滑竿，滑动到某处，该处的刻度会自动上升，两边还能配置图像。支持代码或storyboard中实现。\n * [JDSelectedDemo](https://github.com/zhangli4659507/JDSelectedDemo) - 仿京东筛选菜单实现。\n * [BTNavigationDropdownMenu](https://github.com/PhamBaTho/BTNavigationDropdownMenu) -  下拉列表暨导航标题组件。简单、直接、易用 -swift。\n * [3DTouchDemo](https://github.com/luzefeng/3DTouchDemo) - 详细介绍了每个参数的含义和3Dtouch的入口，保证包学包会。\n * [3DTouchSample](https://github.com/RichardLeung/3DTouchSample) - 3D-Touch的功能分为两个部分：Shortcut和Preview。\n * [SBShortcutMenuSimulator](https://github.com/DeskConnect/SBShortcutMenuSimulator) - 教你如何在模拟器上测试 3D Touch 功能!\n * [InceptionTouch.swift](https://github.com/richzertuche/InceptionTouch) - 让没有 3D Touch 设备也有类似交互体验的 InceptionTouch 类（基于 UITextView 实现，支持日期，链接，电话号码，地址触摸响应）。\n * [仿LOL滚动视图](http://code.cocoachina.com/view/128287) - 仿LOL滚动视图。\n * [答题选择切换页](http://code.cocoachina.com/view/128281) - 将scrollview和tableview封装在一起，在初始化的时候简单的将数据带上，就可以一页一页的左右来回滑动。\n * [SCTrelloNavigation](https://github.com/SergioChan/SCTrelloNavigation) - 类似trello的导航动效控件实现。\n * [XTPaster](https://github.com/Akateason/XTPaster) - 贴纸功能出现在很多图片社交中, 就是图片上面贴图片, 对贴纸而言就是需要控制贴纸的位置,旋转,大小,[如何使用](http://www.jianshu.com/p/d873d348bbfb)。\n * [RGCategoryView](https://github.com/refinemobi/RGCategoryView) - 仿了个苏宁易购的分类页面。\n * [TWControls.swift](https://github.com/txaidw/TWControls) - 简单的开关和按钮控制器,使用闭包来执行由控件触发的操作。\n * [Instructions.swift](https://github.com/ephread/Instructions) - 可定制嵌入式操作指引框架及演示。\n * [LLPieCharts](https://github.com/Lves/LLPieCharts) - LLPieCharts iOS 绘制饼图，[教程](http://www.lvesli.com/?p=339)。\n * [BEMCheckBox](https://github.com/Boris-Em/BEMCheckBox) - BEMCheckBox 是一个用于 iOS 应用上构建漂亮, 高度可定制化动画效果的复选框类库, 最低支持到 iOS 7 系统, 有多种不同风格的动画效果可供选择。\n * [STPopup](https://github.com/kevin0571/STPopup) - 提供了一个可在 iPhone 和 iPad 上使用的具有 UINavigationController 弹出效果的 STPopupController 类, 并能在 Storyboard 上很好的工。\n * [VBFPopFlatButton](https://github.com/victorBaro/VBFPopFlatButton) - 通过几条线段实现的非常Q萌的动画按钮效果。\n * [ZSeatSelector](https://github.com/richzertuche/ZSeatSelector) - 电影院位置排座位。\n * [CustomSearchBar](https://github.com/zangqilong198812/CustomSearchBar) - 自定义searchbar,类似于instagram的搜索框效果。\n * [LNPopupController](https://github.com/LeoNatan/LNPopupController) - AppleMusic式pop up，弹出是页面，可以上下拉动。\n * [DGRunkeeperSwitch](https://github.com/gontovnik/DGRunkeeperSwitch/) - 动画segment，节选器。\n * [YXFilmSelectView](https://github.com/yixiangboy/YXFilmSelectView) - 仿造时光网选择电影票的UI而开发的一个自定义View。\n * [FJTagCollectionView](http://code.cocoachina.com/view/129152) - 标签（适配宽度）。\n * [Gecco.Swift](https://github.com/yukiasai/Gecco) - Gecco.Swift 是一款支持对视图进行局部高亮的 Swift 库, 帮助 iOS 开发者快速创建产品的新手指导界面。\n * [DFTimelineView](https://github.com/anyunzhong/DFTimelineView) - DFTimelineView仿微信朋友圈 时间轴。\n\n========\n#### 动画\n * [Core Animation笔记，基本的使用方法](http://www.starming.com/index.php?v=index&view=62) - Core Animation笔记，基本的使用方法：1.基本动画，2.多步动画，3.沿路径的动画，4.时间函数，5.动画组。\n * [awesome-ios-animation](https://github.com/sxyx2008/awesome-ios-animation) - [iOS Animation 主流炫酷动画框架(特效)收集整理](https://github.com/sxyx2008/DevArticles/issues/91) 收集整理了下iOS平台下比较主流炫酷的几款动画框架。\n * [awesome-animation](https://github.com/Animatious/awesome-animation) -  在内的十多位童鞋们一起发起的一起动画开源组正式成立啦~Github组织名称：Animatious，这是我们第一期成员先前开源的一些动效库，我们的第一个合作开源项目正在紧锣密鼓的准备~请大家期待设计和代码的碰撞吧。\n\n##### 侧滑与右滑返回手势\n * [SloppySwiper](https://github.com/fastred/SloppySwiper) - iOS系统自带的UINavigationController要7.0才支持，但不过该手势只能从屏幕左侧边缘识别，如果要扩大到整个屏幕范围怎么办？配合一个SloppySwiper无需代码就可以轻松实现。此库支持iOS5.0以上版本（另外：Nav的title滑动不明显，本人写了2个类似的控件），[SloppySwiper-demo](https://github.com/Tim9Liu9/SloppySwiper-Example) ：代码方式与storyboard方式。\n * [SCNavigation](https://github.com/singro/SCNavigation) - UINavigation可以右滑返回，隐藏UINavigationBar。\n * [UINavigationController-YRBackGesture](https://github.com/YueRuo/UINavigationController-YRBackGesture) - 支持右滑返回手势，标题栏不动。\n * [GHSidebarNav](https://github.com/gresrun/GHSidebarNav) - 现在比较流行使用侧开(侧滑)菜单设计。试了不少控件，感觉GHSidebarNav最成熟，尤其对纯代码创建的界面兼容性最好。[在Storyboard中使用GHSidebarNav侧开菜单控件](http://www.cnblogs.com/zyl910/archive/2013/06/14/ios_storyboard_sidemenu.html)。\n * [iOS-Slide-Menu](https://github.com/aryaxt/iOS-Slide-Menu) - 能够类似Facebook和Path那样弹出左右边栏侧滑菜单,还支持手势。多种可以自定义的属性 (非常不错)。\n * [ECSlidingViewController](https://github.com/ECSlidingViewController/ECSlidingViewController) - 侧滑菜单。\n * [JASidePanels](https://github.com/gotosleep/JASidePanels) - 侧滑菜单,有左右菜单，有pop功能，支持手势侧滑,本人使用中：简单。\n * [animated-tab-bar](https://github.com/Ramotion/animated-tab-bar) - 让 Tabbar items能显示萌萌的动画。\n * [tabbar图标动画](http://code.cocoachina.com/detail/284346) - tabbar上图标的动画实现，[源码推荐说明](http://www.cocoachina.com/ios/20150205/11116.html)。\n * [SideMenu](https://github.com/Yalantis/Side-Menu.iOS/tree/master/SideMenu) - swift实现，一款带动画效果可定制 Slide Menu，可以学习其动画实现思路。P.S. 对于Hamburger式菜单，虽然很常用，不过，苹果并不鼓励使用，甚至有开发小组对其弊病用自家上线应用前后数据对比进行了抨击。\n * [RESideMenu](https://github.com/romaonthego/RESideMenu) - 侧开菜单，qq类似。\n * [JHMenuTableViewDemo](https://github.com/Jiahai/JHMenuTableViewDemo) - 仿网易邮箱列表侧滑菜单。\n * [SlideMenuView](https://github.com/xudafeng/SlideMenuView) - 炫酷侧滑菜单布局框架，[Android版本的一致实现](Android 版本的一致实现请见：https://github.com/xudafeng/SlidingMenu)。\n * [QQConfiguration](https://github.com/shinept/QQConfiguration) - swift，QQ-iPhone端框架，左侧菜单栏拖动手势。\n * [KGFloatingDrawer](https://github.com/KyleGoddard/KGFloatingDrawer) - 侧滑菜单，qq类似，KyleGoddard/KGFloatingDrawer：一款适合于大屏手机或平板的浮动抽屉式导航界面组件。效果很赞- 侧开菜单，qq类似（与RESideMenu类似）。\n * [AIFlatSwitch](https://github.com/cocoatoucher/AIFlatSwitch) - 一款带平滑过渡动画的 Switch 组件类，类相同风格的 Menu/Back[HamburgerButton](https://github.com/fastred/HamburgerButton),类似相同风格的 Menu/Close[hamburger-button](https://github.com/robb/hamburger-button).\n * [JHChainableAnimations](https://github.com/jhurray/JHChainableAnimations) - 在应用中采用链式写出酷炫的动画效果, 使代码更加清晰易读，利用block实现的链式编程。\n * [WXGSlideMenuDemo](https://github.com/WXGBridgeQ/WXGSlideMenuDemo) - 个简单实现侧拉（侧滑）菜单的小demo，供初学者共同学习、练习使用。\n * [PKRevealController](https://github.com/pkluz/PKRevealController) - PKRevealController是一个可以滑动的侧边栏菜单（可向左、向右或者同时向两侧），只需手指轻轻一点（或者按一下按钮，但是这样滑动时不够炫酷），这类控制的其他库，而PKRevealController是最棒的。安装简便，高度定制且对手势识别良好。可以当做一个标准控件用在iOS SDK中。\n * [SwiftPages](https://github.com/GabrielAlva/SwiftPages) - 高可定制类似 Instagram 视图滑动切换功能类库。API 简单、易用。\n * [FlipBoardNavigationController](https://github.com/michaelhenry/FlipBoardNavigationController) - FlipBoardNavigationController。\n * [MMDrawerController](https://github.com/mutualmobile/MMDrawerController) - 最多人用的一个有关侧边“抽屉”导航框架，里面还有很多你意想不到的交互效果，侧滑。\n * [UIWebView翻页返回效果](http://code.cocoachina.com/detail/316925/UIWebView%E7%BF%BB%E9%A1%B5%E8%BF%94%E5%9B%9E%E6%95%88%E6%9E%9C%EF%BC%88%E5%8F%98%E9%80%9A%E6%96%B9%E6%B3%95%EF%BC%89/) - UIWebView翻页返回效果（变通方法）。\n * [LLSlideMenu](https://github.com/lilei644/LLSlideMenu) - 一个弹性侧滑菜单,弹性动画原理借鉴该项目中阻尼函数实现。\n\n\n##### gif动画\n * [UIImageView-PlayGIF](https://github.com/yfme/UIImageView-PlayGIF) - UIImageView-PlayGIF。\n * [YLGIFImage](https://github.com/liyong03/YLGIFImage) - YLGIFImage。\n * [YLGIFImage-Swift](https://github.com/liyong03/YLGIFImage-Swift) - YLGIFImage-Swift。\n * [droptogif](https://github.com/mortenjust/droptogif) -  droptogif视频拖拽到应用窗口后自动转换为 GIF 动画（其转换进程动画效果也超赞）。\n\n##### 其他动画\n * [popping](https://github.com/schneiderandre/popping) - popping是一个POP 使用实例工程 \n * [SinaMenuView](https://github.com/xhzengAIB/SinaMenuView) - 用POP动画引擎写的Sina微博的Menu菜单。\n * [MMTweenAnimation](https://github.com/adad184/MMTweenAnimation) - facebook POP的自定义动画扩展(基于POPCustomAnimation) 提供10种函数式动画。\n * [ZQLRotateMenu](https://github.com/pingguo-zangqilong/ZQLRotateMenu) - 这是一个旋转视图的选择器。\n * [CoolLoadAniamtion](https://github.com/pingguo-zangqilong/CoolLoadAniamtion) - 一个简单但是效果不错的loading动画。\n * [SequenRotateAnimation](https://github.com/pingguo-zangqilong/SequenRotateAnimation) - 一个简单的loading次序动画。\n * [SYAppStart](https://github.com/441088327/SYAppStart) - App启动插画的自定义过度。\n * [VJDeviceSpecificMedia](https://github.com/victorjiang/UIImage-VJDeviceSpecificMedia/) - [如何根据设备选择不同尺寸的图片](http://www.imooc.com/wenda/detail/249271) 可以通过设置不同尺寸设备的LaunchImage，来使得App适配这些设备，要是在不同不同尺寸设备上使用不同大小的图片，则需要在代码中一一判断，然后加载。 \n * [RMParallax](https://github.com/michaelbabiy/RMParallax) - RMParallax是一个app启动页引导开源项目，除了细微的翻页视差效果，描述文本的过渡也非常美观（版本新特性、导航页、引导页）。\n * [ADo_GuideView](https://github.com/Nododo/ADo_GuideView) - 转动的用户引导页(模仿网易bobo) 因为没有从app包里抓到@3x的图片,建议在iPhone5模拟器运行,保证效果~ （版本新特性、导航页、引导页）。\n * [CoreNewFeatureVC](https://github.com/nsdictionary/CoreNewFeatureVC) - 版本新特性（引导页），1.封装并简化了版本新特性启动视图！2.添加了版本的本地缓存功能，3.集成简单，使用方便，没有耦合度，4.支持block回调（版本新特性、导航页、引导页）。\n * [MZGuidePages](https://github.com/MachelleZhang/MZGuidePages) - 自己写的通用导航页，可以直接引入工程使用，请参考案例（版本新特性、导航页、引导页）。\n * [ABCIntroView](https://github.com/AdamBCo/ABCIntroView) - ABCIntroView是一个易于使用的入门类，让你到达主屏幕之前介绍你的应用程序（版本新特性、导航页、引导页）。\n * [Spring](https://github.com/MengTo/Spring) - Spring是一个Swift编写的开源库，可简化Swift编写的iOS动画。支持shake、pop、morph、squeeze、wobble、swing、flipX、flipY、fall、squeezeLeft、squeezeRight以及squeezeDown等多种动画形式，用 IBDesignable 让使用者可以在 Xcode 中快速设置动画效果。\n * [KYBezierBounceView](https://github.com/KittenYang/KYBezierBounceView) - 手势控制贝塞尔曲线，取消手势贝塞尔曲线会有反弹效果。\n * [cadisplaylinkanduibezierpath](http://kittenyang.com/cadisplaylinkanduibezierpath/) - CADisplayLink结合UIBezierPath的神奇妙用。\n * [KYCuteView](https://github.com/KittenYang/KYCuteView) - 实现类似QQ消息拖拽消失的交互+GameCenter的浮动小球效果，[分析](http://kittenyang.com/drawablebubble/)。\n * [KYWaterWaveView](https://github.com/KittenYang/KYWaterWaveView) - 一个内置波浪动画的UIView，里面有鱼跳跃水溅起来的效果。\n * [WaveLoadingView](https://github.com/liuzhiyi1992/WaveLoadingView) - iOS 唯一完美的波浪进度加载指示器，[实现说明](http://zyden.vicp.cc/waveloadingindicator/)。\n * [KYPingTransition](https://github.com/KittenYang/KYPingTransition) - 实现圆圈放大放小的转场动画，可以根据自己的需要使用Paper中的弹性效果，有Material风格。\n * [KYNewtonCradleAnimiation](https://github.com/KittenYang/KYNewtonCradleAnimiation) - 牛顿摆动画。\n * [LayerPlayer](https://github.com/scotteg/LayerPlayer) - 一款全面展示核心动画 API 示例项目（上架应用）。包括 CALayer, CAScrollLayer, CATextLayer, AVPlayerLayer, CAGradientLayer, CAReplicatorLayer, CATiledLayer, CAShapeLayer, CAEAGLLayer, CATransformLayer, CAEmitterLayer 等使用的互动演示。\n * [JGTransitionCollectionView](https://github.com/JayGajjar/JGTransitionCollectionView) - swift，基于集合视图扩展实现完成自动布局及单元项 Flip式动画效果（效果很赞）。组件使用方便、自然（只需设置集合视图数据源的标准方式即可）。\n * [KYShareMenu](https://github.com/KittenYang/KYShareMenu) - 带弹性动画的分享菜单。\n * [Context-Menu.iOS](https://github.com/Yalantis/Context-Menu.iOS) - 可以为app的菜单添加漂亮的动画内容，可自定义icon，并可根据自己的喜好设计单元格和布局。\n * [DeformationButton](https://github.com/LuciusLu/DeformationButton) - 一个简单的变换形状动画按钮。\n * [UnReadBubbleView](https://github.com/heroims/UnReadBubbleView) - UnReadBubbleView是一个能够拖拽并拉长的气泡视图。拖拽到一定的长度会消失，可以通过系数设置来控制拖拽的长度。气泡也支持多种属性设置。 \n * [PPDragDropBadgeView](https://github.com/smallmuou/PPDragDropBadgeView) - 实现了类似于QQ 5.0 水滴拖拽效果. 支持iOS 5.0+ ARC，气泡能够带有数字标识，同时支持消失block方法。消失时还带有消失效果动画。\n * [GiftCard-Implementation](https://github.com/MartinRGB/GiftCard-Implementation) - 购买的炫酷动画。\n * [SDCycleScrollView](https://github.com/gsdios/SDCycleScrollView) - 无限循环自动图片轮播器(一步设置即可使用)。\n * [BuildAnInfiniteCarousel](https://github.com/johnlui/Swift-On-iOS/tree/master/BuildAnInfiniteCarousel) - 自己动手造无限循环图片轮播，[教程](https://autolayout.club/2015/10/29/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E9%80%A0%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF%E5%9B%BE%E7%89%87%E8%BD%AE%E6%92%AD/)。\n * [iCarousel](https://github.com/nicklockwood/iCarousel) - iCarousel是一个类，它继承于UIView。用于简化实现各种类型的旋转木马(分页滚动视图），无限轮播 ，[iOS开发之多图片无缝滚动组件封装与使用](http://www.cocoachina.com/ios/20150828/13198.html)。\n * [KIPageView](https://github.com/smartwalle/KIPageView) - 无限循环PageView，横向TableView，无限轮播。\n * [简单实用的无限循环轮播图](http://code.cocoachina.com/view/128288) - 简单实用的无限循环轮播图 。\n * [XTLoopScroll](https://github.com/Akateason/XTLoopScroll) - 用两个 timer 三个重用的 view 实现无限循环 scrollView，1自动轮播 2点击监听回调当前图片 3手动滑动后重新计算轮播的开始时间, 良好的用户体验。\n * [HotGirls](https://github.com/zangqilong198812/HotGirls) - 卡片动画。\n * [tispr-card-stack](https://github.com/tispr/tispr-card-stack) - swift 卡片风格动画切换组件及完整交互示例。\n * [ZLSwipeableViewSwift](https://github.com/zhxnlai/ZLSwipeableViewSwift) - swift 卡片堆叠效果的实现（ZLSwipeableView)】可实现类似Tinder和Potluck应用程序的卡片堆叠效果，该项目基于[ZLSwipeableView objective-c](https://github.com/zhxnlai/ZLSwipeableView/)实现。1.自定义动画。2.自定义滑动切换。3.自定义方向。4.撤销。\n * [Koloda](https://github.com/Yalantis/Koloda) - 基于卡片的 Tinder-style 动画效果示例。精细绝人。更赞的是额外附了详细开发教程 How We Built Tinder-Like Koloda Animation in Swift [网页链接](https://yalantis.com/blog/how-we-built-tinder-like-koloda-in-swift/) 。Yalantis 出品动画程序款款精品。\n * [QQPersonalInfoTransition](https://github.com/zangqilong198812/QQPersonalInfoTransition) - 仿照QQ的转场。\n * [KYAnimatedPageControl](https://github.com/KittenYang/KYAnimatedPageControl) - 除了滚动视图时PageControl会以动画的形式一起移动，点击目标页还可快速定位。支持两种样式：粘性小球和旋转方块。\n * [KDIntroView](https://github.com/likedan/KDIntroView) - swift 动态介绍视图框架及演示。另外两个相似的类库是 RazzleDazzle和 Presentation，择需使用。 \n * [RazzleDazzle](https://github.com/IFTTT/RazzleDazzle) - 【IFTTT开源Swift编写的帧动画框架--RazzleDazzle】RazzleDazzle 是IFTTT开源的一个iOS帧动画框架，非常适用于APP初次使用时的介绍和引导信息。JazzHands是UIKit一个简单的关键帧基础动画框架，可通过手势、scrollview、KVO等控制动画，被IFTTT应用在IFTTT for iPhone上。\n * [Presentation](https://github.com/hyperoslo/Presentation) - 一个类似RazzleDazzle的框架。\n * [FillableLoaders](https://github.com/poolqf/FillableLoaders) - 基于 CGPaths 可定制个性化填空式装载类库。附水波上涨式示例。\n * [SXWaveAnimate](https://github.com/dsxNiubility/SXWaveAnimate) - 实现非常美观的灌水动画。\n * [LSPaomaView](https://github.com/liusen001/LSPaomaView) - 可循环滚动的较长文字，跑马灯，效果很好，一句话集成。\n * [SIFloatingCollection_Swift](https://github.com/ProudOfZiggy/SIFloatingCollection_Swift) - 可定制的 Apple Music 风格浮动形状动画组件及演示。\n * [Cheetah](https://github.com/suguru/Cheetah) - 易用、高可读链式动画类库。另一个类似类库是 [DKChainableAnimationKit](https://github.com/Draveness/DKChainableAnimationKit)。\n * [CKWaveCollectionViewTransition](https://github.com/CezaryKopacz/CKWaveCollectionViewTransition) - swift， UICollectionViewController之间切换的动画。\n * [TKSubmitTransition](https://github.com/entotsu/TKSubmitTransition) - 基于 UIButton 的登录加载、返回按钮转场动画组件及示例。\n * [ARAnimation](https://github.com/AugustRush/ARAnimation) - ARAnimation 对 Core Animation 进行了封装, 帮助 iOS 开发者能更加便捷的在项目中使用动画。\n * [CardsAnimationDemo]https://github.com/adow/CardsAnimationDemo) - swift， [《使用 UICollectionView 实现的一个卡片动画》](http://swiftcn.io/topics/64?f=w)不是直接操作所有 UIView 和 CALayer 的 transform3D 属性来实现整个效果的，而是使用 UICollectionView 来完成所有的视图管理和实现。\n * [TKRubberIndicator.swift](https://github.com/TBXark/TKRubberIndicator) - 一个很不错的 page control。\n * [渐变特效文字](http://code.cocoachina.com/view/127174) - 做了一个仿iPhone的移动滑块来解锁的渐变特效文字,还有一个类似ktv歌词显示的文字特效。\n * [TTGEmojiRate.swift](https://github.com/zekunyan/TTGEmojiRate) - TTGEmojiRate.swift以Emoji表情为基础绘图，[Swift开源项目: TTGEmojiRate的实现](http://tutuge.me/2015/10/25/ttgemojirate-lib/)。\n * [HYAwesomeTransition](https://github.com/nathanwhy/HYAwesomeTransition) - 模仿格瓦拉的转场效果。\n * [CardAnimation.swift](https://github.com/seedante/CardAnimation) - CardAnimation 是国人开发的一个用 Swift 实现卡片垂直翻转动画的 Demo, [实现思路](http://www.jianshu.com/p/286222d4edf8)。\n * [TaskSwitcherDemon](https://github.com/Glow-Inc/TaskSwitcherDemon) -  是仿造iOS9的Task Switcher做出来的动画效果, 具体的实现思路可参照[这篇文章](http://tech.glowing.com/cn/implement-ios9-task-switcher-animation/)。\n * [CoreAnimationCode.swift](https://github.com/lzwjava/CoreAnimationCode) - 提供了 \"iOS Core Animation Advanced Techniques\" 书籍中的代码实例, 方便开发者们进行参考学习。\n * [UIViewXXYBoom.swift](https://github.com/xxycode/UIViewXXYBoom) - 一个炫酷好玩的爆炸效果，[如何实现这个效果](http://xxycode.com/ru-he-zhi-zuo-ge-xuan-ku-hao-wan-de-bao-zha-xiao-guo-2/)。\n * [ZLSwipeableViewSwift](https://github.com/zhxnlai/ZLSwipeableViewSwift) - [ZLSwipeableView](https://github.com/zhxnlai/ZLSwipeableView) - ZLSwipeableViewSwift在Tinder and Potluck中的动画效果实现思路（连续卡片翻页效果），最贴心的是作者提供了OC和Swift两个版本来供开发者使用，非常丝滑顺畅的效果。\n * [RYCuteView](https://github.com/Resory/RYCuteView) - 用UIBezierPath实现果冻效果。 [教程](http://www.jianshu.com/p/21db20189c40)\n * [IBAnimatable.swift](https://github.com/JakeLin/IBAnimatable) - 第三方开源库IBAnimatable可以帮助我们在Interface Builder和Swift Playground里面设计UI, 交互, 导航模式, 换场和动画。\n * [circle-menu.swift](https://github.com/Ramotion/circle-menu) - 动画效率很赞的圆形缩放菜单演示及类库。\n\n========\n#### 网络相关\n##### 网络连接\n* [AFNetworking](https://github.com/AFNetworking/AFNetworking) - ASI不升级以后，最多人用的网络连接开源库，[iOS网络编程之AFNetworking使用](http://www.superqq.com/blog/2014/11/07/ioswang-luo-bian-cheng-zhi-afnetworkingshi-yong/),[iOS开发下载文件速度计算](http://www.superqq.com/blog/2015/01/29/ioskai-fa-xia-zai-wen-jian-su-du-ji-suan/) , [AFNetworking 3.0迁移指南](http://www.cocoachina.com/ios/20151022/13831.html) , [AFNetworking2.0源码解析<一>](http://www.cocoachina.com/ios/20140829/9480.html) 、[AFNetworking2.0源码解析<二>](http://www.cocoachina.com/ios/20140904/9523.html)、[AFNetworking源码解析<三>](http://www.cocoachina.com/ios/20140916/9632.html)、[AFNetworking源码解析<四>](http://www.cocoachina.com/ios/20141120/10265.html)。\n* [Alamofire](https://github.com/Alamofire/Alamofire) - Alamofire是AFNetworking的作者mattt新写的网络请求的swift库。\n* [YTKNetwork](https://github.com/yuantiku/YTKNetwork) - 是基于 AFNetworking 封装的 iOS网络库，提供了更高层次的网络访问抽象。相比AFNetworking，YTKNetwork提供了以下更高级的功能：按时间或版本号缓存网络请求内容、检查返回 JSON 内容的合法性、文件的断点续传、批量的网络请求发送、filter和插件机制等。\n* [HYBNetworking](https://github.com/CoderJackyHuang/HYBNetworking) - 基于AFN封装的网络库，可以通用。[基于AFNetworking封装网络库说明](http://www.henishuo.com/base-on-afnetworking-wrapper/)目前已经提供了通用的GET/POST、上传、下载API等。\n* [LxFTPRequest](https://github.com/DeveloperLx/LxFTPRequest) - 支持获取FTP服务器资源列表，下载/上传文件，创建/销毁ftp服务器文件/目录，以及下载断点续传，下载/上传进度，自动判断地址格式合法性跟踪等功能！国人开发，QQ：349124555。\n* [HSDownloadManager](https://github.com/HHuiHao/HSDownloadManager) - HSDownloadManager，下载音乐、视频、图片各种资源，支持多任务、断点下载。\n* [MutableUploadDemo](https://github.com/HHuiHao/MutableUploadDemo) - 模拟需求：图文混编，要求用户选择图片后就上传，可选择多图，并行上传，用户确定提交后后台执行，必须全部图片上传完才能提交文字。\n* [WTRequestCenter](https://github.com/swtlovewtt/WTRequestCenter) - 方便缓存的请求库，提供了方便的HTTP请求方法，传入请求url和参数，返回成功和失败的回调。 UIKit扩展提供了许多不错的方法，快速缓存图片，图片查看，缩放功能， 颜色创建，设备UUID，网页缓存，数据缓存等功能。 无需任何import和配置，目前实现了基础需求。\n* [MMWormhole](https://github.com/mutualmobile/MMWormhole) - Message passing between iOS apps and extensions 2个iOS设备之间通信。 \n* [socket.io-client-swift](https://github.com/socketio/socket.io-client-swift) - WebSockect 客户端类库。开放的通讯协议，有利于构建强大地跨平台应用。 \n* [Transporter](https://github.com/nghialv/Transporter) - swift， 短小、精悍、易用的多文件（并发或顺序）上传和下载传输库。还支持后台运行、传输进程跟踪、暂停/续传/取消/重试控制等功能。 \n* [STNetTaskQueue](https://github.com/kevin0571/STNetTaskQueue) - STNetTaskQueue Objective-C 可扩展网络请求管理库。\n* [CocoaAsyncSocket](https://github.com/robbiehanson/CocoaAsyncSocket) - 在iOS开发中使用socket，一般都是用第三方库AsyncSocket，不得不承认这个库确实很强大，[使用教程](http://www.superqq.com/blog/2015/04/03/ioskai-fa-zhi-asyncsocketshi-yong-jiao-cheng/)。\n* [AsyncSocket](https://github.com/roustem/AsyncSocket) - AsyncSocket。\n* [Socket通信](http://code.cocoachina.com/view/128711) - 通过AsyncSocket封装的Socket通讯方法，简单实用，通俗易懂，初学者不能错过 。\n* [GCDAsyncSocket](https://github.com/eugenehp/GCDAsyncSocket) - GCDAsyncSocket ， [不错的Demo](https://github.com/smalltask/TestTcpConnection)。\n* [Just](https://github.com/JustHTTP/Just) - 小而美的 HTTP 类。功能简单、直接、完整且健壮性高-- swift。\n* [Future](https://github.com/nghialv/Future) - 基于微框架设计思想的异步执行及结果响应类，代码即简单又干净-- swift。\n* [MZDownloadManager](https://github.com/mzeeshanid/MZDownloadManager) - 下载管理。 \n* [DVR](https://github.com/venmo/DVR) - 针对网络请求的测试框架，超实用的工具。且支持 iOS, OSX, watchOS 全平台。\n* [HFDownLoad](https://github.com/hongfenglt/HFDownLoad) - iOS开发网络篇之文件下载、大文件下载、断点下载:NSData方式、NSURLConnection方式、NSURLSession下载方式 [下载方式具体的思路、区别见Blog](http://blog.csdn.net/hongfengkt/article/details/48290561) 。\n* [Pitaya.swift](https://github.com/johnlui/Pitaya) - Pitaya 是纯 Swift 写的 iOS 网络库，支持 Basic Authorization、SSL 钢钉、HTTP raw body / JSON body、快速文件上传等特性，并通过内置 JSONNeverDie 实现了对 JSON 的完全支持，开箱即用。 [中文文档](https://github.com/johnlui/Pitaya/wiki/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3)\n\n##### 图像获取\n* [SDWebImage](https://github.com/rs/SDWebImage) - SDWebImage 网络图片获取及缓存处理。\n* [Kingfisher](https://github.com/onevcat/Kingfisher) - 纯 Swift 实现的类 SDWebImage 库，实现了异步下载和缓存图片。\n* [KFSwiftImageLoader](https://github.com/kiavashfaisali/KFSwiftImageLoader) - Swift，一个图像缓存加载库。 \n* [FastImageCache](https://github.com/path/FastImageCache) - FastImageCache 网络图片获取及缓存处理，[iOS图片加载速度极限优化—FastImageCache解析](http://www.imooc.com/wenda/detail/247239)。\n* [EGOCache](https://github.com/enormego/EGOCache) - 十分知名的第三方缓存类库，可以缓存NSString、UIImage、NSImage以及NSData。除此，如果还可以缓存任何一个实现了<NSCoding>接口的对象。所有缓存的数据都可以自定义过期的时间，默认是1天。EGOCache 支持多线程（thread-safe），[UITableView加载多张照片导致内存上涨的问题](http://www.superqq.com/blog/2014/11/06/ioskai-fa-:uitableviewjia-zai-duo-zhang-zhao-pian-dao-zhi-nei-cun-shang-zhang-de-wen-ti/)。\n * [YYWebImage](https://github.com/ibireme/YYWebImage/) - 一个图片加载库 YYWebImage，支持 APNG、WebP、GIF 播放，支持渐进式图片加载，更高性能的缓存，更多图像处理方法，可以替代 SDWebImage 等开源库，[相关文章](http://blog.ibireme.com/2015/11/02/mobile_image_benchmark/)。\n\n##### 网络聊天\n* [XMPPFramework](https://github.com/robbiehanson/XMPPFramework) - XMPPFramework openfire聊天。\n* [SXTheQQ](https://github.com/dsxNiubility/SXTheQQ) - 用xmppFramework框架编写QQ程序，主要为了练习通讯的一些原理，界面比较渣 必须要先在本地配置好环境才可以运行。\n* [环信](http://www.easemob.com/) - 给开发者更稳定IM云功能。8200万用户考验，好用！（暂无及时语音、视频通话）\n* [融云](http://www.rongcloud.cn/) - 即时通讯云服务提供商。（暂无及时语音、视频通话）\n* [容联云通讯](http://www.yuntongxun.com) - 提供基于互联网通话,视频会议,呼叫中心/IVR,IM等通讯服务。\n* [chatsecure](https://github.com/ChatSecure/ChatSecure-iOS) - 基于XMPP的iphone、android加密式聊天软件， [chatsecure官网](https://chatsecure.org/) 。 [iOS代码1](https://github.com/chrisballinger/Off-the-Record-iOS)，[iOS代码2](https://github.com/chrisballinger/ChatSecure-iOS)， [iOS中文版](http://www.cocoachina.com/bbs/read.php?tid=153156)。\n* [MessageDisplayKit](https://github.com/xhzengAIB/MessageDisplayKit) - 仿微信聊天，参考JSQMessagesViewController。（国人写）\n* [JSQMessagesViewController](https://github.com/jessesquires/JSQMessagesViewController) - 聊天 。 \n* [SunFlower](https://github.com/HanYaZhou1990/-SunFlower) - 环信聊天demo，比较多功能 。\n* [BlueTalk蓝牙聊天](http://code4app.com/ios/BlueTalk%E8%93%9D%E7%89%99%E8%81%8A%E5%A4%A9-%E6%89%8B%E6%9C%BA%E4%B9%8B%E9%97%B4/552b8190933bf0291e8b4748) - 以MultipeerConnectivity为基础， 实现了简单的蓝牙聊天。\n\n\n##### 网络测试\n * [Reachability](https://github.com/tonymillion/Reachability) - 苹果提供过一个Reachability类，用于检测网络状态。但是该类由于年代久远，并不支持ARC。该项目旨在提供一个苹果的Reachability类的替代品，支持ARC和block的使用方式。[iOS网络监测如何区分2、3、4G](http://www.jianshu.com/p/efcfa3c87306)   \n * [Reachability.swift](https://github.com/ashleymills/Reachability.swift) - 用于替换苹果的 Reachability 类，可以方便地检测当前是否联网以及具体的联网状态。 \n * [SimpleCarrie](https://github.com/crazypoo/SimpleCarrie) - 简单的运营商信息获取!。\n * [NetReachability](https://github.com/crazypoo/SimpleCarrie) - swift2.0 简单的方法检查网络连接的连通性，提供通知中心集成接口。 \n * [NetworkEye](https://github.com/coderyi/NetworkEye) - 一个网络调试库，可以监控App内HTTP请求并显示请求相关的详细信息，方便App开发的网络调试。 \n * [SimpleBS.swift](https://github.com/bin1991/SimpleBS) - 网络测试小工具。\n\n##### WebView\n * [MGTemplateEngine](https://github.com/mattgemmell/MGTemplateEngine) - MGTemplateEngine比较象 PHP 中的 Smarty、FreeMarker 和 Django的模版引擎，是一个轻量级的引擎，简单好用。只要设置很多不同的HMTL模版，就能轻松的实现一个View多种内容格式的显示，对于不熟悉HTML或者减轻 工作量而言，把这些工作让设计分担一下还是很好的，也比较容易实现设计想要的效果。\n * [NJKWebViewProgress](https://github.com/ninjinkun/NJKWebViewProgress) - 一个 UIWebView 的进度条接口库,UIWebView 本身是不提供进度条的。 \n * [GTMNSString-HTML](https://github.com/siriusdely/GTMNSString-HTML) - 谷歌开源的用于过滤HTML标签。 \n * [js-in-ios](https://github.com/WangXiaoxi/IOSLearing/) - webView与js的交互。 \n* [D3Generator](https://github.com/mozhenhau/D3Generator/) - D3Generator根据dict字典生成对象。 适用webview和push推送时，根据后台传回字典实现动态跳转。[实现说明](http://mozhenhau.com/2016/02/07/D3Generator实现万能跳转界面，UIWebview与js随意交互/)\n\n========\n#### Model\n * [JSONKit](https://github.com/johnezang/JSONKit) - JSONKit库是非常简单易用而且效率又比较高的，重要的JSONKit适用于ios 5.0以下的版本,使用JSONKit库来解析json文件，只需要下载JSONKit.h 和JSONKit.m添加到工程中；然后加入libz.dylib即可。\n * [JSONModel](https://github.com/icanzilb/JSONModel) - 解析服务器返回的Json数据的库,[JSONModel源码解析一](http://www.jianshu.com/p/3d795ea37835)。\n * [Mantle](https://github.com/Mantle/Mantle) - Mantle主要用来将JSON数据模型化为OC对象, 大系统中使用。[为什么选择Mantle](http://www.iwangke.me/2014/10/13/Why-Changba-iOS-choose-Mantle/)。\n * [RFJModel](https://github.com/refusebt/RFJModel) - RFJModel是一个IOS类库，可以将JSON字典自动装填到OBJC对象。相比JSONModel有一些非常好的特性，使用上也比较简单。\n * [XMLDictionary](https://github.com/nicklockwood/XMLDictionary) - ios与mac os平台下xml与NSDictionary相互转化开源类库。\n * [MJExtension](https://github.com/CoderMJLee/MJExtension) - 用于json转model进行使用，转换效率很高，使用也比较简单，只要前后台约定好，json直接就转成了model。\n * [CFRuntime](https://github.com/CoderMJLee/MJExtension) - “Swift 版的 MJExtension，运行时、反射与一键字典模型互转”。 \n * [DDModel](https://github.com/openboy2012/DDModel) - 快速搭建项目Model层，支持ORM映射关系，能从JSON/XML直接实例一个Model对象。支持SQLite本地数据持久化，封装了HTTP， 减少HTTP代码与UIViewController的代码耦合，支持Cache；类似RESTKit、Mantle的功能；使用该类库以后简化了网络层的开发工作，把更多的精力放在UI上面；目前只支持GET/POST方法的请求。使用到的第三方库有：1.SQLitePersistentObject; 2.JTObjectMapping; 3.AFNetworking; 4.XMLDictionary;\n * [protobuf-swift](https://github.com/alexeyxo/protobuf-swift) - Protocol Buffers 的 Swift 语言实现库。P.S. Protocol Buffers 是 Google 开源项目，主要功能是实现直接序列化结构化的对象数据，方便跨平台快速传递，开发者也可以直接修改 protobuf 中的数据。相比 XML 和 JSON，protobuf 解析更快，存储更小。\n * [JSONCodable](https://github.com/matthewcheok/JSONCodable) - 基于 Swift 2.0 新特性（Protocol Extensions and Error Handling）的JSON 解析类。\n * [SwiftyJSON](https://github.com/SwiftyJSON/SwiftyJSON) - 使Swift的JSON解析变得简单。\n * [JSONNeverDie.swift](https://github.com/johnlui/JSONNeverDie) - JSON 到 Model 类的自动映射工具。\n * [Fuzi.swift](https://github.com/cezheng/Fuzi) - Swift实现的轻量快速的 XML/HTML 解析器。\n * [SWXMLHash.swift](https://github.com/drmohundro/SWXMLHash) - 易用的 XML 解析类库。非常实用的“轮子”。\n * [YYModel](https://github.com/ibireme/YYModel) - 高性能的 iOS JSON 模型框架。\n * [TidyJSON.swift](https://github.com/benloong/TidyJSON) - TidyJSON.swift一款简单、易用、明了的 JSON 解析小类库。\n * [PMJSON.swift](https://github.com/postmates/PMJSON) - PMJSON.swift简单、实用、高效的 JSON 解析类库。\n\n\n========\n#### 通讯录\n* [快速查找联系人](http://code.cocoachina.com/view/128245) - 类似微信联系人搜索的界面,快速查找联系人,并支持点击查询结果 。\n\n\n========\n#### 其他\n * [DateTimeKit](https://github.com/exsortis/DateTimeKit) - 一个超赞的时间处理的库，Joda-Time ！ 他能帮你轻松处理时区，处理时间加减，计算到期时间等等场景下的问题。\n * [SwiftDate](https://github.com/malcommac/SwiftDate) - 特别完整、强大的日期时间操作管理类库。它几乎涵盖了已知开源日期类库所有优秀特性。 他能帮你轻松处理时区，处理时间加减，计算到期时间等等场景下的问题。\n * [iOS私有API](https://github.com/nst/iOS-Runtime-Headers) - 私有API，绿色 == public，红色 == private，蓝色 == dylib。\n * [iOS源代码](http://opensource.apple.com/source/CF/) - iOS源代码。\n * [libfacedetection](https://github.com/ShiqiYu/libfacedetection) - C++ 人脸识别 包含正面和多视角人脸检测两个算法.优点:速度快(OpenCV haar+adaboost的2-3倍), 准确度高 (FDDB非公开类评测排名第二），能估计人脸角度。 \n * [Slidden](https://github.com/Brimizer/Slidden) - 一个老外开源的开发自定义键盘的库，利用这个开源库，可以方便的配置键位、颜色以及键位对应的图片。\n * [TPKeyboardAvoiding](https://github.com/michaeltyson/TPKeyboardAvoiding) - 用户键盘弹出自动计算高度，进行屏幕滚动操作。\n * [CDPMonitorKeyboard](http://d.cocoachina.com/code/detail/298267) - CDPMonitorKeyboard封装,可以解决输入视图(例如textField,textView等)被键盘覆盖问题，并可设置高于键盘多少。 \n * [自动监听键盘高度](http://code.cocoachina.com/detail/297973/%E8%87%AA%E5%8A%A8%E7%9B%91%E5%90%AC%E9%94%AE%E7%9B%98%E9%AB%98%E5%BA%A6/) - 自动监听键盘高度，初始界面，输入框在屏幕最下方，当键盘出现时，输入框随即移动到键盘上方。 \n * [KeyboardToolBar](https://github.com/Jiar/KeyboardToolBar/) - 从此不再担心键盘遮住输入框，[文档](http://www.jianshu.com/p/48993ff982c1)。\n * [SYKeyboardTextField](https://github.com/441088327/SYKeyboardTextField) - SYKeyboardTextField 是一个轻巧,简单,非侵入式的键盘附随输入框! 采用Swift编写。\n * [BlocksKit](https://github.com/zwaldowski/BlocksKit) - block框架，为 OC 常用类提供了强大的 Block 语法支持，使得编写 OC 代码变得舒适、快速、优雅。\n * [KVOController](https://github.com/facebook/KVOController) - 在项目中有使用 KVO ，那么 KVOController 绝对是个好选择。它是 facebook 开源的一个 KVO 增强框架。 \n * [appirater](https://github.com/arashpayan/appirater) - 用于提醒用户给你的 APP 打分的工具。\n * [MotionKitr](https://github.com/MHaroonBaig/MotionKitr) - 为核心运动框架（The Core Motion framework）提供友好的类库封装，以更方便使用三轴陀螺仪和加速感应器特性。\n * [Review Monitor](https://launchkit.io/reviews/) -  第一时间自动推送 Apple Store 的用户评论到你的邮件箱或者 Slack，第一时间跟进用户反馈，打造优秀 App 必备工具！类似的有：App annie 的类似功能。\n * [WBWebViewConsole](https://github.com/Naituw/WBWebViewConsole) - 类似微博iPhone客户端的 “调试选项” 吗？把其中的 “内置浏览器网页调试” 开源在 Github 上了。\n * [ios-good-practices](https://github.com/futurice/ios-good-practices) - ios-good-practices iOS 开发最佳实践。\n * [iOS开发最佳实践](http://ios.jobbole.com/81830/) - iOS 开发最佳实践 -- 中文。\n * [TodayExtensionSharingDefaults](http://code.cocoachina.com/detail/232160) - TodayExtensionSharingDefaults是一个iOS 8 Today扩展示例，可以使用NSUserDefaults与其containing app分享数据。\n * [原生实现扫描二维码条码](http://code.cocoachina.com/view/129108) - iOS原生实现扫描二维码条码.\n * [QRCodeReader.swift](https://github.com/yannickl/QRCodeReader.swift) - QRCodeReader.swift一款简单的 QR 二维码阅读组件及示例，提供前后相机切换功能。\n * [swiftScan](https://github.com/MxABC/swiftScan) - 具有丰富功能的二维码扫描组件及类库。[对应OC版本LBXScan](https://github.com/MxABC/LBXScan)。\n * [QR-Code-Generator.swift](https://github.com/appcoda/QR-Code-Generator) - 生成二维码。\n * [QRCatcher](https://github.com/100mango/QRCatcher) - 一个简洁美观的二维码扫描应用， [iOS学习：AVFoundation 视频流处理--二维码扫描](https://github.com/100mango/zen/blob/master/iOS%E5%AD%A6%E4%B9%A0%EF%BC%9AAVFoundation%20%E8%A7%86%E9%A2%91%E6%B5%81%E5%A4%84%E7%90%86/iOS%E5%AD%A6%E4%B9%A0%EF%BC%9AAVFoundation%20%E8%A7%86%E9%A2%91%E6%B5%81%E5%A4%84%E7%90%86%20.md)。\n * [MQRCodeReaderViewController](https://github.com/zhengjinghua/MQRCodeReaderViewController) - 二维码扫描控件, UI 做了优化, 仿造微信, 直接拖进项目就可使用。\n * [Parsimmon](https://github.com/ayanonagon/Parsimmon) - swift，小而美的语言学类库封装工具包。提供分词、标记词性、词形归并、朴素贝页斯分类、决策树等自然语言分析小工具。P.S. 英语分词效果好于中文，感兴趣的同学可以针对中文做一些优化开发。参考译文 NSHipster - [NSLinguistic​Tagger](http://nshipster.cn/nslinguistictagger/)。\n * [Password-keyboard](https://github.com/liuchunlao/Password-keyboard) - 随机变换数字位置的密码键盘。 模仿银行类应用在付款时输入的随机密码键盘。\n * [MKMapView-Extension](https://github.com/SemperIdem/MKMapView-Extension) - 这是关于 MKMapView 写的一个基于swift的扩展，可以扩展 MKMapView 的相关功能，减少复用代码量。\n * [SemverKit](https://github.com/nomothetis/SemverKit) - 针对符合『语义化版本规范 2.0.0』版本号的解析、比较运算类库。不仅支持 Major, Minor, Patch，还支持 Alpha 和 Beta 预发布版本，以及相应地递增运算扩展。\n * [SwiftValidator](https://github.com/jpotts18/SwiftValidator) - 基于规则的输入验证类库。项目良好的面向对象设计思想，使规则的扩展及自定义非常方便。更专业的规则引擎（甚至是基于自然语言的规则配置）解决方案，比如：开源的 Drools，商用的 ILOG 等。\n * [Tesseract-OCR-iOS](https://github.com/gali8/Tesseract-OCR-iOS) - 有关OCR文字识别项目。\n * [Screenotate](https://github.com/osnr/Screenotate) - 支持 OCR 文字识别的载屏笔记 Mac 完整应用。\n * [cocoacats](http://cocoacats.com/) - 【分类汇总】里面收集了 iOS 中常用的分类文件，一直在更新。\n * [Olla4iOS](https://github.com/nonstriater/Olla4iOS) - 过去积累的一些方便复用的类和方法，还在整理中。\n * [DKNightVersion](https://github.com/Draveness/DKNightVersion) - 用最快的方式给你的应用加上夜间和白天的切换效果。 \n * [TouchVisualizer](https://github.com/morizotter/TouchVisualizer) - 实用的多点触摸可视化组件。扩展并作用于 UIWindows，结构上提供了简单地针对触摸显示定制，比如触摸点的颜色。\n * [RegexKitLite](https://github.com/wezm/RegexKitLite) - 用来处理正则表达式。 \n * [Regex.swift](https://github.com/sharplet/Regex) - 实用的正则表达式微框架类库。\n * [PySwiftyRegex.swift](https://github.com/cezheng/PySwiftyRegex) - 像Python一样简洁高效地作正则处理。\n * [PhoneNumberKit.swift](https://github.com/marmelroy/PhoneNumberKit) -  解析、格式化及验证国际电话号码工具库（相当于 Google 的 libphonenumber 库的 Swift 版本）。\n * [XcodeServerSDK](https://github.com/czechboy0/XcodeServerSDK) - 非官方 Xcode Server SDK 封装库。 P.S. 该 SDK 分离自之前推荐的由该作者开发的自动测试框架 [Buildasaur](https://github.com/czechboy0/Buildasaur)。\n * [BFKit-Swift](https://github.com/FabrizioBrancati/BFKit-Swift) - BFKit-Swift 这套工具库可以提高应用开发效率。 \n * [CKSIncrementalStore](https://github.com/CloudKitSpace/CKSIncrementalStore) - 基于 CloudKit 服务器实现多终端数据同步。\n * [SwiftSequence](https://github.com/oisdk/SwiftSequence) - 简洁、灵活、多变的操作 SequenceType 的类库（基于微框架（μframework）设计思想）。\n * [IDNFeedParser](https://github.com/photondragon/IDNFeedParser) - 一个简单易用的Rss解析库。\n * [CoreUmeng](https://github.com/nsdictionary/CoreUmeng) - 简单：友盟分享封装。\n * [openshare](https://github.com/100apps/openshare) - 不用官方SDK，利用社交软件移动客户端(微信/QQ/微博/人人/支付宝)分享/登录/支付。\n * [Swifternalization](https://github.com/tomkowz/Swifternalization) - 一套实用的本地化工具库。使用教程及 API 文档完整。值得收入项目的“轮子”。\n  * [Localize-Swift](https://github.com/marmelroy/Localize-Swift) - Localize-Swift一款开发者不可或缺的国际化及本地化字符串框架支持类库。同样地，使用简单、直观又方便。\n * [apous](https://github.com/owensd/apous) - 一款有趣的 Swift 应用 － 让 Swift 成为脚本语言。\n * [Mirror](https://github.com/kostiakoval/Mirror) - 通过反射（Refection）实现镜像对象封装库。从而可以更轻松获取（或输出）对象属性名、类型及值变量。\n * [Proposer](https://github.com/nixzhu/Proposer) - Proposer 用单个 API 处理 iOS 上的权限请求，以便使用前确认可访问“相册”、“相机”、“麦克风”、“通讯录”或“用户位置”。 \n * [PermissionScope](https://github.com/nickoneill/PermissionScope) - 用这个库可以在询问用户前，就告知用户所需的系统权限，为用户带来更好的体验。接受度更高—>更多活跃用户->更高的留存率->数据更好->下载率更高。 \n * [LocationManager](https://github.com/intuit/LocationManager) - CoreLocation使用起来还是比较麻烦的，需要授权，判断系统版本等等，所以推荐使用第三方框架LocationManager，使用Block，十分简单！[iOS-CoreLocation：无论你在哪里，我都要找到你！](http://www.cocoachina.com/ios/20150721/12611.html) 。\n * [pangu.objective-c](https://github.com/Cee/pangu.objective-c) - 有多种语言实现版本～ Pangu.Objective-C：格式化中英文之间的空格（OC）。\n * [objection](https://github.com/atomicobject/objection) - 一个轻量级的依赖注入框架Objection。\n * [ControlOrientation](https://github.com/johnlui/Swift-On-iOS/tree/master/ControlOrientation/ControlOrientation) - 如何用代码控制以不同屏幕方向打开新页面【iOS】， [使用说明](http://lvwenhan.com/ios/458.html)。\n * [iRate](https://github.com/nicklockwood/iRate) - 问卷调查。\n * [GameCenterManager](https://github.com/nihalahmed/GameCenterManager) - 在iOS上管理GameCenter vanilla并不算难，但是有了这个库会更简单也更快。好上加好不是更好么。\n * [SlackTextViewController](https://github.com/slackhq/SlackTextViewController) - 用作极佳、定制的文本输入控制时，自适应文本区域，手势识别、自动填充、多媒体合并，快速drop-in解决方案。\n * [IAPHelper](https://github.com/saturngod/IAPHelper) - 应用内付费给我们提供了很多样本代码，而这个库丢掉了那些代码，将金钱交易相关的大多通用任务做了简单的封装。\n * [TAPromotee](https://github.com/JanC/TAPromotee) - 交叉推广应用是你可以免费实现的最佳市场推广策略之一。使用这个库做起来非常简单，不用都不可能——将TAPromotee加入你的podfile中，免费配置与享受更多下载吧。\n * [DownloadFontOnline](https://github.com/cgwangding/DownloadFontOnline) - 实现了在线下载一些字体的功能，不用在工程中导入字体库，下载的字体也不会保存在你的应用中，所以可以放心使用。修复了一下崩溃的bug。\n * [STClock](https://github.com/zhenlintie/STClock) - 仿锤子时钟。\n * [GitUp](https://github.com/git-up/GitUp) - GitUp是一个可视化的Git客户端，能够实时的进行编辑、合并、回滚等多种操作，更多功能，请下载体验。\n * [获取联系人信息，通讯录](http://code.cocoachina.com/detail/320392/) - 获取联系人信息，通讯录。\n * [Universal-Jump-ViewController](https://github.com/HHuiHao/Universal-Jump-ViewController) - 根据规则跳转到指定的界面(runtime实用篇一)。\n * [Device-swift](https://github.com/Ekhoo/Device) - 可以非常方便的获取设备型号和屏幕尺寸，实现起来难度不大，大家可以学习一下源码。\n * [RunKit.swift](https://github.com/khoiln/RunKit) - 针对 GCD 框架的一个友好访问封装库（支持方法链式调用）。\n * [Plum-O-Meter](https://github.com/FlexMonkey/Plum-O-Meter) - swift 称重应用， (3D Touch之我见)[http://swift.gg/2015/10/23/3d-touch-impressions-and-thoughts/]。\n * [打开自带地图、百度地图、腾讯地图](http://code.cocoachina.com/view/128249) - 打开自带地图、百度地图、腾讯地图。\n * [batteryLevelTest](https://github.com/colin1994/batteryLevelTest) - runtime精准获取电池电量，[文档](http://www.jianshu.com/p/11c1afdf5415)。\n * [openshare](https://github.com/100apps/openshare) - 不用官方SDK，利用社交软件移动客户端(微信/QQ/微博/人人/支付宝)分享/登录/支付。\n * [DateTools](https://github.com/MatthewYork/DateTools) - 用于提高Objective-C中日期和时间相关操作的效率。灵感来源于 DateTime和Time Period Library。\n * [DDSlackFeedback](https://github.com/deepdevelop/DDSlackFeedback) - 用这个接口实现的摇一摇上传文字或者截屏反馈到你的 Slack channel，特别适合测试 app 的时候用，集成也很简单。\n * [BabyBluetooth](https://github.com/coolnameismy/BabyBluetooth) - 是一个非常容易使用的蓝牙库, 适用于 iOS 和 Mac OS, 基于原生 CoreBluetooth 框架封装, 可以帮开发者们更简单地使用 CoreBluetooth API, 使用链式方法体, 使得代码更简洁、优雅。[iOS蓝牙开发（四）：BabyBluetooth蓝牙库介绍](http://www.cocoachina.com/ios/20160219/15301.html)\n * [BluetoothKit.swift](https://github.com/rasmusth/BluetoothKit) - 基于 CoreBluetooth API 实现iOS/OS X 设备间蓝牙通讯封装类库。功能强大、传输稳定，示例完整，很酷。\n * [CoreDataStack.swift](https://github.com/bignerdranch/CoreDataStack) - 存储栈。\n * [SYNQueue.swift](https://github.com/THREDOpenSource/SYNQueue) - 执行队列类库。\n * [DDMathParser.swift](https://github.com/davedelong/DDMathParser) - 相比 NSExpression 和 GCMathPaser，功能更强大的数学表达式解析器。\n * [RateLimit.swift](https://github.com/soffes/RateLimit) - 简单、实用定时执行任务工具类库。\n * [iOS-Categories](https://github.com/shaojiankui/IOS-Categories) - 收集了许多有助于开发的iOS扩展,各种category分类。\n * [YYCategories](https://github.com/ibireme/YYCategories) - 功能丰富的 Category 类型工具库。\n * [YYAsyncLayers](https://github.com/ibireme/YYAsyncLayers) -  iOS 异步绘制与显示的工具。\n * [YYDispatchQueuePool](https://github.com/ibireme/YYDispatchQueuePool) -  iOS 全局并发队列管理工具。\n * [YYKeyboardManager](https://github.com/ibireme/YYKeyboardManager) -   iOS 键盘监听管理工具。\n * [shoppingCart.swift](https://github.com/6ag/shoppingCart) - swift的购物车demo，采用纯代码UI，autolayout自动布局，core animation动画效果。\n * [ShoppingCartExample](https://github.com/gbaldera/ShoppingCartExample) - 购物车最多star demo。\n * [shoppingCart1](https://github.com/yhangeline/shoppingCart) - 仿美团购物车效果。\n * [ZFShoppingCart](https://github.com/WZF-Fei/ZFShoppingCart) - 仿照美团外卖加入购物车的动态效果。\n * [shoppingCart2](https://github.com/spxvszero/ShoppingCart) - 一个购物车demo，包含购物车动画效果、购物车多选、删除、编辑等功能。\n * [shoppingCart-demo](https://github.com/DrYrw/shoppingCart-demo) - 一个简单的购物车功能实现demo。\n * [OC_ShoppingCart_Demo](https://github.com/ZyZwei/OC_ShoppingCart_Demo) - 简单实现购物车常见的筛选功能。\n * [XNQShoppingTrolley](https://github.com/342261733/XNQShoppingTrolley) - 购物车功能 基本功能仿照淘宝的购物车。\n  * [shopCarDemobyCX](http://code.cocoachina.com/view/129430) - shopCarDemobyCX一个简易购物车效果，最重要的是可以分单结算，分单个商品结算，代理是主要技术。\n * [MVVM KVO购物车](http://code.cocoachina.com/view/128713) - MVVM KVO 购物车(一处计算总价钱)。\n * [BHBDrawBoarderDemo车](https://github.com/bb-coder/BHBDrawBoarderDemo) - 仿写猿题库练题画板功能，没有用drawRect，而是用CAShapeLayer来做画板绘画，特别省内存，赞1个，[实现分析](http://bihongbo.com/2016/01/03/memoryGhostdrawRect/)。\n * [SwiftyGPIO](https://github.com/uraimo/SwiftyGPIO) - 通过 Swift 语言去控制基于 Linux 主板（比如：C.H.I.P. 和 树莓派） 的 GPIO（General Purpose Input Output ），去完成简单的工控功能（比如 LED 灯的显示）。\n * [Scale.swifty](https://github.com/onmyway133/Scale) - 简单直观的单位计算及换算类库（支持常用计量类型）。代码简洁性、直观性杠杠的。\n * [SwiftString](https://github.com/amayne/SwiftString) - SwiftString:String 扩展功能很丰富（无论格式化杂乱字符串，还是子串查找，亦或是格式转换都很强大）。\n * [jrswizzle](https://github.com/rentzsch/jrswizzle) - runtime实现的Method Swizzling第三方框架。\n * [FileBrowser.swift](https://github.com/marmelroy/FileBrowser) - FileBrowser.swift 一款开源的 iOS 文件浏览器, 支持文件搜索, 文件预览和 3D touch 功能。\n\n========\n#### 数据库\n * [FMDB](https://github.com/ccgus/fmdb) - sqlite的工具， [多线程FMDatabaseQueue实例](https://github.com/tangqiaoboy/FmdbSample)，[FMDB数据库的使用演示和封装工具类](https://github.com/liuchunlao/LVDatabaseDemo)，[基于fmdb 的基本操作](http://code.cocoachina.com/view/128312) 通过 fmdb 进行的数据库的 基本操作(增删改查 )查找是使用 UISearchBar 和UISearchDisplayController 进行混合使用。\n * [GXDatabaseUtils](https://github.com/Gerry1218/GXDatabaseUtils) - 在FMDB基础上的工具。\n * [realm-cocoa](https://github.com/realm/realm-cocoa) - Realm是一个真正为移动设备打造的数据库，同时支持Objective-C和Swfit。Realm宣称其相比Sqlite，在移动设备上有着更好的性能表现,[官方中文](https://realm.io/cn/) ，[iOS：选择 Realm 而不是 CoreData](http://swift.gg/2015/12/08/ios-realm-instead-of-coredata/), [使用 Realm 和 Swift 创建 ToDo 应用](http://swift.gg/2015/12/08/building-a-todo-app-using-realm-and-swift/)。\n * [Breeze](https://github.com/andrelind/Breeze) - 用Swift写的一个轻量级的CoreData管理工具，并且还支持iCloud 。\n * [AlecrimCoreData](https://github.com/Alecrim/AlecrimCoreData) - Swift，更容易地访问 CoreData 对象封装类库。除了 CRUD，还提供指针定位，强大的排序、筛选，异步数据获取，以及独立线程后台存取数据。\n * [CoreStore](https://github.com/JohnEstropia/CoreStore) -  Core Data 管理类库。 其中事务管理及查询是其比较大的亮点，整套 API 功能完整。\n * [MagicalRecord](https://github.com/magicalpanda/MagicalRecord) - CoreData第一库，MagicalRecord就像是给Core Data提供了一层外包装，隐藏掉所有不相关的东西。 其中事务管理及查询是其比较大的亮点，整套 API 功能完整。\n * [mogenerator](http://rentzsch.github.io/mogenerator/) - mogenerator为你定义了的Core Data生成默认的数据类。与xCode不一样的是(xCode一个Entity只生成一个NSManagedObject的子类)，mogenerator会为每一个Entity生成两个类。一个为机器准备，一个为人类准备。为机器准备的类一直去匹配data model。为人类准备的类就给你轻松愉快的去修改和保存。\n * [Presentation](https://github.com/hyperoslo/Presentation) - 重量级好项目 Presentation，它可以方便你制作定制的动画式教程、Release Notes、个性化演讲稿等。\n * [CoreValue](https://github.com/terhechte/CoreValue) - Swift 2 版 Core Data 封装库。相比另外两个 [SwiftRecord](https://github.com/arkverse/SwiftRecord)和 [CoreStore](https://github.com/JohnEstropia/CoreStore)更轻量。\n * [SQLCipher](https://github.com/sqlcipher/sqlcipher) - SQLCipher使用256-bit AES加密，SQLCipher分为收费版本和免费版本。[官方教程](https://www.zetetic.net/sqlcipher/ios-tutorial/)， [加密你的SQLite](http://foggry.com/blog/2014/05/19/jia-mi-ni-de-sqlite/) - 各种sqlite数据库加密介绍。 [SQLCipherDemo下载](http://download.csdn.net/detail/wzzvictory_tjsd/7379055) 。\n * [SQLite.swift](https://github.com/stephencelis/SQLite.swift) - 纯swift实现的类型安全的SQLite3封装，数据存储和JSON解析是永恒的话题。\n * [fluent.swift](https://github.com/qutheory/fluent) - 纯swift实现的类型安全的SQLite3封装，数据存储和JSON解析是永恒的话题。\n\n========\n#### 缓存处理\n * [YTKKeyValueStore](https://github.com/yuantiku/YTKKeyValueStore) - Key-Value存储工具类，[说明](http://tangqiaoboy.gitcafe.io/blog/2014/10/03/opensouce-a-key-value-storage-tool/)。\n * [TMCache](https://github.com/tumblr/TMCache) - TMCache 是 Tumblr 开源的一个基于 key/value 的数据缓存类库,可以用于缓存一些临时数据或者需要频繁加载的数据,比如某些下载的数据或者一些临时处理结果。\n * [JLKeychain](https://github.com/jl322137/JLKeychain) - 快捷使用keychain存储数据的类，使keychain像NSUserDefaults一样工作。\n * [sskeychain](https://github.com/soffes/sskeychain) - SSKeyChains对苹果安全框架API进行了简单封装,支持对存储在钥匙串中密码、账户进行访问,包括读取、删除和设置。\n * [KeychainAccess](https://github.com/kishikawakatsumi/KeychainAccess) - 管理Keychain接入的小助手。\n * [YYCache](https://github.com/ibireme/YYCache) - 高性能的 iOS 缓存框架。\n * [RuntimeDemo](https://github.com/CoderJackyHuang/RuntimeDemo) - runtime自动归档/解档,[源码分析](http://www.henishuo.com/runtime-archive-unarchive-automaticly/)。\n\n========\n#### PDF\n * [Reader](https://github.com/vfr/Reader) - Reader可提供类似iBooks的文档导航，支持屏幕旋转和所有方向，并通过密码保护加密PDF文件，支持PDF链接和旋转页面。\n\n========\n#### 图像浏览及处理\n * [FLAnimatedImage](https://github.com/liric28/FLAnimatedImage) - gif播放处理的工具。\n * [CLImageEditor](https://github.com/yackle/CLImageEditor) - 超强的图片编辑库，快速帮你实现旋转，防缩，滤镜等等一系列麻烦的事情。\n * [ios-image-filters](https://github.com/esilverberg/ios-image-filters) - 图像滤镜，库比较旧了，很容易崩溃。 \n * [XBImageFilters](https://github.com/xissburg/XBImageFilters) - 图像滤镜。\n * [MWPhotoBrowser](https://github.com/mwaterfall/MWPhotoBrowser) - 一个非常不错的照片浏览器，在github的star接近3000个，[解决MWPhotoBrowser中的SDWebImage加载大图导致的内存警告问题](http://www.superqq.com/blog/2015/01/22/jie-jue-mwphotobrowserzhong-de-sdwebimagejia-zai-da-tu-dao-zhi-de-nei-cun-jing-gao-wen-ti/)。\n * [core-image-explorer](https://github.com/objcio/issue-21-core-image-explorer) -  Core Image 滤镜处理图片-- swift ，[Core Image 介绍](http://objccn.io/issue-21-6/)。 \n * [CoreImageShop](https://github.com/rFlex/CoreImageShop) - CoreImageShop图片滤镜处理-- Mac app that let you create a complete Core Image Filter usable on iOS using SCRecorder。\n * [GPUImage](https://github.com/BradLarson/GPUImage) - 处理图片效果。\n * [RSKImageCropper](https://github.com/ruslanskorb/RSKImageCropper) - 适用于iOS的图片裁剪器，类似Contacts app，可上下左右移动图片选取最合适的区域。\n * [WZRecyclePhotoStackView](http://code.cocoachina.com/detail/232156) - 删除照片交互--WZRecyclePhotoStackView，就是模拟生活中是删除或保留犹豫不决的情形而产生的。 在上滑，下滑的部分，借鉴了[TinderSimpleSwipeCards](https://github.com/cwRichardKim/TinderSimpleSwipeCards)。\n * [TimingFunctionEditor](https://github.com/schwa/TimingFunctionEditor) - TimingFunctionEditor用swift编写， 贝塞尔曲线编辑器，编辑后可以预览或拷贝代码片段直接使用。P.S. 该项目采用更简单的依赖管理器 [Carthage](https://github.com/Carthage/Carthage) ，而非常用的 CocoaPods。[Carthage介绍中文](http://www.cocoachina.com/ios/20141204/10528.html)。\n * [AAFaceDetection](https://github.com/aaronabentheuer/AAFaceDetection) - AAFaceDetection--swift，简单、实用的面部识别封装库。虽然该技术从 iOS 5 发展，不过真正有趣的应用还不多。\n * [PhotoTweaks](https://github.com/itouch2/PhotoTweaks) - 这个库挺赞的，正好是对图像操作的。\n * [Concorde](https://github.com/contentful-labs/Concorde) - swift, Concorde, 一个可用于下载和解码渐进式 JPEG 的库, 可用来改善应用的用户体验。\n * [ZoomTransition](https://github.com/tristanhimmelman/ZoomTransition) - swift, 通过手势操控图片的放大、缩小、旋转等自由变化效果的组件及示例。\n * [AFImageHelper](https://github.com/melvitax/AFImageHelper) - swift,一套针对 UIImage 和 UIImageView 的实用扩展库，功能包含填色和渐变、裁剪、缩放以及具有缓存机制的在线图片获取。\n * [PinterestSwift](https://github.com/demon1105/PinterestSwift) - swift,Pinterest 风格图片缩放、切换示例。\n * [KYElegantPhotoGallery](https://github.com/KittenYang/KYElegantPhotoGallery) - 一个优雅的图片浏览库。\n * [SDPhotoBrowser](https://github.com/gsdios/SDPhotoBrowser) - 仿新浪动感图片浏览器,非常简单易用的图片浏览器，模仿微博图片浏览器动感效果，综合了图片展示和存储等多项功能。\n * [HZPhotoBrowser](https://github.com/chennyhuang/HZPhotoBrowser) - 一个类似于新浪微博图片浏览器的框架（支持显示和隐藏动画；支持双击缩放，手势放大缩小；支持图片存储；支持网络加载gif图片，长图滚动浏览；支持横竖屏显示）。 \n * [PhotoStackView-Swift](https://github.com/YiZhuoChen/PhotoStackView-Swift) - PhotoStackView——照片叠放视图，[使用说明](http://blog.csdn.net/u013604612/article/details/46336657)。\n * [MarkingMenu](https://github.com/FlexMonkey/MarkingMenu) - 基于手势、类似 Autodesk Maya 风格标记菜单及图片渲染。\n * [SXPhotoShow](https://github.com/dsxNiubility/SXPhotoShow) - UICollectionViewFlowLayout流水布局 是当下collectionView中常用且普通的布局方式。本代码也写了三种好看的布局，其中LineLayout和流水布局有很大的相同点就直接继承UICollectionViewFlowLayout，然后StackLayout，CircleLayout这两种都是直接继承自最原始的UICollectionViewLayout 布局方案。\n * [PictureWatermark](https://github.com/cgwangding/PictureWatermark) - 主要实现了给图片加文字以及图片水印的功能，已封装成了UIImage的类别，方便使用。\n * [自定义宽高比的相册框 拍照](http://code.cocoachina.com/detail/320603/) - 取出照片时 弹出自定义view。在这个自定义view上创建一个需要的相框大小的view层 把取出的图片赋值给UIImageView按缩放添加到这个层上。对uiimageView添加捏合、移动 手势。添加按钮 选取，最后根据位移和缩放比例 裁剪image。\n * [LGPhotoBrowser](https://github.com/gang544043963/LGPhotoBrowser) - LGPhotoBrowser:相册选择/浏览器/照相机（仿微信）,包含三个模块：照片浏览器，相册选择器，照相机。\n * [PhotoBrowser](https://github.com/oscarWyz/PhotoBrowser) - 一个简单的好用的的图片浏览器。\n * [BeautyHour](https://github.com/xujingzhou/BeautyHour) - 完整应用，功能与“美图秀秀”雷同。\n * [MPParallaxView](https://github.com/DroidsOnRoids/MPParallaxView) - 是用 Swift 写的类似 Apple TV Parallax 效果的视图。\n * [StitchingImage](https://github.com/zhengjinghua/StitchingImage) - 仿微信群组封面拼接控件, 直接拖进项目就可使用，[教程](http://gold.xitu.io/entry/56395f5360b20b143a9178f6)。\n * [SDECollectionViewAlbumTransition](https://github.com/seedante/SDECollectionViewAlbumTransition) - 用自定义的 push 和 pop 实现了有趣的 iOS 相册翻开动画效果。\n * [SKPhotoBrowser.swift](https://github.com/xujingzhou/BeautyHour) - swift中规中矩、实用的图片浏览类库。示例也很完整。\n * [Nuke.swift](https://github.com/kean/Nuke) - 完整、强大、实用的图片管理类库。主要功能包括可定制装载，缓存，滤镜及尺寸变换。\n * [DNImagePicker](https://github.com/AwesomeDennis/DNImagePicker) - 类似wechat的图片选择。\n * [CocoaPicker](https://github.com/lioonline/CocoaPicker) - 仿QQ图片选择器（OC）。\n * [JFImagePickerController](https://github.com/johnil/JFImagePickerController) - vvebo作者：多选照片、预览已选照片、针对超大图片优化。\n * [VIPhotoView](https://github.com/vitoziv/VIPhotoView) - 图片浏览，用于展示图片的工具类，因为是个 View，所以你可以放在任何地方显示。支持旋转，双击指定位置放大等。\n * [AGImagePickerController](https://github.com/SpringOx/AGImagePickerController) - 是一个图片选择器，支持图片多选，支持大图横滑预览，支持放大预览，支持横竖屏，支持所有的iOS设备。\n * [YYImage](https://github.com/ibireme/YYImage) - 功能强大的 iOS 图像框架，支持大部分动画图像、静态图像的播放/编码/解码。\n * [PagingView.swift](https://github.com/KyoheiG3/PagingView) - 注重细节的自动布局分页视图组件。\n * [TZImagePickerController](https://github.com/banchichen/TZImagePickerController) - 一个支持多选、选原图和视频的图片选择器，同时有预览功能，适配了iOS6789系统。[教程](http://www.cocoachina.com/ios/20160112/14942.html).\n * [更换头像](http://code.cocoachina.com/view/129134) - 用户选取从相机或者相册获取图片，并且显示在View上。\n * [DouBanMeinv.swift](https://github.com/luzefeng/DouBanMeinv) - 抓取豆瓣美女图片，瀑布流显示。\n * [ZZPhotoKit](https://github.com/ACEYL/ZZPhotoKit) - 基于Photos和AVFoundation框架开源，相册多选与相机连拍。\n * [SwViewCapture.swift](https://github.com/startry/SwViewCapture) - SwViewCapture.swift一个用起来还不错的iOS截图库.(支持截取所有内容, 适用于所有ScrollView组成的视图, 包括WebView)。\n\n========\n#### 摄像照相视频音频处理\n * [SCRecorder](https://github.com/rFlex/SCRecorder) - SCRecorder 短视频录制。\n * [VideoPushDemo](https://github.com/pingguo-zangqilong/VideoPushDemo) - 视频剪辑 [视频特效制作1](http://www.jianshu.com/p/3006502912aa) [视频特效制作2](http://www.jianshu.com/p/6313025349a9)。\n * [LLSimpleCamera](https://github.com/omergul123/LLSimpleCamera) - A simple, customizable camera control for iOS， 摄像头。\n * [EZAudio](https://github.com/syedhali/EZAudio) - EZAudio 是一个 iOS 和 OSX 上简单易用的音频框架，根据音量实时显示波形图，基于Core Audio，适合实时低延迟音频处理，非常直观。[中文介绍](http://segmentfault.com/blog/news/1190000000370957),[官网](http://www.syedharisali.com/about)。\n * [ffmpeg](http://ffmpeg.org/) - ffmpeg官网，[FFmpeg在iOS上完美编译](http://www.cocoachina.com/ios/20150514/11827.html)。\n * [VCL](http://www.videolan.org/) - VCL官网。 \n * [kxmovie](https://github.com/kolyvan/kxmovie) - 使用ffmpeg的影片播放器，[修改说明](http://www.cocoachina.com/bbs/read.php?tid=145575)， [修改代码](https://github.com/kinglonghuang)，[基于FFmpeg的kxMoive艰难的编译运行](https://github.com/namebryant/FFmpeg-Compilation)。\n * [ijkplayer](https://github.com/Bilibili/ijkplayer) - B站开源的视频播放器，支持Android和iOS。 \n * [StreamingKit](https://github.com/tumtumtum/StreamingKit) - StreamingKit流媒体音乐播放器。 \n * [FreeStreamer](https://github.com/muhku/FreeStreamer) - FreeStreamer流媒体音乐播放器，cpu占用非常小。\n * [DOUAudioStreamer](https://github.com/douban/DOUAudioStreamer) - DOUAudioStreamer豆瓣的音乐流媒体播放器。\n * [fmpro](https://github.com/fmpro/fmpro) - 电台播放器，支持锁屏歌词，支持基本播放流程，歌词展示，后台锁屏播放和控制以及锁屏后封面+歌词，[fmpro_R](https://github.com/jovisayhehe/fmpro_R) 。\n * [IPDFCameraViewController](https://github.com/mmackh/IPDFCameraViewController) - 支持相机定焦拍摄、滤镜、闪光、实时边框检测以及透视矫正功能，并有简单易用的API。 \n * [SCRecorder](https://github.com/rFlex/SCRecorder) - 酷似 Instagram/Vine 的音频/视频摄像记录器，以 Objective-C 为基础的过滤器框架。 你可以做很多如下的操作：记录多个视频录像片段。删除任何你不想要的记录段。可以使用任何视频播放器播放片段。保存的记录可以在序列化的 NSDictionary 中使用。（在 NSUserDefaults 的中操作）添加使用 Core Image 的视频滤波器。可自由选择你需要的 parameters 合并和导出视频。\n * [Cool-iOS-Camera](https://github.com/GabrielAlva/Cool-iOS-Camera) - Cool-iOS-Camera。\n * [FastttCamera](https://github.com/IFTTT/FastttCamera) - FastttCamera 快速照相。\n * [ICGVideoTrimmer](https://github.com/itsmeichigo/ICGVideoTrimmer) - ICGVideoTrimmer提供提供视频剪切的视图（类似系统相册中浏览视频时顶部那个条状视图）。左右两个边界选择器还能够自定义。\n * [IOS录音和播放功能demo](http://d.cocoachina.com/code/detail/285717) - 比较完整的ios录音和播放功能的实现。\n * [CameraManager](https://github.com/imaginary-cloud/CameraManager) - 相机管理封装类库。看着极好用的样子----swift。\n * [MCAudioInputQueue](https://github.com/msching/MCAudioInputQueue) - 简易录音类，基于AudioQueue的。\n * [DraggableYoutubeFloatingVideo](https://github.com/vizllx/DraggableYoutubeFloatingVideo) - 展示像类似Youtube移动应用的那种浏览视频的效果，当点击某视频时能够从右下方弹出一个界面，并且该界面能够通过手势，再次收缩在右下方并继续播放。这是通过AutoLayout设计实现。\n * [amr](http://www.penguin.cz/~utx/amr) - 做即时通讯的音频处理，录音文件是m4a，便于web端的音频播放。\n * [FSVoiceBubble](https://github.com/f33chobits/FSVoiceBubble) - 一个轻量级播放录音音频的气泡：1.支持短时间的音频播放（支持网络音频）；2.播放时的声波动画；3.自定义包括声波的颜色，气泡的背景等。\n * [KRVideoPlayer](https://github.com/36Kr-Mobile/KRVideoPlayer) - 类似Weico的播放器，支持竖屏模式下全屏播放。\n * [自定义视频播放器AVPlayer](http://code.cocoachina.com/view/128253) - 利用系统类AVPlayer实现完全自定义视频播放器，显示播放时间，缓存等功能。代码清晰，注释详细。\n * [VideoBeautify](https://github.com/xujingzhou/VideoBeautify) - 功能酷似美拍,秒拍等应用的源码：对视频进行各种美化处理，采用主题形式进行分类，内含各种滤镜，动画特效和音效等。\n * [HTY360Player](https://github.com/hanton/HTY360Player) - 是一款提供在 iOS 中使用 360 度无死角拖拽视频进行不同角度播放的视频播放器。\n * [ALCameraViewController](https://github.com/AlexLittlejohn/ALCameraViewController) - ALCameraViewController 摄像头视图控制器（含可定制照片选择器，图片简单裁切功能）及演示。\n * [recordDemo.swift](https://github.com/lfb-cd/recordDemo) - 一个Swift语言实现直接可以用的录音Demo，[实现说明](http://www.jianshu.com/p/f0b88355d7cb)。\n * [Swift-Radio-Pro](https://github.com/swiftcodex/Swift-Radio-Pro) - 集成 LastFM 的专业电台应用（基于 Swift 2.0）。\n * [Eleven](https://github.com/coderyi/Eleven) - Eleven Player - 一个使用 FFmpeg 实现的简单强大的 iOS 开源播放器。 \n * [mobileplayer-ios.swift](https://github.com/mobileplayer/mobileplayer-ios) - 很不错的高度可定制播放器项目。 \n * [iFrameExtractor](https://github.com/lajos/iFrameExtractor) - 开源视频播放器， ffmpeg在iOS的使用-iFrameExtractor源码解析，[文章](http://ios.jobbole.com/82408/)。\n * [Periscope-VideoViewController.swift](https://github.com/gontovnik/Periscope-VideoViewController) - 简洁实用的视频快进、倒带控制视图类库。\n * [AudioKit.swift](https://github.com/audiokit/AudioKit) - 音频合成、加工及分析平台（支持 iOS、OS X、tvOS）框架库。无论其易用性，还是功能性及专业性。\n * [MusicPlayert](https://github.com/menxu/MusicPlayert) - MusicPlayert本地音乐播放+音乐信息显示+在线歌词搜索显示（千千静听服务器）。\n * [MusicPlayert](https://github.com/liuFangQiang/MusicPlayer) - MusicPlayert音乐播放器，用reveal可以查看层次关系，主要实现了歌词的同步显示。\n * [音乐播放器](http://code.cocoachina.com/view/129435) - 音乐播放器：显示歌词。\n * [TBPlayer](https://github.com/suifengqjn/TBPlayer) - 视频变下变播，把播放器播放过的数据流缓存到本地，支持拖动。采用avplayer。[实现说明](http://www.jianshu.com/p/990ee3db0563)\n\n========\n#### 响应式框架\n * [ReactiveCocoa](https://github.com/ReactiveCocoa/ReactiveCocoa) - ReactiveCocoa 受函数响应式编程激发。不同于使用可变的变量替换和就地修改，RAC提供Signals来捕获当前值和将来值（ [使用介绍](http://yulingtianxia.com/blog/2014/07/29/reactivecocoa/) ），[不错的例子](http://iiiyu.com/2014/12/26/learning-ios-notes-thirty-six/),入门好教程：[ReactiveCocoa入门教程：第一部分 ](http://www.cocoachina.com/ios/20150123/10994.html)。[Reactive Cocoa 3.0 在 MVVM 中的应用](http://ios.jobbole.com/82232/) ,[小码哥：快速让你上手ReactiveCocoa之基础篇](http://www.jianshu.com/p/87ef6720a096)。\n * [ReactiveAnimation](https://github.com/ReactiveCocoa/ReactiveAnimation) - ReactiveCocoa 推出了一个叫 ReactiveAnimation 的子项目，直接用完全用 Swift 来实现了。\n * [BeeFramework](https://github.com/gavinkwoe/BeeFramework) -  与ReactiveCocoa类似，[BeeFramework用户指南 v1.0](http://www.lanrenios.com/tutorials/all/2012/1220/641.html)。\n * [Objective-Chain](https://github.com/iMartinKiss/Objective-Chain) - Objective-Chain是一个面向对象的响应式框架，作者表示该框架吸收了 ReactiveCocoa 的思想，并且想做得更面向对象一些。\n * [RxSwift](https://github.com/ReactiveX/RxSwift) - RxSwift。 \n * [Swiftest](https://github.com/bppr/Swiftest) - BDD 全称 Behavior Driven Development，行为驱动开发。各种 DD 数不胜数，孰优孰劣争论不休，其实归根结底还是要根据使用场景进行选择。\n * [MVVMFramework](https://github.com/lovemo/MVVMFramework) - (OC版)总结整理下一个快速开发框架，分离控制器中创建tableView和collectionView的代码，已加入cell自适应高度，降低代码耦合，提高开发效率。[MVVMFramework-Swift](https://github.com/lovemo/MVVMFramework-Swift) - swift版本。\n\n========\n#### 消息相关\n##### 消息推送客户端\n * [SGPushDemo](https://github.com/sagiwei/SGPush/tree/master/SGPushDemo) - 消息推送客户端\n * [Orbiter](https://github.com/mattt/Orbiter) - 消息推送客户端:Push Notification Registration for iOS.\n * [PushDemo](https://github.com/ios44first/PushDemo) - 客户端消息接收消息代码，[IOS开发之 ---- IOS8推送消息注册](http://blog.sina.com.cn/s/blog_71715bf80102uy2k.html) ， [分分钟搞定IOS远程消息推送](http://my.oschina.net/u/2340880/blog/413584)。\n\n##### 消息推送服务端\n * [javapns源代码](https://code.google.com/p/javapns/downloads/list) - 消息推送的java服务端代码，注意：DeviceToken中间不能有空格。\n * [pushMeBaby](https://github.com/stefanhafeneger/PushMeBaby) - Mac端消息推送端代码，注意：DeviceToken中间要有空格。\n\n\n##### 通知相关\n * [JSQNotificationObserverKit](https://github.com/jessesquires/JSQNotificationObserverKit) - 一款轻量、易用的通知发送及响应框架类库。作者是知名开源项目 JSQMessagesViewController（Objective-C 版即时聊天）的作者 Jesse Squires.\n * [GLPubSub](https://github.com/Glow-Inc/GLPubSub) - 一个简短实用的 NSNotificationCenter 的封装。\n * [Homeoff](https://github.com/lizyyy/Homeoff) - 用swift写了一个模仿Launcher通知中心快捷方式的应用。支持20个应用，并增加了一个返回到桌面来解放Home键的功能。\n * [JDStatusBarNotification](https://github.com/jaydee3/JDStatusBarNotification) - 在状态栏顶部显示通知。可以自定义颜色字体以及动画。支持进度显示以及显示状态指示器。\n\n========\n#### 版本新API的Demo\n * [appleSample](https://github.com/WildDylan/appleSample) - iOS 苹果官方Demo合集， [官方demo](https://developer.apple.com/library/ios/navigation/#section=Resource%20Types&topic=Sample%20Code).\n * [iOS7-Sampler](https://github.com/shu223/iOS7-Sampler) - 整合了iOS7.0的一些十分有用的特性，比如：Dynamic Behaviors、碰撞检测、语音合成、视图切换、图像滤镜、三维地图、Sprite Kit（动画精灵）、Motion Effect（Parallax）、附近蓝牙或者wifi搜索连接、AirDrop、运动物体追踪（iPhone 5S以上，需要M7处理器）等等。对于日常的应用开发十分实用。 \n * [iOS8-Sampler](https://github.com/shu223/iOS8-Sampler) - 日本的shuさん制作的 iOS8 参考代码集。01.Audio Effects ；02.New Image Filters；03.Custom Filters；04.Metal Basic；05.Metal Uniform Streaming；06.SceneKit；07.HealthKit；08.TouchID；09.Visual Effects；10.WebKit；11.UIAlertController；12.User Notification；13.Pedometer；14.AVKit；15.Histogram；16.Code Generator；17.New Fonts；18.Popover；19.Accordion Fold Transition\n * [iOS-9-Sampler](https://github.com/shu223/iOS-9-Sampler) - 通过实例介绍了iOS 9 SDK中重要新特性的使用。\n * [MTSwift-Learning](https://github.com/MartinRGB/MTSwift-Learning) - 通过一些简单项目实战演练开始学习 Swift 。\n * [iOS8-day-by-day](https://github.com/shinobicontrols/iOS8-day-by-day) - swift。\n * [iOS9-day-by-day](https://github.com/shinobicontrols/iOS9-day-by-day) - swfit [iOS9 Day-by-Day :: Day 2 :: UI Testing](http://www.jianshu.com/p/039f8de6ee4d)。\n * [iOS 9 分屏多任务](http://www.cocoachina.com/ios/20150714/12557.html) - iOS 9 分屏多任务：Slide Over & Split View快速入门（中文版）。\n * [uistackview-sample.swift](https://github.com/uraimo/uistackview-sample) - iOS 9 引进了 UIStackViews，提供 auto-layout 特性。如果你开发过 Android 应用，会发现它和 LinearLayouts 概念上很类似，它是增强版。你可以手动创建，也可以使用 IB 自动创建，本文用的是代码实现。\n\n========\n#### 代码安全与密码\n * [ios-class-guard](https://github.com/Polidea/ios-class-guard) - 一个用于混淆iOS的类名、方法名以及变量名的开源库--有人反映编译出来的app运行不了。\n * [《Protecting iOS Applications》](https://www.polidea.com/#!heartbeat/blog/Protecting_iOS_Applications)：文章系统地介绍了如何保护iOS程序的代码安全，防止反汇编分析。\n * [fishhook](https://github.com/facebook/fishhook) - fishhook是Facebook开源的一个可以hook系统方法的工具。\n * [GesturePassword](https://github.com/smilingxinyi/GesturePassword) - 一个iOS手势密码功能实现，iPad/iPhone 都可以用，没有使用图片，里面可以通过view自己添加。keychain做的数据持久化，利用苹果官方KeychainItemWrapper类。操作部分都在controller了。删除直接用一下clear。\n * [JMPasswordView](https://github.com/Juuman/JMPasswordView) - 简单实用的手势密码，效果可自行调控。\n * [仿密码锁-九宫格](http://code.cocoachina.com/detail/298556/%E4%BB%BF%E5%AF%86%E7%A0%81%E9%94%81-%E4%B9%9D%E5%AE%AB%E6%A0%BC/) - 仿密码锁-九宫格，主要是使用UIButton 手势事件  UIBezierPath画图，解锁失败弹出“密码错误”。\n * [CoreLock](https://github.com/nsdictionary/CoreLock) - 本框架是高仿支付宝，并集成了所有功能，并非一个简单的解锁界面展示。个人制作用时1周多，打造解锁终结者框架。\n * [LikeAlipayLockCodeView](https://github.com/crazypoo/LikeAlipayLockCodeView) - 高仿支付宝手势解锁（超级版）。\n * [PCGestureUnlock](https://github.com/iosdeveloperpanc/PCGestureUnlock) - 目前最全面最高仿支付宝的手势解锁，而且提供方法进行参数修改，能解决项目开发中所有手势解锁的开发。\n * [ICPayPassWordDemo](https://github.com/icoder20150719/ICPayPassWordDemo) - CPayPassWordDemo，一个模仿支付宝支付密码输入对话框小demo。\n * [RSAESCryptor](https://github.com/bigsan/RSAESCryptor) - 加密 RSA+AES Encryption/Decryption library for iOS. This library uses 2048-bit RSA and 256-bit key with 128-bit block size AES for encryption/decryption。\n * [WJTouchID](https://github.com/bringbird/WJTouchID) - 用法简单的TouchID验证框架：两行代码搞定。\n\n========\n#### 测试及调试\n * [HeapInspector](https://github.com/tapwork/HeapInspector-for-iOS) - HeapInspector是一个用于检测应用中的内存泄漏的开源调试工具。\n * [Crashlytics](http://try.crashlytics.com/) - Crashlytics 崩溃报告 崩溃日志   [使用说明](http://www.infoq.com/cn/articles/crashlytics-crash-statistics-tools) 。\n * [UIViewController-Swizzled](https://github.com/RuiAAPeres/UIViewController-Swizzled) - 把你进入的每一个controller的类名打出来,如果看一些特别复杂的项目的时候直接运行demo就可以知道执行次序了。\n * [snoop-it](https://code.google.com/p/snoop-it/) - snoop-it比UIViewController-Swizzled好用，代码托管在google上。\n * [Versions](https://github.com/zenangst/Versions) - 版本比较小工具。\n * [MobileWebPageTest](http://code4app.com/ios/MobileWebPerformanceTest/5465d3e9933bf00c658b4f43) - MobileWebPageTest是用来测试移动网页性能的软件，它可以对页面的加载和渲染过程进行截屏，协助开发者分析出页面性能瓶颈。\n * [KKLog](https://github.com/Coneboy-k/KKLog) - 一个日志管理系统。\n * [CleanroomLogger](https://github.com/emaloney/CleanroomLogger) - 相当于 CocoaLumberjack 或 Log4j 的 Swift 版本，功能上甚至更强大。另外，源代码中已经内含了完整的 API 文档，使用非常方便。\n * [Buildasaur](https://github.com/czechboy0/Buildasaur) - 自动测试框架 Buildasaur。\n * [使用Quick框架和Nimble来测试ViewControler](http://www.devtf.cn/?p=739) - Quick是一个用于创建BDD测试的框架。配合Nimbl，可以为你创建更符合预期目标的测试。\n * [fastlane](https://github.com/KrauseFx/fastlane) - 一套iOS开发和持续集成的命令行工具fastlane，可以用来快速搭建CI甚至自动提交的开发环境。这套工具中包括了上传ipa文件，自动截取多语言截屏，生成推送证书，管理产品证书等一系列实用工具。\n * [KIF](https://github.com/kif-framework/KIF) - 是一个开源的用户界面UI测试框架. 使用 KIF, 并利用 iOS中的辅助功能 API, 你将能够编写模拟用户输入，诸如点击，触摸和文本输入，自动化的UI测试.\n * [Quick](https://github.com/Quick/Quick) - 用于Swift中的单元测试（也可用于Objective-C），与Xcode整合在一起。如果你是Objective-C的粉丝，我建议用Specta代替这个，但是对Swift使用者来说，Quick是最佳选择。\n * [Sleipnir](https://github.com/railsware/Sleipnir) - Swift的测试框架。\n * [kiwi-bdd](https://github.com/kiwi-bdd/Kiwi/wiki) - TDD或BDD，objective-c语言的测试框架，最流行的BDD测试框架了，Kiwi最受欢迎（根据github上的star数来推断，行为描述和期望写起来也比较易懂，至少我是这么认为的） [iOS开发中的测试框架](http://www.jianshu.com/p/7e3f197504c1#)。\n * [specta](https://github.com/specta/specta) -  TDD或BDD，objective-c语言的测试框架，用的人多。\n * [cedar](https://github.com/pivotal/cedar) -  TDD或BDD，objective-c语言的测试框架，用的人少。\n * [ViewMonitor](https://github.com/daisuke0131/ViewMonitor) - 能够帮助 iOS 开发者们精确的测量视图, 可直接在调试应用中查看具体某个视图的坐标, 宽高等参数。\n * [MMPlaceHolder](https://github.com/adad184/MMPlaceHolder) - 一行代码显示UIView的位置及相关参数。\n * [XXPlaceHolder.swift](https://github.com/adad184/XXPlaceHolder) - MMPlaceHolder的swift版本。 \n * [KMCGeigerCounter](https://github.com/kconner/KMCGeigerCounter) - KMCGeigerCounter通过复杂和简单的视图演示了类似盖革计数器的帧速计算功能。掉帧通常是可见的，但是很难区分55fps和60fps之间的不同，而KMCGeigerCounter可以让你观测到掉落5帧的情况。\n * [SwiftyBeaver](https://github.com/SwiftyBeaver/SwiftyBeaver) - 一个完善的日志工具，支持彩色输出、输出内容到文件、重要性分级、多输出目标。工具执行在后台，不影响性能，可以极大提高开发效率。\n * [Cuckoo.swift](https://github.com/SwiftKit/Cuckoo) - Cuckoo.swift一款用法更接近于传统单元测试 Mock 框架库（区别之处在于需要用脚本预先生成 Mock 类）。\n\n========\n#### AppleWatch\n * [Tesla汽车AppleWatch app demo演示](https://github.com/eleks/rnd-apple-watch-tesla) - 通过AppleWatch控制特斯拉汽车，同时可以看到汽车的相关信息，比如剩余电量、可续行里程等，以及解锁/上锁车门、调节司机和乘客的四区域空调温度、开启车辆大灯、定位汽车等。[源码推荐说明](http://www.cocoachina.com/ios/20150205/11116.html)。 \n * [WatchKit-Apps](https://github.com/kostiakoval/WatchKit-Apps) - WatchKit 开源小项目示例集锦。是不可多得地学习 WatchKit 的示例式教程（1.如何创建一个简单的交互式计数器；2.如何从手表上控制iOS app；3.如何在WatchKit app和iOS app之间共享数据；4.如何创建一个拥有不同背景色的数字时钟；5.展示不同的UI层；6.如何创建支持滑动手势的应用程序。）。 \n * [KYVoiceCurve](https://github.com/KittenYang/KYVoiceCurve) - 类似Apple Watch中语音的声音曲线动画。  \n * [IGInterfaceDataTable](https://github.com/Instagram/IGInterfaceDataTable) - IGInterfaceDataTable是WKInterfaceTable对象的一个类别，可以让开发者更简单地配置多维数据。该项目使用类似UITableViewDataSource的数据源模式配置Apple Watch表格，而不是将数据结构扁平化成为数组。  \n * [Apple Watch开发教程资料汇总](http://www.swiftkiller.com/?p=613) - Apple Watch开发教程资料汇总。\n * [Stargate](https://github.com/contentful-labs/Stargate) - 通过 iPhone 桥接实现 Mac 与 Watch 的即时通讯。Stargate 通过封装两个优秀的基础类库 MMWormhole 和 PeerKit 实现高效的通讯应用。--swift\n * [soon](https://github.com/sandofsky/soon) - 一款倒计时 WatchKit 示例应用。作者从架构的角度，思考如何设计一款完整、通讯高效且性能又好的 WatchKit 扩展应用。该示例学习性非常强。--swift\n * [watchOS-2-Sampler](https://github.com/shu223/watchOS-2-Sampler) - 基于 watchOS 2 若干新特性，写了相应的示例代码供大家学习、参考。\n * [HMWatch](https://github.com/KhaosT/HMWatch) - HMWatch是个有待完善的watchOS 2.0 HomeKit 应用示例。\n * [CocoaMultipeer](https://github.com/manavgabhawala/CocoaMultipeer) - CocoaMultipeer这个开源框架支持OS X, iOS和watchOS设备间的点对点通信，解决watchOS和Mac之间通信的方案还是很有用的。\n * [HighstreetWatchApp](https://github.com/GetHighstreet/HighstreetWatchApp) - 是电商平台Highstreet针对App Watch的一款应用，该demo中加载的是虚拟数据。\n * [NKWatchChart](https://github.com/NilStack/NKWatchChart) - NKWatchChart是一个基于PNChart专门为Apple Watch 开发的图表库,目前支持 line, bar, pie, circle 和 radar 等 图表形式。\n * [BeijingAirWatch](https://github.com/diwu/BeijingAirWatch) - 国人的开源项目代码 ！WatchOS 2.0 Complication of Real-time Air Quality for Major Chinese Cities 苹果表盘实时刷新北上广沈蓉空气质量。\n\n========\n#### VPN\n * [vpnon](https://github.com/lexrus/vpnon/) - swift的VPN On 的源码和本地化内容都是开放的: [官方网站](https://crowdin.com/project/vpnon)。\n * [Hydro.network](https://github.com/CatchChat/Hydro.network) - [Hydro.network 的开发旅程](http://zhowkev.in/2015/03/09/hydro-network-de-kai-fa-lu-cheng/), [gitcafe](https://gitcafe.com/Catch/Hydro.network)。\n\n========\n#### 完整项目\n * [v2ex](https://github.com/singro/v2ex) - v2ex 的客户端，新闻、论坛。\n * [iBBS-Swift](https://github.com/iAugux/iBBS-Swift) - “新手开源一个用Swift（2.0）写的论坛客户端”。[BBS 服务端](http://obbs.sinaapp.com/)。 \n * [apps-ios-wikipedia](https://github.com/wikimedia/apps-ios-wikipedia) - apps-ios-wikipedia 客户端。 \n * [jetstream-ios](https://github.com/uber/jetstream-ios) - 一款 Uber 的 MVC 框架。它同时提供了多用户实时通讯支持，一旦启动 JetStream 后端服务，通过 WebSocket 协议可以分分钟建立多用户实时通讯应用。\n * [DeckRocket](https://github.com/jpsim/DeckRocket) - 在相同 WiFi 网络环境内，通过iPhone 控制并播放 Mac 中的 PDF 文档。\n * [ScanBook](https://github.com/JayFang1993/ScanBook) - 扫扫图书:可以扫描条形码查询图书，也可以关键字搜索，遇到合乎你口味的书，还可以看看别人的读书笔记，不同角度去体会。\n * [DesignerNewsApp](https://github.com/MengTo/DesignerNewsApp) - Swift 开发的 DesignerNews 客户端，看着美美的！\n * [KYWeibo](https://github.com/KittenYang/KYWeibo) - 调用新浪API自己写的第三方微博客户端。\n * [DouQu_IOS](https://github.com/li6185377/DouQu_IOS) - 逗趣IOS手机端（一款笑话软件）,拥有完整的功能的手机应用app 。\n * [IT江湖iOS客户端](https://github.com/itjhDev/itjh) - IT江湖iOS客户端。\n * [Eidolon](https://github.com/artsy/eidolon) - 艺术品拍卖的投标亭平台，用swift与反应式编程框架 ReactiveCocoa。\n * [CrazyPuzzle](https://github.com/nonstriater/CrazyPuzzle) - 模仿“看图猜成语”App，功能齐全，配有音效，效果很不错。游戏使用cocoa框架完成，没有使用cocos2d的框架。\n * [WhoCall](https://github.com/Tim9Liu9/WhoCall) - 谁CALL我，iOS来电信息语音提醒，无需越狱。（需要iOS 7.0及以上版本。)骚扰电话预警、来电归属地提醒、联系人姓名播报，这些有中国特色人性化的电话功能，iOS上也应该有。电话提醒、私有API。\n * [仿iOS猎豹垃圾清理(实现原理+源码)](http://www.devtf.cn/?p=562) -  仿iOS猎豹垃圾清理(实现原理+源码),用到私有API。\n * [DSLolita](https://github.com/sam408130/DSLolita) - 模仿新浪微博做的一款app，有发送博文，评论，点赞，私聊功能。\n * [STPhotoBrowser](https://github.com/STShenZhaoliang/STPhotoBrowser) - 高仿新浪微博的图片浏览器，极佳的编写方式，易扩展，低耦合。\n * [GSD_ZHIFUBAO](https://github.com/gsdios/GSD_ZHIFUBAO) - 支付宝高仿版。 \n * [Tropos](https://github.com/thoughtbot/Tropos) - Tropos, 由 thoughtbot 推出的一款用 Objective-C 写的开源天气类应用, 截至今天, thoughtbot 已在 GitHub 上贡献了 174 个开源项目, 实在令人敬佩。 \n * [SmileWeather](https://github.com/liu044100/SmileWeather) -开源天气类应用,天气图标很完整。  \n * [MVVMReactiveCocoa](https://github.com/leichunfeng/MVVMReactiveCocoa) - GitBucket 2.0 通过审核啦，她是我在公司实践了一年多 MVVM 和 RAC 的基础上，利用业余时间开发的第三方 GitHub 客户端，旨在能够对想实践 MVVM 和 RAC 的 iOS 开发者有所帮助。[AppStore地址](https://itunes.apple.com/cn/app/id961330940?mt=8)，欢迎下载使用GitBucket和收藏MVVMReactiveCocoa。 \n * [Tomate](https://github.com/dasdom/Tomate) - 这个圆盘式计时器让你更专注于工作或学习。P.S. App Store 上架收费应用（0.99 欧）。\n * [StoveFireiOSMenu](https://github.com/joeshang/StoveFireiOSMenu) - 炉火餐饮系统iPad点餐端。\n * [BaiduFM-Swift](https://github.com/belm/BaiduFM-Swift) - 百度FM, swift语言实现，基于最新xcode6.3+swift1.2,初步只是为了实现功能，代码比较粗燥，后面有时间会整理，支持Apple Watch。\n * [WNXHuntForCity](https://github.com/ZhongTaoTian/WNXHuntForCity) - iOS高仿城觅项目（开发思路和代码）。\n * [ZYChat](https://github.com/zyprosoft/ZYChat) - 关于聊天界面的可消息类型扩展，响应绑定设计。\n * [NiceAppDemo](https://github.com/minxiaoming/NiceAppDemo) - 仿最美应用-每日最美的钢琴律动效果。\n * [meituan](https://github.com/lookingstars/meituan) - 美团5.7iOS版（高仿），功能包括，团购首页，高德地图搜索附近美食并显示在地图上，上门服务，商家，友盟分享。\n * [MeituanDemo](https://github.com/zangqilong198812/MeituanDemo) - 造美团应用界面构建的 iOS 应用, 第一个是 @叶孤城___ 的 MeituanDemo。\n * [JFMeiTuan](https://github.com/tubie/JFMeiTuan) - 造美团应用界面构建的 iOS 应用, 第二个是 @tubiebutu 的 JFMeiTuan。\n * [chuanke](https://github.com/lookingstars/chuanke) - 高仿百度传课iOS版。 \n * [Tuan](https://github.com/aiqiuqiu/Tuan) - 模仿MJ老师iPad版美团（swift版），偶有bug 见谅。\n * [SXNews](https://github.com/dsxNiubility/SXNews) - 模仿网易新闻做的新闻软件，完成了主导航页，新闻详情页，图片浏览页，评论页。效果不错，比网上流传的各种和网易新闻UI架构有关的代码都要完整，都要好。\n * [Monkey](https://github.com/coderyi/Monkey) - Monkey for GitHub是一个GitHub开发者和仓库排名的开源App。这次主要增加了登录GitHub的功能，随手follow和star，并且增加发现模块，包括GitHub的trending，动态，showcases等。\n * [Uther](https://github.com/callmewhy/Uther) -  跟蠢萌的外星人聊天，还能帮你记事”。[itunes下载](https://itunes.apple.com/cn/app/uther/id1024104920) 。\n * [CocoaChinaPlus](https://github.com/zixun/CocoaChinaPlus) - CocoaChina+是一款开源的第三方CocoaChina移动端。整个App都用Swift2.0编写(除部分第三方OC代码外，比如JPush和友盟)。\n * [高仿斗鱼TV](http://code.cocoachina.com/view/128246) - 高仿斗鱼TV，点击头部滚动视图可以播放视频。\n * [LXZEALER](https://github.com/LonelyTown/LXZEALER) - 模仿着做了zealer客户端,App里几乎所有请求都是Post,所以内容都是固定的URL加载的,登录功能只做了微博的第三方登录。\n * [ShiXiSeng_ios](https://github.com/pengleelove/ShiXiSeng_ios) - 完整app的UI框架。\n * [Coding-iPad](https://github.com/Coding/Coding-iPad) - Coding-iPad 是@Coding的官方 iPad 客户端, 又是一个完整的开源应用。\n * [SimpleMemo](https://github.com/likumb/SimpleMemo) - 易便签已经转到Swift2.0，全面适配iOS9和Watch OS2，并支持iPhone6s和iPhone6sPlus的3D Touch功能，包括图标快捷键和内容预览。\n * [XXYAudioEngine.swift](https://github.com/xxycode/XXYAudioEngine) - 基于NSURLSession 和 AVAudoPlayer的在线音乐的工具，可以把音乐保存在本地，也可以支持后台播放，后台下载，最低支持iOS7，swift版本1.2。\n * [furni-ios.swift](https://github.com/twitterdev/furni-ios) - furni-ios.swift是由 Twitter 开发团队出品的一款用 Swift 写的 iOS 家居商城应用, 其主要目的在于让开发者从这款 Demo 应用中看出 Fabric 的强大。\n * [SelectionOfZhihu.swift](https://github.com/sheepy1/SelectionOfZhihu) - 『看知乎』iOS 客户端, [项目说明](http://www.jianshu.com/p/2c3a0f109788)。\n * [WFZhiHu](https://github.com/TigerWf/WFZhiHu) - WFZhiHu仿知乎日报客户端app。\n * [Yep.swift](https://github.com/CatchChat/Yep) - Yep 一个由天才开发给天才们使用的社交软件。\n * [LoveFreshBeen.swift](https://github.com/ZhongTaoTian/LoveFreshBeen) - 高仿爱鲜蜂 - Swift2.0\n * [trySwiftApp.swift](https://github.com/ZhongTaoTian/LoveFreshBeen) - trySwiftApp一款较为完整的会议原型应用。有需求的同学可以做为开发参考。\n * [PinGo.swift](https://github.com/gaowanli/PinGo) - PinGo.swift：纯Swift编写的仿“随遇”App。\n * [UmbrellaWeather.swift](https://github.com/ZeroJian/UmbrellaWeather) - UmbrellaWeather.swift使用 Swift 编写的一款天气应用,现已上架 AppStore。\n * [Phonetic.swift](https://github.com/iAugux/Phonetic) - Phonetic一个 iOS 版的 Phonetic Contacts，功能很多，其中昵称功能非常实用，已在 GitHub 开源并上架 App Store。\n\n========\n#### 好的文章\n * [自定义转场动画](http://www.jianshu.com/p/38cd35968864) - 3 种方法～ 关于自定义转场动画。\n * [iOS提高效率的方法和工具](https://github.com/icepy/_posts/blob/master/iOS%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E5%B7%A5%E5%85%B7.md) - iOS提高效率的方法和工具。 \n * [用 JSON 构建 API 的标准指南](http://jsonapi.org.cn/) - 用 JSON 构建 API 的标准指南。\n * [RxSwift入坑手册](http://blog.callmewhy.com/2015/09/21/rxswift-getting-started-0/) - RxSwift入坑手册。\n\n========\n#### Xcode插件\n * [iOS开发进阶，从Xcode开始](http://www.cocoachina.com/special/xcode/) - 学习使用Xcode构建出色的应用程序！\n * 在Xcode启动的时候，Xcode将会寻找位于~/Library/Application Support/Developer/Shared/Xcode/Plug-ins文件夹中的后缀名为.xcplugin的bundle作为插件进行加载（运行其中的可执行文件）。[Xcode5 Plugins 开发简介](http://studentdeng.github.io/blog/2014/02/21/xcode-plugin-fun/)  [写个自己的Xcode4插件](http://joeyio.com/ios/2013/07/25/write_xcode4_plugin_of_your_own/)\n\n * [Xcode 4 插件制作入门](http://www.onevcat.com/2013/02/xcode-plugin/) - Xcode 4 插件制作入门:Xcode所使用的所有库都包含在Xcode.app/Contents/的Frameworks，SharedFrameworks和OtherFrameworks三个文件夹下。其中和Xcode关系最为直接以及最为重要的是Frameworks中的IDEKit和IDEFoundation，以及SharedFrameworks中的DVTKit和DVTFoundation四个。\n \n * [RTImageAssets](https://github.com/rickytan/RTImageAssets) - 一个 Xcode 插件，用来生成 @3x 的图片资源对应的 @2x 和 @1x 版本。[Asset Catalog Creator](https://itunes.apple.com/app/asset-catalog-creator-free/id866571115?mt=12) 功能强大，能自动生成全部尺寸：包括App Icons、Image Sets、Launch Screens Generator。\n\n * [VVDocumenter-Xcode](https://github.com/onevcat/VVDocumenter-Xcode) - 一个Xcode插件，build后，随手打开一个你之前的项目，然后在任意一个方法上面连按三下\"/\"键盘，就ok了。\n * [Reveal-Plugin-for-XCode](https://github.com/shjborage/Reveal-Plugin-for-XCode) - 一个Reveal插件，可以使工程不作任何修改的情况下使用Reveal，该插件已在Alcatraz上架。[Reveal：分析iOS UI的利器](http://security.ios-wiki.com/issue-3-4/) 。\n\n * [java2Objective-c](https://github.com/google/j2objc) - Google公司出得java转Obje-C转换工具，转换逻辑，不转换UI。\n\n * [RegX](https://github.com/kzaher/RegX) - 专治代码强迫症的 Xcode 插件，使用 Swift 和 Objective-C 编写。其用竖向对齐特定源代码的元素，使得代码更易读和易理解。[说明](http://www.cocoachina.com/ios/20141224/10743.html) ； 菜单：xcode——》Edit-》Regx 。\n\n * [KSImageNamed](https://github.com/ksuther/KSImageNamed-Xcode) - 自动完成，特别是如果你正在写Objective-C，如果Xcode能自动完成文件名难道不会很伟大吗？比如图像文件的名称。\n\n * [FuzzyAutocomplete](https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin) - Xcode的实现自动完成还不完美，此插件能给出你所期望或想要的建议，设置：xcode-》Editor-》FuzzyAutocomplete-》plugin settings。\n\n * [GitDiff](https://github.com/johnno1962/GitDiff) - Xcode的代码编辑器的一个微妙的补强，加上了足够的可见信息以了解上次git提交以来发生了什么变化，设置：xcode-》Edit-》GitDiff。\n\n * [XToDo](https://github.com/trawor/XToDo) - 这个插件不仅凸显TODO，FIXME，???，以及！！！注释，也在便利列表呈现他们。 菜单：xcode-》view-》snippets;   调出列表显示: xcode-》view-》ToDo List ： ctrl + T 。 \n\n * [Backlight](https://github.com/limejelly/Backlight-for-XCode) - 突出显示当前正在编辑的行。菜单：xcode-》view-》Backlight 。\n\n * [CocoaPods](https://github.com/kattrali/cocoapods-xcode-plugin) - 该CocoaPods的插件增加了一个CocoaPods菜单到Xcode的产品菜单。如果你不喜欢命令行，那么你一定会喜欢这个插件。 [用CocoaPods做iOS程序的依赖管理 ]( \nhttp://tangqiaoboy.gitcafe.io/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/)。\n\n * [Peckham](https://github.com/markohlebar/Peckham) - 添加import语句比较麻烦，此插件 按Command-Control-P，给出的选项列表中选择要的头文件。先要安装[Alcatraz](http://alcatraz.io/) ,在终端输入： **curl -fsSL https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh | sh** ； 重启xcode-》window-》Package Manager：搜索 **Peckham** 安装，打开Peckham.xcodeproj，编译 Peckham target，重启Xcode 。\n\n * [Auto-Importer](https://github.com/lucholaf/Auto-Importer-for-Xcode) - Auto-Importer是一个自动导入类对应的头文件的Xcode插件。\n\n * [Alcatraz](http://alcatraz.io/) -使用Alcatraz来管理Xcode插件 [使用说明](http://tangqiaoboy.gitcafe.io/blog/2014/03/05/use-alcatraz-to-manage-xcode-plugins/) 。\n\n * [KSHObjcUML](https://github.com/kimsungwhee/KSHObjcUML) -KSHObjcUML 是一个 Objective-C 类引用关系图的 Xcode 插件。 \n\n * [ColorSense-for-Xcode](https://github.com/omz/ColorSense-for-Xcode) - 颜色插件，安装之后，就不用根据RGB选择颜色，直接从取色板中取颜色，会自动补齐RGB代码。\n\n * [10款提高iOS开发效率的XCode插件](http://www.imooc.com/wenda/detail/237132) - 10款提高iOS开发效率的XCode插件：1. XcodeColors；5. ACCodeSnippetRepository；10. Dash for Xcode。 \n\n * [ZLGotoSandboxPlugin](https://github.com/MakeZL/ZLGotoSandboxPlugin) - 支持Xcode快捷键了跳转当前应用沙盒了！快捷键是 Shift+Common+w。 \n\n * [XcodeSwiftSnippets](https://github.com/burczyk/XcodeSwiftSnippets) - XcodeSwiftSnippets, 提供了很多可在 Xcode 上使用的 Swift 代码片段, 通过自动补全的方式极大的提高了开发效率， [另外还有 Objective-C 版的](https://github.com/Xcode-Snippets/Objective-C)。 \n\n * [CoPilot](https://vimeo.com/128713880) - 通过此插件， Xcode 可以协同编程了（采用 WebSocket 通讯）。如此强大的“黑工具”，不爱它能行吗。 \n * [ESJsonFormat-Xcode](https://github.com/EnjoySR/ESJsonFormat-Xcode) - 将Json格式化输出为模型的属性。\n * [SCXcodeMiniMap](https://github.com/stefanceriu/SCXcodeMiniMap) - Xcode迷你小地图-SCXcodeMiniMap。\n * [xTransCodelation](http://code.cocoachina.com/detail/316095/xTransCodelation/) - XCODE中英文翻译插件，提供API查询模式和网页模式，都是利用的百度翻译。另外集成了一个可以一键关闭其他所有APP的实用功能，方便开发者！\n * [SuggestedColors](https://github.com/jwaitzel/SuggestedColors/) - Xcode 插件SuggestedColors，用于 IB颜色设置 辅助插件，非常好用。\n * [Colors](https://github.com/paulot/Colorsp) - 打印彩色字符串，可以修改 Swift 中终端输出的字符串颜色，有趣的小工具。\n\n========\n#### 美工资源\n * [TWG_Retina_Icons](https://github.com/markohlebar/Peckham) - 一套支持 Retina 高清屏的 iPhone 免费图标集。\n * [ASCIImage](https://github.com/cparnot/ASCIImage) - 使用 NSString 创建 image，[说明](http://cocoamine.net/blog/2015/03/20/replacing-photoshop-with-nsstring/)。\n * [my-sketch-colors](https://github.com/RayPS/my-sketch-colors) - 配色。\n * [Font Awesome](http://www.imooc.com/wenda/detail/250367) - Font Awesome：一套绝佳的图标字体库和CSS框架，详细的安装方法请参考[官方网站](http://fortawesome.github.io/Font-Awesome/icons/)[中文网站](http://fontawesome.dashgame.com/),[GitHub地址](https://github.com/FortAwesome/Font-Awesome) 。\n * [DynamicColor](https://github.com/yannickl/DynamicColor) - 强大的颜色操作扩展类。通过该类，你可以通过扩展方法基于某个颜色得到不同深浅、饱和度、灰度、色相，以及反转后的新颜色。是不可多得的好类库。\n * [Chameleon](https://github.com/ViccAlexander/Chameleon) - Chameleon是一个iOS的色彩框架。它运用现代化flat color将UIColor扩展地非常美观。我们还可以通过它运用自定义颜色创建调色板。它还有很多功用，请浏览readme。\n * [FontBlaster](https://github.com/ArtSabintsev/FontBlaster) - 载入定制字体时更简单。\n\n#### 其他资源\n * [githuber](http://githuber.info/#/index) - 最好用的GitHub人才搜索工具。   \n * [codatlas](https://www.codatlas.com) - 源代码搜索利器。\n * [searchcode](https://searchcode.com/) - 源代码搜索利器：来自悉尼的代码搜索引擎汇聚了 Github, Bitbucket, Sourceforge...等多家开源站点超20万个项目、180亿行源代码，能以特殊字符、语言、仓库和源方式从90多种语言找到函数、API的真实代码。\n * [kitematic](https://github.com/kitematic/kitematic) - Mac 上使用 Docker 最简单的方案。 \n\n\n\n========\n#### 开发资源\n##### 开发资料\n * [豆瓣iOS开源库列表](http://www.douban.com/note/276160185/?type=like) - 豆瓣iOS开源库列表，很多开源项目。\n * [iOS-Core-Animation-Advanced-Techniques](https://github.com/AttackOnDobby/iOS-Core-Animation-Advanced-Techniques) - 中文版iOS 高级动画技术。 \n * [iOS开发的一些奇巧淫技1](http://www.jianshu.com/p/50b63a221f09) - TableView不显示没内容的Cell怎么办; 键盘事件：[IQKeyboardManager](https://github.com/hackiftekhar/IQKeyboardManager);  app不流畅:[KMCGeigerCounter](https://github.com/kconner/KMCGeigerCounter);  CoreData用起来好烦:[MagicalRecord](https://github.com/magicalpanda/MagicalRecord);  CollectionView实现悬停的header:[CSStickyHeaderFlowLayout](https://github.com/jamztang/CSStickyHeaderFlowLayout)。\n * [iOS开发的一些奇巧淫技2](http://www.jianshu.com/p/08f194e9904c) -  用一个pan手势来代替UISwipegesture的各个方向、拉伸图片、播放GIF、上拉刷新、把tableview里cell的小对勾的颜色改变、navigationbar弄成透明的而不是带模糊的效果、改变uitextfield placeholder的颜色和位置。\n * [cocoapods安装指南](http://code4app.com/article/cocoapods-install-usage) - cocoapods安装指南。\n * [RemoteControl](https://github.com/johnno1962/Remote) - Control your iPhone from inside Xcode for end-to-end testing 。\n * [MVVM 介绍](http://objccn.io/issue-13-1/) - 替换MVC的开发模式。\n * [第三方接口](http://apistore.baidu.com/astore/index) - 基本所有第三方接口都在这，再也不用那么麻烦去找了。\n\n* [提高iOS开发效率的方法和工具](http://yyny.me/ios/%E6%8F%90%E9%AB%98iOS%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E5%B7%A5%E5%85%B7/) - 提高iOS开发效率的方法和工具。\n* [禅与 Objective-C 编程艺术](https://github.com/oa414/objc-zen-book-cn) - 禅与 Objective-C 编程艺术 （Zen and the Art of the Objective-C Craftsmanship 中文翻译）。\n* [Objective-C编码规范：26个方面解决iOS开发问题](http://www.imooc.com/article/1216) - 【Objective-C编码规范：26个方面解决iOS开发问题：“我们制定Objective-C编码规范的原因是我们能够在我们的书，教程和初学者工具包的代码保持优雅和一致。”今天分享的规范来自raywenderlich.com团队成员共同完成的，希望对学习OC的朋友们有所指导和帮助。\n\n\n###### swift\n * [Swift中文指南](https://github.com/numbbbbb/the-swift-programming-language-in-chinese) - 中文版Apple官方Swift教程《The Swift Programming Language》，[老码版本](http://numbbbbb.gitbooks.io/-the-swift-programming-language-/content/)  [历史版本更新说明](http://numbbbbb.gitbooks.io/-the-swift-programming-language-/content/chapter1/03_revision_history.html)。 \n * [The Swift Programming Language 中文版](http://wiki.jikexueyuan.com/project/swift/) - The Swift Programming Language 中文版。 \n * [swifttoolbox](http://www.swifttoolbox.io/) -  swifttoolbox swift开发的开源库汇总。 \n * [SwiftGuide](https://github.com/ipader/SwiftGuide) -  这份指南汇集了Swift语言主流学习资源，并以开发者的视角整理编排-- 非常不错，值得推荐。\n * [Swift开源项目精选](https://github.com/ipader/SwiftGuide/blob/master/Featured.md) - Swift开源项目精选--推荐，每周都有更新。\n * [Awesome Swift](https://swift.zeef.com/robin.eggenkamp) - 一个收集了很多 Swift 开发资源的网站。\n * [Developing_iOS_8_Apps_With_Swift](https://github.com/x140yu/Developing_iOS_8_Apps_With_Swift) - Developing iOS 8 Apps with Swift 字幕简体中文翻译项目（斯坦福白胡子老头swift教学视频）。\n * [Swift-On-iOS](https://github.com/johnlui/Swift-On-iOS) - JohnLui 的 Swift On iOS 代码仓库。\n * [Perfect](https://github.com/PerfectlySoft/Perfect) - Perfect 致力于 Swift 服务端应用，从打造专业应用服务器开始。\n * [swift-http](https://github.com/huytd/swift-http) - Swift HTTP Server，又一个 Swift 服务器，最大的亮点是支持 Docker 部署。\n * [30DaysofSwift](https://github.com/allenwong/30DaysofSwiftp) - 30DaysofSwift 自学 iOS - [三十天三十个 Swift 项目](http://weibo.com/ttarticle/p/show?id=2309403942494873235448)。\n\n##### 他人开源总结\n * [awesome-osx](https://github.com/iCHAIT/awesome-osx) - Awesome OS X。\n * [code4app](http://www.code4app.com/) - 最多国人用的代码库。\n * [cocoachina](http://code.cocoachina.com/) - 国内最热门的iOS社区的代码库。\n * [awesome-ios](https://github.com/vsouza/awesome-ios) - 一个老外整理的，[中文版](http://app.memect.com/doc/ios.html)。\n * [awesome-ios-ui](https://github.com/cjwirth/awesome-ios-ui) - 收集了不少 iOS UI/UX 库, 包含了很多酷炫的动画效果。\n * [ios-cosmos](http://ios-cosmos.com/) - The iOS Cosmos：收录了IOS绝大部分的开源框架和工具。\n * [Awesome Haskell资料大全](https://haskell.zeef.com/konstantin.skipor#block_28362_basics) -    Awesome Haskell 资料大全：框架，库和软件。\n * [Cosmos](http://ios-cosmos.com) - The iOS Cosmos：收录了IOS绝大部分的开源框架和工具。\n * [cocoacontrols](http://cocoacontrols.com) -  收集了很多UI控件效果代码，缺点是需要翻墙，而且代码分类不够好。\n * [lexrus](https://github.com/lexrus) -  lexrus国内出名的iOS开源coder，非常酷的label动画、textfield动画。\n * [open-source-ios-apps](https://github.com/dkhamsing/open-source-ios-apps) - iOS App集合，分：swift与Objective-C--国外人整理。 \n\n * [适合iOS开发者的15大网站推荐](http://www.csdn.net/article/2015-03-04/2824108-ios-developers-sites) -  适合 iOS 开发者的 15 大网站推荐 --- 英文网站。\n\n * [Objective-C GitHub 排名前 100 项目简介](https://github.com/Aufree/trip-to-iOS/blob/master/Top-100.md) -  主要对当前 GitHub 排名前 100 的项目做一个简单的简介, 方便初学者快速了解到当前 Objective-C 在 GitHub 的情况。 \n\n * [Github-iOS备忘](http://github.ibireme.com/github/list/ios/) -整理了比较常用的iOS第三方组件，以及github上的统计。\n * [超全！整理常用的iOS第三方资源](http://www.cocoachina.com/ios/20160121/14988.html) - 超全！整理常用的iOS第三方资源。\n * [MyGithubMark](https://github.com/JanzTam/MyGithubMark) - Github上的iOS资料-个人记录（持续更新）。\n\n\n##### 开发博客列表\n * [唐巧整理](https://github.com/tangqiaoboy/iOSBlogCN) - 猿题库唐巧整理。\n * [11个超棒的iOS开发学习国外网站](http://www.cocoachina.com/ios/20150626/11348.html) - 11个超棒的iOS开发学习网站:[objc.io](https://www.objc.io) ;[subjc.com](http://subjc.com) ;[NSHipster](http://nshipster.com) ;[Peter Steinberger](http://petersteinberger.com) ;[Ole Begemann](http://oleb.net) ;[Florian Kugler](http://floriankugler.com) ;[NSBlog](https://www.mikeash.com/pyblog/) ;[Cocoa](http://cocoa.tumblr.com) ;[iOS Dev Weekly](http://iosdevweekly.com) ;[iOS Developer Tips](http://iosdevelopertips.com) ;[iOS Goodies](http://ios-goodies.com) ;[AppCoda](http://www.appcoda.com) 香港人创建;[Krzysztof Zab?ocki](http://merowing.info) ;[iOS Development tips](http://iosdevtips.co) ;\n\n博客地址 | RSS地址\n----- | -----\n[南峰子的技术博客](http://southpeak.github.io/) | 南峰子的技术博客。\n[唐巧的技术博客](http://blog.devtang.com) | <http://blog.devtang.com/atom.xml>\n[OneV's Den](http://onevcat.com) | <http://onevcat.com/atom.xml>\n[objc 中国](http://objccn.io/) | 为中国 Objective-C 社区带来最佳实践和先进技术。\n[破船之家](http://beyondvincent.com) | <http://beyondvincent.com/atom.xml>\n[NSHipster](http://nshipster.cn) | <http://nshipster.cn/feed.xml>\n[Limboy 无网不剩](http://blog.leezhong.com/) | <http://feeds.feedburner.com/lzyy>\n[Lex iOS notes](http://ios.lextang.com) | <http://ios.lextang.com/rss>\n[念茜的博客](http://nianxi.net) | <http://nianxi.net/feed.xml>\n[Xcode Dev](http://blog.xcodev.com) | <http://blog.xcodev.com/atom.xml>\n[Ted's Homepage](http://wufawei.com/)| <http://wufawei.com/feed>\n[txx's blog](http://blog.t-xx.me) | <http://blog.t-xx.me/atom.xml>\n[KEVIN BLOG](http://imkevin.me) | <http://imkevin.me/rss>\n[阿毛的蛋疼地](http://www.xiangwangfeng.com) | <http://www.xiangwangfeng.com/atom.xml>\n[亚庆的 Blog](http://billwang1990.github.io) | <http://billwang1990.github.io/atom.xml>\n[Nonomori](http://nonomori.farbox.com) | <http://nonomori.farbox.com/feed>\n[言无不尽](http://tang3w.com) | <http://tang3w.com/atom.xml>\n[Wonderffee's Blog](http://wonderffee.github.io) | <http://wonderffee.github.io/atom.xml>\n[I'm TualatriX](http://imtx.me) | <http://imtx.me/feed/latest/>\n[vclwei](http://vclwei.com) | <http://vclwei.com/posts.rss>\n[Cocoabit](http://blog.cocoabit.com) | <http://blog.cocoabit.com/atom.xml>\n[nixzhu on scriptogr.am](http://nixzhu.me) | <http://nixzhu.me/feed>\n[不会开机的男孩](http://studentdeng.github.io) | <http://studentdeng.github.io/atom.xml>\n[Nico](http://www.taofengping.com) | <http://www.taofengping.com/rss.xml>\n[阿峰的技术窝窝](http://hufeng825.github.io) | <http://hufeng825.github.io/atom.xml>\n[answer_huang](http://answerhuang.duapp.com) | <http://answerhuang.duapp.com/index.php/feed/>\n[webfrogs](http://webfrogs.me) | <http://webfrogs.me/feed/>\n[代码手工艺人](http://joeyio.com) | <http://joeyio.com/atom.xml>\n[Lancy's Blog](http://gracelancy.com) | <http://gracelancy.com/atom.xml>\n[I'm Allen](http://www.imallen.com) | <http://www.imallen.com/atom.xml>\n[Travis' Blog](http://imi.im/)| <http://imi.im/feed>\n[王中周的技术博客](http://wangzz.github.io/) |<http://wangzz.github.io/atom.xml>\n[会写代码的猪](http://jiajun.org/)|<http://gaosboy.com/feed/atom/>\n[克伟的博客](http://wangkewei.cnblogs.com/)|<http://feed.cnblogs.com/blog/u/23857/rss>\n[摇滚诗人](http://cnblogs.com/biosli)|<http://feed.cnblogs.com/blog/u/35410/rss>\n[Luke's Homepage](http://geeklu.com/) | <http://geeklu.com/feed/>\n[萧宸宇](http://iiiyu.com/) | <http://iiiyu.com/atom.xml>\n[Yuan博客](http://www.heyuan110.com/) | <http://www.heyuan110.com/?feed=rss2>\n[Shining IO](http://shiningio.com/) | <http://shiningio.com/atom.xml>\n[YIFEIYANG--易飞扬的博客](http://www.yifeiyang.net/) | <http://www.yifeiyang.net/feed>\n[KooFrank's Blog](http://koofrank.com/) | <http://koofrank.com/rss>\n[hello it works](http://helloitworks.com) | <http://helloitworks.com/feed>\n[码农人生](http://msching.github.io/) | <http://msching.github.io/atom.xml>\n[玉令天下的Blog](http://yulingtianxia.com) | <http://yulingtianxia.com/atom.xml>\n[不掏蜂窝的熊](http://www.hotobear.com/) | <http://www.hotobear.com/?feed=rss2>\n[猫·仁波切](https://andelf.github.io/) | <https://andelf.github.io/atom.xml>\n[煲仔饭](http://ivoryxiong.org/) | <http://ivoryxiong.org/feed.xml>\n[里脊串的开发随笔](http://adad184.com) | <http://adad184.com/atom.xml>\n[ibireme伽蓝之堂](http://blog.ibireme.com/) | <http://blog.ibireme.com/feed/>\n\n#### 物联网\n * [awesome-iot](https://github.com/phodal/awesome-iot) - 这份物联网学习参考大全太给力。从物联网协议、嵌入式系统、相关开源库、相关书籍、博客、学习笔记、标准应有尽有。\n","slug":"2016-7月-别人总结的开源项目和库","published":1,"updated":"2016-07-25T07:22:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeb5g9qc001urb0uf9mg66yj","content":"<h1 id=\"吃水不忘挖井人原文地址\"><a href=\"#吃水不忘挖井人原文地址\" class=\"headerlink\" title=\"吃水不忘挖井人原文地址\"></a>吃水不忘挖井人<a href=\"https://github.com/Tim9Liu9/TimLiu-iOS#%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0\" target=\"_blank\" rel=\"noopener\">原文地址</a></h1><blockquote>\n<h1 id=\"想那些辛勤的收集者表示感谢！\"><a href=\"#想那些辛勤的收集者表示感谢！\" class=\"headerlink\" title=\"想那些辛勤的收集者表示感谢！\"></a>想那些辛勤的收集者表示感谢！</h1><p>自己总结的iOS、mac开源项目及库，持续更新。。。。<br>github排名 <a href=\"https://github.com/trending\" target=\"_blank\" rel=\"noopener\">https://github.com/trending</a>,github搜索：<a href=\"https://github.com/search\" target=\"_blank\" rel=\"noopener\">https://github.com/search</a></p>\n</blockquote>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><a href=\"#UI\">UI</a><ul>\n<li><a href=\"#下拉刷新\">下拉刷新</a></li>\n<li><a href=\"#模糊效果\">模糊效果</a></li>\n<li><a href=\"#AutoLayout\">AutoLayout</a></li>\n<li><a href=\"#富文本\">富文本</a></li>\n<li><a href=\"#图表\">图表</a></li>\n<li><a href=\"#表相关与Tabbar\">表相关与Tabbar</a> </li>\n<li><a href=\"#隐藏与显示\">隐藏与显示</a></li>\n<li><a href=\"#HUD与Toast\">HUD与Toast</a></li>\n<li><a href=\"#对话框\">对话框</a></li>\n<li><a href=\"#其他UI\">其他UI</a></li>\n</ul>\n</li>\n<li><a href=\"#动画\">动画</a><ul>\n<li><a href=\"#侧滑与右滑返回手势\">侧滑与右滑返回手势</a></li>\n<li><a href=\"#gif动画\">gif动画</a></li>\n<li><a href=\"#其他动画\">其他动画</a></li>\n</ul>\n</li>\n<li><a href=\"#网络相关\">网络相关</a><ul>\n<li><a href=\"#网络连接\">网络连接</a></li>\n<li><a href=\"#图像获取\">图像获取</a></li>\n<li><a href=\"#网络聊天\">网络聊天</a></li>\n<li><a href=\"#网络测试\">网络测试</a></li>\n<li><a href=\"#WebView\">WebView</a></li>\n</ul>\n</li>\n<li><a href=\"#Model\">Model</a></li>\n<li><a href=\"#通讯录\">通讯录</a></li>\n<li><a href=\"#其他\">其他</a></li>\n<li><a href=\"#数据库\">数据库</a></li>\n<li><a href=\"#缓存处理\">缓存处理</a></li>\n<li><a href=\"#PDF\">PDF</a></li>\n<li><a href=\"#图像浏览及处理\">图像浏览及处理</a></li>\n<li><a href=\"#摄像照相视频音频处理\">摄像照相视频音频处理</a></li>\n<li><a href=\"#响应式框架\">响应式框架</a></li>\n<li><a href=\"#消息相关\">消息相关</a><ul>\n<li><a href=\"#消息推送客户端\">消息推送客户端</a></li>\n<li><a href=\"#消息推送服务器端\">消息推送服务器端</a></li>\n<li><a href=\"#通知相关\">通知相关</a></li>\n</ul>\n</li>\n<li><a href=\"#版本新API的Demo\">版本新API的Demo</a></li>\n<li><a href=\"#代码安全与密码\">代码安全与密码</a></li>\n<li><a href=\"#测试及调试\">测试及调试</a></li>\n<li><a href=\"#AppleWatch\">AppleWatch</a></li>\n<li><a href=\"#完整项目\">完整项目</a></li>\n<li><a href=\"#好的文章\">好的文章</a></li>\n<li><a href=\"#VPN\">VPN</a></li>\n<li><a href=\"#Xcode插件\">Xcode插件</a></li>\n<li><a href=\"#美工资源\">美工资源</a></li>\n<li><a href=\"#开发资源\">开发资源</a><ul>\n<li><a href=\"#开发资料\">开发资料</a></li>\n<li><a href=\"#swift\">swift</a></li>\n<li><a href=\"#他人开源总结\">他人开源总结</a></li>\n<li><a href=\"#开发博客列表\">开发博客列表</a></li>\n</ul>\n</li>\n</ul>\n<p>========</p>\n<a id=\"more\"></a>\n<h3 id=\"具体内容\"><a href=\"#具体内容\" class=\"headerlink\" title=\"具体内容\"></a>具体内容</h3><h4 id=\"UI\"><a href=\"#UI\" class=\"headerlink\" title=\"UI\"></a>UI</h4><h5 id=\"下拉刷新\"><a href=\"#下拉刷新\" class=\"headerlink\" title=\"下拉刷新\"></a>下拉刷新</h5><ul>\n<li><a href=\"https://github.com/enormego/EGOTableViewPullRefresh\" target=\"_blank\" rel=\"noopener\">EGOTableViewPullRefresh</a> - 最早的下拉刷新控件。</li>\n<li><a href=\"https://github.com/samvermette/SVPullToRefresh\" target=\"_blank\" rel=\"noopener\">SVPullToRefresh</a> - 下拉刷新控件。 </li>\n<li><a href=\"https://github.com/CoderMJLee/MJRefresh\" target=\"_blank\" rel=\"noopener\">MJRefresh</a> - 仅需一行代码就可以为UITableView或者CollectionView加上下拉刷新或者上拉刷新功能。可以自定义上下拉刷新的文字说明。具体使用看“使用方法”。 （国人写）</li>\n<li><a href=\"https://github.com/xhzengAIB/XHRefreshControl\" target=\"_blank\" rel=\"noopener\">XHRefreshControl</a> - XHRefreshControl 是一款高扩展性、低耦合度的下拉刷新、上提加载更多的组件。（国人写）</li>\n<li><a href=\"https://github.com/coolbeet/CBStoreHouseRefreshControl\" target=\"_blank\" rel=\"noopener\">CBStoreHouseRefreshControl</a> - 一个效果很酷炫的下拉刷新控件。</li>\n<li><a href=\"https://github.com/dasdom/BreakOutToRefresh\" target=\"_blank\" rel=\"noopener\">BreakOutToRefresh</a> - 一个下拉刷新打砖块的开源 Swift 库，能让用户在等待下拉刷新的时候边玩撞球游戏边等待。</li>\n<li><a href=\"https://github.com/KittenYang/KYJellyPullToRefresh\" target=\"_blank\" rel=\"noopener\">KYJellyPullToRefresh</a> - 实现弹性物理效果的下拉刷新，神奇的贝塞尔曲线，配合UIDynamic写的一个拟物的下拉刷新动画。</li>\n<li><a href=\"https://github.com/michaelhenry/MHYahooParallaxView\" target=\"_blank\" rel=\"noopener\">MHYahooParallaxView</a> - 类似于Yahoo Weather和News Digest首屏的视差滚动。 </li>\n<li><a href=\"https://github.com/gsdios/SDRefreshView\" target=\"_blank\" rel=\"noopener\">SDRefreshView</a> - 简单易用的上拉和下拉刷新（多版本细节适配）。</li>\n<li><a href=\"https://github.com/MakeZL/ZLSwiftRefresh\" target=\"_blank\" rel=\"noopener\">ZLSwiftRefresh</a> - swift下拉刷新/上拉加载更多，支持自定义动画，集成简单，兼容UITableView/CollectionView/ScrollView/WebView。</li>\n<li><a href=\"https://github.com/dasdom/BreakOutToRefresh\" target=\"_blank\" rel=\"noopener\">BreakOutToRefresh</a> - swift，上拉和下拉刷新。</li>\n<li><a href=\"https://github.com/andreamazz/GearRefreshControl\" target=\"_blank\" rel=\"noopener\">GearRefreshControl</a> -  swift，上拉和下拉刷新。</li>\n<li><a href=\"https://github.com/jcavar/refresher\" target=\"_blank\" rel=\"noopener\">refresher</a> -  swift，上拉和下拉刷新。</li>\n<li><a href=\"http://d.cocoachina.com/code/detail/237753\" target=\"_blank\" rel=\"noopener\">可展开/收缩的下拉菜单–SvpplyTable</a> -  一个可展开可收缩的下拉菜单，类似Svpply app。</li>\n<li><a href=\"https://github.com/Sephiroth87/ODRefreshControl\" target=\"_blank\" rel=\"noopener\">ODRefreshControl</a> - 原iOS6上的橡皮糖刷新样式，很有意思。现在也很多大的 App 在用，比如虾米音乐和 QQ 客户端。</li>\n<li><a href=\"https://github.com/Yalantis/PullToMakeSoup\" target=\"_blank\" rel=\"noopener\">PullToMakeSoup</a> - PullToMakeSoup, 自定义下拉刷新的动画效果：煮饭, Yalantis新作！</li>\n<li><a href=\"https://github.com/cyndibaby905/TwitterCover\" target=\"_blank\" rel=\"noopener\">TwitterCover</a> -  Twitter iOS客户端的下拉封面模糊效果。</li>\n<li><a href=\"https://github.com/MartinRGB/Replace-iOS\" target=\"_blank\" rel=\"noopener\">Replace-iOS</a> - Replace-iOS 让人眼前一亮的下拉刷新（iOS）。</li>\n<li><a href=\"https://github.com/KittenYang/Animations\" target=\"_blank\" rel=\"noopener\">Animations</a> - 封装了一下，使用的时候只要两行代码。一些动画的飞机稿，都是一些单独分离出来的用于测试的子动画，现在统一归类一下。</li>\n<li><a href=\"https://github.com/entotsu/PullToBounce\" target=\"_blank\" rel=\"noopener\">PullToBounce</a> - 下拉刷新的动画 for UIScrollView。</li>\n<li><a href=\"https://github.com/li6185377/WaterDropRefresh\" target=\"_blank\" rel=\"noopener\">WaterDropRefresh</a> - 仿Path 水滴的下拉刷新效果 还有视差滚动。</li>\n<li><a href=\"https://github.com/EnjoySR/ESRefreshControl\" target=\"_blank\" rel=\"noopener\">ESRefreshControl</a> - 仿新浪微博、百度外卖、网易新闻下拉刷新样式Demo（仅供参考）。</li>\n<li><a href=\"https://github.com/alienjun/WaveRefresh\" target=\"_blank\" rel=\"noopener\">WaveRefresh</a> - 下拉刷新水波纹动画。</li>\n<li><a href=\"https://github.com/gontovnik/DGElasticPullToRefresh\" target=\"_blank\" rel=\"noopener\">DGElasticPullToRefresh</a> - 是一款带有弹性效果的 iOS 下拉刷新组件。</li>\n<li><a href=\"https://github.com/wuwen1030/CALayerAnimationDemoh\" target=\"_blank\" rel=\"noopener\">CALayerAnimationDemoh</a> - 双向注水动画下拉刷新组件,使用CALayer的mask实现。</li>\n<li><a href=\"https://github.com/zangqilong198812/BanTangAnimation\" target=\"_blank\" rel=\"noopener\">BanTangAnimation</a> - 半塘下拉刷新的原理。简单来说是利用CGGlyph，字符图形转换成cgpath，然后绘制strokeEnd动画。把timeoffset和scrolloffset结合就行了。</li>\n</ul>\n<h5 id=\"模糊效果\"><a href=\"#模糊效果\" class=\"headerlink\" title=\"模糊效果\"></a>模糊效果</h5><ul>\n<li><a href=\"https://github.com/nicklockwood/FXBlurView\" target=\"_blank\" rel=\"noopener\">FXBlurView</a> - 是一个UIView子类，支持iOS5.0以上版本，支持静态、动态模糊效果，继承与UIView的模糊特效。</li>\n<li><a href=\"https://github.com/onevcat/VVBlurPresentation\" target=\"_blank\" rel=\"noopener\">VVBlurPresentation</a> -很简单易用的在原来viewconntroller基础上做模糊，然后present新的viewcontroller的。</li>\n<li><a href=\"https://github.com/pchernovolenko/UICustomActionSheet\" target=\"_blank\" rel=\"noopener\">UICustomActionSheet</a> - 通过模糊背景来着重强调与菜单相关的元素–对话框 里面已经收藏。</li>\n<li><a href=\"https://github.com/szk-atmosphere/SABlurImageView\" target=\"_blank\" rel=\"noopener\">SABlurImageView</a> - 支持渐变动画效果的图像模糊化类库。P.S. 与前几天推存类库 SAHistoryNavigationViewController 是同一位作者。</li>\n<li><a href=\"https://github.com/FlexMonkey/Blurable\" target=\"_blank\" rel=\"noopener\">Blurable.swift</a> - swift模糊组件。</li>\n</ul>\n<h5 id=\"AutoLayout\"><a href=\"#AutoLayout\" class=\"headerlink\" title=\"AutoLayout\"></a>AutoLayout</h5><ul>\n<li><a href=\"https://github.com/Masonry/Masonry\" target=\"_blank\" rel=\"noopener\">Masonry</a> - Masonry是一个轻量级的布局框架，拥有自己的描述语法，采用更优雅的链式语法封装自动布局，简洁明了并具有高可读性（ <a href=\"http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/\" target=\"_blank\" rel=\"noopener\">使用介绍1</a>  <a href=\"http://ios.jobbole.com/81483/\" target=\"_blank\" rel=\"noopener\">使用介绍2</a>），<a href=\"http://www.cocoachina.com/ios/20150702/12217.html\" target=\"_blank\" rel=\"noopener\">iOS自适应前段库-Masonry的使用</a>），<a href=\"http://www.jianshu.com/p/2ed5f7444900\" target=\"_blank\" rel=\"noopener\">Masonry、Classy、ClassyLiveLayout介绍</a>。<a href=\"https://github.com/lcddhr/DDMasonryTest\" target=\"_blank\" rel=\"noopener\">使用DEMO</a> 视图居中显示、子视图含边距、视图等距离摆放、计算ScrollView的contentsize。</li>\n<li><a href=\"https://github.com/cloudkite/Classy/\" target=\"_blank\" rel=\"noopener\">Classy</a> - Classy是一个能与UIKit无缝结合stylesheet(样式)系统。它借鉴CSS的思想，但引入新的语法和命名规则，<a href=\"http://classy.as/getting-started/\" target=\"_blank\" rel=\"noopener\">Classy官网</a>，<a href=\"http://www.jianshu.com/p/2ed5f7444900\" target=\"_blank\" rel=\"noopener\">Masonry、Classy、ClassyLiveLayout介绍</a>。</li>\n<li><a href=\"https://github.com/olegam/ClassyLiveLayout\" target=\"_blank\" rel=\"noopener\">ClassyLiveLayout</a> - ClassyLiveLayout通过结合Classy stylesheets与Masonry一起使用，能够在运行的模拟器中微调Auto Layout约束实时显示效果的工具，<a href=\"http://www.jianshu.com/p/2ed5f7444900\" target=\"_blank\" rel=\"noopener\">Masonry、Classy、ClassyLiveLayout介绍</a>。</li>\n<li><a href=\"https://github.com/Masonry/Snap\" target=\"_blank\" rel=\"noopener\">Snap</a> - Snap是Masonry Auto Layout DSL的Swift版本，是一款轻量级的布局框架，使用了更良好的语法封装了AutoLayout。Snap支持iOS和OS X。</li>\n<li><a href=\"https://github.com/SnapKit/SnapKit\" target=\"_blank\" rel=\"noopener\">SnapKit</a> - 就是“snap”， –swift 喜欢自动布局吗？当然喜欢！至少在storyboard中创建时会喜欢。 在代码中纯手工创建约束灰常痛苦，但幸运的是我们有了SnapKit，在board中用上它，你可以简单直观地编写约束了。</li>\n<li><a href=\"https://github.com/smileyborg/PureLayout\" target=\"_blank\" rel=\"noopener\">PureLayout</a> - PureLayout 是 iOS &amp; OS X Auto Layout 的终极 API——非常简单，又非常强大。PureLayout 通过一个全面的Auto Layout API 扩展了 UIView/NSView, NSArray 和 NSLayoutConstraint，仿照苹果自身的框架。</li>\n<li><a href=\"https://github.com/smileyborg/UIView-AutoLayout\" target=\"_blank\" rel=\"noopener\">UIView-AutoLayout</a> -<br>Deprecated in favor of PureLayout, which includes OS X support:<a href=\"https://github.com/smileyborg/PureLayout。\" target=\"_blank\" rel=\"noopener\">https://github.com/smileyborg/PureLayout。</a></li>\n<li><a href=\"https://github.com/robb/Cartography\" target=\"_blank\" rel=\"noopener\">Cartography</a> - Cartography 是用来声明 Swift 中的 Auto Layout，无需输入任何 stringly 就可设置自己 Auto Layout 的约束声明。</li>\n<li><a href=\"https://github.com/philcn/Auto-Layout-Showcase\" target=\"_blank\" rel=\"noopener\">Auto-Layout-Showcase</a> - swift,AutoLayout 进阶 Demo，宽高比约束、比例约束、不等约束、视差约束、低优先级约束等高级用法，无需写码即可进行复杂页面布局，Demo 还动态模拟了各屏幕下的效果。来自百度知道 iOS 小组的内部分享。</li>\n<li><a href=\"https://github.com/forkingdog/UIView-FDCollapsibleConstraints\" target=\"_blank\" rel=\"noopener\">UIView-FDCollapsibleConstraints</a> - 一个AutoLayout辅助工具，最优雅的方式解决自动布局中子View的动态显示和隐藏的问题。第二个Demo模拟了一个经典的FlowLayout，任意一个元素隐藏时，底下的元素需要自动“顶”上来，配合这个扩展，你可以在IB里连一连，选一选，不用一行代码就能搞定。</li>\n<li><a href=\"https://github.com/luodezhao/Autolayout_Demo\" target=\"_blank\" rel=\"noopener\">Autolayout_Demo</a> - 在项目中用自动布局实现的类似抽屉效果。</li>\n<li><a href=\"http://code.cocoachina.com/detail/320405/\" target=\"_blank\" rel=\"noopener\">当view隐藏的时候也隐藏其autolayout的NSLayoutAttribute</a> - 当view隐藏的时候也隐藏其autolayout的NSLayoutAttribute，从而不用大量的代码工作。</li>\n<li><a href=\"https://github.com/gsdios/SDAutoLayout\" target=\"_blank\" rel=\"noopener\">SDAutoLayout</a> - AutoLayout 一行代码搞定自动布局！支持Cell、Label和Tableview高度自适应，致力于做最简单易用的AutoLayout库。</li>\n<li><a href=\"https://github.com/mamaral/Neon\" target=\"_blank\" rel=\"noopener\">Neon.swift</a> - 功能强大的 UI 布局神器。</li>\n</ul>\n<h5 id=\"富文本\"><a href=\"#富文本\" class=\"headerlink\" title=\"富文本\"></a>富文本</h5><ul>\n<li><a href=\"https://github.com/honcheng/RTLabel\" target=\"_blank\" rel=\"noopener\">RTLabel</a> - RTLabel 基于UILabel类的拓展,能够支持Html标记的富文本显示，它是基于Core Text,因此也支持Core Text上的一些东西。32位，很久没有更新了。</li>\n<li><a href=\"https://github.com/bingxue314159/RTLabel\" target=\"_blank\" rel=\"noopener\">RTLabel</a> - 富文本，RTLabel支持64位。 </li>\n<li><a href=\"https://github.com/12207480/TYAttributedLabel\" target=\"_blank\" rel=\"noopener\">TYAttributedLabel</a> -  TYAttributedLabel。 简单易用的属性文本控件(无需了解CoreText)，支持富文本，图文混排显示，支持添加链接，image和UIView控件，支持自定义排版显示。</li>\n<li><a href=\"https://github.com/TinyQ/TQRichTextView\" target=\"_blank\" rel=\"noopener\">TQRichTextView</a> - 用于做富文本视图控件显示，用于即时通讯的表情显示，以及资源评论的富文本显示。</li>\n<li><a href=\"https://github.com/mattt/TTTAttributedLabel\" target=\"_blank\" rel=\"noopener\">TTTAttributedLabel</a> - 一个文字视图开源组件，是UILabel的替代元件，可以以简单的方式展现渲染的属性字符串。另外，还支持链接植入，不管是手动还是使用UIDataDetectorTypes自动把电话号码、事件、地址以及其他信息变成链接。<a href=\"http://blog.csdn.net/prevention/article/details/9998575\" target=\"_blank\" rel=\"noopener\">用TTTAttributedLabel创建变化丰富的UILabel</a> - 网易新闻iOS版使用。</li>\n<li><a href=\"https://github.com/molon/MLEmojiLabel\" target=\"_blank\" rel=\"noopener\">MLEmojiLabel</a> - 自动识别网址、号码、邮箱、@、#话题#和表情的label。可以自定义自己的表情识别正则，和对应的表情图像。(默认是识别微信的表情符号)，继承自TTTAttributedLabel，所以可以像label一样使用。label的特性全都有，使用起来更友好更方便。</li>\n<li><a href=\"https://github.com/nicklockwood/FXLabel\" target=\"_blank\" rel=\"noopener\">FXLabel</a> - FXLabel是一个功能强大使用简单的类库，通过提供一个子类改进了标准的UILabel组件，为字体增加了阴影、内阴影和渐变色等，可以被用在任何标准的UILabel中。FXLabel还提供了更多控件，可以对字体行距、字体间距等进行调整。</li>\n<li><a href=\"https://github.com/TigerWf/WFReader\" target=\"_blank\" rel=\"noopener\">WFReader</a> - 一款简单的coretext阅读器，支持文本选择、高亮以及字体大小选择等。</li>\n<li><a href=\"https://github.com/nigelgrange/WPAttributedMarkup\" target=\"_blank\" rel=\"noopener\">WPAttributedMarkup</a> - WPAttributedMarkup is a simple utility category that can be used to easily create an attributed string from text with markup tags and a style dictionary。</li>\n<li><a href=\"https://github.com/MoZhouqi/KMPlaceholderTextView\" target=\"_blank\" rel=\"noopener\">KMPlaceholderTextView</a> - 可显示多行 placeholder 的 textView，可以在IB里面设置 – swift。</li>\n<li><a href=\"https://github.com/mrchenhao/HHFlashSwitch\" target=\"_blank\" rel=\"noopener\">HHFlashSwitch</a> - 一个另类的UISwitch，选择后，背景水波扩散变色效果。 </li>\n<li><a href=\"https://github.com/zhangyu9050/UUColorSwitch\" target=\"_blank\" rel=\"noopener\">UUColorSwitch</a> - Switch 开关动画效果,当打开开关时，Switch可实现平滑渲染过渡到父视图的效果。</li>\n<li><a href=\"https://github.com/zekunyan/UITextViewDIYEmojiExample\" target=\"_blank\" rel=\"noopener\">UITextViewDIYEmojiExample</a> - <a href=\"http://tutuge.me/2015/03/07/UITextView%E7%BC%96%E8%BE%91%E6%97%B6%E6%8F%92%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E6%83%85-%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%BE%E6%96%87%E6%B7%B7%E7%BC%96/\" target=\"_blank\" rel=\"noopener\">UITextView编辑时插入自定义表情-简单的图文混编</a>。 </li>\n<li><a href=\"https://github.com/facebook/Shimmer\" target=\"_blank\" rel=\"noopener\">Shimmer</a> - BlingBling闪光效果，酷炫的Label的效果，可以用于加载等待提示。</li>\n<li><a href=\"https://github.com/nnhubbard/ZSSRichTextEditor\" target=\"_blank\" rel=\"noopener\">ZSSRichTextEditor</a> - 适用于iOS的富文本WYSIWYG编辑器，支持语法高亮和源码查看。ZSSRichTextEditor包含所有WYSIWYG标准的编辑器工具。</li>\n<li><a href=\"https://github.com/cjwirth/RichEditorView\" target=\"_blank\" rel=\"noopener\">RichEditorView</a> - swift，一套可定制富文本编辑器组件及示例。功能完整、代码简练、实现逻辑巧妙（编辑器核心与 WebView 结合，采用 HTML5 contentEditable 编辑模式，执行JS 配套命令 execCommand 实现富文本编辑功能）。</li>\n<li><a href=\"https://github.com/Cocoanetics/DTCoreText\" target=\"_blank\" rel=\"noopener\">DTCoreText</a> - 可以解析HTML与CSS最终用CoreText绘制出来，通常用于在一些需要显示富文本的场景下代替低性能的UIWebView。<a href=\"http://blog.cnbang.net/tech/2630/\" target=\"_blank\" rel=\"noopener\">DTCoreText源码解析</a>。</li>\n<li><a href=\"https://github.com/cloverstudio/CSGrowingTextView\" target=\"_blank\" rel=\"noopener\">CSGrowingTextView</a> - 用作即时通讯文本框和评论文本框使用，可以显示多行输入。 </li>\n<li><a href=\"https://github.com/indragiek/MarkdownTextView\" target=\"_blank\" rel=\"noopener\">MarkdownTextView</a> - 显示Markdown的TextView。 </li>\n<li><a href=\"http://d.cocoachina.com/code/detail/300299\" target=\"_blank\" rel=\"noopener\">高仿微信限定行数文字内容</a> - 采用Autolayout高仿微信纯文字限定行数。</li>\n<li><a href=\"https://github.com/lingochamp/FuriganaTextView\" target=\"_blank\" rel=\"noopener\">FuriganaTextView</a> - 实现复杂的日文韩文排版。</li>\n<li><a href=\"https://github.com/gmertk/ParkedTextField\" target=\"_blank\" rel=\"noopener\">ParkedTextField</a> - 带固定文本的输入组件。 </li>\n<li><a href=\"https://github.com/lexrus/LTMorphingLabel\" target=\"_blank\" rel=\"noopener\">LTMorphingLabel</a> - swift 能够实现文字变形动画效果的Label，用Swift写的一个能够实现文字变形动画效果的Label，很炫。</li>\n<li><a href=\"https://github.com/zyprosoft/GJCFCoreText\" target=\"_blank\" rel=\"noopener\">GJCFCoreText</a> - 图文混排。</li>\n<li><a href=\"https://github.com/KyoheiG3/AttributedLabel\" target=\"_blank\" rel=\"noopener\">AttributedLabel</a> - 显示性能数量级 UILabel 的 AttributedLabel。无畏无惧、挑战权威。</li>\n<li><a href=\"https://github.com/liufan321/FFLabel\" target=\"_blank\" rel=\"noopener\">FFLabel</a> - 自动检测 URLs, @username, #topic# 等关链词（提供响应扩展）。实用的标签文本小组件。</li>\n<li><a href=\"https://github.com/raulriera/TextFieldEffects\" target=\"_blank\" rel=\"noopener\">TextFieldEffects</a> - 标准的UITextField有些枯燥么？来认识一下TextFieldEffects吧！废话不多说，只要看几个例子,是啊，都是些简单的dropin控制器。甚至可以在storyboard中使用IBDesignables。</li>\n<li><a href=\"https://github.com/filipstefansson/AutocompleteField\" target=\"_blank\" rel=\"noopener\">AutocompleteField</a> - 可应用于 iOS 应用中文字输入框自动补全的场景, 兼容到 iOS 8。</li>\n<li><a href=\"https://github.com/yannickl/Splitflap\" target=\"_blank\" rel=\"noopener\">Splitflap.swift</a> - 可用于快速给 iOS 应用创建文字翻转的动画效果。</li>\n<li><a href=\"https://github.com/wordpress-mobile/WordPress-Editor-iOS\" target=\"_blank\" rel=\"noopener\">WordPress-Editor-iOS</a> - 一个文本编辑器 简书和新浪博客都在用。</li>\n<li><a href=\"https://github.com/ibireme/YYText\" target=\"_blank\" rel=\"noopener\">YYText</a> - 功能强大的 iOS 富文本框架。</li>\n<li><a href=\"http://code.cocoachina.com/view/129099\" target=\"_blank\" rel=\"noopener\">placeholder_TextView</a> - 带有placeholder的TextView：带有提示信息的textview，使用懒加载的思想，支持扩展、自定义，类似许多APP内部的意见反馈页面 。</li>\n</ul>\n<h5 id=\"图表\"><a href=\"#图表\" class=\"headerlink\" title=\"图表\"></a>图表</h5><ul>\n<li><a href=\"https://github.com/kevinzhow/PNChart\" target=\"_blank\" rel=\"noopener\">PNChart</a> - 国内开源作者，动态的图表。</li>\n<li><a href=\"https://github.com/zemirco/swift-linechart\" target=\"_blank\" rel=\"noopener\">swift-linechart</a> - 功能完整、实用的折线图组件。使用方便，参数配置简单。是不可多得的优质组件–swift。</li>\n<li><a href=\"https://github.com/danielgindi/ios-charts\" target=\"_blank\" rel=\"noopener\">ios-charts</a> - 一款优秀 Android 图表开源库 MPAndroidChart 的 Swift 语言实现版（支持 Objective-C 和 Swift 调用）。缺省提供的示例代码为 Objective-C。</li>\n<li><a href=\"https://github.com/xhacker/TEAChart\" target=\"_blank\" rel=\"noopener\">TEAChart</a> - xhacker/TEAChart 一个简洁的 iOS 图表库，支持柱状图、饼图以及日历等。</li>\n<li><a href=\"https://github.com/yasuoza/YOChartImageKit\" target=\"_blank\" rel=\"noopener\">YOChartImageKit</a> - 支持在watchOS上绘制图表，看它最近更新挺勤快的，可以关注一下。</li>\n<li><a href=\"https://github.com/kevinzhow/RealtimeGradientText\" target=\"_blank\" rel=\"noopener\">RealtimeGradientText</a> - Fun With CALayer Mask 刚好今天开源了一个有趣的项目 RealtimeGradientText，所以也好聊一下 CALayer 的 Mask，<a href=\"http://blog.zhowkev.in/2015/07/06/fun-with-mask/\" target=\"_blank\" rel=\"noopener\">说明</a>。</li>\n</ul>\n<h5 id=\"表相关与Tabbar\"><a href=\"#表相关与Tabbar\" class=\"headerlink\" title=\"表相关与Tabbar\"></a>表相关与Tabbar</h5><ul>\n<li><a href=\"https://github.com/onevcat/SWTableViewCell\" target=\"_blank\" rel=\"noopener\">SWTableViewCell</a> - 国内开源作者，带很多手势的表单元格。</li>\n<li><a href=\"https://github.com/alikaragoz/MCSwipeTableViewCell\" target=\"_blank\" rel=\"noopener\">MCSwipeTableViewCell</a> - 带很多手势的表单元格。</li>\n<li><a href=\"https://github.com/1000Memories/TMQuiltView\" target=\"_blank\" rel=\"noopener\">TMQuiltView</a> - 瀑布流。</li>\n<li><a href=\"https://github.com/lengmolehongyan/WaterfallFlowDemo\" target=\"_blank\" rel=\"noopener\">WaterfallFlowDemo</a> - 一个简单的UICollectionView瀑布流布局演示demo。</li>\n<li><a href=\"https://github.com/xmartlabs/XLForm\" target=\"_blank\" rel=\"noopener\">XLForm</a> - 很多表格类的table,写法更高冷一点，推荐使用。</li>\n<li><a href=\"https://github.com/xmartlabs/Eureka\" target=\"_blank\" rel=\"noopener\">Eureka.swift</a> - Eureka 是 XLForm 的 Swift 的移植版本, 一个可以帮助开发者们快速构建 iOS 各种复杂表单的库, 具有较高的可扩展性, 方便自定制样式。</li>\n<li><a href=\"https://github.com/romaonthego/RETableViewManager\" target=\"_blank\" rel=\"noopener\">RETableViewManager</a> - 可以十分方便地生成各种样式、各种功能的TableView。只要开发者能想到的列表效果或者功能，都可以利用这份代码迅速编写出来。比如，之前要实现一个填写各种资料的列表，可能需要很多代码，现在只需要几行代码就可以实现。 </li>\n<li><a href=\"https://github.com/TomThorpe/UIScrollSlidingPages\" target=\"_blank\" rel=\"noopener\">UIScrollSlidingPages</a> - 允许添加多视图控件，并且可以横向滚动。有点类似于Groupon app。</li>\n<li><a href=\"https://github.com/izyhuang/HBHorizontalTableView\" target=\"_blank\" rel=\"noopener\">HBHorizontalTableView</a> - swift，TableView 横向滚动小示例（仿照 AppStore 应用展示）。</li>\n<li><a href=\"https://github.com/mcelayir/HorizontalScrollCell\" target=\"_blank\" rel=\"noopener\">HorizontalScrollCell</a> - HorizontalScrollCell是一款使用方便的水平方向可滚动的单元格，适用于UICollectionView中实现水片方向滚动视图。 。</li>\n<li><a href=\"https://github.com/shiyuan17/SYJiugonggeTableView\" target=\"_blank\" rel=\"noopener\">SYJiugonggeTableView</a> - tableView封装的九宫格。</li>\n<li><a href=\"https://github.com/ZhipingYang/UUChatTableView\" target=\"_blank\" rel=\"noopener\">UUChatTableView</a> - UUChatTableView 气泡聊天界面，支持文本、图片以及音频的气泡聊天界面。<a href=\"http://www.cocoachina.com/ios/20150205/11116.html\" target=\"_blank\" rel=\"noopener\">源码推荐说明</a>。</li>\n<li><a href=\"https://github.com/acani/Chats\" target=\"_blank\" rel=\"noopener\">Chats</a> - 聊天 UI 示例程序。此项目应该只为演示或学习之用，没有服务器 – swift。 </li>\n<li><a href=\"https://github.com/layerhq/Atlas-iOS\" target=\"_blank\" rel=\"noopener\">Atlas-iOS</a> - 快速在iOS里集成聊天功能，类似开源版本的环信。Layer家开源了一套聊天app界面的解决方案.看起来很赞，很多蛮复杂的东西直接都帮封好了。不得不说现在做app开发真是很简单，大部分时间搭积木就可以了。<a href=\"https://atlas.layer.com/\" target=\"_blank\" rel=\"noopener\">官方网站</a>。</li>\n<li><a href=\"https://github.com/badoo/Chatto\" target=\"_blank\" rel=\"noopener\">Chatto.swift</a> - Chatto.swift:轻量级聊天应用框架及示例。文字及图片可扩展输入栏，汽泡效果等聊天核心特性，分页及自动布局完善。</li>\n<li><a href=\"https://github.com/agdsdl/DLSlideView\" target=\"_blank\" rel=\"noopener\">DLSlideView</a> - DLSlideView对常见的顶部Tab页点击、滑动分页做了封装。它使用基于ViewController的container特性（而不是scrollview）来管理各个子页面，以支持无限分页，<a href=\"http://www.cocoachina.com/ios/20150205/11116.html\" target=\"_blank\" rel=\"noopener\">源码推荐说明</a>。</li>\n<li><a href=\"https://github.com/pozi119/VOVCManager\" target=\"_blank\" rel=\"noopener\">VOVCManager</a> - 页面管理器:1.跳转指定页面,只需要知道viewController的Class名,如果有storyboard,则需要指定storyboard名；2.无需添加基类；3.支持URLScheme跳转指定页面。</li>\n<li><a href=\"https://github.com/Moblox/MBXPageViewController\" target=\"_blank\" rel=\"noopener\">MBXPageViewController</a> - 简洁快速的页面切换–MBXPageViewController，带有按钮控件的UIPageController，非常整洁、简单以及快速。该项目通过三种形式展示页面之间的切换，比如导航栏上的多个tab切换、页面左右两端箭头指示切换，以及使用分段控件。</li>\n<li><a href=\"https://github.com/ming1016/PagerTab\" target=\"_blank\" rel=\"noopener\">PagerTab</a> - UIScrollView实现滑动转换页面，类似网易云音乐iOS版的页面滑动切换效果。</li>\n<li><a href=\"https://github.com/guilhermearaujo/GUITabPagerViewController\" target=\"_blank\" rel=\"noopener\">GUITabPagerViewController</a> - 多个tab滑动切换。</li>\n<li><a href=\"https://github.com/pozi119/VOMetroLayoutDemo\" target=\"_blank\" rel=\"noopener\">VOMetroLayoutDemo</a> - Metro风格的UICollectionView, 目前只支持横向布局,仅在iPad上应用。</li>\n<li><a href=\"https://github.com/KittenYang/KYCellAnimation\" target=\"_blank\" rel=\"noopener\">KYCellAnimation</a> - 给UITableViewCell增加进入的动画。</li>\n<li><a href=\"https://github.com/knutigro/COBezierTableView\" target=\"_blank\" rel=\"noopener\">COBezierTableView</a> - swift，通过编辑 Bezier 曲线四点位置设置 TableView 内 Cell 及对应按扭位置。实验效果很赞。</li>\n<li><a href=\"https://github.com/robbdimitrov/RDVTabBarController\" target=\"_blank\" rel=\"noopener\">RDVTabBarController</a> - 一个TabBar组件，可以方便设置底部菜单的文字图片，点击效果，小红点提示等。</li>\n<li><a href=\"https://github.com/DeveloperLx/LxTabBarController\" target=\"_blank\" rel=\"noopener\">LxTabBarController</a> - 改变了原生tabbar切换tab时的生硬效果，并加入滑动切换手势（有和界面上的其它手势发生冲突的风险，可根据具体项目予以关闭），<a href=\"https://github.com/DeveloperLx/LxTabBarController-swift\" target=\"_blank\" rel=\"noopener\">swift版本</a>。</li>\n<li><a href=\"https://github.com/leichunfeng/WXTabBarController\" target=\"_blank\" rel=\"noopener\">WXTabBarController</a> - 在系统 UITabBarController 的基础上完美实现了安卓版微信 TabBar 的滑动切换功能，单手操作 iPhone 6 Plus 切换 TabBar 一直是一件很痛苦的事情，而滑动切换是一种不错的解决方案，支持屏幕旋转。</li>\n<li><a href=\"https://github.com/KittenYang/GooeyTabbar\" target=\"_blank\" rel=\"noopener\">GooeyTabbar</a> - 皮筋式弹性缩放工具栏示例及演示。</li>\n<li><a href=\"http://d.cocoachina.com/code/detail/298409\" target=\"_blank\" rel=\"noopener\">横向展示文本内容的自定义cell</a> - 可以横向展示文本内容的自定义cell，根据文本无限滚动。</li>\n<li><a href=\"https://github.com/forkingdog/UITableView-FDTemplateLayoutCell\" target=\"_blank\" rel=\"noopener\">UITableView-FDTemplateLayoutCell</a> - UITableView-FDTemplateLayoutCell 是一个方便缓存 UITableViewCell 的高度的框架。</li>\n<li><a href=\"https://github.com/jozsef-vesza/ExpandingStackCells\" target=\"_blank\" rel=\"noopener\">ExpandingStackCells</a> - 采用 UIStackView 实现表格单元格扩展内容显示示例及解决方案。</li>\n<li><a href=\"https://github.com/forkingdog/FDStackView\" target=\"_blank\" rel=\"noopener\">FDStackView</a> - 可以将 UIStackView 的最低支持版本拉低到 iOS6，无需配置，没有代码侵染，扔到工程里后直接用系统 UIStackView 的 API 即可，同时兼容 Storyboard。 </li>\n<li><a href=\"https://github.com/nghialv/Sapporo\" target=\"_blank\" rel=\"noopener\">Sapporo</a> - swift 单元格模型驱动的集合视图管理器组件。又一个超实用的“轮子”。</li>\n<li><a href=\"https://github.com/WeeTom/MDIHorizontalSectionTableViewController\" target=\"_blank\" rel=\"noopener\">MDIHorizontalSectionTableViewController</a> - 根据产品需求开源了一个交互项目，可以理解为横向Section的TableView，section和cell同时支持拖拽，后续安卓版本也会开源出来。</li>\n<li><a href=\"https://github.com/JazysYu/JZNavigationExtension\" target=\"_blank\" rel=\"noopener\">JZNavigationExtension</a> - 多功能导航控制器，可以透明返回栏。</li>\n<li><a href=\"https://github.com/okla/QuickRearrangeTableView\" target=\"_blank\" rel=\"noopener\">QuickRearrangeTableView</a> - 基于 UITableView 的快速重排功能扩展子类。通过长按选定单元格然后滚动移动到指定位置。</li>\n<li><a href=\"https://github.com/nshintio/uicollectionview-reordering\" target=\"_blank\" rel=\"noopener\">uicollectionview-reordering</a> - UICollectionViews的拖拽(拖动、移动)效果,<a href=\"http://nshint.io/blog/2015/07/16/uicollectionviews-now-have-easy-reordering/\" target=\"_blank\" rel=\"noopener\">实例教程</a>.</li>\n<li><a href=\"https://github.com/dzenbot/DZNEmptyDataSet\" target=\"_blank\" rel=\"noopener\">DZNEmptyDataSet</a> - DZNEmptyDataSet算是一个很标准的iOS内建方式，适合用来处理空的table view和collection view。会自动将collection view处理完善，并将用户消息以合适美观的方式显示出来。每个iOS项目都可以自动处理。</li>\n<li><a href=\"https://github.com/MortimerGoro/MGSwipeTableCell\" target=\"_blank\" rel=\"noopener\">MGSwipeTableCell</a> - 另一个常见于很多应用中的UI组件，苹果应该考虑在标准的iOS SDK中加入一些类似的内容。Swipeable表格cell是这个pod的最佳描述，也是最好的。</li>\n<li><a href=\"https://github.com/HebeTienCoder/XLPlainFlowLayout\" target=\"_blank\" rel=\"noopener\">XLPlainFlowLayout</a> - 可以让UICollectionView的header也支持悬停效果，类似于tableView的Plain风格。</li>\n<li><a href=\"https://github.com/wangmchn/WMPageController\" target=\"_blank\" rel=\"noopener\">WMPageController</a> - 一个方便的 pageContrller 的控件，里面还包括滚动视图。</li>\n<li><a href=\"https://github.com/steipete/PSTCollectionView\" target=\"_blank\" rel=\"noopener\">PSTCollectionView</a> - PSTCollectionView。</li>\n<li><a href=\"https://github.com/lianleven/LLRiseTabBar-iOS\" target=\"_blank\" rel=\"noopener\">LLRiseTabBar-iOS</a> - 直接使用系统的特性实现的tabbar，比较简单。</li>\n<li><a href=\"https://github.com/MartinRGB/MTMaterialDelete\" target=\"_blank\" rel=\"noopener\">MTMaterialDelete</a> - 非常有趣的Material Design动画，动画删除表里面的单元格。</li>\n<li><a href=\"https://github.com/gmertk/BusyNavigationBar\" target=\"_blank\" rel=\"noopener\">BusyNavigationBar</a> - 进度条式NavigationBar导航条。</li>\n<li><a href=\"https://github.com/cemolcay/ReorderableGridView-Swift\" target=\"_blank\" rel=\"noopener\">ReorderableGridView-Swift</a> - 拖拽排序卡片。</li>\n<li><a href=\"https://github.com/LiGoEX/LGSettingView\" target=\"_blank\" rel=\"noopener\">LGSettingView</a> - LGSettingView仅需三句代码即可快速集成设置界面，免去每次开发新应用都要重新布置设置界面的烦恼。</li>\n<li><a href=\"http://code.cocoachina.com/view/129212\" target=\"_blank\" rel=\"noopener\">微博cell自动布局</a> - 使用autoLayout对微博的cell进行自动布局，自适应cell的高度。</li>\n<li><a href=\"https://github.com/TyroneWing/TreeTableView\" target=\"_blank\" rel=\"noopener\">TreeTableView</a> - ZYTreeTableView：TreeView 模仿好友列表的实现方式。</li>\n</ul>\n<h5 id=\"隐藏与显示\"><a href=\"#隐藏与显示\" class=\"headerlink\" title=\"隐藏与显示\"></a>隐藏与显示</h5><ul>\n<li><a href=\"http://d.cocoachina.com/code/detail/286102\" target=\"_blank\" rel=\"noopener\">SlideTapBar</a> - 滚动栏菜单，向上滚动时隐藏tabbar，向下滚动马上显示tabbar。</li>\n<li><a href=\"https://github.com/Yalantis/FoldingTabBar.iOS\" target=\"_blank\" rel=\"noopener\">FoldingTabBar.iOS</a> - 可折叠Tab Bar和Tab Bar Controller。</li>\n<li><a href=\"https://github.com/ltebean/LTNavigationBar\" target=\"_blank\" rel=\"noopener\">LTNavigationBar</a> - LTNavigationBar为app导航栏添加动态着色效果，可自定义其背景色。Demo包含：1.变换背景色；2.滚动视图，导航栏和状态栏重叠。</li>\n<li><a href=\"https://github.com/bryankeller/BLKFlexibleHeightBar\" target=\"_blank\" rel=\"noopener\">BLKFlexibleHeightBar</a> - 固定Header的效果库，一个拥有非常灵活高度的标题栏，可以为使用软件的用户提供更多的阅读和滑动空间，现在已经被众多app所采用。</li>\n</ul>\n<h5 id=\"HUD与Toast\"><a href=\"#HUD与Toast\" class=\"headerlink\" title=\"HUD与Toast\"></a>HUD与Toast</h5><ul>\n<li><a href=\"https://github.com/jdg/MBProgressHUD\" target=\"_blank\" rel=\"noopener\">MBProgressHUD</a> - 最多人用的loading。</li>\n<li><a href=\"https://github.com/LvJianfeng/EBuyCommon\" target=\"_blank\" rel=\"noopener\">EBuyCommon</a> - 1.基于MBProgressHUD实现得图形加载提示方式，及其它标题方式提醒。2.弹窗。</li>\n<li><a href=\"https://github.com/TransitApp/SVProgressHUD\" target=\"_blank\" rel=\"noopener\">SVProgressHUD</a> - SVProgressHUD的loading，如果你需要定制化的等待提示器，这个就是了（也许是最好的）。</li>\n<li><a href=\"https://github.com/relatedcode/ProgressHUD\" target=\"_blank\" rel=\"noopener\">ProgressHUD</a> - ProgressHUD的loading，使用最简单。</li>\n<li><a href=\"https://github.com/mutualmobile/MMProgressHUD\" target=\"_blank\" rel=\"noopener\">MMProgressHUD</a> - 设置HUD出现和消失的方式（包括上下、左右、淡入淡出、放大缩小等等），设置HUD的内容（可以在HUD中加入帧动画、动态图片等等），设置HUD出现时的底部覆盖层颜色，等等。总而言之，这是一份集大成的HUD代码。慢慢看视频吧，囊括了所有效果。</li>\n<li><a href=\"https://github.com/devSC/WSProgressHUD\" target=\"_blank\" rel=\"noopener\">WSProgressHUD</a> - 一个小巧精致的HUD,支持添加到自定义View上, 还有更多小细节.。</li>\n</ul>\n<h5 id=\"对话框\"><a href=\"#对话框\" class=\"headerlink\" title=\"对话框\"></a>对话框</h5><ul>\n<li><a href=\"https://github.com/m1entus/WCAlertView\" target=\"_blank\" rel=\"noopener\">WCAlertView</a> - 自定义的对话框。</li>\n<li><a href=\"https://github.com/wimagguc/ios-custom-alertview\" target=\"_blank\" rel=\"noopener\">IOS7AlertView</a> - IOS7AlertView的对话框。</li>\n<li><a href=\"https://github.com/mtonio91/AMSmoothAlert\" target=\"_blank\" rel=\"noopener\">AMSmoothAlert</a> - 动画效果不错，最多star，但不支持arm64。</li>\n<li><a href=\"https://github.com/dinhquan/DQAlertView\" target=\"_blank\" rel=\"noopener\">DQAlertView</a> - 扁平化的样式不错。</li>\n<li><a href=\"https://github.com/mrchenhao/HHAlertView\" target=\"_blank\" rel=\"noopener\">HHAlertView</a> - 一个简易的alertview  有三种样式，有成功，失败，和警告三种样式，支持Delegate和block两种回调。</li>\n<li><a href=\"https://github.com/martinjuhasz/MJPopupViewController\" target=\"_blank\" rel=\"noopener\">MJPopupViewController</a> - 实现弹出视图的各种弹出和消失效果，包括淡入淡出（fade in，fade out），从屏幕上方飞进，下方飞出，从屏幕左方飞进，右方飞出等等效果，弹窗。</li>\n<li><a href=\"https://github.com/adad184/MMPopupView\" target=\"_blank\" rel=\"noopener\">MMPopupView</a> - 弹出框的基类组件（弹窗）。</li>\n<li><a href=\"https://github.com/fengchuanxiang/Menu\" target=\"_blank\" rel=\"noopener\">Menu</a> - 项目中可能会用到的常用菜单，以后有时间会继续补充，弹窗。 </li>\n<li><a href=\"https://github.com/teodorpatras/EasyTipView\" target=\"_blank\" rel=\"noopener\">EasyTipView</a> - 弹出提示框类及演示示例。同样地，API 简单、易用。好“轮子”，弹窗。  </li>\n<li><a href=\"https://github.com/kolyvan/kxmenu\" target=\"_blank\" rel=\"noopener\">kxmenu</a> - kxmenu弹出菜单，点击视图上任意位置的按钮，会弹出一个菜单，并且有个小箭头指向点击的按钮，类似气泡视图。弹出的菜单位置会根据按钮的位置来进行调整。 </li>\n<li><a href=\"https://github.com/questbeat/QBPopupMenu\" target=\"_blank\" rel=\"noopener\">QBPopupMenu</a> - QBPopupMenu弹出菜单，实现类似 UIMenuItem 的弹出菜单按钮。点击按钮，会弹出一个菜单，上面可以排列多个按钮。纯代码实现，不需要任何图片。</li>\n<li><a href=\"https://github.com/zhenlintie/STModalDemo\" target=\"_blank\" rel=\"noopener\">STModalDemo</a> - 弹出视图（通知，提示，选择，窗口）。</li>\n<li><a href=\"https://github.com/TaimurAyaz/TAOverlay\" target=\"_blank\" rel=\"noopener\">TAOverlay</a> - TAOverlay可通过叠加层展示有用的信息，可自定义文本和背景色，添加阴影和模糊效果，以及更改字体大小或者用自定义图片替换页面上的icon。</li>\n<li><a href=\"https://github.com/pchernovolenko/UICustomActionSheet\" target=\"_blank\" rel=\"noopener\">UICustomActionSheet</a> - 通过模糊背景来着重强调与菜单相关的元素–模糊效果 里面已经收藏。</li>\n<li><a href=\"http://code.cocoachina.com/detail/232178\" target=\"_blank\" rel=\"noopener\">ActionSheetPicker-3.0</a> - 该项目是此前热门项目ActionSheetPicker的新版本，快速复制了iOS 8上的下拉 UIPickerView/ActionSheet功能。</li>\n<li><a href=\"https://github.com/mayuur/MJAlertView\" target=\"_blank\" rel=\"noopener\">MJAlertView</a> - 3D效果转场效果警示图–MJAlertView。</li>\n<li><a href=\"https://github.com/morizotter/SwiftyDrop\" target=\"_blank\" rel=\"noopener\">SwiftyDrop</a> - 轻量、易用的小清新弹出列表及信息提示组件真心不错。</li>\n<li><a href=\"https://github.com/steipete/PSTAlertController\" target=\"_blank\" rel=\"noopener\">PSTAlertController</a> - 兼容 iOS7的 XXAlertController，接口跟UIAlertController 一模一样，做到高低版本通用。</li>\n<li><a href=\"https://github.com/hryk224/PCLBlurEffectAlert\" target=\"_blank\" rel=\"noopener\">PCLBlurEffectAlert.swfit</a> - 细节定制较丰富的弹出警报窗口组件。</li>\n<li><a href=\"https://github.com/wxxsw/GSAlert\" target=\"_blank\" rel=\"noopener\">GSAlert.swfit</a> - 苹果在iOS8推出了全新的UIAlertController，旧的UIAlertView和UIActionSheet渐渐被废弃，但如果你仍然支持iOS7系统，你将不得不写两套代码。GSAlert解决了这个问题。</li>\n</ul>\n<h5 id=\"其他UI\"><a href=\"#其他UI\" class=\"headerlink\" title=\"其他UI\"></a>其他UI</h5><ul>\n<li><a href=\"https://github.com/levey/AwesomeMenu\" target=\"_blank\" rel=\"noopener\">AwesomeMenu</a> - 最多人用的Path菜单。</li>\n<li><a href=\"https://github.com/Tangdixi/DCPathButton\" target=\"_blank\" rel=\"noopener\">DCPathButton</a> - Path，4.0的弹出菜单，呼出或者关闭菜单时，多个小图标会分别按照逆时针和顺时针的方向进行滚动。</li>\n<li><a href=\"https://github.com/itouch2/SphereMenu\" target=\"_blank\" rel=\"noopener\">SphereMenu</a> - 利用UIDynamicAnimator的有趣的菜单，path类似。 </li>\n<li><a href=\"https://github.com/KittenYang/KYGooeyMenu\" target=\"_blank\" rel=\"noopener\">KYGooeyMenu</a> - KYGooeyMenu 是一个具有 Gooey Effects 带粘性的扇形菜单控件(卫星菜单、path)。</li>\n<li><a href=\"https://github.com/yoavlt/LiquidFloatingActionButton\" target=\"_blank\" rel=\"noopener\">LiquidFloatingActionButton</a> - 卫星弹出菜单。</li>\n<li><a href=\"https://github.com/JustinFincher/JZMultiChoicesCircleButton\" target=\"_blank\" rel=\"noopener\">JZMultiChoicesCircleButton</a> - 三维多选按钮。</li>\n<li><a href=\"https://github.com/xhzengAIB/TwitterPaggingViewer\" target=\"_blank\" rel=\"noopener\">TwitterPaggingViewer</a>  - 多个Tableview，左右滑动。</li>\n<li><a href=\"https://github.com/carantes/CircularProgressControl\" target=\"_blank\" rel=\"noopener\">CircularProgressControl</a> - Circular Progress Control using CAShapeLayer ，环形进度控制条。</li>\n<li><a href=\"https://github.com/kaandedeoglu/KDCircularProgress\" target=\"_blank\" rel=\"noopener\">KDCircularProgress</a> -  KDCircularProgress是使用swift制作的色彩炫丽的进度条，可以加入多种颜色来控制进度条的渐变效果。 </li>\n<li><a href=\"https://github.com/cgwangding/TextProgress\" target=\"_blank\" rel=\"noopener\">TextProgress</a> - 自定义实现数字进度条：1、可以自定义数字（0-100），填充的比例为当前设置的数字，2、可以实现自定义填充颜色，上下部分都可以，3、可以自定义边界的颜色4、实现了水波动画，可以设置打开或关闭。</li>\n<li><a href=\"https://github.com/gsdios/SDProgressView\" target=\"_blank\" rel=\"noopener\">SDProgressView</a> - 简便美观的进度指示器，此系列共有六种样式的进度指示器。</li>\n<li><a href=\"https://github.com/ninjaprox/NVActivityIndicatorView\" target=\"_blank\" rel=\"noopener\">NVActivityIndicatorView</a> -  loading 进度条动画，有20-30多种，是在此<a href=\"https://github.com/gontovnik/DGActivityIndicatorView\" target=\"_blank\" rel=\"noopener\">DGActivityIndicatorView</a> 基础上做得修改。</li>\n<li><a href=\"https://github.com/saitjr/LoopProgressDemo\" target=\"_blank\" rel=\"noopener\">LoopProgressDemo</a> - 环形渐变进度条。</li>\n<li><a href=\"http://www.superqq.com/blog/2015/08/12/realization-circular-gradient-progress/\" target=\"_blank\" rel=\"noopener\">环形渐变进度条实现</a>， </li>\n<li><a href=\"https://github.com/xmartlabs/XLPagerTabStrip\" target=\"_blank\" rel=\"noopener\">XLPagerTabStrip</a> - 做的很棒的iOS下的PagerTabStrip。 </li>\n<li><a href=\"https://github.com/alskipp/ASProgressPopUpView\" target=\"_blank\" rel=\"noopener\">ASProgressPopUpView</a> - 弹出的进度条显示进度。</li>\n<li><a href=\"https://github.com/onevcat/RandomColorSwift\" target=\"_blank\" rel=\"noopener\">RandomColorSwift</a> - 一个自动生成好看的颜色的 Swift 库，RandomColorSwift。</li>\n<li><a href=\"https://github.com/hyperoslo/Hue\" target=\"_blank\" rel=\"noopener\">Hue.Swift</a> - Hue.Swift：颜色常规功能集于一身的定义、使用 Color 工具类库（含图片取色）。</li>\n<li><a href=\"https://github.com/ChangweiZhang/HexColorService\" target=\"_blank\" rel=\"noopener\">HexColorService</a> - 将16进制颜色字符串转成UIColor。</li>\n<li><a href=\"https://github.com/NorthernRealities/Rainbow\" target=\"_blank\" rel=\"noopener\">Rainbow</a> - 旨在提高代码可读性及易用性的 UIColor 扩展，它使原先有限的预定义颜色（方法）选择，扩展至超过 1200 种。</li>\n<li><a href=\"https://github.com/zhxnlai/UIColor-ChineseTraditionalColors\" target=\"_blank\" rel=\"noopener\">UIColor-ChineseTraditionalColors</a> - 中国传统颜色引用 UIColor 扩展。“UIColor.桃红()，UIColor.竹青() …”，共158种。 </li>\n<li><a href=\"http://code.cocoachina.com/detail/284158\" target=\"_blank\" rel=\"noopener\">类似美团的下拉菜单</a> - 类似美团的下拉菜单，<a href=\"http://www.cocoachina.com/ios/20150205/11116.html\" target=\"_blank\" rel=\"noopener\">源码推荐说明</a>。 </li>\n<li><a href=\"http://code4app.com/ios/%E7%B1%BB%E4%BC%BC%E7%BE%8E%E5%9B%A2%E7%9A%84%E4%B8%8B%E6%8B%89%E9%80%89%E9%A1%B9/538606d4933bf06e0a8b496e\" target=\"_blank\" rel=\"noopener\">类似美团的下拉选项</a> -  类似于美团、大众点评的下拉菜单选项，code4app代码，评论代码有瑕疵。</li>\n<li><a href=\"http://code.cocoachina.com/detail/284267\" target=\"_blank\" rel=\"noopener\">CRMediaPickerController</a> - 一个简单易用的图片/视频选择器。1.可同时选择照片和视频。 2.挑选范围有Camera、Camera Roll、Photo Library以及最近拍摄的照片和视频。3.可自定义UIImagePickerController属性（Camera Overlay、Camera Device、Camera View Transform以及allowsEditing）。4.支持横屏和竖屏5.原生的iOS UI。，<a href=\"http://www.cocoachina.com/ios/20150205/11116.html\" target=\"_blank\" rel=\"noopener\">源码推荐说明</a>。 </li>\n<li><a href=\"https://github.com/modocache/MDCSwipeToChoose\" target=\"_blank\" rel=\"noopener\">MDCSwipeToChoose</a> - MDCSwipeToChoose可简单地添加滑动手势来调用UIView，并使用该行为提供了一个组件以创建类似Tinder app的like或者dislike界面的轻扫。基于轻扫的方向，你可以决定执行什么样的行为，并且你可以自定义文本颜色和图片。该项目适用于教学用的抽认卡、图片查看器以及其他等。 </li>\n<li><a href=\"http://d.cocoachina.com/code/detail/285611\" target=\"_blank\" rel=\"noopener\">iOS Material Design库</a> - 该项目借鉴于谷歌的Material Design guideline，用户可自定义背景色。 <ul>\n<li><a href=\"https://github.com/fpt-software/Material-Controls-For-iOS\" target=\"_blank\" rel=\"noopener\">Material-Controls-For-iOS</a> - Material Design风格的各种控件，非常完整全面。 </li>\n</ul>\n</li>\n<li><a href=\"https://github.com/richzertuche/ZMaterialDesignUIButton\" target=\"_blank\" rel=\"noopener\">ZMaterialDesignUIButton</a> - Swift Material Design UIButton。</li>\n<li><a href=\"https://github.com/pixyzehn/MediumScrollFullScreen\" target=\"_blank\" rel=\"noopener\">MediumScrollFullScreen</a> - Medium的可扩展滚动页面，上下滚动时，全屏显示内容，并自然消隐上下菜单。由此项目感知，作者是一位很注重细节的开发者，他的另外<a href=\"https://github.com/pixyzehn\" target=\"_blank\" rel=\"noopener\">几个菜单类项目</a>也都不错，值得参考，比如：PathMenu, MediumMenu 等。</li>\n<li><a href=\"https://github.com/SatanWoo/WZFlashButton\" target=\"_blank\" rel=\"noopener\">WZFlashButton</a> - WZFlashButton，点击后button里面出现水波扩散效果。</li>\n<li><a href=\"https://github.com/piemonte/Twinkle\" target=\"_blank\" rel=\"noopener\">Twinkle</a> - 为字体加上钻石版闪耀的效果。使用Swift编写。 </li>\n<li><a href=\"https://github.com/palmin/ios-multi-back-button\" target=\"_blank\" rel=\"noopener\">ios-multi-back-button</a> - 可替换内置的UInavigationController返回按钮，长按左上角的返回按钮，实现多层级的快速返回。</li>\n<li><a href=\"http://code.cocoachina.com/detail/226543\" target=\"_blank\" rel=\"noopener\">ASDayPicker</a> - 适用于iOS (iPhone)的日期选择器(时间选择器)，类似于Calendar app的周视图。</li>\n<li><a href=\"http://adad184.com/2014/10/29/2014-10-29-how-to-setup-today-extension-programmatically/\" target=\"_blank\" rel=\"noopener\">today extension</a> - 用纯代码构建一个Widget(today extension) 。</li>\n<li><a href=\"https://github.com/f33chobits/FSCalendar\" target=\"_blank\" rel=\"noopener\">FSCalendar</a> - 日历视图，带有微妙和平滑的滚动效果，可自定义外观–国人。</li>\n<li><a href=\"https://github.com/Mozharovsky/CVCalendar\" target=\"_blank\" rel=\"noopener\">CVCalendar</a> - 是一个方便开发者集成自定义日历视图到自己 iOS 应用的项目, 支持 Storyboard 和手动配置, 使用 CocoaPods 进行安装, 提供了丰富的 API 供开发者使用。</li>\n<li><a href=\"https://github.com/EmilYo/HSDatePickerViewController\" target=\"_blank\" rel=\"noopener\">HSDatePickerViewController</a> - 带有Dropbox Mailbox感觉的时间日期选择器(时间选择器)。启动是背景被模糊化。界面也是主流的扁平化风格。 </li>\n<li><a href=\"https://github.com/huzhiqin/HZQDatePickerView\" target=\"_blank\" rel=\"noopener\">HZQDatePickerView</a> - 自定义时间选择器(日期选择器)，包括开始日期和结束日期两种类型。</li>\n<li><a href=\"https://github.com/nsdictionary/CFCityPickerVC\" target=\"_blank\" rel=\"noopener\">CFCityPickerVC</a> - 城市选取控制器。</li>\n<li><a href=\"https://github.com/jonathantribouharet/JTCalendar\" target=\"_blank\" rel=\"noopener\">JTCalendar</a> - iOS下优美的 Calendar 组件，做 GTD 类 App 必备。</li>\n<li><a href=\"https://github.com/Yalantis/Persei\" target=\"_blank\" rel=\"noopener\">Persei</a> - 动画隐藏或显示顶部菜单支持库及示例项目。–swift</li>\n<li><a href=\"https://github.com/jivesoftware/PDTSimpleCalendar\" target=\"_blank\" rel=\"noopener\">PDTSimpleCalendar</a> - 是iOS最棒的日历组件了。你可以在各个方面对它进行定制，无论是运行逻辑还是外观方面。</li>\n<li><a href=\"https://github.com/MrMage/DateRangePicker\" target=\"_blank\" rel=\"noopener\">DateRangePicker.swift</a> - 可能是目前最好的 OS X 日期选择器,高扩展性，界面风格看起来很舒服，不过注意，是 OS X 开发专用。</li>\n<li><a href=\"https://github.com/hyperoslo/Form\" target=\"_blank\" rel=\"noopener\">Form</a> - JSON 驱动的 Form表单系统，复杂的表单填写类 App 极其需要（比如淘宝呢！）。</li>\n<li><a href=\"https://github.com/neoneye/SwiftyFORM\" target=\"_blank\" rel=\"noopener\">SwiftyFORM</a> - swift 表单输入框架（亮点是表单验证规则引擎），是我见过地最易用的 Swift 表单组件。</li>\n<li><a href=\"https://github.com/icanzilb/SwiftSpinner\" target=\"_blank\" rel=\"noopener\">SwiftSpinner</a> - SwiftSpinner是使用swift制作的一款精致带感的指示器，并且连带有字体信息显示，模糊背景，半透明，扁平化等IOS8的效果。</li>\n<li><a href=\"https://github.com/Akkyie/AKPickerView-Swift\" target=\"_blank\" rel=\"noopener\">AKPickerView-Swift</a> - 一款小而美的 3D 效果选择器。</li>\n<li><a href=\"https://github.com/larcus94/ImagePickerSheet\" target=\"_blank\" rel=\"noopener\">ImagePickerSheet</a> - 图片或视频选择器（可多选）组件及其示例项目。</li>\n<li><a href=\"https://github.com/saiwu-bigkoo/iOS-RatingBar\" target=\"_blank\" rel=\"noopener\">iOS-RatingBar</a> - iOS-RatingBar swift版的评分控件,跟Android的RatingBar一样有两种模式，评分模式和只读模式’支持视图编辑，自定义星星数量，评分等级,另外还能支持非整数星，0.5颗星，0.1颗星,可以开启动画效果。</li>\n<li><a href=\"https://github.com/cwRichardKim/RKNotificationHub\" target=\"_blank\" rel=\"noopener\">RKNotificationHub</a> - 快速给 UIView 添加上炫酷的通知图标（Badge、红点、提示）。  * <a href=\"https://github.com/weng1250/WZLBadge\" target=\"_blank\" rel=\"noopener\">WZLBadge</a> - Badge，支持横竖屏支持iOS5~iOS8允许高度定制化，包括“红点”的背景颜色，文字(字体大小、颜色)，位置等。<a href=\"http://code.cocoachina.com/detail/316890/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%A4%9A%E9%A3%8E%E6%A0%BC%E7%9A%84%E6%8E%A8%E9%80%81%E5%B0%8F%E7%BA%A2%E7%82%B9/\" target=\"_blank\" rel=\"noopener\">说明</a>. </li>\n<li><a href=\"https://github.com/andreamazz/BubbleTransition\" target=\"_blank\" rel=\"noopener\">BubbleTransition</a> - 以气泡膨胀和缩小的动画效果来显示和移除 controller，Uber的就是这种取消操作的方式。</li>\n<li><a href=\"https://github.com/KittenYang/KYFloatingBubble\" target=\"_blank\" rel=\"noopener\">KYFloatingBubble</a> - 类似iOS7中Game Center浮动气泡的效果。</li>\n<li><a href=\"https://github.com/Draveness/DKNightVersion\" target=\"_blank\" rel=\"noopener\">DKNightVersion</a> - DKNightVersion 是一个支持夜间模式切换的框架。</li>\n<li><a href=\"https://github.com/sx1989827/EasyUIControl\" target=\"_blank\" rel=\"noopener\">EasyUIControl</a> - 一个可以简化界面ui的控件框架。</li>\n<li><a href=\"https://github.com/DeveloperLx/LxGridView\" target=\"_blank\" rel=\"noopener\">LxGridView-oc</a> <a href=\"https://github.com/DeveloperLx/LxGridView-swift\" target=\"_blank\" rel=\"noopener\">LxGridView-swift</a> - 利用UICollectionView模仿iOS系统桌面图标的交互，作用如动图。</li>\n<li><a href=\"https://github.com/ZhongTaoTian/QQBtn\" target=\"_blank\" rel=\"noopener\">QQBtn</a> - 仿QQ未读消息弹性按钮动画，达到和手机QQ未读信息一样的动画效果，效果基本实现。</li>\n<li><a href=\"https://github.com/gmertk/GMStepper\" target=\"_blank\" rel=\"noopener\">GMStepper</a> - swift 带动画效果、支持手势滑动操作的步进标签。</li>\n<li><a href=\"https://github.com/tomvanzummeren/TZStackView\" target=\"_blank\" rel=\"noopener\">TZStackView</a> - OS 9 UIStackView 功能模拟实现于 iOS 7/ iOS 8 内。</li>\n<li><a href=\"https://github.com/441088327/LayoutTrait\" target=\"_blank\" rel=\"noopener\">LayoutTrait</a> - swift 一个小类库。 做iPad 多任务分屏 适配的同学可以看一下。</li>\n<li><a href=\"https://github.com/HAHAKea/HACursor\" target=\"_blank\" rel=\"noopener\">HACursor</a> - HACursor，是一个对横向ScrollView中的视图进行管理的UI控件。只要几行代码就可以集成类似于网易新闻对主题页面进行排序，删除操作的功能。</li>\n<li><a href=\"https://github.com/IOStao/ZTPageController\" target=\"_blank\" rel=\"noopener\">ZTPageController</a> - 模仿网易新闻和其他新闻样式做的一个菜单栏，栏中有各自的控制器，其中有4中展示样式’网易style’ ’搜狐style’ ’腾讯style1’ ’网易style2’ 。 </li>\n<li><a href=\"https://github.com/nixzhu/Ruler\" target=\"_blank\" rel=\"noopener\">Ruler</a> - 尺子。</li>\n<li><a href=\"https://github.com/justhum/HUMSlider\" target=\"_blank\" rel=\"noopener\">HUMSlider</a> - HUMSlider是一款能够自动显示刻度记号的滑竿，滑动到某处，该处的刻度会自动上升，两边还能配置图像。支持代码或storyboard中实现。</li>\n<li><a href=\"https://github.com/zhangli4659507/JDSelectedDemo\" target=\"_blank\" rel=\"noopener\">JDSelectedDemo</a> - 仿京东筛选菜单实现。</li>\n<li><a href=\"https://github.com/PhamBaTho/BTNavigationDropdownMenu\" target=\"_blank\" rel=\"noopener\">BTNavigationDropdownMenu</a> -  下拉列表暨导航标题组件。简单、直接、易用 -swift。</li>\n<li><a href=\"https://github.com/luzefeng/3DTouchDemo\" target=\"_blank\" rel=\"noopener\">3DTouchDemo</a> - 详细介绍了每个参数的含义和3Dtouch的入口，保证包学包会。</li>\n<li><a href=\"https://github.com/RichardLeung/3DTouchSample\" target=\"_blank\" rel=\"noopener\">3DTouchSample</a> - 3D-Touch的功能分为两个部分：Shortcut和Preview。</li>\n<li><a href=\"https://github.com/DeskConnect/SBShortcutMenuSimulator\" target=\"_blank\" rel=\"noopener\">SBShortcutMenuSimulator</a> - 教你如何在模拟器上测试 3D Touch 功能!</li>\n<li><a href=\"https://github.com/richzertuche/InceptionTouch\" target=\"_blank\" rel=\"noopener\">InceptionTouch.swift</a> - 让没有 3D Touch 设备也有类似交互体验的 InceptionTouch 类（基于 UITextView 实现，支持日期，链接，电话号码，地址触摸响应）。</li>\n<li><a href=\"http://code.cocoachina.com/view/128287\" target=\"_blank\" rel=\"noopener\">仿LOL滚动视图</a> - 仿LOL滚动视图。</li>\n<li><a href=\"http://code.cocoachina.com/view/128281\" target=\"_blank\" rel=\"noopener\">答题选择切换页</a> - 将scrollview和tableview封装在一起，在初始化的时候简单的将数据带上，就可以一页一页的左右来回滑动。</li>\n<li><a href=\"https://github.com/SergioChan/SCTrelloNavigation\" target=\"_blank\" rel=\"noopener\">SCTrelloNavigation</a> - 类似trello的导航动效控件实现。</li>\n<li><a href=\"https://github.com/Akateason/XTPaster\" target=\"_blank\" rel=\"noopener\">XTPaster</a> - 贴纸功能出现在很多图片社交中, 就是图片上面贴图片, 对贴纸而言就是需要控制贴纸的位置,旋转,大小,<a href=\"http://www.jianshu.com/p/d873d348bbfb\" target=\"_blank\" rel=\"noopener\">如何使用</a>。</li>\n<li><a href=\"https://github.com/refinemobi/RGCategoryView\" target=\"_blank\" rel=\"noopener\">RGCategoryView</a> - 仿了个苏宁易购的分类页面。</li>\n<li><a href=\"https://github.com/txaidw/TWControls\" target=\"_blank\" rel=\"noopener\">TWControls.swift</a> - 简单的开关和按钮控制器,使用闭包来执行由控件触发的操作。</li>\n<li><a href=\"https://github.com/ephread/Instructions\" target=\"_blank\" rel=\"noopener\">Instructions.swift</a> - 可定制嵌入式操作指引框架及演示。</li>\n<li><a href=\"https://github.com/Lves/LLPieCharts\" target=\"_blank\" rel=\"noopener\">LLPieCharts</a> - LLPieCharts iOS 绘制饼图，<a href=\"http://www.lvesli.com/?p=339\" target=\"_blank\" rel=\"noopener\">教程</a>。</li>\n<li><a href=\"https://github.com/Boris-Em/BEMCheckBox\" target=\"_blank\" rel=\"noopener\">BEMCheckBox</a> - BEMCheckBox 是一个用于 iOS 应用上构建漂亮, 高度可定制化动画效果的复选框类库, 最低支持到 iOS 7 系统, 有多种不同风格的动画效果可供选择。</li>\n<li><a href=\"https://github.com/kevin0571/STPopup\" target=\"_blank\" rel=\"noopener\">STPopup</a> - 提供了一个可在 iPhone 和 iPad 上使用的具有 UINavigationController 弹出效果的 STPopupController 类, 并能在 Storyboard 上很好的工。</li>\n<li><a href=\"https://github.com/victorBaro/VBFPopFlatButton\" target=\"_blank\" rel=\"noopener\">VBFPopFlatButton</a> - 通过几条线段实现的非常Q萌的动画按钮效果。</li>\n<li><a href=\"https://github.com/richzertuche/ZSeatSelector\" target=\"_blank\" rel=\"noopener\">ZSeatSelector</a> - 电影院位置排座位。</li>\n<li><a href=\"https://github.com/zangqilong198812/CustomSearchBar\" target=\"_blank\" rel=\"noopener\">CustomSearchBar</a> - 自定义searchbar,类似于instagram的搜索框效果。</li>\n<li><a href=\"https://github.com/LeoNatan/LNPopupController\" target=\"_blank\" rel=\"noopener\">LNPopupController</a> - AppleMusic式pop up，弹出是页面，可以上下拉动。</li>\n<li><a href=\"https://github.com/gontovnik/DGRunkeeperSwitch/\" target=\"_blank\" rel=\"noopener\">DGRunkeeperSwitch</a> - 动画segment，节选器。</li>\n<li><a href=\"https://github.com/yixiangboy/YXFilmSelectView\" target=\"_blank\" rel=\"noopener\">YXFilmSelectView</a> - 仿造时光网选择电影票的UI而开发的一个自定义View。</li>\n<li><a href=\"http://code.cocoachina.com/view/129152\" target=\"_blank\" rel=\"noopener\">FJTagCollectionView</a> - 标签（适配宽度）。</li>\n<li><a href=\"https://github.com/yukiasai/Gecco\" target=\"_blank\" rel=\"noopener\">Gecco.Swift</a> - Gecco.Swift 是一款支持对视图进行局部高亮的 Swift 库, 帮助 iOS 开发者快速创建产品的新手指导界面。</li>\n<li><a href=\"https://github.com/anyunzhong/DFTimelineView\" target=\"_blank\" rel=\"noopener\">DFTimelineView</a> - DFTimelineView仿微信朋友圈 时间轴。</li>\n</ul>\n<p>========</p>\n<h4 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h4><ul>\n<li><a href=\"http://www.starming.com/index.php?v=index&amp;view=62\" target=\"_blank\" rel=\"noopener\">Core Animation笔记，基本的使用方法</a> - Core Animation笔记，基本的使用方法：1.基本动画，2.多步动画，3.沿路径的动画，4.时间函数，5.动画组。</li>\n<li><a href=\"https://github.com/sxyx2008/awesome-ios-animation\" target=\"_blank\" rel=\"noopener\">awesome-ios-animation</a> - <a href=\"https://github.com/sxyx2008/DevArticles/issues/91\" target=\"_blank\" rel=\"noopener\">iOS Animation 主流炫酷动画框架(特效)收集整理</a> 收集整理了下iOS平台下比较主流炫酷的几款动画框架。</li>\n<li><a href=\"https://github.com/Animatious/awesome-animation\" target=\"_blank\" rel=\"noopener\">awesome-animation</a> -  在内的十多位童鞋们一起发起的一起动画开源组正式成立啦~Github组织名称：Animatious，这是我们第一期成员先前开源的一些动效库，我们的第一个合作开源项目正在紧锣密鼓的准备~请大家期待设计和代码的碰撞吧。</li>\n</ul>\n<h5 id=\"侧滑与右滑返回手势\"><a href=\"#侧滑与右滑返回手势\" class=\"headerlink\" title=\"侧滑与右滑返回手势\"></a>侧滑与右滑返回手势</h5><ul>\n<li><a href=\"https://github.com/fastred/SloppySwiper\" target=\"_blank\" rel=\"noopener\">SloppySwiper</a> - iOS系统自带的UINavigationController要7.0才支持，但不过该手势只能从屏幕左侧边缘识别，如果要扩大到整个屏幕范围怎么办？配合一个SloppySwiper无需代码就可以轻松实现。此库支持iOS5.0以上版本（另外：Nav的title滑动不明显，本人写了2个类似的控件），<a href=\"https://github.com/Tim9Liu9/SloppySwiper-Example\" target=\"_blank\" rel=\"noopener\">SloppySwiper-demo</a> ：代码方式与storyboard方式。</li>\n<li><a href=\"https://github.com/singro/SCNavigation\" target=\"_blank\" rel=\"noopener\">SCNavigation</a> - UINavigation可以右滑返回，隐藏UINavigationBar。</li>\n<li><a href=\"https://github.com/YueRuo/UINavigationController-YRBackGesture\" target=\"_blank\" rel=\"noopener\">UINavigationController-YRBackGesture</a> - 支持右滑返回手势，标题栏不动。</li>\n<li><a href=\"https://github.com/gresrun/GHSidebarNav\" target=\"_blank\" rel=\"noopener\">GHSidebarNav</a> - 现在比较流行使用侧开(侧滑)菜单设计。试了不少控件，感觉GHSidebarNav最成熟，尤其对纯代码创建的界面兼容性最好。<a href=\"http://www.cnblogs.com/zyl910/archive/2013/06/14/ios_storyboard_sidemenu.html\" target=\"_blank\" rel=\"noopener\">在Storyboard中使用GHSidebarNav侧开菜单控件</a>。</li>\n<li><a href=\"https://github.com/aryaxt/iOS-Slide-Menu\" target=\"_blank\" rel=\"noopener\">iOS-Slide-Menu</a> - 能够类似Facebook和Path那样弹出左右边栏侧滑菜单,还支持手势。多种可以自定义的属性 (非常不错)。</li>\n<li><a href=\"https://github.com/ECSlidingViewController/ECSlidingViewController\" target=\"_blank\" rel=\"noopener\">ECSlidingViewController</a> - 侧滑菜单。</li>\n<li><a href=\"https://github.com/gotosleep/JASidePanels\" target=\"_blank\" rel=\"noopener\">JASidePanels</a> - 侧滑菜单,有左右菜单，有pop功能，支持手势侧滑,本人使用中：简单。</li>\n<li><a href=\"https://github.com/Ramotion/animated-tab-bar\" target=\"_blank\" rel=\"noopener\">animated-tab-bar</a> - 让 Tabbar items能显示萌萌的动画。</li>\n<li><a href=\"http://code.cocoachina.com/detail/284346\" target=\"_blank\" rel=\"noopener\">tabbar图标动画</a> - tabbar上图标的动画实现，<a href=\"http://www.cocoachina.com/ios/20150205/11116.html\" target=\"_blank\" rel=\"noopener\">源码推荐说明</a>。</li>\n<li><a href=\"https://github.com/Yalantis/Side-Menu.iOS/tree/master/SideMenu\" target=\"_blank\" rel=\"noopener\">SideMenu</a> - swift实现，一款带动画效果可定制 Slide Menu，可以学习其动画实现思路。P.S. 对于Hamburger式菜单，虽然很常用，不过，苹果并不鼓励使用，甚至有开发小组对其弊病用自家上线应用前后数据对比进行了抨击。</li>\n<li><a href=\"https://github.com/romaonthego/RESideMenu\" target=\"_blank\" rel=\"noopener\">RESideMenu</a> - 侧开菜单，qq类似。</li>\n<li><a href=\"https://github.com/Jiahai/JHMenuTableViewDemo\" target=\"_blank\" rel=\"noopener\">JHMenuTableViewDemo</a> - 仿网易邮箱列表侧滑菜单。</li>\n<li><a href=\"https://github.com/xudafeng/SlideMenuView\" target=\"_blank\" rel=\"noopener\">SlideMenuView</a> - 炫酷侧滑菜单布局框架，<a href=\"Android 版本的一致实现请见：https://github.com/xudafeng/SlidingMenu\">Android版本的一致实现</a>。</li>\n<li><a href=\"https://github.com/shinept/QQConfiguration\" target=\"_blank\" rel=\"noopener\">QQConfiguration</a> - swift，QQ-iPhone端框架，左侧菜单栏拖动手势。</li>\n<li><a href=\"https://github.com/KyleGoddard/KGFloatingDrawer\" target=\"_blank\" rel=\"noopener\">KGFloatingDrawer</a> - 侧滑菜单，qq类似，KyleGoddard/KGFloatingDrawer：一款适合于大屏手机或平板的浮动抽屉式导航界面组件。效果很赞- 侧开菜单，qq类似（与RESideMenu类似）。</li>\n<li><a href=\"https://github.com/cocoatoucher/AIFlatSwitch\" target=\"_blank\" rel=\"noopener\">AIFlatSwitch</a> - 一款带平滑过渡动画的 Switch 组件类，类相同风格的 Menu/Back<a href=\"https://github.com/fastred/HamburgerButton\" target=\"_blank\" rel=\"noopener\">HamburgerButton</a>,类似相同风格的 Menu/Close<a href=\"https://github.com/robb/hamburger-button\" target=\"_blank\" rel=\"noopener\">hamburger-button</a>.</li>\n<li><a href=\"https://github.com/jhurray/JHChainableAnimations\" target=\"_blank\" rel=\"noopener\">JHChainableAnimations</a> - 在应用中采用链式写出酷炫的动画效果, 使代码更加清晰易读，利用block实现的链式编程。</li>\n<li><a href=\"https://github.com/WXGBridgeQ/WXGSlideMenuDemo\" target=\"_blank\" rel=\"noopener\">WXGSlideMenuDemo</a> - 个简单实现侧拉（侧滑）菜单的小demo，供初学者共同学习、练习使用。</li>\n<li><a href=\"https://github.com/pkluz/PKRevealController\" target=\"_blank\" rel=\"noopener\">PKRevealController</a> - PKRevealController是一个可以滑动的侧边栏菜单（可向左、向右或者同时向两侧），只需手指轻轻一点（或者按一下按钮，但是这样滑动时不够炫酷），这类控制的其他库，而PKRevealController是最棒的。安装简便，高度定制且对手势识别良好。可以当做一个标准控件用在iOS SDK中。</li>\n<li><a href=\"https://github.com/GabrielAlva/SwiftPages\" target=\"_blank\" rel=\"noopener\">SwiftPages</a> - 高可定制类似 Instagram 视图滑动切换功能类库。API 简单、易用。</li>\n<li><a href=\"https://github.com/michaelhenry/FlipBoardNavigationController\" target=\"_blank\" rel=\"noopener\">FlipBoardNavigationController</a> - FlipBoardNavigationController。</li>\n<li><a href=\"https://github.com/mutualmobile/MMDrawerController\" target=\"_blank\" rel=\"noopener\">MMDrawerController</a> - 最多人用的一个有关侧边“抽屉”导航框架，里面还有很多你意想不到的交互效果，侧滑。</li>\n<li><a href=\"http://code.cocoachina.com/detail/316925/UIWebView%E7%BF%BB%E9%A1%B5%E8%BF%94%E5%9B%9E%E6%95%88%E6%9E%9C%EF%BC%88%E5%8F%98%E9%80%9A%E6%96%B9%E6%B3%95%EF%BC%89/\" target=\"_blank\" rel=\"noopener\">UIWebView翻页返回效果</a> - UIWebView翻页返回效果（变通方法）。</li>\n<li><a href=\"https://github.com/lilei644/LLSlideMenu\" target=\"_blank\" rel=\"noopener\">LLSlideMenu</a> - 一个弹性侧滑菜单,弹性动画原理借鉴该项目中阻尼函数实现。</li>\n</ul>\n<h5 id=\"gif动画\"><a href=\"#gif动画\" class=\"headerlink\" title=\"gif动画\"></a>gif动画</h5><ul>\n<li><a href=\"https://github.com/yfme/UIImageView-PlayGIF\" target=\"_blank\" rel=\"noopener\">UIImageView-PlayGIF</a> - UIImageView-PlayGIF。</li>\n<li><a href=\"https://github.com/liyong03/YLGIFImage\" target=\"_blank\" rel=\"noopener\">YLGIFImage</a> - YLGIFImage。</li>\n<li><a href=\"https://github.com/liyong03/YLGIFImage-Swift\" target=\"_blank\" rel=\"noopener\">YLGIFImage-Swift</a> - YLGIFImage-Swift。</li>\n<li><a href=\"https://github.com/mortenjust/droptogif\" target=\"_blank\" rel=\"noopener\">droptogif</a> -  droptogif视频拖拽到应用窗口后自动转换为 GIF 动画（其转换进程动画效果也超赞）。</li>\n</ul>\n<h5 id=\"其他动画\"><a href=\"#其他动画\" class=\"headerlink\" title=\"其他动画\"></a>其他动画</h5><ul>\n<li><a href=\"https://github.com/schneiderandre/popping\" target=\"_blank\" rel=\"noopener\">popping</a> - popping是一个POP 使用实例工程 </li>\n<li><a href=\"https://github.com/xhzengAIB/SinaMenuView\" target=\"_blank\" rel=\"noopener\">SinaMenuView</a> - 用POP动画引擎写的Sina微博的Menu菜单。</li>\n<li><a href=\"https://github.com/adad184/MMTweenAnimation\" target=\"_blank\" rel=\"noopener\">MMTweenAnimation</a> - facebook POP的自定义动画扩展(基于POPCustomAnimation) 提供10种函数式动画。</li>\n<li><a href=\"https://github.com/pingguo-zangqilong/ZQLRotateMenu\" target=\"_blank\" rel=\"noopener\">ZQLRotateMenu</a> - 这是一个旋转视图的选择器。</li>\n<li><a href=\"https://github.com/pingguo-zangqilong/CoolLoadAniamtion\" target=\"_blank\" rel=\"noopener\">CoolLoadAniamtion</a> - 一个简单但是效果不错的loading动画。</li>\n<li><a href=\"https://github.com/pingguo-zangqilong/SequenRotateAnimation\" target=\"_blank\" rel=\"noopener\">SequenRotateAnimation</a> - 一个简单的loading次序动画。</li>\n<li><a href=\"https://github.com/441088327/SYAppStart\" target=\"_blank\" rel=\"noopener\">SYAppStart</a> - App启动插画的自定义过度。</li>\n<li><a href=\"https://github.com/victorjiang/UIImage-VJDeviceSpecificMedia/\" target=\"_blank\" rel=\"noopener\">VJDeviceSpecificMedia</a> - <a href=\"http://www.imooc.com/wenda/detail/249271\" target=\"_blank\" rel=\"noopener\">如何根据设备选择不同尺寸的图片</a> 可以通过设置不同尺寸设备的LaunchImage，来使得App适配这些设备，要是在不同不同尺寸设备上使用不同大小的图片，则需要在代码中一一判断，然后加载。 </li>\n<li><a href=\"https://github.com/michaelbabiy/RMParallax\" target=\"_blank\" rel=\"noopener\">RMParallax</a> - RMParallax是一个app启动页引导开源项目，除了细微的翻页视差效果，描述文本的过渡也非常美观（版本新特性、导航页、引导页）。</li>\n<li><a href=\"https://github.com/Nododo/ADo_GuideView\" target=\"_blank\" rel=\"noopener\">ADo_GuideView</a> - 转动的用户引导页(模仿网易bobo) 因为没有从app包里抓到@3x的图片,建议在iPhone5模拟器运行,保证效果~ （版本新特性、导航页、引导页）。</li>\n<li><a href=\"https://github.com/nsdictionary/CoreNewFeatureVC\" target=\"_blank\" rel=\"noopener\">CoreNewFeatureVC</a> - 版本新特性（引导页），1.封装并简化了版本新特性启动视图！2.添加了版本的本地缓存功能，3.集成简单，使用方便，没有耦合度，4.支持block回调（版本新特性、导航页、引导页）。</li>\n<li><a href=\"https://github.com/MachelleZhang/MZGuidePages\" target=\"_blank\" rel=\"noopener\">MZGuidePages</a> - 自己写的通用导航页，可以直接引入工程使用，请参考案例（版本新特性、导航页、引导页）。</li>\n<li><a href=\"https://github.com/AdamBCo/ABCIntroView\" target=\"_blank\" rel=\"noopener\">ABCIntroView</a> - ABCIntroView是一个易于使用的入门类，让你到达主屏幕之前介绍你的应用程序（版本新特性、导航页、引导页）。</li>\n<li><a href=\"https://github.com/MengTo/Spring\" target=\"_blank\" rel=\"noopener\">Spring</a> - Spring是一个Swift编写的开源库，可简化Swift编写的iOS动画。支持shake、pop、morph、squeeze、wobble、swing、flipX、flipY、fall、squeezeLeft、squeezeRight以及squeezeDown等多种动画形式，用 IBDesignable 让使用者可以在 Xcode 中快速设置动画效果。</li>\n<li><a href=\"https://github.com/KittenYang/KYBezierBounceView\" target=\"_blank\" rel=\"noopener\">KYBezierBounceView</a> - 手势控制贝塞尔曲线，取消手势贝塞尔曲线会有反弹效果。</li>\n<li><a href=\"http://kittenyang.com/cadisplaylinkanduibezierpath/\" target=\"_blank\" rel=\"noopener\">cadisplaylinkanduibezierpath</a> - CADisplayLink结合UIBezierPath的神奇妙用。</li>\n<li><a href=\"https://github.com/KittenYang/KYCuteView\" target=\"_blank\" rel=\"noopener\">KYCuteView</a> - 实现类似QQ消息拖拽消失的交互+GameCenter的浮动小球效果，<a href=\"http://kittenyang.com/drawablebubble/\" target=\"_blank\" rel=\"noopener\">分析</a>。</li>\n<li><a href=\"https://github.com/KittenYang/KYWaterWaveView\" target=\"_blank\" rel=\"noopener\">KYWaterWaveView</a> - 一个内置波浪动画的UIView，里面有鱼跳跃水溅起来的效果。</li>\n<li><a href=\"https://github.com/liuzhiyi1992/WaveLoadingView\" target=\"_blank\" rel=\"noopener\">WaveLoadingView</a> - iOS 唯一完美的波浪进度加载指示器，<a href=\"http://zyden.vicp.cc/waveloadingindicator/\" target=\"_blank\" rel=\"noopener\">实现说明</a>。</li>\n<li><a href=\"https://github.com/KittenYang/KYPingTransition\" target=\"_blank\" rel=\"noopener\">KYPingTransition</a> - 实现圆圈放大放小的转场动画，可以根据自己的需要使用Paper中的弹性效果，有Material风格。</li>\n<li><a href=\"https://github.com/KittenYang/KYNewtonCradleAnimiation\" target=\"_blank\" rel=\"noopener\">KYNewtonCradleAnimiation</a> - 牛顿摆动画。</li>\n<li><a href=\"https://github.com/scotteg/LayerPlayer\" target=\"_blank\" rel=\"noopener\">LayerPlayer</a> - 一款全面展示核心动画 API 示例项目（上架应用）。包括 CALayer, CAScrollLayer, CATextLayer, AVPlayerLayer, CAGradientLayer, CAReplicatorLayer, CATiledLayer, CAShapeLayer, CAEAGLLayer, CATransformLayer, CAEmitterLayer 等使用的互动演示。</li>\n<li><a href=\"https://github.com/JayGajjar/JGTransitionCollectionView\" target=\"_blank\" rel=\"noopener\">JGTransitionCollectionView</a> - swift，基于集合视图扩展实现完成自动布局及单元项 Flip式动画效果（效果很赞）。组件使用方便、自然（只需设置集合视图数据源的标准方式即可）。</li>\n<li><a href=\"https://github.com/KittenYang/KYShareMenu\" target=\"_blank\" rel=\"noopener\">KYShareMenu</a> - 带弹性动画的分享菜单。</li>\n<li><a href=\"https://github.com/Yalantis/Context-Menu.iOS\" target=\"_blank\" rel=\"noopener\">Context-Menu.iOS</a> - 可以为app的菜单添加漂亮的动画内容，可自定义icon，并可根据自己的喜好设计单元格和布局。</li>\n<li><a href=\"https://github.com/LuciusLu/DeformationButton\" target=\"_blank\" rel=\"noopener\">DeformationButton</a> - 一个简单的变换形状动画按钮。</li>\n<li><a href=\"https://github.com/heroims/UnReadBubbleView\" target=\"_blank\" rel=\"noopener\">UnReadBubbleView</a> - UnReadBubbleView是一个能够拖拽并拉长的气泡视图。拖拽到一定的长度会消失，可以通过系数设置来控制拖拽的长度。气泡也支持多种属性设置。 </li>\n<li><a href=\"https://github.com/smallmuou/PPDragDropBadgeView\" target=\"_blank\" rel=\"noopener\">PPDragDropBadgeView</a> - 实现了类似于QQ 5.0 水滴拖拽效果. 支持iOS 5.0+ ARC，气泡能够带有数字标识，同时支持消失block方法。消失时还带有消失效果动画。</li>\n<li><a href=\"https://github.com/MartinRGB/GiftCard-Implementation\" target=\"_blank\" rel=\"noopener\">GiftCard-Implementation</a> - 购买的炫酷动画。</li>\n<li><a href=\"https://github.com/gsdios/SDCycleScrollView\" target=\"_blank\" rel=\"noopener\">SDCycleScrollView</a> - 无限循环自动图片轮播器(一步设置即可使用)。</li>\n<li><a href=\"https://github.com/johnlui/Swift-On-iOS/tree/master/BuildAnInfiniteCarousel\" target=\"_blank\" rel=\"noopener\">BuildAnInfiniteCarousel</a> - 自己动手造无限循环图片轮播，<a href=\"https://autolayout.club/2015/10/29/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E9%80%A0%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF%E5%9B%BE%E7%89%87%E8%BD%AE%E6%92%AD/\" target=\"_blank\" rel=\"noopener\">教程</a>。</li>\n<li><a href=\"https://github.com/nicklockwood/iCarousel\" target=\"_blank\" rel=\"noopener\">iCarousel</a> - iCarousel是一个类，它继承于UIView。用于简化实现各种类型的旋转木马(分页滚动视图），无限轮播 ，<a href=\"http://www.cocoachina.com/ios/20150828/13198.html\" target=\"_blank\" rel=\"noopener\">iOS开发之多图片无缝滚动组件封装与使用</a>。</li>\n<li><a href=\"https://github.com/smartwalle/KIPageView\" target=\"_blank\" rel=\"noopener\">KIPageView</a> - 无限循环PageView，横向TableView，无限轮播。</li>\n<li><a href=\"http://code.cocoachina.com/view/128288\" target=\"_blank\" rel=\"noopener\">简单实用的无限循环轮播图</a> - 简单实用的无限循环轮播图 。</li>\n<li><a href=\"https://github.com/Akateason/XTLoopScroll\" target=\"_blank\" rel=\"noopener\">XTLoopScroll</a> - 用两个 timer 三个重用的 view 实现无限循环 scrollView，1自动轮播 2点击监听回调当前图片 3手动滑动后重新计算轮播的开始时间, 良好的用户体验。</li>\n<li><a href=\"https://github.com/zangqilong198812/HotGirls\" target=\"_blank\" rel=\"noopener\">HotGirls</a> - 卡片动画。</li>\n<li><a href=\"https://github.com/tispr/tispr-card-stack\" target=\"_blank\" rel=\"noopener\">tispr-card-stack</a> - swift 卡片风格动画切换组件及完整交互示例。</li>\n<li><a href=\"https://github.com/zhxnlai/ZLSwipeableViewSwift\" target=\"_blank\" rel=\"noopener\">ZLSwipeableViewSwift</a> - swift 卡片堆叠效果的实现（ZLSwipeableView)】可实现类似Tinder和Potluck应用程序的卡片堆叠效果，该项目基于<a href=\"https://github.com/zhxnlai/ZLSwipeableView/\" target=\"_blank\" rel=\"noopener\">ZLSwipeableView objective-c</a>实现。1.自定义动画。2.自定义滑动切换。3.自定义方向。4.撤销。</li>\n<li><a href=\"https://github.com/Yalantis/Koloda\" target=\"_blank\" rel=\"noopener\">Koloda</a> - 基于卡片的 Tinder-style 动画效果示例。精细绝人。更赞的是额外附了详细开发教程 How We Built Tinder-Like Koloda Animation in Swift <a href=\"https://yalantis.com/blog/how-we-built-tinder-like-koloda-in-swift/\" target=\"_blank\" rel=\"noopener\">网页链接</a> 。Yalantis 出品动画程序款款精品。</li>\n<li><a href=\"https://github.com/zangqilong198812/QQPersonalInfoTransition\" target=\"_blank\" rel=\"noopener\">QQPersonalInfoTransition</a> - 仿照QQ的转场。</li>\n<li><a href=\"https://github.com/KittenYang/KYAnimatedPageControl\" target=\"_blank\" rel=\"noopener\">KYAnimatedPageControl</a> - 除了滚动视图时PageControl会以动画的形式一起移动，点击目标页还可快速定位。支持两种样式：粘性小球和旋转方块。</li>\n<li><a href=\"https://github.com/likedan/KDIntroView\" target=\"_blank\" rel=\"noopener\">KDIntroView</a> - swift 动态介绍视图框架及演示。另外两个相似的类库是 RazzleDazzle和 Presentation，择需使用。 </li>\n<li><a href=\"https://github.com/IFTTT/RazzleDazzle\" target=\"_blank\" rel=\"noopener\">RazzleDazzle</a> - 【IFTTT开源Swift编写的帧动画框架–RazzleDazzle】RazzleDazzle 是IFTTT开源的一个iOS帧动画框架，非常适用于APP初次使用时的介绍和引导信息。JazzHands是UIKit一个简单的关键帧基础动画框架，可通过手势、scrollview、KVO等控制动画，被IFTTT应用在IFTTT for iPhone上。</li>\n<li><a href=\"https://github.com/hyperoslo/Presentation\" target=\"_blank\" rel=\"noopener\">Presentation</a> - 一个类似RazzleDazzle的框架。</li>\n<li><a href=\"https://github.com/poolqf/FillableLoaders\" target=\"_blank\" rel=\"noopener\">FillableLoaders</a> - 基于 CGPaths 可定制个性化填空式装载类库。附水波上涨式示例。</li>\n<li><a href=\"https://github.com/dsxNiubility/SXWaveAnimate\" target=\"_blank\" rel=\"noopener\">SXWaveAnimate</a> - 实现非常美观的灌水动画。</li>\n<li><a href=\"https://github.com/liusen001/LSPaomaView\" target=\"_blank\" rel=\"noopener\">LSPaomaView</a> - 可循环滚动的较长文字，跑马灯，效果很好，一句话集成。</li>\n<li><a href=\"https://github.com/ProudOfZiggy/SIFloatingCollection_Swift\" target=\"_blank\" rel=\"noopener\">SIFloatingCollection_Swift</a> - 可定制的 Apple Music 风格浮动形状动画组件及演示。</li>\n<li><a href=\"https://github.com/suguru/Cheetah\" target=\"_blank\" rel=\"noopener\">Cheetah</a> - 易用、高可读链式动画类库。另一个类似类库是 <a href=\"https://github.com/Draveness/DKChainableAnimationKit\" target=\"_blank\" rel=\"noopener\">DKChainableAnimationKit</a>。</li>\n<li><a href=\"https://github.com/CezaryKopacz/CKWaveCollectionViewTransition\" target=\"_blank\" rel=\"noopener\">CKWaveCollectionViewTransition</a> - swift， UICollectionViewController之间切换的动画。</li>\n<li><a href=\"https://github.com/entotsu/TKSubmitTransition\" target=\"_blank\" rel=\"noopener\">TKSubmitTransition</a> - 基于 UIButton 的登录加载、返回按钮转场动画组件及示例。</li>\n<li><a href=\"https://github.com/AugustRush/ARAnimation\" target=\"_blank\" rel=\"noopener\">ARAnimation</a> - ARAnimation 对 Core Animation 进行了封装, 帮助 iOS 开发者能更加便捷的在项目中使用动画。</li>\n<li>[CardsAnimationDemo]<a href=\"https://github.com/adow/CardsAnimationDemo\" target=\"_blank\" rel=\"noopener\">https://github.com/adow/CardsAnimationDemo</a>) - swift， <a href=\"http://swiftcn.io/topics/64?f=w\" target=\"_blank\" rel=\"noopener\">《使用 UICollectionView 实现的一个卡片动画》</a>不是直接操作所有 UIView 和 CALayer 的 transform3D 属性来实现整个效果的，而是使用 UICollectionView 来完成所有的视图管理和实现。</li>\n<li><a href=\"https://github.com/TBXark/TKRubberIndicator\" target=\"_blank\" rel=\"noopener\">TKRubberIndicator.swift</a> - 一个很不错的 page control。</li>\n<li><a href=\"http://code.cocoachina.com/view/127174\" target=\"_blank\" rel=\"noopener\">渐变特效文字</a> - 做了一个仿iPhone的移动滑块来解锁的渐变特效文字,还有一个类似ktv歌词显示的文字特效。</li>\n<li><a href=\"https://github.com/zekunyan/TTGEmojiRate\" target=\"_blank\" rel=\"noopener\">TTGEmojiRate.swift</a> - TTGEmojiRate.swift以Emoji表情为基础绘图，<a href=\"http://tutuge.me/2015/10/25/ttgemojirate-lib/\" target=\"_blank\" rel=\"noopener\">Swift开源项目: TTGEmojiRate的实现</a>。</li>\n<li><a href=\"https://github.com/nathanwhy/HYAwesomeTransition\" target=\"_blank\" rel=\"noopener\">HYAwesomeTransition</a> - 模仿格瓦拉的转场效果。</li>\n<li><a href=\"https://github.com/seedante/CardAnimation\" target=\"_blank\" rel=\"noopener\">CardAnimation.swift</a> - CardAnimation 是国人开发的一个用 Swift 实现卡片垂直翻转动画的 Demo, <a href=\"http://www.jianshu.com/p/286222d4edf8\" target=\"_blank\" rel=\"noopener\">实现思路</a>。</li>\n<li><a href=\"https://github.com/Glow-Inc/TaskSwitcherDemon\" target=\"_blank\" rel=\"noopener\">TaskSwitcherDemon</a> -  是仿造iOS9的Task Switcher做出来的动画效果, 具体的实现思路可参照<a href=\"http://tech.glowing.com/cn/implement-ios9-task-switcher-animation/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>。</li>\n<li><a href=\"https://github.com/lzwjava/CoreAnimationCode\" target=\"_blank\" rel=\"noopener\">CoreAnimationCode.swift</a> - 提供了 “iOS Core Animation Advanced Techniques” 书籍中的代码实例, 方便开发者们进行参考学习。</li>\n<li><a href=\"https://github.com/xxycode/UIViewXXYBoom\" target=\"_blank\" rel=\"noopener\">UIViewXXYBoom.swift</a> - 一个炫酷好玩的爆炸效果，<a href=\"http://xxycode.com/ru-he-zhi-zuo-ge-xuan-ku-hao-wan-de-bao-zha-xiao-guo-2/\" target=\"_blank\" rel=\"noopener\">如何实现这个效果</a>。</li>\n<li><a href=\"https://github.com/zhxnlai/ZLSwipeableViewSwift\" target=\"_blank\" rel=\"noopener\">ZLSwipeableViewSwift</a> - <a href=\"https://github.com/zhxnlai/ZLSwipeableView\" target=\"_blank\" rel=\"noopener\">ZLSwipeableView</a> - ZLSwipeableViewSwift在Tinder and Potluck中的动画效果实现思路（连续卡片翻页效果），最贴心的是作者提供了OC和Swift两个版本来供开发者使用，非常丝滑顺畅的效果。</li>\n<li><a href=\"https://github.com/Resory/RYCuteView\" target=\"_blank\" rel=\"noopener\">RYCuteView</a> - 用UIBezierPath实现果冻效果。 <a href=\"http://www.jianshu.com/p/21db20189c40\" target=\"_blank\" rel=\"noopener\">教程</a></li>\n<li><a href=\"https://github.com/JakeLin/IBAnimatable\" target=\"_blank\" rel=\"noopener\">IBAnimatable.swift</a> - 第三方开源库IBAnimatable可以帮助我们在Interface Builder和Swift Playground里面设计UI, 交互, 导航模式, 换场和动画。</li>\n<li><a href=\"https://github.com/Ramotion/circle-menu\" target=\"_blank\" rel=\"noopener\">circle-menu.swift</a> - 动画效率很赞的圆形缩放菜单演示及类库。</li>\n</ul>\n<p>========</p>\n<h4 id=\"网络相关\"><a href=\"#网络相关\" class=\"headerlink\" title=\"网络相关\"></a>网络相关</h4><h5 id=\"网络连接\"><a href=\"#网络连接\" class=\"headerlink\" title=\"网络连接\"></a>网络连接</h5><ul>\n<li><a href=\"https://github.com/AFNetworking/AFNetworking\" target=\"_blank\" rel=\"noopener\">AFNetworking</a> - ASI不升级以后，最多人用的网络连接开源库，<a href=\"http://www.superqq.com/blog/2014/11/07/ioswang-luo-bian-cheng-zhi-afnetworkingshi-yong/\" target=\"_blank\" rel=\"noopener\">iOS网络编程之AFNetworking使用</a>,<a href=\"http://www.superqq.com/blog/2015/01/29/ioskai-fa-xia-zai-wen-jian-su-du-ji-suan/\" target=\"_blank\" rel=\"noopener\">iOS开发下载文件速度计算</a> , <a href=\"http://www.cocoachina.com/ios/20151022/13831.html\" target=\"_blank\" rel=\"noopener\">AFNetworking 3.0迁移指南</a> , <a href=\"http://www.cocoachina.com/ios/20140829/9480.html\" target=\"_blank\" rel=\"noopener\">AFNetworking2.0源码解析&lt;一&gt;</a> 、<a href=\"http://www.cocoachina.com/ios/20140904/9523.html\" target=\"_blank\" rel=\"noopener\">AFNetworking2.0源码解析&lt;二&gt;</a>、<a href=\"http://www.cocoachina.com/ios/20140916/9632.html\" target=\"_blank\" rel=\"noopener\">AFNetworking源码解析&lt;三&gt;</a>、<a href=\"http://www.cocoachina.com/ios/20141120/10265.html\" target=\"_blank\" rel=\"noopener\">AFNetworking源码解析&lt;四&gt;</a>。</li>\n<li><a href=\"https://github.com/Alamofire/Alamofire\" target=\"_blank\" rel=\"noopener\">Alamofire</a> - Alamofire是AFNetworking的作者mattt新写的网络请求的swift库。</li>\n<li><a href=\"https://github.com/yuantiku/YTKNetwork\" target=\"_blank\" rel=\"noopener\">YTKNetwork</a> - 是基于 AFNetworking 封装的 iOS网络库，提供了更高层次的网络访问抽象。相比AFNetworking，YTKNetwork提供了以下更高级的功能：按时间或版本号缓存网络请求内容、检查返回 JSON 内容的合法性、文件的断点续传、批量的网络请求发送、filter和插件机制等。</li>\n<li><a href=\"https://github.com/CoderJackyHuang/HYBNetworking\" target=\"_blank\" rel=\"noopener\">HYBNetworking</a> - 基于AFN封装的网络库，可以通用。<a href=\"http://www.henishuo.com/base-on-afnetworking-wrapper/\" target=\"_blank\" rel=\"noopener\">基于AFNetworking封装网络库说明</a>目前已经提供了通用的GET/POST、上传、下载API等。</li>\n<li><a href=\"https://github.com/DeveloperLx/LxFTPRequest\" target=\"_blank\" rel=\"noopener\">LxFTPRequest</a> - 支持获取FTP服务器资源列表，下载/上传文件，创建/销毁ftp服务器文件/目录，以及下载断点续传，下载/上传进度，自动判断地址格式合法性跟踪等功能！国人开发，QQ：349124555。</li>\n<li><a href=\"https://github.com/HHuiHao/HSDownloadManager\" target=\"_blank\" rel=\"noopener\">HSDownloadManager</a> - HSDownloadManager，下载音乐、视频、图片各种资源，支持多任务、断点下载。</li>\n<li><a href=\"https://github.com/HHuiHao/MutableUploadDemo\" target=\"_blank\" rel=\"noopener\">MutableUploadDemo</a> - 模拟需求：图文混编，要求用户选择图片后就上传，可选择多图，并行上传，用户确定提交后后台执行，必须全部图片上传完才能提交文字。</li>\n<li><a href=\"https://github.com/swtlovewtt/WTRequestCenter\" target=\"_blank\" rel=\"noopener\">WTRequestCenter</a> - 方便缓存的请求库，提供了方便的HTTP请求方法，传入请求url和参数，返回成功和失败的回调。 UIKit扩展提供了许多不错的方法，快速缓存图片，图片查看，缩放功能， 颜色创建，设备UUID，网页缓存，数据缓存等功能。 无需任何import和配置，目前实现了基础需求。</li>\n<li><a href=\"https://github.com/mutualmobile/MMWormhole\" target=\"_blank\" rel=\"noopener\">MMWormhole</a> - Message passing between iOS apps and extensions 2个iOS设备之间通信。 </li>\n<li><a href=\"https://github.com/socketio/socket.io-client-swift\" target=\"_blank\" rel=\"noopener\">socket.io-client-swift</a> - WebSockect 客户端类库。开放的通讯协议，有利于构建强大地跨平台应用。 </li>\n<li><a href=\"https://github.com/nghialv/Transporter\" target=\"_blank\" rel=\"noopener\">Transporter</a> - swift， 短小、精悍、易用的多文件（并发或顺序）上传和下载传输库。还支持后台运行、传输进程跟踪、暂停/续传/取消/重试控制等功能。 </li>\n<li><a href=\"https://github.com/kevin0571/STNetTaskQueue\" target=\"_blank\" rel=\"noopener\">STNetTaskQueue</a> - STNetTaskQueue Objective-C 可扩展网络请求管理库。</li>\n<li><a href=\"https://github.com/robbiehanson/CocoaAsyncSocket\" target=\"_blank\" rel=\"noopener\">CocoaAsyncSocket</a> - 在iOS开发中使用socket，一般都是用第三方库AsyncSocket，不得不承认这个库确实很强大，<a href=\"http://www.superqq.com/blog/2015/04/03/ioskai-fa-zhi-asyncsocketshi-yong-jiao-cheng/\" target=\"_blank\" rel=\"noopener\">使用教程</a>。</li>\n<li><a href=\"https://github.com/roustem/AsyncSocket\" target=\"_blank\" rel=\"noopener\">AsyncSocket</a> - AsyncSocket。</li>\n<li><a href=\"http://code.cocoachina.com/view/128711\" target=\"_blank\" rel=\"noopener\">Socket通信</a> - 通过AsyncSocket封装的Socket通讯方法，简单实用，通俗易懂，初学者不能错过 。</li>\n<li><a href=\"https://github.com/eugenehp/GCDAsyncSocket\" target=\"_blank\" rel=\"noopener\">GCDAsyncSocket</a> - GCDAsyncSocket ， <a href=\"https://github.com/smalltask/TestTcpConnection\" target=\"_blank\" rel=\"noopener\">不错的Demo</a>。</li>\n<li><a href=\"https://github.com/JustHTTP/Just\" target=\"_blank\" rel=\"noopener\">Just</a> - 小而美的 HTTP 类。功能简单、直接、完整且健壮性高– swift。</li>\n<li><a href=\"https://github.com/nghialv/Future\" target=\"_blank\" rel=\"noopener\">Future</a> - 基于微框架设计思想的异步执行及结果响应类，代码即简单又干净– swift。</li>\n<li><a href=\"https://github.com/mzeeshanid/MZDownloadManager\" target=\"_blank\" rel=\"noopener\">MZDownloadManager</a> - 下载管理。 </li>\n<li><a href=\"https://github.com/venmo/DVR\" target=\"_blank\" rel=\"noopener\">DVR</a> - 针对网络请求的测试框架，超实用的工具。且支持 iOS, OSX, watchOS 全平台。</li>\n<li><a href=\"https://github.com/hongfenglt/HFDownLoad\" target=\"_blank\" rel=\"noopener\">HFDownLoad</a> - iOS开发网络篇之文件下载、大文件下载、断点下载:NSData方式、NSURLConnection方式、NSURLSession下载方式 <a href=\"http://blog.csdn.net/hongfengkt/article/details/48290561\" target=\"_blank\" rel=\"noopener\">下载方式具体的思路、区别见Blog</a> 。</li>\n<li><a href=\"https://github.com/johnlui/Pitaya\" target=\"_blank\" rel=\"noopener\">Pitaya.swift</a> - Pitaya 是纯 Swift 写的 iOS 网络库，支持 Basic Authorization、SSL 钢钉、HTTP raw body / JSON body、快速文件上传等特性，并通过内置 JSONNeverDie 实现了对 JSON 的完全支持，开箱即用。 <a href=\"https://github.com/johnlui/Pitaya/wiki/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3\" target=\"_blank\" rel=\"noopener\">中文文档</a></li>\n</ul>\n<h5 id=\"图像获取\"><a href=\"#图像获取\" class=\"headerlink\" title=\"图像获取\"></a>图像获取</h5><ul>\n<li><a href=\"https://github.com/rs/SDWebImage\" target=\"_blank\" rel=\"noopener\">SDWebImage</a> - SDWebImage 网络图片获取及缓存处理。</li>\n<li><a href=\"https://github.com/onevcat/Kingfisher\" target=\"_blank\" rel=\"noopener\">Kingfisher</a> - 纯 Swift 实现的类 SDWebImage 库，实现了异步下载和缓存图片。</li>\n<li><a href=\"https://github.com/kiavashfaisali/KFSwiftImageLoader\" target=\"_blank\" rel=\"noopener\">KFSwiftImageLoader</a> - Swift，一个图像缓存加载库。 </li>\n<li><a href=\"https://github.com/path/FastImageCache\" target=\"_blank\" rel=\"noopener\">FastImageCache</a> - FastImageCache 网络图片获取及缓存处理，<a href=\"http://www.imooc.com/wenda/detail/247239\" target=\"_blank\" rel=\"noopener\">iOS图片加载速度极限优化—FastImageCache解析</a>。</li>\n<li><a href=\"https://github.com/enormego/EGOCache\" target=\"_blank\" rel=\"noopener\">EGOCache</a> - 十分知名的第三方缓存类库，可以缓存NSString、UIImage、NSImage以及NSData。除此，如果还可以缓存任何一个实现了<nscoding>接口的对象。所有缓存的数据都可以自定义过期的时间，默认是1天。EGOCache 支持多线程（thread-safe），<a href=\"http://www.superqq.com/blog/2014/11/06/ioskai-fa-:uitableviewjia-zai-duo-zhang-zhao-pian-dao-zhi-nei-cun-shang-zhang-de-wen-ti/\" target=\"_blank\" rel=\"noopener\">UITableView加载多张照片导致内存上涨的问题</a>。<ul>\n<li><a href=\"https://github.com/ibireme/YYWebImage/\" target=\"_blank\" rel=\"noopener\">YYWebImage</a> - 一个图片加载库 YYWebImage，支持 APNG、WebP、GIF 播放，支持渐进式图片加载，更高性能的缓存，更多图像处理方法，可以替代 SDWebImage 等开源库，<a href=\"http://blog.ibireme.com/2015/11/02/mobile_image_benchmark/\" target=\"_blank\" rel=\"noopener\">相关文章</a>。</li>\n</ul>\n</nscoding></li>\n</ul>\n<h5 id=\"网络聊天\"><a href=\"#网络聊天\" class=\"headerlink\" title=\"网络聊天\"></a>网络聊天</h5><ul>\n<li><a href=\"https://github.com/robbiehanson/XMPPFramework\" target=\"_blank\" rel=\"noopener\">XMPPFramework</a> - XMPPFramework openfire聊天。</li>\n<li><a href=\"https://github.com/dsxNiubility/SXTheQQ\" target=\"_blank\" rel=\"noopener\">SXTheQQ</a> - 用xmppFramework框架编写QQ程序，主要为了练习通讯的一些原理，界面比较渣 必须要先在本地配置好环境才可以运行。</li>\n<li><a href=\"http://www.easemob.com/\" target=\"_blank\" rel=\"noopener\">环信</a> - 给开发者更稳定IM云功能。8200万用户考验，好用！（暂无及时语音、视频通话）</li>\n<li><a href=\"http://www.rongcloud.cn/\" target=\"_blank\" rel=\"noopener\">融云</a> - 即时通讯云服务提供商。（暂无及时语音、视频通话）</li>\n<li><a href=\"http://www.yuntongxun.com\" target=\"_blank\" rel=\"noopener\">容联云通讯</a> - 提供基于互联网通话,视频会议,呼叫中心/IVR,IM等通讯服务。</li>\n<li><a href=\"https://github.com/ChatSecure/ChatSecure-iOS\" target=\"_blank\" rel=\"noopener\">chatsecure</a> - 基于XMPP的iphone、android加密式聊天软件， <a href=\"https://chatsecure.org/\" target=\"_blank\" rel=\"noopener\">chatsecure官网</a> 。 <a href=\"https://github.com/chrisballinger/Off-the-Record-iOS\" target=\"_blank\" rel=\"noopener\">iOS代码1</a>，<a href=\"https://github.com/chrisballinger/ChatSecure-iOS\" target=\"_blank\" rel=\"noopener\">iOS代码2</a>， <a href=\"http://www.cocoachina.com/bbs/read.php?tid=153156\" target=\"_blank\" rel=\"noopener\">iOS中文版</a>。</li>\n<li><a href=\"https://github.com/xhzengAIB/MessageDisplayKit\" target=\"_blank\" rel=\"noopener\">MessageDisplayKit</a> - 仿微信聊天，参考JSQMessagesViewController。（国人写）</li>\n<li><a href=\"https://github.com/jessesquires/JSQMessagesViewController\" target=\"_blank\" rel=\"noopener\">JSQMessagesViewController</a> - 聊天 。 </li>\n<li><a href=\"https://github.com/HanYaZhou1990/-SunFlower\" target=\"_blank\" rel=\"noopener\">SunFlower</a> - 环信聊天demo，比较多功能 。</li>\n<li><a href=\"http://code4app.com/ios/BlueTalk%E8%93%9D%E7%89%99%E8%81%8A%E5%A4%A9-%E6%89%8B%E6%9C%BA%E4%B9%8B%E9%97%B4/552b8190933bf0291e8b4748\" target=\"_blank\" rel=\"noopener\">BlueTalk蓝牙聊天</a> - 以MultipeerConnectivity为基础， 实现了简单的蓝牙聊天。</li>\n</ul>\n<h5 id=\"网络测试\"><a href=\"#网络测试\" class=\"headerlink\" title=\"网络测试\"></a>网络测试</h5><ul>\n<li><a href=\"https://github.com/tonymillion/Reachability\" target=\"_blank\" rel=\"noopener\">Reachability</a> - 苹果提供过一个Reachability类，用于检测网络状态。但是该类由于年代久远，并不支持ARC。该项目旨在提供一个苹果的Reachability类的替代品，支持ARC和block的使用方式。<a href=\"http://www.jianshu.com/p/efcfa3c87306\" target=\"_blank\" rel=\"noopener\">iOS网络监测如何区分2、3、4G</a>   </li>\n<li><a href=\"https://github.com/ashleymills/Reachability.swift\" target=\"_blank\" rel=\"noopener\">Reachability.swift</a> - 用于替换苹果的 Reachability 类，可以方便地检测当前是否联网以及具体的联网状态。 </li>\n<li><a href=\"https://github.com/crazypoo/SimpleCarrie\" target=\"_blank\" rel=\"noopener\">SimpleCarrie</a> - 简单的运营商信息获取!。</li>\n<li><a href=\"https://github.com/crazypoo/SimpleCarrie\" target=\"_blank\" rel=\"noopener\">NetReachability</a> - swift2.0 简单的方法检查网络连接的连通性，提供通知中心集成接口。 </li>\n<li><a href=\"https://github.com/coderyi/NetworkEye\" target=\"_blank\" rel=\"noopener\">NetworkEye</a> - 一个网络调试库，可以监控App内HTTP请求并显示请求相关的详细信息，方便App开发的网络调试。 </li>\n<li><a href=\"https://github.com/bin1991/SimpleBS\" target=\"_blank\" rel=\"noopener\">SimpleBS.swift</a> - 网络测试小工具。</li>\n</ul>\n<h5 id=\"WebView\"><a href=\"#WebView\" class=\"headerlink\" title=\"WebView\"></a>WebView</h5><ul>\n<li><a href=\"https://github.com/mattgemmell/MGTemplateEngine\" target=\"_blank\" rel=\"noopener\">MGTemplateEngine</a> - MGTemplateEngine比较象 PHP 中的 Smarty、FreeMarker 和 Django的模版引擎，是一个轻量级的引擎，简单好用。只要设置很多不同的HMTL模版，就能轻松的实现一个View多种内容格式的显示，对于不熟悉HTML或者减轻 工作量而言，把这些工作让设计分担一下还是很好的，也比较容易实现设计想要的效果。</li>\n<li><a href=\"https://github.com/ninjinkun/NJKWebViewProgress\" target=\"_blank\" rel=\"noopener\">NJKWebViewProgress</a> - 一个 UIWebView 的进度条接口库,UIWebView 本身是不提供进度条的。 </li>\n<li><a href=\"https://github.com/siriusdely/GTMNSString-HTML\" target=\"_blank\" rel=\"noopener\">GTMNSString-HTML</a> - 谷歌开源的用于过滤HTML标签。 </li>\n<li><a href=\"https://github.com/WangXiaoxi/IOSLearing/\" target=\"_blank\" rel=\"noopener\">js-in-ios</a> - webView与js的交互。 <ul>\n<li><a href=\"https://github.com/mozhenhau/D3Generator/\" target=\"_blank\" rel=\"noopener\">D3Generator</a> - D3Generator根据dict字典生成对象。 适用webview和push推送时，根据后台传回字典实现动态跳转。<a href=\"http://mozhenhau.com/2016/02/07/D3Generator实现万能跳转界面，UIWebview与js随意交互/\" target=\"_blank\" rel=\"noopener\">实现说明</a></li>\n</ul>\n</li>\n</ul>\n<p>========</p>\n<h4 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h4><ul>\n<li><a href=\"https://github.com/johnezang/JSONKit\" target=\"_blank\" rel=\"noopener\">JSONKit</a> - JSONKit库是非常简单易用而且效率又比较高的，重要的JSONKit适用于ios 5.0以下的版本,使用JSONKit库来解析json文件，只需要下载JSONKit.h 和JSONKit.m添加到工程中；然后加入libz.dylib即可。</li>\n<li><a href=\"https://github.com/icanzilb/JSONModel\" target=\"_blank\" rel=\"noopener\">JSONModel</a> - 解析服务器返回的Json数据的库,<a href=\"http://www.jianshu.com/p/3d795ea37835\" target=\"_blank\" rel=\"noopener\">JSONModel源码解析一</a>。</li>\n<li><a href=\"https://github.com/Mantle/Mantle\" target=\"_blank\" rel=\"noopener\">Mantle</a> - Mantle主要用来将JSON数据模型化为OC对象, 大系统中使用。<a href=\"http://www.iwangke.me/2014/10/13/Why-Changba-iOS-choose-Mantle/\" target=\"_blank\" rel=\"noopener\">为什么选择Mantle</a>。</li>\n<li><a href=\"https://github.com/refusebt/RFJModel\" target=\"_blank\" rel=\"noopener\">RFJModel</a> - RFJModel是一个IOS类库，可以将JSON字典自动装填到OBJC对象。相比JSONModel有一些非常好的特性，使用上也比较简单。</li>\n<li><a href=\"https://github.com/nicklockwood/XMLDictionary\" target=\"_blank\" rel=\"noopener\">XMLDictionary</a> - ios与mac os平台下xml与NSDictionary相互转化开源类库。</li>\n<li><a href=\"https://github.com/CoderMJLee/MJExtension\" target=\"_blank\" rel=\"noopener\">MJExtension</a> - 用于json转model进行使用，转换效率很高，使用也比较简单，只要前后台约定好，json直接就转成了model。</li>\n<li><a href=\"https://github.com/CoderMJLee/MJExtension\" target=\"_blank\" rel=\"noopener\">CFRuntime</a> - “Swift 版的 MJExtension，运行时、反射与一键字典模型互转”。 </li>\n<li><a href=\"https://github.com/openboy2012/DDModel\" target=\"_blank\" rel=\"noopener\">DDModel</a> - 快速搭建项目Model层，支持ORM映射关系，能从JSON/XML直接实例一个Model对象。支持SQLite本地数据持久化，封装了HTTP， 减少HTTP代码与UIViewController的代码耦合，支持Cache；类似RESTKit、Mantle的功能；使用该类库以后简化了网络层的开发工作，把更多的精力放在UI上面；目前只支持GET/POST方法的请求。使用到的第三方库有：1.SQLitePersistentObject; 2.JTObjectMapping; 3.AFNetworking; 4.XMLDictionary;</li>\n<li><a href=\"https://github.com/alexeyxo/protobuf-swift\" target=\"_blank\" rel=\"noopener\">protobuf-swift</a> - Protocol Buffers 的 Swift 语言实现库。P.S. Protocol Buffers 是 Google 开源项目，主要功能是实现直接序列化结构化的对象数据，方便跨平台快速传递，开发者也可以直接修改 protobuf 中的数据。相比 XML 和 JSON，protobuf 解析更快，存储更小。</li>\n<li><a href=\"https://github.com/matthewcheok/JSONCodable\" target=\"_blank\" rel=\"noopener\">JSONCodable</a> - 基于 Swift 2.0 新特性（Protocol Extensions and Error Handling）的JSON 解析类。</li>\n<li><a href=\"https://github.com/SwiftyJSON/SwiftyJSON\" target=\"_blank\" rel=\"noopener\">SwiftyJSON</a> - 使Swift的JSON解析变得简单。</li>\n<li><a href=\"https://github.com/johnlui/JSONNeverDie\" target=\"_blank\" rel=\"noopener\">JSONNeverDie.swift</a> - JSON 到 Model 类的自动映射工具。</li>\n<li><a href=\"https://github.com/cezheng/Fuzi\" target=\"_blank\" rel=\"noopener\">Fuzi.swift</a> - Swift实现的轻量快速的 XML/HTML 解析器。</li>\n<li><a href=\"https://github.com/drmohundro/SWXMLHash\" target=\"_blank\" rel=\"noopener\">SWXMLHash.swift</a> - 易用的 XML 解析类库。非常实用的“轮子”。</li>\n<li><a href=\"https://github.com/ibireme/YYModel\" target=\"_blank\" rel=\"noopener\">YYModel</a> - 高性能的 iOS JSON 模型框架。</li>\n<li><a href=\"https://github.com/benloong/TidyJSON\" target=\"_blank\" rel=\"noopener\">TidyJSON.swift</a> - TidyJSON.swift一款简单、易用、明了的 JSON 解析小类库。</li>\n<li><a href=\"https://github.com/postmates/PMJSON\" target=\"_blank\" rel=\"noopener\">PMJSON.swift</a> - PMJSON.swift简单、实用、高效的 JSON 解析类库。</li>\n</ul>\n<p>========</p>\n<h4 id=\"通讯录\"><a href=\"#通讯录\" class=\"headerlink\" title=\"通讯录\"></a>通讯录</h4><ul>\n<li><a href=\"http://code.cocoachina.com/view/128245\" target=\"_blank\" rel=\"noopener\">快速查找联系人</a> - 类似微信联系人搜索的界面,快速查找联系人,并支持点击查询结果 。</li>\n</ul>\n<p>========</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ul>\n<li><a href=\"https://github.com/exsortis/DateTimeKit\" target=\"_blank\" rel=\"noopener\">DateTimeKit</a> - 一个超赞的时间处理的库，Joda-Time ！ 他能帮你轻松处理时区，处理时间加减，计算到期时间等等场景下的问题。</li>\n<li><a href=\"https://github.com/malcommac/SwiftDate\" target=\"_blank\" rel=\"noopener\">SwiftDate</a> - 特别完整、强大的日期时间操作管理类库。它几乎涵盖了已知开源日期类库所有优秀特性。 他能帮你轻松处理时区，处理时间加减，计算到期时间等等场景下的问题。</li>\n<li><a href=\"https://github.com/nst/iOS-Runtime-Headers\" target=\"_blank\" rel=\"noopener\">iOS私有API</a> - 私有API，绿色 == public，红色 == private，蓝色 == dylib。</li>\n<li><a href=\"http://opensource.apple.com/source/CF/\" target=\"_blank\" rel=\"noopener\">iOS源代码</a> - iOS源代码。</li>\n<li><a href=\"https://github.com/ShiqiYu/libfacedetection\" target=\"_blank\" rel=\"noopener\">libfacedetection</a> - C++ 人脸识别 包含正面和多视角人脸检测两个算法.优点:速度快(OpenCV haar+adaboost的2-3倍), 准确度高 (FDDB非公开类评测排名第二），能估计人脸角度。 </li>\n<li><a href=\"https://github.com/Brimizer/Slidden\" target=\"_blank\" rel=\"noopener\">Slidden</a> - 一个老外开源的开发自定义键盘的库，利用这个开源库，可以方便的配置键位、颜色以及键位对应的图片。</li>\n<li><a href=\"https://github.com/michaeltyson/TPKeyboardAvoiding\" target=\"_blank\" rel=\"noopener\">TPKeyboardAvoiding</a> - 用户键盘弹出自动计算高度，进行屏幕滚动操作。</li>\n<li><a href=\"http://d.cocoachina.com/code/detail/298267\" target=\"_blank\" rel=\"noopener\">CDPMonitorKeyboard</a> - CDPMonitorKeyboard封装,可以解决输入视图(例如textField,textView等)被键盘覆盖问题，并可设置高于键盘多少。 </li>\n<li><a href=\"http://code.cocoachina.com/detail/297973/%E8%87%AA%E5%8A%A8%E7%9B%91%E5%90%AC%E9%94%AE%E7%9B%98%E9%AB%98%E5%BA%A6/\" target=\"_blank\" rel=\"noopener\">自动监听键盘高度</a> - 自动监听键盘高度，初始界面，输入框在屏幕最下方，当键盘出现时，输入框随即移动到键盘上方。 </li>\n<li><a href=\"https://github.com/Jiar/KeyboardToolBar/\" target=\"_blank\" rel=\"noopener\">KeyboardToolBar</a> - 从此不再担心键盘遮住输入框，<a href=\"http://www.jianshu.com/p/48993ff982c1\" target=\"_blank\" rel=\"noopener\">文档</a>。</li>\n<li><a href=\"https://github.com/441088327/SYKeyboardTextField\" target=\"_blank\" rel=\"noopener\">SYKeyboardTextField</a> - SYKeyboardTextField 是一个轻巧,简单,非侵入式的键盘附随输入框! 采用Swift编写。</li>\n<li><a href=\"https://github.com/zwaldowski/BlocksKit\" target=\"_blank\" rel=\"noopener\">BlocksKit</a> - block框架，为 OC 常用类提供了强大的 Block 语法支持，使得编写 OC 代码变得舒适、快速、优雅。</li>\n<li><a href=\"https://github.com/facebook/KVOController\" target=\"_blank\" rel=\"noopener\">KVOController</a> - 在项目中有使用 KVO ，那么 KVOController 绝对是个好选择。它是 facebook 开源的一个 KVO 增强框架。 </li>\n<li><a href=\"https://github.com/arashpayan/appirater\" target=\"_blank\" rel=\"noopener\">appirater</a> - 用于提醒用户给你的 APP 打分的工具。</li>\n<li><a href=\"https://github.com/MHaroonBaig/MotionKitr\" target=\"_blank\" rel=\"noopener\">MotionKitr</a> - 为核心运动框架（The Core Motion framework）提供友好的类库封装，以更方便使用三轴陀螺仪和加速感应器特性。</li>\n<li><a href=\"https://launchkit.io/reviews/\" target=\"_blank\" rel=\"noopener\">Review Monitor</a> -  第一时间自动推送 Apple Store 的用户评论到你的邮件箱或者 Slack，第一时间跟进用户反馈，打造优秀 App 必备工具！类似的有：App annie 的类似功能。</li>\n<li><a href=\"https://github.com/Naituw/WBWebViewConsole\" target=\"_blank\" rel=\"noopener\">WBWebViewConsole</a> - 类似微博iPhone客户端的 “调试选项” 吗？把其中的 “内置浏览器网页调试” 开源在 Github 上了。</li>\n<li><a href=\"https://github.com/futurice/ios-good-practices\" target=\"_blank\" rel=\"noopener\">ios-good-practices</a> - ios-good-practices iOS 开发最佳实践。</li>\n<li><a href=\"http://ios.jobbole.com/81830/\" target=\"_blank\" rel=\"noopener\">iOS开发最佳实践</a> - iOS 开发最佳实践 – 中文。</li>\n<li><a href=\"http://code.cocoachina.com/detail/232160\" target=\"_blank\" rel=\"noopener\">TodayExtensionSharingDefaults</a> - TodayExtensionSharingDefaults是一个iOS 8 Today扩展示例，可以使用NSUserDefaults与其containing app分享数据。</li>\n<li><a href=\"http://code.cocoachina.com/view/129108\" target=\"_blank\" rel=\"noopener\">原生实现扫描二维码条码</a> - iOS原生实现扫描二维码条码.</li>\n<li><a href=\"https://github.com/yannickl/QRCodeReader.swift\" target=\"_blank\" rel=\"noopener\">QRCodeReader.swift</a> - QRCodeReader.swift一款简单的 QR 二维码阅读组件及示例，提供前后相机切换功能。</li>\n<li><a href=\"https://github.com/MxABC/swiftScan\" target=\"_blank\" rel=\"noopener\">swiftScan</a> - 具有丰富功能的二维码扫描组件及类库。<a href=\"https://github.com/MxABC/LBXScan\" target=\"_blank\" rel=\"noopener\">对应OC版本LBXScan</a>。</li>\n<li><a href=\"https://github.com/appcoda/QR-Code-Generator\" target=\"_blank\" rel=\"noopener\">QR-Code-Generator.swift</a> - 生成二维码。</li>\n<li><a href=\"https://github.com/100mango/QRCatcher\" target=\"_blank\" rel=\"noopener\">QRCatcher</a> - 一个简洁美观的二维码扫描应用， <a href=\"https://github.com/100mango/zen/blob/master/iOS%E5%AD%A6%E4%B9%A0%EF%BC%9AAVFoundation%20%E8%A7%86%E9%A2%91%E6%B5%81%E5%A4%84%E7%90%86/iOS%E5%AD%A6%E4%B9%A0%EF%BC%9AAVFoundation%20%E8%A7%86%E9%A2%91%E6%B5%81%E5%A4%84%E7%90%86%20.md\" target=\"_blank\" rel=\"noopener\">iOS学习：AVFoundation 视频流处理–二维码扫描</a>。</li>\n<li><a href=\"https://github.com/zhengjinghua/MQRCodeReaderViewController\" target=\"_blank\" rel=\"noopener\">MQRCodeReaderViewController</a> - 二维码扫描控件, UI 做了优化, 仿造微信, 直接拖进项目就可使用。</li>\n<li><a href=\"https://github.com/ayanonagon/Parsimmon\" target=\"_blank\" rel=\"noopener\">Parsimmon</a> - swift，小而美的语言学类库封装工具包。提供分词、标记词性、词形归并、朴素贝页斯分类、决策树等自然语言分析小工具。P.S. 英语分词效果好于中文，感兴趣的同学可以针对中文做一些优化开发。参考译文 NSHipster - <a href=\"http://nshipster.cn/nslinguistictagger/\" target=\"_blank\" rel=\"noopener\">NSLinguistic​Tagger</a>。</li>\n<li><a href=\"https://github.com/liuchunlao/Password-keyboard\" target=\"_blank\" rel=\"noopener\">Password-keyboard</a> - 随机变换数字位置的密码键盘。 模仿银行类应用在付款时输入的随机密码键盘。</li>\n<li><a href=\"https://github.com/SemperIdem/MKMapView-Extension\" target=\"_blank\" rel=\"noopener\">MKMapView-Extension</a> - 这是关于 MKMapView 写的一个基于swift的扩展，可以扩展 MKMapView 的相关功能，减少复用代码量。</li>\n<li><a href=\"https://github.com/nomothetis/SemverKit\" target=\"_blank\" rel=\"noopener\">SemverKit</a> - 针对符合『语义化版本规范 2.0.0』版本号的解析、比较运算类库。不仅支持 Major, Minor, Patch，还支持 Alpha 和 Beta 预发布版本，以及相应地递增运算扩展。</li>\n<li><a href=\"https://github.com/jpotts18/SwiftValidator\" target=\"_blank\" rel=\"noopener\">SwiftValidator</a> - 基于规则的输入验证类库。项目良好的面向对象设计思想，使规则的扩展及自定义非常方便。更专业的规则引擎（甚至是基于自然语言的规则配置）解决方案，比如：开源的 Drools，商用的 ILOG 等。</li>\n<li><a href=\"https://github.com/gali8/Tesseract-OCR-iOS\" target=\"_blank\" rel=\"noopener\">Tesseract-OCR-iOS</a> - 有关OCR文字识别项目。</li>\n<li><a href=\"https://github.com/osnr/Screenotate\" target=\"_blank\" rel=\"noopener\">Screenotate</a> - 支持 OCR 文字识别的载屏笔记 Mac 完整应用。</li>\n<li><a href=\"http://cocoacats.com/\" target=\"_blank\" rel=\"noopener\">cocoacats</a> - 【分类汇总】里面收集了 iOS 中常用的分类文件，一直在更新。</li>\n<li><a href=\"https://github.com/nonstriater/Olla4iOS\" target=\"_blank\" rel=\"noopener\">Olla4iOS</a> - 过去积累的一些方便复用的类和方法，还在整理中。</li>\n<li><a href=\"https://github.com/Draveness/DKNightVersion\" target=\"_blank\" rel=\"noopener\">DKNightVersion</a> - 用最快的方式给你的应用加上夜间和白天的切换效果。 </li>\n<li><a href=\"https://github.com/morizotter/TouchVisualizer\" target=\"_blank\" rel=\"noopener\">TouchVisualizer</a> - 实用的多点触摸可视化组件。扩展并作用于 UIWindows，结构上提供了简单地针对触摸显示定制，比如触摸点的颜色。</li>\n<li><a href=\"https://github.com/wezm/RegexKitLite\" target=\"_blank\" rel=\"noopener\">RegexKitLite</a> - 用来处理正则表达式。 </li>\n<li><a href=\"https://github.com/sharplet/Regex\" target=\"_blank\" rel=\"noopener\">Regex.swift</a> - 实用的正则表达式微框架类库。</li>\n<li><a href=\"https://github.com/cezheng/PySwiftyRegex\" target=\"_blank\" rel=\"noopener\">PySwiftyRegex.swift</a> - 像Python一样简洁高效地作正则处理。</li>\n<li><a href=\"https://github.com/marmelroy/PhoneNumberKit\" target=\"_blank\" rel=\"noopener\">PhoneNumberKit.swift</a> -  解析、格式化及验证国际电话号码工具库（相当于 Google 的 libphonenumber 库的 Swift 版本）。</li>\n<li><a href=\"https://github.com/czechboy0/XcodeServerSDK\" target=\"_blank\" rel=\"noopener\">XcodeServerSDK</a> - 非官方 Xcode Server SDK 封装库。 P.S. 该 SDK 分离自之前推荐的由该作者开发的自动测试框架 <a href=\"https://github.com/czechboy0/Buildasaur\" target=\"_blank\" rel=\"noopener\">Buildasaur</a>。</li>\n<li><a href=\"https://github.com/FabrizioBrancati/BFKit-Swift\" target=\"_blank\" rel=\"noopener\">BFKit-Swift</a> - BFKit-Swift 这套工具库可以提高应用开发效率。 </li>\n<li><a href=\"https://github.com/CloudKitSpace/CKSIncrementalStore\" target=\"_blank\" rel=\"noopener\">CKSIncrementalStore</a> - 基于 CloudKit 服务器实现多终端数据同步。</li>\n<li><a href=\"https://github.com/oisdk/SwiftSequence\" target=\"_blank\" rel=\"noopener\">SwiftSequence</a> - 简洁、灵活、多变的操作 SequenceType 的类库（基于微框架（μframework）设计思想）。</li>\n<li><a href=\"https://github.com/photondragon/IDNFeedParser\" target=\"_blank\" rel=\"noopener\">IDNFeedParser</a> - 一个简单易用的Rss解析库。</li>\n<li><a href=\"https://github.com/nsdictionary/CoreUmeng\" target=\"_blank\" rel=\"noopener\">CoreUmeng</a> - 简单：友盟分享封装。</li>\n<li><a href=\"https://github.com/100apps/openshare\" target=\"_blank\" rel=\"noopener\">openshare</a> - 不用官方SDK，利用社交软件移动客户端(微信/QQ/微博/人人/支付宝)分享/登录/支付。</li>\n<li><a href=\"https://github.com/tomkowz/Swifternalization\" target=\"_blank\" rel=\"noopener\">Swifternalization</a> - 一套实用的本地化工具库。使用教程及 API 文档完整。值得收入项目的“轮子”。<ul>\n<li><a href=\"https://github.com/marmelroy/Localize-Swift\" target=\"_blank\" rel=\"noopener\">Localize-Swift</a> - Localize-Swift一款开发者不可或缺的国际化及本地化字符串框架支持类库。同样地，使用简单、直观又方便。</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/owensd/apous\" target=\"_blank\" rel=\"noopener\">apous</a> - 一款有趣的 Swift 应用 － 让 Swift 成为脚本语言。</li>\n<li><a href=\"https://github.com/kostiakoval/Mirror\" target=\"_blank\" rel=\"noopener\">Mirror</a> - 通过反射（Refection）实现镜像对象封装库。从而可以更轻松获取（或输出）对象属性名、类型及值变量。</li>\n<li><a href=\"https://github.com/nixzhu/Proposer\" target=\"_blank\" rel=\"noopener\">Proposer</a> - Proposer 用单个 API 处理 iOS 上的权限请求，以便使用前确认可访问“相册”、“相机”、“麦克风”、“通讯录”或“用户位置”。 </li>\n<li><a href=\"https://github.com/nickoneill/PermissionScope\" target=\"_blank\" rel=\"noopener\">PermissionScope</a> - 用这个库可以在询问用户前，就告知用户所需的系统权限，为用户带来更好的体验。接受度更高—&gt;更多活跃用户-&gt;更高的留存率-&gt;数据更好-&gt;下载率更高。 </li>\n<li><a href=\"https://github.com/intuit/LocationManager\" target=\"_blank\" rel=\"noopener\">LocationManager</a> - CoreLocation使用起来还是比较麻烦的，需要授权，判断系统版本等等，所以推荐使用第三方框架LocationManager，使用Block，十分简单！<a href=\"http://www.cocoachina.com/ios/20150721/12611.html\" target=\"_blank\" rel=\"noopener\">iOS-CoreLocation：无论你在哪里，我都要找到你！</a> 。</li>\n<li><a href=\"https://github.com/Cee/pangu.objective-c\" target=\"_blank\" rel=\"noopener\">pangu.objective-c</a> - 有多种语言实现版本～ Pangu.Objective-C：格式化中英文之间的空格（OC）。</li>\n<li><a href=\"https://github.com/atomicobject/objection\" target=\"_blank\" rel=\"noopener\">objection</a> - 一个轻量级的依赖注入框架Objection。</li>\n<li><a href=\"https://github.com/johnlui/Swift-On-iOS/tree/master/ControlOrientation/ControlOrientation\" target=\"_blank\" rel=\"noopener\">ControlOrientation</a> - 如何用代码控制以不同屏幕方向打开新页面【iOS】， <a href=\"http://lvwenhan.com/ios/458.html\" target=\"_blank\" rel=\"noopener\">使用说明</a>。</li>\n<li><a href=\"https://github.com/nicklockwood/iRate\" target=\"_blank\" rel=\"noopener\">iRate</a> - 问卷调查。</li>\n<li><a href=\"https://github.com/nihalahmed/GameCenterManager\" target=\"_blank\" rel=\"noopener\">GameCenterManager</a> - 在iOS上管理GameCenter vanilla并不算难，但是有了这个库会更简单也更快。好上加好不是更好么。</li>\n<li><a href=\"https://github.com/slackhq/SlackTextViewController\" target=\"_blank\" rel=\"noopener\">SlackTextViewController</a> - 用作极佳、定制的文本输入控制时，自适应文本区域，手势识别、自动填充、多媒体合并，快速drop-in解决方案。</li>\n<li><a href=\"https://github.com/saturngod/IAPHelper\" target=\"_blank\" rel=\"noopener\">IAPHelper</a> - 应用内付费给我们提供了很多样本代码，而这个库丢掉了那些代码，将金钱交易相关的大多通用任务做了简单的封装。</li>\n<li><a href=\"https://github.com/JanC/TAPromotee\" target=\"_blank\" rel=\"noopener\">TAPromotee</a> - 交叉推广应用是你可以免费实现的最佳市场推广策略之一。使用这个库做起来非常简单，不用都不可能——将TAPromotee加入你的podfile中，免费配置与享受更多下载吧。</li>\n<li><a href=\"https://github.com/cgwangding/DownloadFontOnline\" target=\"_blank\" rel=\"noopener\">DownloadFontOnline</a> - 实现了在线下载一些字体的功能，不用在工程中导入字体库，下载的字体也不会保存在你的应用中，所以可以放心使用。修复了一下崩溃的bug。</li>\n<li><a href=\"https://github.com/zhenlintie/STClock\" target=\"_blank\" rel=\"noopener\">STClock</a> - 仿锤子时钟。</li>\n<li><a href=\"https://github.com/git-up/GitUp\" target=\"_blank\" rel=\"noopener\">GitUp</a> - GitUp是一个可视化的Git客户端，能够实时的进行编辑、合并、回滚等多种操作，更多功能，请下载体验。</li>\n<li><a href=\"http://code.cocoachina.com/detail/320392/\" target=\"_blank\" rel=\"noopener\">获取联系人信息，通讯录</a> - 获取联系人信息，通讯录。</li>\n<li><a href=\"https://github.com/HHuiHao/Universal-Jump-ViewController\" target=\"_blank\" rel=\"noopener\">Universal-Jump-ViewController</a> - 根据规则跳转到指定的界面(runtime实用篇一)。</li>\n<li><a href=\"https://github.com/Ekhoo/Device\" target=\"_blank\" rel=\"noopener\">Device-swift</a> - 可以非常方便的获取设备型号和屏幕尺寸，实现起来难度不大，大家可以学习一下源码。</li>\n<li><a href=\"https://github.com/khoiln/RunKit\" target=\"_blank\" rel=\"noopener\">RunKit.swift</a> - 针对 GCD 框架的一个友好访问封装库（支持方法链式调用）。</li>\n<li><a href=\"https://github.com/FlexMonkey/Plum-O-Meter\" target=\"_blank\" rel=\"noopener\">Plum-O-Meter</a> - swift 称重应用， (3D Touch之我见)[<a href=\"http://swift.gg/2015/10/23/3d-touch-impressions-and-thoughts/]。\" target=\"_blank\" rel=\"noopener\">http://swift.gg/2015/10/23/3d-touch-impressions-and-thoughts/]。</a></li>\n<li><a href=\"http://code.cocoachina.com/view/128249\" target=\"_blank\" rel=\"noopener\">打开自带地图、百度地图、腾讯地图</a> - 打开自带地图、百度地图、腾讯地图。</li>\n<li><a href=\"https://github.com/colin1994/batteryLevelTest\" target=\"_blank\" rel=\"noopener\">batteryLevelTest</a> - runtime精准获取电池电量，<a href=\"http://www.jianshu.com/p/11c1afdf5415\" target=\"_blank\" rel=\"noopener\">文档</a>。</li>\n<li><a href=\"https://github.com/100apps/openshare\" target=\"_blank\" rel=\"noopener\">openshare</a> - 不用官方SDK，利用社交软件移动客户端(微信/QQ/微博/人人/支付宝)分享/登录/支付。</li>\n<li><a href=\"https://github.com/MatthewYork/DateTools\" target=\"_blank\" rel=\"noopener\">DateTools</a> - 用于提高Objective-C中日期和时间相关操作的效率。灵感来源于 DateTime和Time Period Library。</li>\n<li><a href=\"https://github.com/deepdevelop/DDSlackFeedback\" target=\"_blank\" rel=\"noopener\">DDSlackFeedback</a> - 用这个接口实现的摇一摇上传文字或者截屏反馈到你的 Slack channel，特别适合测试 app 的时候用，集成也很简单。</li>\n<li><a href=\"https://github.com/coolnameismy/BabyBluetooth\" target=\"_blank\" rel=\"noopener\">BabyBluetooth</a> - 是一个非常容易使用的蓝牙库, 适用于 iOS 和 Mac OS, 基于原生 CoreBluetooth 框架封装, 可以帮开发者们更简单地使用 CoreBluetooth API, 使用链式方法体, 使得代码更简洁、优雅。<a href=\"http://www.cocoachina.com/ios/20160219/15301.html\" target=\"_blank\" rel=\"noopener\">iOS蓝牙开发（四）：BabyBluetooth蓝牙库介绍</a></li>\n<li><a href=\"https://github.com/rasmusth/BluetoothKit\" target=\"_blank\" rel=\"noopener\">BluetoothKit.swift</a> - 基于 CoreBluetooth API 实现iOS/OS X 设备间蓝牙通讯封装类库。功能强大、传输稳定，示例完整，很酷。</li>\n<li><a href=\"https://github.com/bignerdranch/CoreDataStack\" target=\"_blank\" rel=\"noopener\">CoreDataStack.swift</a> - 存储栈。</li>\n<li><a href=\"https://github.com/THREDOpenSource/SYNQueue\" target=\"_blank\" rel=\"noopener\">SYNQueue.swift</a> - 执行队列类库。</li>\n<li><a href=\"https://github.com/davedelong/DDMathParser\" target=\"_blank\" rel=\"noopener\">DDMathParser.swift</a> - 相比 NSExpression 和 GCMathPaser，功能更强大的数学表达式解析器。</li>\n<li><a href=\"https://github.com/soffes/RateLimit\" target=\"_blank\" rel=\"noopener\">RateLimit.swift</a> - 简单、实用定时执行任务工具类库。</li>\n<li><a href=\"https://github.com/shaojiankui/IOS-Categories\" target=\"_blank\" rel=\"noopener\">iOS-Categories</a> - 收集了许多有助于开发的iOS扩展,各种category分类。</li>\n<li><a href=\"https://github.com/ibireme/YYCategories\" target=\"_blank\" rel=\"noopener\">YYCategories</a> - 功能丰富的 Category 类型工具库。</li>\n<li><a href=\"https://github.com/ibireme/YYAsyncLayers\" target=\"_blank\" rel=\"noopener\">YYAsyncLayers</a> -  iOS 异步绘制与显示的工具。</li>\n<li><a href=\"https://github.com/ibireme/YYDispatchQueuePool\" target=\"_blank\" rel=\"noopener\">YYDispatchQueuePool</a> -  iOS 全局并发队列管理工具。</li>\n<li><a href=\"https://github.com/ibireme/YYKeyboardManager\" target=\"_blank\" rel=\"noopener\">YYKeyboardManager</a> -   iOS 键盘监听管理工具。</li>\n<li><a href=\"https://github.com/6ag/shoppingCart\" target=\"_blank\" rel=\"noopener\">shoppingCart.swift</a> - swift的购物车demo，采用纯代码UI，autolayout自动布局，core animation动画效果。</li>\n<li><a href=\"https://github.com/gbaldera/ShoppingCartExample\" target=\"_blank\" rel=\"noopener\">ShoppingCartExample</a> - 购物车最多star demo。</li>\n<li><a href=\"https://github.com/yhangeline/shoppingCart\" target=\"_blank\" rel=\"noopener\">shoppingCart1</a> - 仿美团购物车效果。</li>\n<li><a href=\"https://github.com/WZF-Fei/ZFShoppingCart\" target=\"_blank\" rel=\"noopener\">ZFShoppingCart</a> - 仿照美团外卖加入购物车的动态效果。</li>\n<li><a href=\"https://github.com/spxvszero/ShoppingCart\" target=\"_blank\" rel=\"noopener\">shoppingCart2</a> - 一个购物车demo，包含购物车动画效果、购物车多选、删除、编辑等功能。</li>\n<li><a href=\"https://github.com/DrYrw/shoppingCart-demo\" target=\"_blank\" rel=\"noopener\">shoppingCart-demo</a> - 一个简单的购物车功能实现demo。</li>\n<li><a href=\"https://github.com/ZyZwei/OC_ShoppingCart_Demo\" target=\"_blank\" rel=\"noopener\">OC_ShoppingCart_Demo</a> - 简单实现购物车常见的筛选功能。</li>\n<li><a href=\"https://github.com/342261733/XNQShoppingTrolley\" target=\"_blank\" rel=\"noopener\">XNQShoppingTrolley</a> - 购物车功能 基本功能仿照淘宝的购物车。<ul>\n<li><a href=\"http://code.cocoachina.com/view/129430\" target=\"_blank\" rel=\"noopener\">shopCarDemobyCX</a> - shopCarDemobyCX一个简易购物车效果，最重要的是可以分单结算，分单个商品结算，代理是主要技术。</li>\n</ul>\n</li>\n<li><a href=\"http://code.cocoachina.com/view/128713\" target=\"_blank\" rel=\"noopener\">MVVM KVO购物车</a> - MVVM KVO 购物车(一处计算总价钱)。</li>\n<li><a href=\"https://github.com/bb-coder/BHBDrawBoarderDemo\" target=\"_blank\" rel=\"noopener\">BHBDrawBoarderDemo车</a> - 仿写猿题库练题画板功能，没有用drawRect，而是用CAShapeLayer来做画板绘画，特别省内存，赞1个，<a href=\"http://bihongbo.com/2016/01/03/memoryGhostdrawRect/\" target=\"_blank\" rel=\"noopener\">实现分析</a>。</li>\n<li><a href=\"https://github.com/uraimo/SwiftyGPIO\" target=\"_blank\" rel=\"noopener\">SwiftyGPIO</a> - 通过 Swift 语言去控制基于 Linux 主板（比如：C.H.I.P. 和 树莓派） 的 GPIO（General Purpose Input Output ），去完成简单的工控功能（比如 LED 灯的显示）。</li>\n<li><a href=\"https://github.com/onmyway133/Scale\" target=\"_blank\" rel=\"noopener\">Scale.swifty</a> - 简单直观的单位计算及换算类库（支持常用计量类型）。代码简洁性、直观性杠杠的。</li>\n<li><a href=\"https://github.com/amayne/SwiftString\" target=\"_blank\" rel=\"noopener\">SwiftString</a> - SwiftString:String 扩展功能很丰富（无论格式化杂乱字符串，还是子串查找，亦或是格式转换都很强大）。</li>\n<li><a href=\"https://github.com/rentzsch/jrswizzle\" target=\"_blank\" rel=\"noopener\">jrswizzle</a> - runtime实现的Method Swizzling第三方框架。</li>\n<li><a href=\"https://github.com/marmelroy/FileBrowser\" target=\"_blank\" rel=\"noopener\">FileBrowser.swift</a> - FileBrowser.swift 一款开源的 iOS 文件浏览器, 支持文件搜索, 文件预览和 3D touch 功能。</li>\n</ul>\n<p>========</p>\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><ul>\n<li><a href=\"https://github.com/ccgus/fmdb\" target=\"_blank\" rel=\"noopener\">FMDB</a> - sqlite的工具， <a href=\"https://github.com/tangqiaoboy/FmdbSample\" target=\"_blank\" rel=\"noopener\">多线程FMDatabaseQueue实例</a>，<a href=\"https://github.com/liuchunlao/LVDatabaseDemo\" target=\"_blank\" rel=\"noopener\">FMDB数据库的使用演示和封装工具类</a>，<a href=\"http://code.cocoachina.com/view/128312\" target=\"_blank\" rel=\"noopener\">基于fmdb 的基本操作</a> 通过 fmdb 进行的数据库的 基本操作(增删改查 )查找是使用 UISearchBar 和UISearchDisplayController 进行混合使用。</li>\n<li><a href=\"https://github.com/Gerry1218/GXDatabaseUtils\" target=\"_blank\" rel=\"noopener\">GXDatabaseUtils</a> - 在FMDB基础上的工具。</li>\n<li><a href=\"https://github.com/realm/realm-cocoa\" target=\"_blank\" rel=\"noopener\">realm-cocoa</a> - Realm是一个真正为移动设备打造的数据库，同时支持Objective-C和Swfit。Realm宣称其相比Sqlite，在移动设备上有着更好的性能表现,<a href=\"https://realm.io/cn/\" target=\"_blank\" rel=\"noopener\">官方中文</a> ，<a href=\"http://swift.gg/2015/12/08/ios-realm-instead-of-coredata/\" target=\"_blank\" rel=\"noopener\">iOS：选择 Realm 而不是 CoreData</a>, <a href=\"http://swift.gg/2015/12/08/building-a-todo-app-using-realm-and-swift/\" target=\"_blank\" rel=\"noopener\">使用 Realm 和 Swift 创建 ToDo 应用</a>。</li>\n<li><a href=\"https://github.com/andrelind/Breeze\" target=\"_blank\" rel=\"noopener\">Breeze</a> - 用Swift写的一个轻量级的CoreData管理工具，并且还支持iCloud 。</li>\n<li><a href=\"https://github.com/Alecrim/AlecrimCoreData\" target=\"_blank\" rel=\"noopener\">AlecrimCoreData</a> - Swift，更容易地访问 CoreData 对象封装类库。除了 CRUD，还提供指针定位，强大的排序、筛选，异步数据获取，以及独立线程后台存取数据。</li>\n<li><a href=\"https://github.com/JohnEstropia/CoreStore\" target=\"_blank\" rel=\"noopener\">CoreStore</a> -  Core Data 管理类库。 其中事务管理及查询是其比较大的亮点，整套 API 功能完整。</li>\n<li><a href=\"https://github.com/magicalpanda/MagicalRecord\" target=\"_blank\" rel=\"noopener\">MagicalRecord</a> - CoreData第一库，MagicalRecord就像是给Core Data提供了一层外包装，隐藏掉所有不相关的东西。 其中事务管理及查询是其比较大的亮点，整套 API 功能完整。</li>\n<li><a href=\"http://rentzsch.github.io/mogenerator/\" target=\"_blank\" rel=\"noopener\">mogenerator</a> - mogenerator为你定义了的Core Data生成默认的数据类。与xCode不一样的是(xCode一个Entity只生成一个NSManagedObject的子类)，mogenerator会为每一个Entity生成两个类。一个为机器准备，一个为人类准备。为机器准备的类一直去匹配data model。为人类准备的类就给你轻松愉快的去修改和保存。</li>\n<li><a href=\"https://github.com/hyperoslo/Presentation\" target=\"_blank\" rel=\"noopener\">Presentation</a> - 重量级好项目 Presentation，它可以方便你制作定制的动画式教程、Release Notes、个性化演讲稿等。</li>\n<li><a href=\"https://github.com/terhechte/CoreValue\" target=\"_blank\" rel=\"noopener\">CoreValue</a> - Swift 2 版 Core Data 封装库。相比另外两个 <a href=\"https://github.com/arkverse/SwiftRecord\" target=\"_blank\" rel=\"noopener\">SwiftRecord</a>和 <a href=\"https://github.com/JohnEstropia/CoreStore\" target=\"_blank\" rel=\"noopener\">CoreStore</a>更轻量。</li>\n<li><a href=\"https://github.com/sqlcipher/sqlcipher\" target=\"_blank\" rel=\"noopener\">SQLCipher</a> - SQLCipher使用256-bit AES加密，SQLCipher分为收费版本和免费版本。<a href=\"https://www.zetetic.net/sqlcipher/ios-tutorial/\" target=\"_blank\" rel=\"noopener\">官方教程</a>， <a href=\"http://foggry.com/blog/2014/05/19/jia-mi-ni-de-sqlite/\" target=\"_blank\" rel=\"noopener\">加密你的SQLite</a> - 各种sqlite数据库加密介绍。 <a href=\"http://download.csdn.net/detail/wzzvictory_tjsd/7379055\" target=\"_blank\" rel=\"noopener\">SQLCipherDemo下载</a> 。</li>\n<li><a href=\"https://github.com/stephencelis/SQLite.swift\" target=\"_blank\" rel=\"noopener\">SQLite.swift</a> - 纯swift实现的类型安全的SQLite3封装，数据存储和JSON解析是永恒的话题。</li>\n<li><a href=\"https://github.com/qutheory/fluent\" target=\"_blank\" rel=\"noopener\">fluent.swift</a> - 纯swift实现的类型安全的SQLite3封装，数据存储和JSON解析是永恒的话题。</li>\n</ul>\n<p>========</p>\n<h4 id=\"缓存处理\"><a href=\"#缓存处理\" class=\"headerlink\" title=\"缓存处理\"></a>缓存处理</h4><ul>\n<li><a href=\"https://github.com/yuantiku/YTKKeyValueStore\" target=\"_blank\" rel=\"noopener\">YTKKeyValueStore</a> - Key-Value存储工具类，<a href=\"http://tangqiaoboy.gitcafe.io/blog/2014/10/03/opensouce-a-key-value-storage-tool/\" target=\"_blank\" rel=\"noopener\">说明</a>。</li>\n<li><a href=\"https://github.com/tumblr/TMCache\" target=\"_blank\" rel=\"noopener\">TMCache</a> - TMCache 是 Tumblr 开源的一个基于 key/value 的数据缓存类库,可以用于缓存一些临时数据或者需要频繁加载的数据,比如某些下载的数据或者一些临时处理结果。</li>\n<li><a href=\"https://github.com/jl322137/JLKeychain\" target=\"_blank\" rel=\"noopener\">JLKeychain</a> - 快捷使用keychain存储数据的类，使keychain像NSUserDefaults一样工作。</li>\n<li><a href=\"https://github.com/soffes/sskeychain\" target=\"_blank\" rel=\"noopener\">sskeychain</a> - SSKeyChains对苹果安全框架API进行了简单封装,支持对存储在钥匙串中密码、账户进行访问,包括读取、删除和设置。</li>\n<li><a href=\"https://github.com/kishikawakatsumi/KeychainAccess\" target=\"_blank\" rel=\"noopener\">KeychainAccess</a> - 管理Keychain接入的小助手。</li>\n<li><a href=\"https://github.com/ibireme/YYCache\" target=\"_blank\" rel=\"noopener\">YYCache</a> - 高性能的 iOS 缓存框架。</li>\n<li><a href=\"https://github.com/CoderJackyHuang/RuntimeDemo\" target=\"_blank\" rel=\"noopener\">RuntimeDemo</a> - runtime自动归档/解档,<a href=\"http://www.henishuo.com/runtime-archive-unarchive-automaticly/\" target=\"_blank\" rel=\"noopener\">源码分析</a>。</li>\n</ul>\n<p>========</p>\n<h4 id=\"PDF\"><a href=\"#PDF\" class=\"headerlink\" title=\"PDF\"></a>PDF</h4><ul>\n<li><a href=\"https://github.com/vfr/Reader\" target=\"_blank\" rel=\"noopener\">Reader</a> - Reader可提供类似iBooks的文档导航，支持屏幕旋转和所有方向，并通过密码保护加密PDF文件，支持PDF链接和旋转页面。</li>\n</ul>\n<p>========</p>\n<h4 id=\"图像浏览及处理\"><a href=\"#图像浏览及处理\" class=\"headerlink\" title=\"图像浏览及处理\"></a>图像浏览及处理</h4><ul>\n<li><a href=\"https://github.com/liric28/FLAnimatedImage\" target=\"_blank\" rel=\"noopener\">FLAnimatedImage</a> - gif播放处理的工具。</li>\n<li><a href=\"https://github.com/yackle/CLImageEditor\" target=\"_blank\" rel=\"noopener\">CLImageEditor</a> - 超强的图片编辑库，快速帮你实现旋转，防缩，滤镜等等一系列麻烦的事情。</li>\n<li><a href=\"https://github.com/esilverberg/ios-image-filters\" target=\"_blank\" rel=\"noopener\">ios-image-filters</a> - 图像滤镜，库比较旧了，很容易崩溃。 </li>\n<li><a href=\"https://github.com/xissburg/XBImageFilters\" target=\"_blank\" rel=\"noopener\">XBImageFilters</a> - 图像滤镜。</li>\n<li><a href=\"https://github.com/mwaterfall/MWPhotoBrowser\" target=\"_blank\" rel=\"noopener\">MWPhotoBrowser</a> - 一个非常不错的照片浏览器，在github的star接近3000个，<a href=\"http://www.superqq.com/blog/2015/01/22/jie-jue-mwphotobrowserzhong-de-sdwebimagejia-zai-da-tu-dao-zhi-de-nei-cun-jing-gao-wen-ti/\" target=\"_blank\" rel=\"noopener\">解决MWPhotoBrowser中的SDWebImage加载大图导致的内存警告问题</a>。</li>\n<li><a href=\"https://github.com/objcio/issue-21-core-image-explorer\" target=\"_blank\" rel=\"noopener\">core-image-explorer</a> -  Core Image 滤镜处理图片– swift ，<a href=\"http://objccn.io/issue-21-6/\" target=\"_blank\" rel=\"noopener\">Core Image 介绍</a>。 </li>\n<li><a href=\"https://github.com/rFlex/CoreImageShop\" target=\"_blank\" rel=\"noopener\">CoreImageShop</a> - CoreImageShop图片滤镜处理– Mac app that let you create a complete Core Image Filter usable on iOS using SCRecorder。</li>\n<li><a href=\"https://github.com/BradLarson/GPUImage\" target=\"_blank\" rel=\"noopener\">GPUImage</a> - 处理图片效果。</li>\n<li><a href=\"https://github.com/ruslanskorb/RSKImageCropper\" target=\"_blank\" rel=\"noopener\">RSKImageCropper</a> - 适用于iOS的图片裁剪器，类似Contacts app，可上下左右移动图片选取最合适的区域。</li>\n<li><a href=\"http://code.cocoachina.com/detail/232156\" target=\"_blank\" rel=\"noopener\">WZRecyclePhotoStackView</a> - 删除照片交互–WZRecyclePhotoStackView，就是模拟生活中是删除或保留犹豫不决的情形而产生的。 在上滑，下滑的部分，借鉴了<a href=\"https://github.com/cwRichardKim/TinderSimpleSwipeCards\" target=\"_blank\" rel=\"noopener\">TinderSimpleSwipeCards</a>。</li>\n<li><a href=\"https://github.com/schwa/TimingFunctionEditor\" target=\"_blank\" rel=\"noopener\">TimingFunctionEditor</a> - TimingFunctionEditor用swift编写， 贝塞尔曲线编辑器，编辑后可以预览或拷贝代码片段直接使用。P.S. 该项目采用更简单的依赖管理器 <a href=\"https://github.com/Carthage/Carthage\" target=\"_blank\" rel=\"noopener\">Carthage</a> ，而非常用的 CocoaPods。<a href=\"http://www.cocoachina.com/ios/20141204/10528.html\" target=\"_blank\" rel=\"noopener\">Carthage介绍中文</a>。</li>\n<li><a href=\"https://github.com/aaronabentheuer/AAFaceDetection\" target=\"_blank\" rel=\"noopener\">AAFaceDetection</a> - AAFaceDetection–swift，简单、实用的面部识别封装库。虽然该技术从 iOS 5 发展，不过真正有趣的应用还不多。</li>\n<li><a href=\"https://github.com/itouch2/PhotoTweaks\" target=\"_blank\" rel=\"noopener\">PhotoTweaks</a> - 这个库挺赞的，正好是对图像操作的。</li>\n<li><a href=\"https://github.com/contentful-labs/Concorde\" target=\"_blank\" rel=\"noopener\">Concorde</a> - swift, Concorde, 一个可用于下载和解码渐进式 JPEG 的库, 可用来改善应用的用户体验。</li>\n<li><a href=\"https://github.com/tristanhimmelman/ZoomTransition\" target=\"_blank\" rel=\"noopener\">ZoomTransition</a> - swift, 通过手势操控图片的放大、缩小、旋转等自由变化效果的组件及示例。</li>\n<li><a href=\"https://github.com/melvitax/AFImageHelper\" target=\"_blank\" rel=\"noopener\">AFImageHelper</a> - swift,一套针对 UIImage 和 UIImageView 的实用扩展库，功能包含填色和渐变、裁剪、缩放以及具有缓存机制的在线图片获取。</li>\n<li><a href=\"https://github.com/demon1105/PinterestSwift\" target=\"_blank\" rel=\"noopener\">PinterestSwift</a> - swift,Pinterest 风格图片缩放、切换示例。</li>\n<li><a href=\"https://github.com/KittenYang/KYElegantPhotoGallery\" target=\"_blank\" rel=\"noopener\">KYElegantPhotoGallery</a> - 一个优雅的图片浏览库。</li>\n<li><a href=\"https://github.com/gsdios/SDPhotoBrowser\" target=\"_blank\" rel=\"noopener\">SDPhotoBrowser</a> - 仿新浪动感图片浏览器,非常简单易用的图片浏览器，模仿微博图片浏览器动感效果，综合了图片展示和存储等多项功能。</li>\n<li><a href=\"https://github.com/chennyhuang/HZPhotoBrowser\" target=\"_blank\" rel=\"noopener\">HZPhotoBrowser</a> - 一个类似于新浪微博图片浏览器的框架（支持显示和隐藏动画；支持双击缩放，手势放大缩小；支持图片存储；支持网络加载gif图片，长图滚动浏览；支持横竖屏显示）。 </li>\n<li><a href=\"https://github.com/YiZhuoChen/PhotoStackView-Swift\" target=\"_blank\" rel=\"noopener\">PhotoStackView-Swift</a> - PhotoStackView——照片叠放视图，<a href=\"http://blog.csdn.net/u013604612/article/details/46336657\" target=\"_blank\" rel=\"noopener\">使用说明</a>。</li>\n<li><a href=\"https://github.com/FlexMonkey/MarkingMenu\" target=\"_blank\" rel=\"noopener\">MarkingMenu</a> - 基于手势、类似 Autodesk Maya 风格标记菜单及图片渲染。</li>\n<li><a href=\"https://github.com/dsxNiubility/SXPhotoShow\" target=\"_blank\" rel=\"noopener\">SXPhotoShow</a> - UICollectionViewFlowLayout流水布局 是当下collectionView中常用且普通的布局方式。本代码也写了三种好看的布局，其中LineLayout和流水布局有很大的相同点就直接继承UICollectionViewFlowLayout，然后StackLayout，CircleLayout这两种都是直接继承自最原始的UICollectionViewLayout 布局方案。</li>\n<li><a href=\"https://github.com/cgwangding/PictureWatermark\" target=\"_blank\" rel=\"noopener\">PictureWatermark</a> - 主要实现了给图片加文字以及图片水印的功能，已封装成了UIImage的类别，方便使用。</li>\n<li><a href=\"http://code.cocoachina.com/detail/320603/\" target=\"_blank\" rel=\"noopener\">自定义宽高比的相册框 拍照</a> - 取出照片时 弹出自定义view。在这个自定义view上创建一个需要的相框大小的view层 把取出的图片赋值给UIImageView按缩放添加到这个层上。对uiimageView添加捏合、移动 手势。添加按钮 选取，最后根据位移和缩放比例 裁剪image。</li>\n<li><a href=\"https://github.com/gang544043963/LGPhotoBrowser\" target=\"_blank\" rel=\"noopener\">LGPhotoBrowser</a> - LGPhotoBrowser:相册选择/浏览器/照相机（仿微信）,包含三个模块：照片浏览器，相册选择器，照相机。</li>\n<li><a href=\"https://github.com/oscarWyz/PhotoBrowser\" target=\"_blank\" rel=\"noopener\">PhotoBrowser</a> - 一个简单的好用的的图片浏览器。</li>\n<li><a href=\"https://github.com/xujingzhou/BeautyHour\" target=\"_blank\" rel=\"noopener\">BeautyHour</a> - 完整应用，功能与“美图秀秀”雷同。</li>\n<li><a href=\"https://github.com/DroidsOnRoids/MPParallaxView\" target=\"_blank\" rel=\"noopener\">MPParallaxView</a> - 是用 Swift 写的类似 Apple TV Parallax 效果的视图。</li>\n<li><a href=\"https://github.com/zhengjinghua/StitchingImage\" target=\"_blank\" rel=\"noopener\">StitchingImage</a> - 仿微信群组封面拼接控件, 直接拖进项目就可使用，<a href=\"http://gold.xitu.io/entry/56395f5360b20b143a9178f6\" target=\"_blank\" rel=\"noopener\">教程</a>。</li>\n<li><a href=\"https://github.com/seedante/SDECollectionViewAlbumTransition\" target=\"_blank\" rel=\"noopener\">SDECollectionViewAlbumTransition</a> - 用自定义的 push 和 pop 实现了有趣的 iOS 相册翻开动画效果。</li>\n<li><a href=\"https://github.com/xujingzhou/BeautyHour\" target=\"_blank\" rel=\"noopener\">SKPhotoBrowser.swift</a> - swift中规中矩、实用的图片浏览类库。示例也很完整。</li>\n<li><a href=\"https://github.com/kean/Nuke\" target=\"_blank\" rel=\"noopener\">Nuke.swift</a> - 完整、强大、实用的图片管理类库。主要功能包括可定制装载，缓存，滤镜及尺寸变换。</li>\n<li><a href=\"https://github.com/AwesomeDennis/DNImagePicker\" target=\"_blank\" rel=\"noopener\">DNImagePicker</a> - 类似wechat的图片选择。</li>\n<li><a href=\"https://github.com/lioonline/CocoaPicker\" target=\"_blank\" rel=\"noopener\">CocoaPicker</a> - 仿QQ图片选择器（OC）。</li>\n<li><a href=\"https://github.com/johnil/JFImagePickerController\" target=\"_blank\" rel=\"noopener\">JFImagePickerController</a> - vvebo作者：多选照片、预览已选照片、针对超大图片优化。</li>\n<li><a href=\"https://github.com/vitoziv/VIPhotoView\" target=\"_blank\" rel=\"noopener\">VIPhotoView</a> - 图片浏览，用于展示图片的工具类，因为是个 View，所以你可以放在任何地方显示。支持旋转，双击指定位置放大等。</li>\n<li><a href=\"https://github.com/SpringOx/AGImagePickerController\" target=\"_blank\" rel=\"noopener\">AGImagePickerController</a> - 是一个图片选择器，支持图片多选，支持大图横滑预览，支持放大预览，支持横竖屏，支持所有的iOS设备。</li>\n<li><a href=\"https://github.com/ibireme/YYImage\" target=\"_blank\" rel=\"noopener\">YYImage</a> - 功能强大的 iOS 图像框架，支持大部分动画图像、静态图像的播放/编码/解码。</li>\n<li><a href=\"https://github.com/KyoheiG3/PagingView\" target=\"_blank\" rel=\"noopener\">PagingView.swift</a> - 注重细节的自动布局分页视图组件。</li>\n<li><a href=\"https://github.com/banchichen/TZImagePickerController\" target=\"_blank\" rel=\"noopener\">TZImagePickerController</a> - 一个支持多选、选原图和视频的图片选择器，同时有预览功能，适配了iOS6789系统。<a href=\"http://www.cocoachina.com/ios/20160112/14942.html\" target=\"_blank\" rel=\"noopener\">教程</a>.</li>\n<li><a href=\"http://code.cocoachina.com/view/129134\" target=\"_blank\" rel=\"noopener\">更换头像</a> - 用户选取从相机或者相册获取图片，并且显示在View上。</li>\n<li><a href=\"https://github.com/luzefeng/DouBanMeinv\" target=\"_blank\" rel=\"noopener\">DouBanMeinv.swift</a> - 抓取豆瓣美女图片，瀑布流显示。</li>\n<li><a href=\"https://github.com/ACEYL/ZZPhotoKit\" target=\"_blank\" rel=\"noopener\">ZZPhotoKit</a> - 基于Photos和AVFoundation框架开源，相册多选与相机连拍。</li>\n<li><a href=\"https://github.com/startry/SwViewCapture\" target=\"_blank\" rel=\"noopener\">SwViewCapture.swift</a> - SwViewCapture.swift一个用起来还不错的iOS截图库.(支持截取所有内容, 适用于所有ScrollView组成的视图, 包括WebView)。</li>\n</ul>\n<p>========</p>\n<h4 id=\"摄像照相视频音频处理\"><a href=\"#摄像照相视频音频处理\" class=\"headerlink\" title=\"摄像照相视频音频处理\"></a>摄像照相视频音频处理</h4><ul>\n<li><a href=\"https://github.com/rFlex/SCRecorder\" target=\"_blank\" rel=\"noopener\">SCRecorder</a> - SCRecorder 短视频录制。</li>\n<li><a href=\"https://github.com/pingguo-zangqilong/VideoPushDemo\" target=\"_blank\" rel=\"noopener\">VideoPushDemo</a> - 视频剪辑 <a href=\"http://www.jianshu.com/p/3006502912aa\" target=\"_blank\" rel=\"noopener\">视频特效制作1</a> <a href=\"http://www.jianshu.com/p/6313025349a9\" target=\"_blank\" rel=\"noopener\">视频特效制作2</a>。</li>\n<li><a href=\"https://github.com/omergul123/LLSimpleCamera\" target=\"_blank\" rel=\"noopener\">LLSimpleCamera</a> - A simple, customizable camera control for iOS， 摄像头。</li>\n<li><a href=\"https://github.com/syedhali/EZAudio\" target=\"_blank\" rel=\"noopener\">EZAudio</a> - EZAudio 是一个 iOS 和 OSX 上简单易用的音频框架，根据音量实时显示波形图，基于Core Audio，适合实时低延迟音频处理，非常直观。<a href=\"http://segmentfault.com/blog/news/1190000000370957\" target=\"_blank\" rel=\"noopener\">中文介绍</a>,<a href=\"http://www.syedharisali.com/about\" target=\"_blank\" rel=\"noopener\">官网</a>。</li>\n<li><a href=\"http://ffmpeg.org/\" target=\"_blank\" rel=\"noopener\">ffmpeg</a> - ffmpeg官网，<a href=\"http://www.cocoachina.com/ios/20150514/11827.html\" target=\"_blank\" rel=\"noopener\">FFmpeg在iOS上完美编译</a>。</li>\n<li><a href=\"http://www.videolan.org/\" target=\"_blank\" rel=\"noopener\">VCL</a> - VCL官网。 </li>\n<li><a href=\"https://github.com/kolyvan/kxmovie\" target=\"_blank\" rel=\"noopener\">kxmovie</a> - 使用ffmpeg的影片播放器，<a href=\"http://www.cocoachina.com/bbs/read.php?tid=145575\" target=\"_blank\" rel=\"noopener\">修改说明</a>， <a href=\"https://github.com/kinglonghuang\" target=\"_blank\" rel=\"noopener\">修改代码</a>，<a href=\"https://github.com/namebryant/FFmpeg-Compilation\" target=\"_blank\" rel=\"noopener\">基于FFmpeg的kxMoive艰难的编译运行</a>。</li>\n<li><a href=\"https://github.com/Bilibili/ijkplayer\" target=\"_blank\" rel=\"noopener\">ijkplayer</a> - B站开源的视频播放器，支持Android和iOS。 </li>\n<li><a href=\"https://github.com/tumtumtum/StreamingKit\" target=\"_blank\" rel=\"noopener\">StreamingKit</a> - StreamingKit流媒体音乐播放器。 </li>\n<li><a href=\"https://github.com/muhku/FreeStreamer\" target=\"_blank\" rel=\"noopener\">FreeStreamer</a> - FreeStreamer流媒体音乐播放器，cpu占用非常小。</li>\n<li><a href=\"https://github.com/douban/DOUAudioStreamer\" target=\"_blank\" rel=\"noopener\">DOUAudioStreamer</a> - DOUAudioStreamer豆瓣的音乐流媒体播放器。</li>\n<li><a href=\"https://github.com/fmpro/fmpro\" target=\"_blank\" rel=\"noopener\">fmpro</a> - 电台播放器，支持锁屏歌词，支持基本播放流程，歌词展示，后台锁屏播放和控制以及锁屏后封面+歌词，<a href=\"https://github.com/jovisayhehe/fmpro_R\" target=\"_blank\" rel=\"noopener\">fmpro_R</a> 。</li>\n<li><a href=\"https://github.com/mmackh/IPDFCameraViewController\" target=\"_blank\" rel=\"noopener\">IPDFCameraViewController</a> - 支持相机定焦拍摄、滤镜、闪光、实时边框检测以及透视矫正功能，并有简单易用的API。 </li>\n<li><a href=\"https://github.com/rFlex/SCRecorder\" target=\"_blank\" rel=\"noopener\">SCRecorder</a> - 酷似 Instagram/Vine 的音频/视频摄像记录器，以 Objective-C 为基础的过滤器框架。 你可以做很多如下的操作：记录多个视频录像片段。删除任何你不想要的记录段。可以使用任何视频播放器播放片段。保存的记录可以在序列化的 NSDictionary 中使用。（在 NSUserDefaults 的中操作）添加使用 Core Image 的视频滤波器。可自由选择你需要的 parameters 合并和导出视频。</li>\n<li><a href=\"https://github.com/GabrielAlva/Cool-iOS-Camera\" target=\"_blank\" rel=\"noopener\">Cool-iOS-Camera</a> - Cool-iOS-Camera。</li>\n<li><a href=\"https://github.com/IFTTT/FastttCamera\" target=\"_blank\" rel=\"noopener\">FastttCamera</a> - FastttCamera 快速照相。</li>\n<li><a href=\"https://github.com/itsmeichigo/ICGVideoTrimmer\" target=\"_blank\" rel=\"noopener\">ICGVideoTrimmer</a> - ICGVideoTrimmer提供提供视频剪切的视图（类似系统相册中浏览视频时顶部那个条状视图）。左右两个边界选择器还能够自定义。</li>\n<li><a href=\"http://d.cocoachina.com/code/detail/285717\" target=\"_blank\" rel=\"noopener\">IOS录音和播放功能demo</a> - 比较完整的ios录音和播放功能的实现。</li>\n<li><a href=\"https://github.com/imaginary-cloud/CameraManager\" target=\"_blank\" rel=\"noopener\">CameraManager</a> - 相机管理封装类库。看着极好用的样子—-swift。</li>\n<li><a href=\"https://github.com/msching/MCAudioInputQueue\" target=\"_blank\" rel=\"noopener\">MCAudioInputQueue</a> - 简易录音类，基于AudioQueue的。</li>\n<li><a href=\"https://github.com/vizllx/DraggableYoutubeFloatingVideo\" target=\"_blank\" rel=\"noopener\">DraggableYoutubeFloatingVideo</a> - 展示像类似Youtube移动应用的那种浏览视频的效果，当点击某视频时能够从右下方弹出一个界面，并且该界面能够通过手势，再次收缩在右下方并继续播放。这是通过AutoLayout设计实现。</li>\n<li><a href=\"http://www.penguin.cz/~utx/amr\" target=\"_blank\" rel=\"noopener\">amr</a> - 做即时通讯的音频处理，录音文件是m4a，便于web端的音频播放。</li>\n<li><a href=\"https://github.com/f33chobits/FSVoiceBubble\" target=\"_blank\" rel=\"noopener\">FSVoiceBubble</a> - 一个轻量级播放录音音频的气泡：1.支持短时间的音频播放（支持网络音频）；2.播放时的声波动画；3.自定义包括声波的颜色，气泡的背景等。</li>\n<li><a href=\"https://github.com/36Kr-Mobile/KRVideoPlayer\" target=\"_blank\" rel=\"noopener\">KRVideoPlayer</a> - 类似Weico的播放器，支持竖屏模式下全屏播放。</li>\n<li><a href=\"http://code.cocoachina.com/view/128253\" target=\"_blank\" rel=\"noopener\">自定义视频播放器AVPlayer</a> - 利用系统类AVPlayer实现完全自定义视频播放器，显示播放时间，缓存等功能。代码清晰，注释详细。</li>\n<li><a href=\"https://github.com/xujingzhou/VideoBeautify\" target=\"_blank\" rel=\"noopener\">VideoBeautify</a> - 功能酷似美拍,秒拍等应用的源码：对视频进行各种美化处理，采用主题形式进行分类，内含各种滤镜，动画特效和音效等。</li>\n<li><a href=\"https://github.com/hanton/HTY360Player\" target=\"_blank\" rel=\"noopener\">HTY360Player</a> - 是一款提供在 iOS 中使用 360 度无死角拖拽视频进行不同角度播放的视频播放器。</li>\n<li><a href=\"https://github.com/AlexLittlejohn/ALCameraViewController\" target=\"_blank\" rel=\"noopener\">ALCameraViewController</a> - ALCameraViewController 摄像头视图控制器（含可定制照片选择器，图片简单裁切功能）及演示。</li>\n<li><a href=\"https://github.com/lfb-cd/recordDemo\" target=\"_blank\" rel=\"noopener\">recordDemo.swift</a> - 一个Swift语言实现直接可以用的录音Demo，<a href=\"http://www.jianshu.com/p/f0b88355d7cb\" target=\"_blank\" rel=\"noopener\">实现说明</a>。</li>\n<li><a href=\"https://github.com/swiftcodex/Swift-Radio-Pro\" target=\"_blank\" rel=\"noopener\">Swift-Radio-Pro</a> - 集成 LastFM 的专业电台应用（基于 Swift 2.0）。</li>\n<li><a href=\"https://github.com/coderyi/Eleven\" target=\"_blank\" rel=\"noopener\">Eleven</a> - Eleven Player - 一个使用 FFmpeg 实现的简单强大的 iOS 开源播放器。 </li>\n<li><a href=\"https://github.com/mobileplayer/mobileplayer-ios\" target=\"_blank\" rel=\"noopener\">mobileplayer-ios.swift</a> - 很不错的高度可定制播放器项目。 </li>\n<li><a href=\"https://github.com/lajos/iFrameExtractor\" target=\"_blank\" rel=\"noopener\">iFrameExtractor</a> - 开源视频播放器， ffmpeg在iOS的使用-iFrameExtractor源码解析，<a href=\"http://ios.jobbole.com/82408/\" target=\"_blank\" rel=\"noopener\">文章</a>。</li>\n<li><a href=\"https://github.com/gontovnik/Periscope-VideoViewController\" target=\"_blank\" rel=\"noopener\">Periscope-VideoViewController.swift</a> - 简洁实用的视频快进、倒带控制视图类库。</li>\n<li><a href=\"https://github.com/audiokit/AudioKit\" target=\"_blank\" rel=\"noopener\">AudioKit.swift</a> - 音频合成、加工及分析平台（支持 iOS、OS X、tvOS）框架库。无论其易用性，还是功能性及专业性。</li>\n<li><a href=\"https://github.com/menxu/MusicPlayert\" target=\"_blank\" rel=\"noopener\">MusicPlayert</a> - MusicPlayert本地音乐播放+音乐信息显示+在线歌词搜索显示（千千静听服务器）。</li>\n<li><a href=\"https://github.com/liuFangQiang/MusicPlayer\" target=\"_blank\" rel=\"noopener\">MusicPlayert</a> - MusicPlayert音乐播放器，用reveal可以查看层次关系，主要实现了歌词的同步显示。</li>\n<li><a href=\"http://code.cocoachina.com/view/129435\" target=\"_blank\" rel=\"noopener\">音乐播放器</a> - 音乐播放器：显示歌词。</li>\n<li><a href=\"https://github.com/suifengqjn/TBPlayer\" target=\"_blank\" rel=\"noopener\">TBPlayer</a> - 视频变下变播，把播放器播放过的数据流缓存到本地，支持拖动。采用avplayer。<a href=\"http://www.jianshu.com/p/990ee3db0563\" target=\"_blank\" rel=\"noopener\">实现说明</a></li>\n</ul>\n<p>========</p>\n<h4 id=\"响应式框架\"><a href=\"#响应式框架\" class=\"headerlink\" title=\"响应式框架\"></a>响应式框架</h4><ul>\n<li><a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa\" target=\"_blank\" rel=\"noopener\">ReactiveCocoa</a> - ReactiveCocoa 受函数响应式编程激发。不同于使用可变的变量替换和就地修改，RAC提供Signals来捕获当前值和将来值（ <a href=\"http://yulingtianxia.com/blog/2014/07/29/reactivecocoa/\" target=\"_blank\" rel=\"noopener\">使用介绍</a> ），<a href=\"http://iiiyu.com/2014/12/26/learning-ios-notes-thirty-six/\" target=\"_blank\" rel=\"noopener\">不错的例子</a>,入门好教程：<a href=\"http://www.cocoachina.com/ios/20150123/10994.html\" target=\"_blank\" rel=\"noopener\">ReactiveCocoa入门教程：第一部分 </a>。<a href=\"http://ios.jobbole.com/82232/\" target=\"_blank\" rel=\"noopener\">Reactive Cocoa 3.0 在 MVVM 中的应用</a> ,<a href=\"http://www.jianshu.com/p/87ef6720a096\" target=\"_blank\" rel=\"noopener\">小码哥：快速让你上手ReactiveCocoa之基础篇</a>。</li>\n<li><a href=\"https://github.com/ReactiveCocoa/ReactiveAnimation\" target=\"_blank\" rel=\"noopener\">ReactiveAnimation</a> - ReactiveCocoa 推出了一个叫 ReactiveAnimation 的子项目，直接用完全用 Swift 来实现了。</li>\n<li><a href=\"https://github.com/gavinkwoe/BeeFramework\" target=\"_blank\" rel=\"noopener\">BeeFramework</a> -  与ReactiveCocoa类似，<a href=\"http://www.lanrenios.com/tutorials/all/2012/1220/641.html\" target=\"_blank\" rel=\"noopener\">BeeFramework用户指南 v1.0</a>。</li>\n<li><a href=\"https://github.com/iMartinKiss/Objective-Chain\" target=\"_blank\" rel=\"noopener\">Objective-Chain</a> - Objective-Chain是一个面向对象的响应式框架，作者表示该框架吸收了 ReactiveCocoa 的思想，并且想做得更面向对象一些。</li>\n<li><a href=\"https://github.com/ReactiveX/RxSwift\" target=\"_blank\" rel=\"noopener\">RxSwift</a> - RxSwift。 </li>\n<li><a href=\"https://github.com/bppr/Swiftest\" target=\"_blank\" rel=\"noopener\">Swiftest</a> - BDD 全称 Behavior Driven Development，行为驱动开发。各种 DD 数不胜数，孰优孰劣争论不休，其实归根结底还是要根据使用场景进行选择。</li>\n<li><a href=\"https://github.com/lovemo/MVVMFramework\" target=\"_blank\" rel=\"noopener\">MVVMFramework</a> - (OC版)总结整理下一个快速开发框架，分离控制器中创建tableView和collectionView的代码，已加入cell自适应高度，降低代码耦合，提高开发效率。<a href=\"https://github.com/lovemo/MVVMFramework-Swift\" target=\"_blank\" rel=\"noopener\">MVVMFramework-Swift</a> - swift版本。</li>\n</ul>\n<p>========</p>\n<h4 id=\"消息相关\"><a href=\"#消息相关\" class=\"headerlink\" title=\"消息相关\"></a>消息相关</h4><h5 id=\"消息推送客户端\"><a href=\"#消息推送客户端\" class=\"headerlink\" title=\"消息推送客户端\"></a>消息推送客户端</h5><ul>\n<li><a href=\"https://github.com/sagiwei/SGPush/tree/master/SGPushDemo\" target=\"_blank\" rel=\"noopener\">SGPushDemo</a> - 消息推送客户端</li>\n<li><a href=\"https://github.com/mattt/Orbiter\" target=\"_blank\" rel=\"noopener\">Orbiter</a> - 消息推送客户端:Push Notification Registration for iOS.</li>\n<li><a href=\"https://github.com/ios44first/PushDemo\" target=\"_blank\" rel=\"noopener\">PushDemo</a> - 客户端消息接收消息代码，<a href=\"http://blog.sina.com.cn/s/blog_71715bf80102uy2k.html\" target=\"_blank\" rel=\"noopener\">IOS开发之 —- IOS8推送消息注册</a> ， <a href=\"http://my.oschina.net/u/2340880/blog/413584\" target=\"_blank\" rel=\"noopener\">分分钟搞定IOS远程消息推送</a>。</li>\n</ul>\n<h5 id=\"消息推送服务端\"><a href=\"#消息推送服务端\" class=\"headerlink\" title=\"消息推送服务端\"></a>消息推送服务端</h5><ul>\n<li><a href=\"https://code.google.com/p/javapns/downloads/list\" target=\"_blank\" rel=\"noopener\">javapns源代码</a> - 消息推送的java服务端代码，注意：DeviceToken中间不能有空格。</li>\n<li><a href=\"https://github.com/stefanhafeneger/PushMeBaby\" target=\"_blank\" rel=\"noopener\">pushMeBaby</a> - Mac端消息推送端代码，注意：DeviceToken中间要有空格。</li>\n</ul>\n<h5 id=\"通知相关\"><a href=\"#通知相关\" class=\"headerlink\" title=\"通知相关\"></a>通知相关</h5><ul>\n<li><a href=\"https://github.com/jessesquires/JSQNotificationObserverKit\" target=\"_blank\" rel=\"noopener\">JSQNotificationObserverKit</a> - 一款轻量、易用的通知发送及响应框架类库。作者是知名开源项目 JSQMessagesViewController（Objective-C 版即时聊天）的作者 Jesse Squires.</li>\n<li><a href=\"https://github.com/Glow-Inc/GLPubSub\" target=\"_blank\" rel=\"noopener\">GLPubSub</a> - 一个简短实用的 NSNotificationCenter 的封装。</li>\n<li><a href=\"https://github.com/lizyyy/Homeoff\" target=\"_blank\" rel=\"noopener\">Homeoff</a> - 用swift写了一个模仿Launcher通知中心快捷方式的应用。支持20个应用，并增加了一个返回到桌面来解放Home键的功能。</li>\n<li><a href=\"https://github.com/jaydee3/JDStatusBarNotification\" target=\"_blank\" rel=\"noopener\">JDStatusBarNotification</a> - 在状态栏顶部显示通知。可以自定义颜色字体以及动画。支持进度显示以及显示状态指示器。</li>\n</ul>\n<p>========</p>\n<h4 id=\"版本新API的Demo\"><a href=\"#版本新API的Demo\" class=\"headerlink\" title=\"版本新API的Demo\"></a>版本新API的Demo</h4><ul>\n<li><a href=\"https://github.com/WildDylan/appleSample\" target=\"_blank\" rel=\"noopener\">appleSample</a> - iOS 苹果官方Demo合集， <a href=\"https://developer.apple.com/library/ios/navigation/#section=Resource%20Types&amp;topic=Sample%20Code\" target=\"_blank\" rel=\"noopener\">官方demo</a>.</li>\n<li><a href=\"https://github.com/shu223/iOS7-Sampler\" target=\"_blank\" rel=\"noopener\">iOS7-Sampler</a> - 整合了iOS7.0的一些十分有用的特性，比如：Dynamic Behaviors、碰撞检测、语音合成、视图切换、图像滤镜、三维地图、Sprite Kit（动画精灵）、Motion Effect（Parallax）、附近蓝牙或者wifi搜索连接、AirDrop、运动物体追踪（iPhone 5S以上，需要M7处理器）等等。对于日常的应用开发十分实用。 </li>\n<li><a href=\"https://github.com/shu223/iOS8-Sampler\" target=\"_blank\" rel=\"noopener\">iOS8-Sampler</a> - 日本的shuさん制作的 iOS8 参考代码集。01.Audio Effects ；02.New Image Filters；03.Custom Filters；04.Metal Basic；05.Metal Uniform Streaming；06.SceneKit；07.HealthKit；08.TouchID；09.Visual Effects；10.WebKit；11.UIAlertController；12.User Notification；13.Pedometer；14.AVKit；15.Histogram；16.Code Generator；17.New Fonts；18.Popover；19.Accordion Fold Transition</li>\n<li><a href=\"https://github.com/shu223/iOS-9-Sampler\" target=\"_blank\" rel=\"noopener\">iOS-9-Sampler</a> - 通过实例介绍了iOS 9 SDK中重要新特性的使用。</li>\n<li><a href=\"https://github.com/MartinRGB/MTSwift-Learning\" target=\"_blank\" rel=\"noopener\">MTSwift-Learning</a> - 通过一些简单项目实战演练开始学习 Swift 。</li>\n<li><a href=\"https://github.com/shinobicontrols/iOS8-day-by-day\" target=\"_blank\" rel=\"noopener\">iOS8-day-by-day</a> - swift。</li>\n<li><a href=\"https://github.com/shinobicontrols/iOS9-day-by-day\" target=\"_blank\" rel=\"noopener\">iOS9-day-by-day</a> - swfit <a href=\"http://www.jianshu.com/p/039f8de6ee4d\" target=\"_blank\" rel=\"noopener\">iOS9 Day-by-Day :: Day 2 :: UI Testing</a>。</li>\n<li><a href=\"http://www.cocoachina.com/ios/20150714/12557.html\" target=\"_blank\" rel=\"noopener\">iOS 9 分屏多任务</a> - iOS 9 分屏多任务：Slide Over &amp; Split View快速入门（中文版）。</li>\n<li><a href=\"https://github.com/uraimo/uistackview-sample\" target=\"_blank\" rel=\"noopener\">uistackview-sample.swift</a> - iOS 9 引进了 UIStackViews，提供 auto-layout 特性。如果你开发过 Android 应用，会发现它和 LinearLayouts 概念上很类似，它是增强版。你可以手动创建，也可以使用 IB 自动创建，本文用的是代码实现。</li>\n</ul>\n<p>========</p>\n<h4 id=\"代码安全与密码\"><a href=\"#代码安全与密码\" class=\"headerlink\" title=\"代码安全与密码\"></a>代码安全与密码</h4><ul>\n<li><a href=\"https://github.com/Polidea/ios-class-guard\" target=\"_blank\" rel=\"noopener\">ios-class-guard</a> - 一个用于混淆iOS的类名、方法名以及变量名的开源库–有人反映编译出来的app运行不了。</li>\n<li><a href=\"https://www.polidea.com/#!heartbeat/blog/Protecting_iOS_Applications\" target=\"_blank\" rel=\"noopener\">《Protecting iOS Applications》</a>：文章系统地介绍了如何保护iOS程序的代码安全，防止反汇编分析。</li>\n<li><a href=\"https://github.com/facebook/fishhook\" target=\"_blank\" rel=\"noopener\">fishhook</a> - fishhook是Facebook开源的一个可以hook系统方法的工具。</li>\n<li><a href=\"https://github.com/smilingxinyi/GesturePassword\" target=\"_blank\" rel=\"noopener\">GesturePassword</a> - 一个iOS手势密码功能实现，iPad/iPhone 都可以用，没有使用图片，里面可以通过view自己添加。keychain做的数据持久化，利用苹果官方KeychainItemWrapper类。操作部分都在controller了。删除直接用一下clear。</li>\n<li><a href=\"https://github.com/Juuman/JMPasswordView\" target=\"_blank\" rel=\"noopener\">JMPasswordView</a> - 简单实用的手势密码，效果可自行调控。</li>\n<li><a href=\"http://code.cocoachina.com/detail/298556/%E4%BB%BF%E5%AF%86%E7%A0%81%E9%94%81-%E4%B9%9D%E5%AE%AB%E6%A0%BC/\" target=\"_blank\" rel=\"noopener\">仿密码锁-九宫格</a> - 仿密码锁-九宫格，主要是使用UIButton 手势事件  UIBezierPath画图，解锁失败弹出“密码错误”。</li>\n<li><a href=\"https://github.com/nsdictionary/CoreLock\" target=\"_blank\" rel=\"noopener\">CoreLock</a> - 本框架是高仿支付宝，并集成了所有功能，并非一个简单的解锁界面展示。个人制作用时1周多，打造解锁终结者框架。</li>\n<li><a href=\"https://github.com/crazypoo/LikeAlipayLockCodeView\" target=\"_blank\" rel=\"noopener\">LikeAlipayLockCodeView</a> - 高仿支付宝手势解锁（超级版）。</li>\n<li><a href=\"https://github.com/iosdeveloperpanc/PCGestureUnlock\" target=\"_blank\" rel=\"noopener\">PCGestureUnlock</a> - 目前最全面最高仿支付宝的手势解锁，而且提供方法进行参数修改，能解决项目开发中所有手势解锁的开发。</li>\n<li><a href=\"https://github.com/icoder20150719/ICPayPassWordDemo\" target=\"_blank\" rel=\"noopener\">ICPayPassWordDemo</a> - CPayPassWordDemo，一个模仿支付宝支付密码输入对话框小demo。</li>\n<li><a href=\"https://github.com/bigsan/RSAESCryptor\" target=\"_blank\" rel=\"noopener\">RSAESCryptor</a> - 加密 RSA+AES Encryption/Decryption library for iOS. This library uses 2048-bit RSA and 256-bit key with 128-bit block size AES for encryption/decryption。</li>\n<li><a href=\"https://github.com/bringbird/WJTouchID\" target=\"_blank\" rel=\"noopener\">WJTouchID</a> - 用法简单的TouchID验证框架：两行代码搞定。</li>\n</ul>\n<p>========</p>\n<h4 id=\"测试及调试\"><a href=\"#测试及调试\" class=\"headerlink\" title=\"测试及调试\"></a>测试及调试</h4><ul>\n<li><a href=\"https://github.com/tapwork/HeapInspector-for-iOS\" target=\"_blank\" rel=\"noopener\">HeapInspector</a> - HeapInspector是一个用于检测应用中的内存泄漏的开源调试工具。</li>\n<li><a href=\"http://try.crashlytics.com/\" target=\"_blank\" rel=\"noopener\">Crashlytics</a> - Crashlytics 崩溃报告 崩溃日志   <a href=\"http://www.infoq.com/cn/articles/crashlytics-crash-statistics-tools\" target=\"_blank\" rel=\"noopener\">使用说明</a> 。</li>\n<li><a href=\"https://github.com/RuiAAPeres/UIViewController-Swizzled\" target=\"_blank\" rel=\"noopener\">UIViewController-Swizzled</a> - 把你进入的每一个controller的类名打出来,如果看一些特别复杂的项目的时候直接运行demo就可以知道执行次序了。</li>\n<li><a href=\"https://code.google.com/p/snoop-it/\" target=\"_blank\" rel=\"noopener\">snoop-it</a> - snoop-it比UIViewController-Swizzled好用，代码托管在google上。</li>\n<li><a href=\"https://github.com/zenangst/Versions\" target=\"_blank\" rel=\"noopener\">Versions</a> - 版本比较小工具。</li>\n<li><a href=\"http://code4app.com/ios/MobileWebPerformanceTest/5465d3e9933bf00c658b4f43\" target=\"_blank\" rel=\"noopener\">MobileWebPageTest</a> - MobileWebPageTest是用来测试移动网页性能的软件，它可以对页面的加载和渲染过程进行截屏，协助开发者分析出页面性能瓶颈。</li>\n<li><a href=\"https://github.com/Coneboy-k/KKLog\" target=\"_blank\" rel=\"noopener\">KKLog</a> - 一个日志管理系统。</li>\n<li><a href=\"https://github.com/emaloney/CleanroomLogger\" target=\"_blank\" rel=\"noopener\">CleanroomLogger</a> - 相当于 CocoaLumberjack 或 Log4j 的 Swift 版本，功能上甚至更强大。另外，源代码中已经内含了完整的 API 文档，使用非常方便。</li>\n<li><a href=\"https://github.com/czechboy0/Buildasaur\" target=\"_blank\" rel=\"noopener\">Buildasaur</a> - 自动测试框架 Buildasaur。</li>\n<li><a href=\"http://www.devtf.cn/?p=739\" target=\"_blank\" rel=\"noopener\">使用Quick框架和Nimble来测试ViewControler</a> - Quick是一个用于创建BDD测试的框架。配合Nimbl，可以为你创建更符合预期目标的测试。</li>\n<li><a href=\"https://github.com/KrauseFx/fastlane\" target=\"_blank\" rel=\"noopener\">fastlane</a> - 一套iOS开发和持续集成的命令行工具fastlane，可以用来快速搭建CI甚至自动提交的开发环境。这套工具中包括了上传ipa文件，自动截取多语言截屏，生成推送证书，管理产品证书等一系列实用工具。</li>\n<li><a href=\"https://github.com/kif-framework/KIF\" target=\"_blank\" rel=\"noopener\">KIF</a> - 是一个开源的用户界面UI测试框架. 使用 KIF, 并利用 iOS中的辅助功能 API, 你将能够编写模拟用户输入，诸如点击，触摸和文本输入，自动化的UI测试.</li>\n<li><a href=\"https://github.com/Quick/Quick\" target=\"_blank\" rel=\"noopener\">Quick</a> - 用于Swift中的单元测试（也可用于Objective-C），与Xcode整合在一起。如果你是Objective-C的粉丝，我建议用Specta代替这个，但是对Swift使用者来说，Quick是最佳选择。</li>\n<li><a href=\"https://github.com/railsware/Sleipnir\" target=\"_blank\" rel=\"noopener\">Sleipnir</a> - Swift的测试框架。</li>\n<li><a href=\"https://github.com/kiwi-bdd/Kiwi/wiki\" target=\"_blank\" rel=\"noopener\">kiwi-bdd</a> - TDD或BDD，objective-c语言的测试框架，最流行的BDD测试框架了，Kiwi最受欢迎（根据github上的star数来推断，行为描述和期望写起来也比较易懂，至少我是这么认为的） <a href=\"http://www.jianshu.com/p/7e3f197504c1#\" target=\"_blank\" rel=\"noopener\">iOS开发中的测试框架</a>。</li>\n<li><a href=\"https://github.com/specta/specta\" target=\"_blank\" rel=\"noopener\">specta</a> -  TDD或BDD，objective-c语言的测试框架，用的人多。</li>\n<li><a href=\"https://github.com/pivotal/cedar\" target=\"_blank\" rel=\"noopener\">cedar</a> -  TDD或BDD，objective-c语言的测试框架，用的人少。</li>\n<li><a href=\"https://github.com/daisuke0131/ViewMonitor\" target=\"_blank\" rel=\"noopener\">ViewMonitor</a> - 能够帮助 iOS 开发者们精确的测量视图, 可直接在调试应用中查看具体某个视图的坐标, 宽高等参数。</li>\n<li><a href=\"https://github.com/adad184/MMPlaceHolder\" target=\"_blank\" rel=\"noopener\">MMPlaceHolder</a> - 一行代码显示UIView的位置及相关参数。</li>\n<li><a href=\"https://github.com/adad184/XXPlaceHolder\" target=\"_blank\" rel=\"noopener\">XXPlaceHolder.swift</a> - MMPlaceHolder的swift版本。 </li>\n<li><a href=\"https://github.com/kconner/KMCGeigerCounter\" target=\"_blank\" rel=\"noopener\">KMCGeigerCounter</a> - KMCGeigerCounter通过复杂和简单的视图演示了类似盖革计数器的帧速计算功能。掉帧通常是可见的，但是很难区分55fps和60fps之间的不同，而KMCGeigerCounter可以让你观测到掉落5帧的情况。</li>\n<li><a href=\"https://github.com/SwiftyBeaver/SwiftyBeaver\" target=\"_blank\" rel=\"noopener\">SwiftyBeaver</a> - 一个完善的日志工具，支持彩色输出、输出内容到文件、重要性分级、多输出目标。工具执行在后台，不影响性能，可以极大提高开发效率。</li>\n<li><a href=\"https://github.com/SwiftKit/Cuckoo\" target=\"_blank\" rel=\"noopener\">Cuckoo.swift</a> - Cuckoo.swift一款用法更接近于传统单元测试 Mock 框架库（区别之处在于需要用脚本预先生成 Mock 类）。</li>\n</ul>\n<p>========</p>\n<h4 id=\"AppleWatch\"><a href=\"#AppleWatch\" class=\"headerlink\" title=\"AppleWatch\"></a>AppleWatch</h4><ul>\n<li><a href=\"https://github.com/eleks/rnd-apple-watch-tesla\" target=\"_blank\" rel=\"noopener\">Tesla汽车AppleWatch app demo演示</a> - 通过AppleWatch控制特斯拉汽车，同时可以看到汽车的相关信息，比如剩余电量、可续行里程等，以及解锁/上锁车门、调节司机和乘客的四区域空调温度、开启车辆大灯、定位汽车等。<a href=\"http://www.cocoachina.com/ios/20150205/11116.html\" target=\"_blank\" rel=\"noopener\">源码推荐说明</a>。 </li>\n<li><a href=\"https://github.com/kostiakoval/WatchKit-Apps\" target=\"_blank\" rel=\"noopener\">WatchKit-Apps</a> - WatchKit 开源小项目示例集锦。是不可多得地学习 WatchKit 的示例式教程（1.如何创建一个简单的交互式计数器；2.如何从手表上控制iOS app；3.如何在WatchKit app和iOS app之间共享数据；4.如何创建一个拥有不同背景色的数字时钟；5.展示不同的UI层；6.如何创建支持滑动手势的应用程序。）。 </li>\n<li><a href=\"https://github.com/KittenYang/KYVoiceCurve\" target=\"_blank\" rel=\"noopener\">KYVoiceCurve</a> - 类似Apple Watch中语音的声音曲线动画。  </li>\n<li><a href=\"https://github.com/Instagram/IGInterfaceDataTable\" target=\"_blank\" rel=\"noopener\">IGInterfaceDataTable</a> - IGInterfaceDataTable是WKInterfaceTable对象的一个类别，可以让开发者更简单地配置多维数据。该项目使用类似UITableViewDataSource的数据源模式配置Apple Watch表格，而不是将数据结构扁平化成为数组。  </li>\n<li><a href=\"http://www.swiftkiller.com/?p=613\" target=\"_blank\" rel=\"noopener\">Apple Watch开发教程资料汇总</a> - Apple Watch开发教程资料汇总。</li>\n<li><a href=\"https://github.com/contentful-labs/Stargate\" target=\"_blank\" rel=\"noopener\">Stargate</a> - 通过 iPhone 桥接实现 Mac 与 Watch 的即时通讯。Stargate 通过封装两个优秀的基础类库 MMWormhole 和 PeerKit 实现高效的通讯应用。–swift</li>\n<li><a href=\"https://github.com/sandofsky/soon\" target=\"_blank\" rel=\"noopener\">soon</a> - 一款倒计时 WatchKit 示例应用。作者从架构的角度，思考如何设计一款完整、通讯高效且性能又好的 WatchKit 扩展应用。该示例学习性非常强。–swift</li>\n<li><a href=\"https://github.com/shu223/watchOS-2-Sampler\" target=\"_blank\" rel=\"noopener\">watchOS-2-Sampler</a> - 基于 watchOS 2 若干新特性，写了相应的示例代码供大家学习、参考。</li>\n<li><a href=\"https://github.com/KhaosT/HMWatch\" target=\"_blank\" rel=\"noopener\">HMWatch</a> - HMWatch是个有待完善的watchOS 2.0 HomeKit 应用示例。</li>\n<li><a href=\"https://github.com/manavgabhawala/CocoaMultipeer\" target=\"_blank\" rel=\"noopener\">CocoaMultipeer</a> - CocoaMultipeer这个开源框架支持OS X, iOS和watchOS设备间的点对点通信，解决watchOS和Mac之间通信的方案还是很有用的。</li>\n<li><a href=\"https://github.com/GetHighstreet/HighstreetWatchApp\" target=\"_blank\" rel=\"noopener\">HighstreetWatchApp</a> - 是电商平台Highstreet针对App Watch的一款应用，该demo中加载的是虚拟数据。</li>\n<li><a href=\"https://github.com/NilStack/NKWatchChart\" target=\"_blank\" rel=\"noopener\">NKWatchChart</a> - NKWatchChart是一个基于PNChart专门为Apple Watch 开发的图表库,目前支持 line, bar, pie, circle 和 radar 等 图表形式。</li>\n<li><a href=\"https://github.com/diwu/BeijingAirWatch\" target=\"_blank\" rel=\"noopener\">BeijingAirWatch</a> - 国人的开源项目代码 ！WatchOS 2.0 Complication of Real-time Air Quality for Major Chinese Cities 苹果表盘实时刷新北上广沈蓉空气质量。</li>\n</ul>\n<p>========</p>\n<h4 id=\"VPN\"><a href=\"#VPN\" class=\"headerlink\" title=\"VPN\"></a>VPN</h4><ul>\n<li><a href=\"https://github.com/lexrus/vpnon/\" target=\"_blank\" rel=\"noopener\">vpnon</a> - swift的VPN On 的源码和本地化内容都是开放的: <a href=\"https://crowdin.com/project/vpnon\" target=\"_blank\" rel=\"noopener\">官方网站</a>。</li>\n<li><a href=\"https://github.com/CatchChat/Hydro.network\" target=\"_blank\" rel=\"noopener\">Hydro.network</a> - <a href=\"http://zhowkev.in/2015/03/09/hydro-network-de-kai-fa-lu-cheng/\" target=\"_blank\" rel=\"noopener\">Hydro.network 的开发旅程</a>, <a href=\"https://gitcafe.com/Catch/Hydro.network\" target=\"_blank\" rel=\"noopener\">gitcafe</a>。</li>\n</ul>\n<p>========</p>\n<h4 id=\"完整项目\"><a href=\"#完整项目\" class=\"headerlink\" title=\"完整项目\"></a>完整项目</h4><ul>\n<li><a href=\"https://github.com/singro/v2ex\" target=\"_blank\" rel=\"noopener\">v2ex</a> - v2ex 的客户端，新闻、论坛。</li>\n<li><a href=\"https://github.com/iAugux/iBBS-Swift\" target=\"_blank\" rel=\"noopener\">iBBS-Swift</a> - “新手开源一个用Swift（2.0）写的论坛客户端”。<a href=\"http://obbs.sinaapp.com/\" target=\"_blank\" rel=\"noopener\">BBS 服务端</a>。 </li>\n<li><a href=\"https://github.com/wikimedia/apps-ios-wikipedia\" target=\"_blank\" rel=\"noopener\">apps-ios-wikipedia</a> - apps-ios-wikipedia 客户端。 </li>\n<li><a href=\"https://github.com/uber/jetstream-ios\" target=\"_blank\" rel=\"noopener\">jetstream-ios</a> - 一款 Uber 的 MVC 框架。它同时提供了多用户实时通讯支持，一旦启动 JetStream 后端服务，通过 WebSocket 协议可以分分钟建立多用户实时通讯应用。</li>\n<li><a href=\"https://github.com/jpsim/DeckRocket\" target=\"_blank\" rel=\"noopener\">DeckRocket</a> - 在相同 WiFi 网络环境内，通过iPhone 控制并播放 Mac 中的 PDF 文档。</li>\n<li><a href=\"https://github.com/JayFang1993/ScanBook\" target=\"_blank\" rel=\"noopener\">ScanBook</a> - 扫扫图书:可以扫描条形码查询图书，也可以关键字搜索，遇到合乎你口味的书，还可以看看别人的读书笔记，不同角度去体会。</li>\n<li><a href=\"https://github.com/MengTo/DesignerNewsApp\" target=\"_blank\" rel=\"noopener\">DesignerNewsApp</a> - Swift 开发的 DesignerNews 客户端，看着美美的！</li>\n<li><a href=\"https://github.com/KittenYang/KYWeibo\" target=\"_blank\" rel=\"noopener\">KYWeibo</a> - 调用新浪API自己写的第三方微博客户端。</li>\n<li><a href=\"https://github.com/li6185377/DouQu_IOS\" target=\"_blank\" rel=\"noopener\">DouQu_IOS</a> - 逗趣IOS手机端（一款笑话软件）,拥有完整的功能的手机应用app 。</li>\n<li><a href=\"https://github.com/itjhDev/itjh\" target=\"_blank\" rel=\"noopener\">IT江湖iOS客户端</a> - IT江湖iOS客户端。</li>\n<li><a href=\"https://github.com/artsy/eidolon\" target=\"_blank\" rel=\"noopener\">Eidolon</a> - 艺术品拍卖的投标亭平台，用swift与反应式编程框架 ReactiveCocoa。</li>\n<li><a href=\"https://github.com/nonstriater/CrazyPuzzle\" target=\"_blank\" rel=\"noopener\">CrazyPuzzle</a> - 模仿“看图猜成语”App，功能齐全，配有音效，效果很不错。游戏使用cocoa框架完成，没有使用cocos2d的框架。</li>\n<li><a href=\"https://github.com/Tim9Liu9/WhoCall\" target=\"_blank\" rel=\"noopener\">WhoCall</a> - 谁CALL我，iOS来电信息语音提醒，无需越狱。（需要iOS 7.0及以上版本。)骚扰电话预警、来电归属地提醒、联系人姓名播报，这些有中国特色人性化的电话功能，iOS上也应该有。电话提醒、私有API。</li>\n<li><a href=\"http://www.devtf.cn/?p=562\" target=\"_blank\" rel=\"noopener\">仿iOS猎豹垃圾清理(实现原理+源码)</a> -  仿iOS猎豹垃圾清理(实现原理+源码),用到私有API。</li>\n<li><a href=\"https://github.com/sam408130/DSLolita\" target=\"_blank\" rel=\"noopener\">DSLolita</a> - 模仿新浪微博做的一款app，有发送博文，评论，点赞，私聊功能。</li>\n<li><a href=\"https://github.com/STShenZhaoliang/STPhotoBrowser\" target=\"_blank\" rel=\"noopener\">STPhotoBrowser</a> - 高仿新浪微博的图片浏览器，极佳的编写方式，易扩展，低耦合。</li>\n<li><a href=\"https://github.com/gsdios/GSD_ZHIFUBAO\" target=\"_blank\" rel=\"noopener\">GSD_ZHIFUBAO</a> - 支付宝高仿版。 </li>\n<li><a href=\"https://github.com/thoughtbot/Tropos\" target=\"_blank\" rel=\"noopener\">Tropos</a> - Tropos, 由 thoughtbot 推出的一款用 Objective-C 写的开源天气类应用, 截至今天, thoughtbot 已在 GitHub 上贡献了 174 个开源项目, 实在令人敬佩。 </li>\n<li><a href=\"https://github.com/liu044100/SmileWeather\" target=\"_blank\" rel=\"noopener\">SmileWeather</a> -开源天气类应用,天气图标很完整。  </li>\n<li><a href=\"https://github.com/leichunfeng/MVVMReactiveCocoa\" target=\"_blank\" rel=\"noopener\">MVVMReactiveCocoa</a> - GitBucket 2.0 通过审核啦，她是我在公司实践了一年多 MVVM 和 RAC 的基础上，利用业余时间开发的第三方 GitHub 客户端，旨在能够对想实践 MVVM 和 RAC 的 iOS 开发者有所帮助。<a href=\"https://itunes.apple.com/cn/app/id961330940?mt=8\" target=\"_blank\" rel=\"noopener\">AppStore地址</a>，欢迎下载使用GitBucket和收藏MVVMReactiveCocoa。 </li>\n<li><a href=\"https://github.com/dasdom/Tomate\" target=\"_blank\" rel=\"noopener\">Tomate</a> - 这个圆盘式计时器让你更专注于工作或学习。P.S. App Store 上架收费应用（0.99 欧）。</li>\n<li><a href=\"https://github.com/joeshang/StoveFireiOSMenu\" target=\"_blank\" rel=\"noopener\">StoveFireiOSMenu</a> - 炉火餐饮系统iPad点餐端。</li>\n<li><a href=\"https://github.com/belm/BaiduFM-Swift\" target=\"_blank\" rel=\"noopener\">BaiduFM-Swift</a> - 百度FM, swift语言实现，基于最新xcode6.3+swift1.2,初步只是为了实现功能，代码比较粗燥，后面有时间会整理，支持Apple Watch。</li>\n<li><a href=\"https://github.com/ZhongTaoTian/WNXHuntForCity\" target=\"_blank\" rel=\"noopener\">WNXHuntForCity</a> - iOS高仿城觅项目（开发思路和代码）。</li>\n<li><a href=\"https://github.com/zyprosoft/ZYChat\" target=\"_blank\" rel=\"noopener\">ZYChat</a> - 关于聊天界面的可消息类型扩展，响应绑定设计。</li>\n<li><a href=\"https://github.com/minxiaoming/NiceAppDemo\" target=\"_blank\" rel=\"noopener\">NiceAppDemo</a> - 仿最美应用-每日最美的钢琴律动效果。</li>\n<li><a href=\"https://github.com/lookingstars/meituan\" target=\"_blank\" rel=\"noopener\">meituan</a> - 美团5.7iOS版（高仿），功能包括，团购首页，高德地图搜索附近美食并显示在地图上，上门服务，商家，友盟分享。</li>\n<li><a href=\"https://github.com/zangqilong198812/MeituanDemo\" target=\"_blank\" rel=\"noopener\">MeituanDemo</a> - 造美团应用界面构建的 iOS 应用, 第一个是 @叶孤城___ 的 MeituanDemo。</li>\n<li><a href=\"https://github.com/tubie/JFMeiTuan\" target=\"_blank\" rel=\"noopener\">JFMeiTuan</a> - 造美团应用界面构建的 iOS 应用, 第二个是 @tubiebutu 的 JFMeiTuan。</li>\n<li><a href=\"https://github.com/lookingstars/chuanke\" target=\"_blank\" rel=\"noopener\">chuanke</a> - 高仿百度传课iOS版。 </li>\n<li><a href=\"https://github.com/aiqiuqiu/Tuan\" target=\"_blank\" rel=\"noopener\">Tuan</a> - 模仿MJ老师iPad版美团（swift版），偶有bug 见谅。</li>\n<li><a href=\"https://github.com/dsxNiubility/SXNews\" target=\"_blank\" rel=\"noopener\">SXNews</a> - 模仿网易新闻做的新闻软件，完成了主导航页，新闻详情页，图片浏览页，评论页。效果不错，比网上流传的各种和网易新闻UI架构有关的代码都要完整，都要好。</li>\n<li><a href=\"https://github.com/coderyi/Monkey\" target=\"_blank\" rel=\"noopener\">Monkey</a> - Monkey for GitHub是一个GitHub开发者和仓库排名的开源App。这次主要增加了登录GitHub的功能，随手follow和star，并且增加发现模块，包括GitHub的trending，动态，showcases等。</li>\n<li><a href=\"https://github.com/callmewhy/Uther\" target=\"_blank\" rel=\"noopener\">Uther</a> -  跟蠢萌的外星人聊天，还能帮你记事”。<a href=\"https://itunes.apple.com/cn/app/uther/id1024104920\" target=\"_blank\" rel=\"noopener\">itunes下载</a> 。</li>\n<li><a href=\"https://github.com/zixun/CocoaChinaPlus\" target=\"_blank\" rel=\"noopener\">CocoaChinaPlus</a> - CocoaChina+是一款开源的第三方CocoaChina移动端。整个App都用Swift2.0编写(除部分第三方OC代码外，比如JPush和友盟)。</li>\n<li><a href=\"http://code.cocoachina.com/view/128246\" target=\"_blank\" rel=\"noopener\">高仿斗鱼TV</a> - 高仿斗鱼TV，点击头部滚动视图可以播放视频。</li>\n<li><a href=\"https://github.com/LonelyTown/LXZEALER\" target=\"_blank\" rel=\"noopener\">LXZEALER</a> - 模仿着做了zealer客户端,App里几乎所有请求都是Post,所以内容都是固定的URL加载的,登录功能只做了微博的第三方登录。</li>\n<li><a href=\"https://github.com/pengleelove/ShiXiSeng_ios\" target=\"_blank\" rel=\"noopener\">ShiXiSeng_ios</a> - 完整app的UI框架。</li>\n<li><a href=\"https://github.com/Coding/Coding-iPad\" target=\"_blank\" rel=\"noopener\">Coding-iPad</a> - Coding-iPad 是@Coding的官方 iPad 客户端, 又是一个完整的开源应用。</li>\n<li><a href=\"https://github.com/likumb/SimpleMemo\" target=\"_blank\" rel=\"noopener\">SimpleMemo</a> - 易便签已经转到Swift2.0，全面适配iOS9和Watch OS2，并支持iPhone6s和iPhone6sPlus的3D Touch功能，包括图标快捷键和内容预览。</li>\n<li><a href=\"https://github.com/xxycode/XXYAudioEngine\" target=\"_blank\" rel=\"noopener\">XXYAudioEngine.swift</a> - 基于NSURLSession 和 AVAudoPlayer的在线音乐的工具，可以把音乐保存在本地，也可以支持后台播放，后台下载，最低支持iOS7，swift版本1.2。</li>\n<li><a href=\"https://github.com/twitterdev/furni-ios\" target=\"_blank\" rel=\"noopener\">furni-ios.swift</a> - furni-ios.swift是由 Twitter 开发团队出品的一款用 Swift 写的 iOS 家居商城应用, 其主要目的在于让开发者从这款 Demo 应用中看出 Fabric 的强大。</li>\n<li><a href=\"https://github.com/sheepy1/SelectionOfZhihu\" target=\"_blank\" rel=\"noopener\">SelectionOfZhihu.swift</a> - 『看知乎』iOS 客户端, <a href=\"http://www.jianshu.com/p/2c3a0f109788\" target=\"_blank\" rel=\"noopener\">项目说明</a>。</li>\n<li><a href=\"https://github.com/TigerWf/WFZhiHu\" target=\"_blank\" rel=\"noopener\">WFZhiHu</a> - WFZhiHu仿知乎日报客户端app。</li>\n<li><a href=\"https://github.com/CatchChat/Yep\" target=\"_blank\" rel=\"noopener\">Yep.swift</a> - Yep 一个由天才开发给天才们使用的社交软件。</li>\n<li><a href=\"https://github.com/ZhongTaoTian/LoveFreshBeen\" target=\"_blank\" rel=\"noopener\">LoveFreshBeen.swift</a> - 高仿爱鲜蜂 - Swift2.0</li>\n<li><a href=\"https://github.com/ZhongTaoTian/LoveFreshBeen\" target=\"_blank\" rel=\"noopener\">trySwiftApp.swift</a> - trySwiftApp一款较为完整的会议原型应用。有需求的同学可以做为开发参考。</li>\n<li><a href=\"https://github.com/gaowanli/PinGo\" target=\"_blank\" rel=\"noopener\">PinGo.swift</a> - PinGo.swift：纯Swift编写的仿“随遇”App。</li>\n<li><a href=\"https://github.com/ZeroJian/UmbrellaWeather\" target=\"_blank\" rel=\"noopener\">UmbrellaWeather.swift</a> - UmbrellaWeather.swift使用 Swift 编写的一款天气应用,现已上架 AppStore。</li>\n<li><a href=\"https://github.com/iAugux/Phonetic\" target=\"_blank\" rel=\"noopener\">Phonetic.swift</a> - Phonetic一个 iOS 版的 Phonetic Contacts，功能很多，其中昵称功能非常实用，已在 GitHub 开源并上架 App Store。</li>\n</ul>\n<p>========</p>\n<h4 id=\"好的文章\"><a href=\"#好的文章\" class=\"headerlink\" title=\"好的文章\"></a>好的文章</h4><ul>\n<li><a href=\"http://www.jianshu.com/p/38cd35968864\" target=\"_blank\" rel=\"noopener\">自定义转场动画</a> - 3 种方法～ 关于自定义转场动画。</li>\n<li><a href=\"https://github.com/icepy/_posts/blob/master/iOS%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E5%B7%A5%E5%85%B7.md\" target=\"_blank\" rel=\"noopener\">iOS提高效率的方法和工具</a> - iOS提高效率的方法和工具。 </li>\n<li><a href=\"http://jsonapi.org.cn/\" target=\"_blank\" rel=\"noopener\">用 JSON 构建 API 的标准指南</a> - 用 JSON 构建 API 的标准指南。</li>\n<li><a href=\"http://blog.callmewhy.com/2015/09/21/rxswift-getting-started-0/\" target=\"_blank\" rel=\"noopener\">RxSwift入坑手册</a> - RxSwift入坑手册。</li>\n</ul>\n<p>========</p>\n<h4 id=\"Xcode插件\"><a href=\"#Xcode插件\" class=\"headerlink\" title=\"Xcode插件\"></a>Xcode插件</h4><ul>\n<li><a href=\"http://www.cocoachina.com/special/xcode/\" target=\"_blank\" rel=\"noopener\">iOS开发进阶，从Xcode开始</a> - 学习使用Xcode构建出色的应用程序！</li>\n<li><p>在Xcode启动的时候，Xcode将会寻找位于~/Library/Application Support/Developer/Shared/Xcode/Plug-ins文件夹中的后缀名为.xcplugin的bundle作为插件进行加载（运行其中的可执行文件）。<a href=\"http://studentdeng.github.io/blog/2014/02/21/xcode-plugin-fun/\" target=\"_blank\" rel=\"noopener\">Xcode5 Plugins 开发简介</a>  <a href=\"http://joeyio.com/ios/2013/07/25/write_xcode4_plugin_of_your_own/\" target=\"_blank\" rel=\"noopener\">写个自己的Xcode4插件</a></p>\n</li>\n<li><p><a href=\"http://www.onevcat.com/2013/02/xcode-plugin/\" target=\"_blank\" rel=\"noopener\">Xcode 4 插件制作入门</a> - Xcode 4 插件制作入门:Xcode所使用的所有库都包含在Xcode.app/Contents/的Frameworks，SharedFrameworks和OtherFrameworks三个文件夹下。其中和Xcode关系最为直接以及最为重要的是Frameworks中的IDEKit和IDEFoundation，以及SharedFrameworks中的DVTKit和DVTFoundation四个。</p>\n</li>\n<li><p><a href=\"https://github.com/rickytan/RTImageAssets\" target=\"_blank\" rel=\"noopener\">RTImageAssets</a> - 一个 Xcode 插件，用来生成 @3x 的图片资源对应的 @2x 和 @1x 版本。<a href=\"https://itunes.apple.com/app/asset-catalog-creator-free/id866571115?mt=12\" target=\"_blank\" rel=\"noopener\">Asset Catalog Creator</a> 功能强大，能自动生成全部尺寸：包括App Icons、Image Sets、Launch Screens Generator。</p>\n</li>\n<li><p><a href=\"https://github.com/onevcat/VVDocumenter-Xcode\" target=\"_blank\" rel=\"noopener\">VVDocumenter-Xcode</a> - 一个Xcode插件，build后，随手打开一个你之前的项目，然后在任意一个方法上面连按三下”/“键盘，就ok了。</p>\n</li>\n<li><p><a href=\"https://github.com/shjborage/Reveal-Plugin-for-XCode\" target=\"_blank\" rel=\"noopener\">Reveal-Plugin-for-XCode</a> - 一个Reveal插件，可以使工程不作任何修改的情况下使用Reveal，该插件已在Alcatraz上架。<a href=\"http://security.ios-wiki.com/issue-3-4/\" target=\"_blank\" rel=\"noopener\">Reveal：分析iOS UI的利器</a> 。</p>\n</li>\n<li><p><a href=\"https://github.com/google/j2objc\" target=\"_blank\" rel=\"noopener\">java2Objective-c</a> - Google公司出得java转Obje-C转换工具，转换逻辑，不转换UI。</p>\n</li>\n<li><p><a href=\"https://github.com/kzaher/RegX\" target=\"_blank\" rel=\"noopener\">RegX</a> - 专治代码强迫症的 Xcode 插件，使用 Swift 和 Objective-C 编写。其用竖向对齐特定源代码的元素，使得代码更易读和易理解。<a href=\"http://www.cocoachina.com/ios/20141224/10743.html\" target=\"_blank\" rel=\"noopener\">说明</a> ； 菜单：xcode——》Edit-》Regx 。</p>\n</li>\n<li><p><a href=\"https://github.com/ksuther/KSImageNamed-Xcode\" target=\"_blank\" rel=\"noopener\">KSImageNamed</a> - 自动完成，特别是如果你正在写Objective-C，如果Xcode能自动完成文件名难道不会很伟大吗？比如图像文件的名称。</p>\n</li>\n<li><p><a href=\"https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin\" target=\"_blank\" rel=\"noopener\">FuzzyAutocomplete</a> - Xcode的实现自动完成还不完美，此插件能给出你所期望或想要的建议，设置：xcode-》Editor-》FuzzyAutocomplete-》plugin settings。</p>\n</li>\n<li><p><a href=\"https://github.com/johnno1962/GitDiff\" target=\"_blank\" rel=\"noopener\">GitDiff</a> - Xcode的代码编辑器的一个微妙的补强，加上了足够的可见信息以了解上次git提交以来发生了什么变化，设置：xcode-》Edit-》GitDiff。</p>\n</li>\n<li><p><a href=\"https://github.com/trawor/XToDo\" target=\"_blank\" rel=\"noopener\">XToDo</a> - 这个插件不仅凸显TODO，FIXME，???，以及！！！注释，也在便利列表呈现他们。 菜单：xcode-》view-》snippets;   调出列表显示: xcode-》view-》ToDo List ： ctrl + T 。 </p>\n</li>\n<li><p><a href=\"https://github.com/limejelly/Backlight-for-XCode\" target=\"_blank\" rel=\"noopener\">Backlight</a> - 突出显示当前正在编辑的行。菜单：xcode-》view-》Backlight 。</p>\n</li>\n<li><p><a href=\"https://github.com/kattrali/cocoapods-xcode-plugin\" target=\"_blank\" rel=\"noopener\">CocoaPods</a> - 该CocoaPods的插件增加了一个CocoaPods菜单到Xcode的产品菜单。如果你不喜欢命令行，那么你一定会喜欢这个插件。 <a href=\"http://tangqiaoboy.gitcafe.io/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/\" target=\"_blank\" rel=\"noopener\">用CocoaPods做iOS程序的依赖管理 </a>。</p>\n</li>\n<li><p><a href=\"https://github.com/markohlebar/Peckham\" target=\"_blank\" rel=\"noopener\">Peckham</a> - 添加import语句比较麻烦，此插件 按Command-Control-P，给出的选项列表中选择要的头文件。先要安装<a href=\"http://alcatraz.io/\" target=\"_blank\" rel=\"noopener\">Alcatraz</a> ,在终端输入： <strong>curl -fsSL <a href=\"https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh\" target=\"_blank\" rel=\"noopener\">https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh</a> | sh</strong> ； 重启xcode-》window-》Package Manager：搜索 <strong>Peckham</strong> 安装，打开Peckham.xcodeproj，编译 Peckham target，重启Xcode 。</p>\n</li>\n<li><p><a href=\"https://github.com/lucholaf/Auto-Importer-for-Xcode\" target=\"_blank\" rel=\"noopener\">Auto-Importer</a> - Auto-Importer是一个自动导入类对应的头文件的Xcode插件。</p>\n</li>\n<li><p><a href=\"http://alcatraz.io/\" target=\"_blank\" rel=\"noopener\">Alcatraz</a> -使用Alcatraz来管理Xcode插件 <a href=\"http://tangqiaoboy.gitcafe.io/blog/2014/03/05/use-alcatraz-to-manage-xcode-plugins/\" target=\"_blank\" rel=\"noopener\">使用说明</a> 。</p>\n</li>\n<li><p><a href=\"https://github.com/kimsungwhee/KSHObjcUML\" target=\"_blank\" rel=\"noopener\">KSHObjcUML</a> -KSHObjcUML 是一个 Objective-C 类引用关系图的 Xcode 插件。 </p>\n</li>\n<li><p><a href=\"https://github.com/omz/ColorSense-for-Xcode\" target=\"_blank\" rel=\"noopener\">ColorSense-for-Xcode</a> - 颜色插件，安装之后，就不用根据RGB选择颜色，直接从取色板中取颜色，会自动补齐RGB代码。</p>\n</li>\n<li><p><a href=\"http://www.imooc.com/wenda/detail/237132\" target=\"_blank\" rel=\"noopener\">10款提高iOS开发效率的XCode插件</a> - 10款提高iOS开发效率的XCode插件：1. XcodeColors；5. ACCodeSnippetRepository；10. Dash for Xcode。 </p>\n</li>\n<li><p><a href=\"https://github.com/MakeZL/ZLGotoSandboxPlugin\" target=\"_blank\" rel=\"noopener\">ZLGotoSandboxPlugin</a> - 支持Xcode快捷键了跳转当前应用沙盒了！快捷键是 Shift+Common+w。 </p>\n</li>\n<li><p><a href=\"https://github.com/burczyk/XcodeSwiftSnippets\" target=\"_blank\" rel=\"noopener\">XcodeSwiftSnippets</a> - XcodeSwiftSnippets, 提供了很多可在 Xcode 上使用的 Swift 代码片段, 通过自动补全的方式极大的提高了开发效率， <a href=\"https://github.com/Xcode-Snippets/Objective-C\" target=\"_blank\" rel=\"noopener\">另外还有 Objective-C 版的</a>。 </p>\n</li>\n<li><p><a href=\"https://vimeo.com/128713880\" target=\"_blank\" rel=\"noopener\">CoPilot</a> - 通过此插件， Xcode 可以协同编程了（采用 WebSocket 通讯）。如此强大的“黑工具”，不爱它能行吗。 </p>\n</li>\n<li><a href=\"https://github.com/EnjoySR/ESJsonFormat-Xcode\" target=\"_blank\" rel=\"noopener\">ESJsonFormat-Xcode</a> - 将Json格式化输出为模型的属性。</li>\n<li><a href=\"https://github.com/stefanceriu/SCXcodeMiniMap\" target=\"_blank\" rel=\"noopener\">SCXcodeMiniMap</a> - Xcode迷你小地图-SCXcodeMiniMap。</li>\n<li><a href=\"http://code.cocoachina.com/detail/316095/xTransCodelation/\" target=\"_blank\" rel=\"noopener\">xTransCodelation</a> - XCODE中英文翻译插件，提供API查询模式和网页模式，都是利用的百度翻译。另外集成了一个可以一键关闭其他所有APP的实用功能，方便开发者！</li>\n<li><a href=\"https://github.com/jwaitzel/SuggestedColors/\" target=\"_blank\" rel=\"noopener\">SuggestedColors</a> - Xcode 插件SuggestedColors，用于 IB颜色设置 辅助插件，非常好用。</li>\n<li><a href=\"https://github.com/paulot/Colorsp\" target=\"_blank\" rel=\"noopener\">Colors</a> - 打印彩色字符串，可以修改 Swift 中终端输出的字符串颜色，有趣的小工具。</li>\n</ul>\n<p>========</p>\n<h4 id=\"美工资源\"><a href=\"#美工资源\" class=\"headerlink\" title=\"美工资源\"></a>美工资源</h4><ul>\n<li><a href=\"https://github.com/markohlebar/Peckham\" target=\"_blank\" rel=\"noopener\">TWG_Retina_Icons</a> - 一套支持 Retina 高清屏的 iPhone 免费图标集。</li>\n<li><a href=\"https://github.com/cparnot/ASCIImage\" target=\"_blank\" rel=\"noopener\">ASCIImage</a> - 使用 NSString 创建 image，<a href=\"http://cocoamine.net/blog/2015/03/20/replacing-photoshop-with-nsstring/\" target=\"_blank\" rel=\"noopener\">说明</a>。</li>\n<li><a href=\"https://github.com/RayPS/my-sketch-colors\" target=\"_blank\" rel=\"noopener\">my-sketch-colors</a> - 配色。</li>\n<li><a href=\"http://www.imooc.com/wenda/detail/250367\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> - Font Awesome：一套绝佳的图标字体库和CSS框架，详细的安装方法请参考<a href=\"http://fortawesome.github.io/Font-Awesome/icons/\" target=\"_blank\" rel=\"noopener\">官方网站</a><a href=\"http://fontawesome.dashgame.com/\" target=\"_blank\" rel=\"noopener\">中文网站</a>,<a href=\"https://github.com/FortAwesome/Font-Awesome\" target=\"_blank\" rel=\"noopener\">GitHub地址</a> 。</li>\n<li><a href=\"https://github.com/yannickl/DynamicColor\" target=\"_blank\" rel=\"noopener\">DynamicColor</a> - 强大的颜色操作扩展类。通过该类，你可以通过扩展方法基于某个颜色得到不同深浅、饱和度、灰度、色相，以及反转后的新颜色。是不可多得的好类库。</li>\n<li><a href=\"https://github.com/ViccAlexander/Chameleon\" target=\"_blank\" rel=\"noopener\">Chameleon</a> - Chameleon是一个iOS的色彩框架。它运用现代化flat color将UIColor扩展地非常美观。我们还可以通过它运用自定义颜色创建调色板。它还有很多功用，请浏览readme。</li>\n<li><a href=\"https://github.com/ArtSabintsev/FontBlaster\" target=\"_blank\" rel=\"noopener\">FontBlaster</a> - 载入定制字体时更简单。</li>\n</ul>\n<h4 id=\"其他资源\"><a href=\"#其他资源\" class=\"headerlink\" title=\"其他资源\"></a>其他资源</h4><ul>\n<li><a href=\"http://githuber.info/#/index\" target=\"_blank\" rel=\"noopener\">githuber</a> - 最好用的GitHub人才搜索工具。   </li>\n<li><a href=\"https://www.codatlas.com\" target=\"_blank\" rel=\"noopener\">codatlas</a> - 源代码搜索利器。</li>\n<li><a href=\"https://searchcode.com/\" target=\"_blank\" rel=\"noopener\">searchcode</a> - 源代码搜索利器：来自悉尼的代码搜索引擎汇聚了 Github, Bitbucket, Sourceforge…等多家开源站点超20万个项目、180亿行源代码，能以特殊字符、语言、仓库和源方式从90多种语言找到函数、API的真实代码。</li>\n<li><a href=\"https://github.com/kitematic/kitematic\" target=\"_blank\" rel=\"noopener\">kitematic</a> - Mac 上使用 Docker 最简单的方案。 </li>\n</ul>\n<p>========</p>\n<h4 id=\"开发资源\"><a href=\"#开发资源\" class=\"headerlink\" title=\"开发资源\"></a>开发资源</h4><h5 id=\"开发资料\"><a href=\"#开发资料\" class=\"headerlink\" title=\"开发资料\"></a>开发资料</h5><ul>\n<li><a href=\"http://www.douban.com/note/276160185/?type=like\" target=\"_blank\" rel=\"noopener\">豆瓣iOS开源库列表</a> - 豆瓣iOS开源库列表，很多开源项目。</li>\n<li><a href=\"https://github.com/AttackOnDobby/iOS-Core-Animation-Advanced-Techniques\" target=\"_blank\" rel=\"noopener\">iOS-Core-Animation-Advanced-Techniques</a> - 中文版iOS 高级动画技术。 </li>\n<li><a href=\"http://www.jianshu.com/p/50b63a221f09\" target=\"_blank\" rel=\"noopener\">iOS开发的一些奇巧淫技1</a> - TableView不显示没内容的Cell怎么办; 键盘事件：<a href=\"https://github.com/hackiftekhar/IQKeyboardManager\" target=\"_blank\" rel=\"noopener\">IQKeyboardManager</a>;  app不流畅:<a href=\"https://github.com/kconner/KMCGeigerCounter\" target=\"_blank\" rel=\"noopener\">KMCGeigerCounter</a>;  CoreData用起来好烦:<a href=\"https://github.com/magicalpanda/MagicalRecord\" target=\"_blank\" rel=\"noopener\">MagicalRecord</a>;  CollectionView实现悬停的header:<a href=\"https://github.com/jamztang/CSStickyHeaderFlowLayout\" target=\"_blank\" rel=\"noopener\">CSStickyHeaderFlowLayout</a>。</li>\n<li><a href=\"http://www.jianshu.com/p/08f194e9904c\" target=\"_blank\" rel=\"noopener\">iOS开发的一些奇巧淫技2</a> -  用一个pan手势来代替UISwipegesture的各个方向、拉伸图片、播放GIF、上拉刷新、把tableview里cell的小对勾的颜色改变、navigationbar弄成透明的而不是带模糊的效果、改变uitextfield placeholder的颜色和位置。</li>\n<li><a href=\"http://code4app.com/article/cocoapods-install-usage\" target=\"_blank\" rel=\"noopener\">cocoapods安装指南</a> - cocoapods安装指南。</li>\n<li><a href=\"https://github.com/johnno1962/Remote\" target=\"_blank\" rel=\"noopener\">RemoteControl</a> - Control your iPhone from inside Xcode for end-to-end testing 。</li>\n<li><a href=\"http://objccn.io/issue-13-1/\" target=\"_blank\" rel=\"noopener\">MVVM 介绍</a> - 替换MVC的开发模式。</li>\n<li><a href=\"http://apistore.baidu.com/astore/index\" target=\"_blank\" rel=\"noopener\">第三方接口</a> - 基本所有第三方接口都在这，再也不用那么麻烦去找了。</li>\n</ul>\n<ul>\n<li><a href=\"http://yyny.me/ios/%E6%8F%90%E9%AB%98iOS%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E5%B7%A5%E5%85%B7/\" target=\"_blank\" rel=\"noopener\">提高iOS开发效率的方法和工具</a> - 提高iOS开发效率的方法和工具。</li>\n<li><a href=\"https://github.com/oa414/objc-zen-book-cn\" target=\"_blank\" rel=\"noopener\">禅与 Objective-C 编程艺术</a> - 禅与 Objective-C 编程艺术 （Zen and the Art of the Objective-C Craftsmanship 中文翻译）。</li>\n<li><a href=\"http://www.imooc.com/article/1216\" target=\"_blank\" rel=\"noopener\">Objective-C编码规范：26个方面解决iOS开发问题</a> - 【Objective-C编码规范：26个方面解决iOS开发问题：“我们制定Objective-C编码规范的原因是我们能够在我们的书，教程和初学者工具包的代码保持优雅和一致。”今天分享的规范来自raywenderlich.com团队成员共同完成的，希望对学习OC的朋友们有所指导和帮助。</li>\n</ul>\n<h6 id=\"swift\"><a href=\"#swift\" class=\"headerlink\" title=\"swift\"></a>swift</h6><ul>\n<li><a href=\"https://github.com/numbbbbb/the-swift-programming-language-in-chinese\" target=\"_blank\" rel=\"noopener\">Swift中文指南</a> - 中文版Apple官方Swift教程《The Swift Programming Language》，<a href=\"http://numbbbbb.gitbooks.io/-the-swift-programming-language-/content/\" target=\"_blank\" rel=\"noopener\">老码版本</a>  <a href=\"http://numbbbbb.gitbooks.io/-the-swift-programming-language-/content/chapter1/03_revision_history.html\" target=\"_blank\" rel=\"noopener\">历史版本更新说明</a>。 </li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/swift/\" target=\"_blank\" rel=\"noopener\">The Swift Programming Language 中文版</a> - The Swift Programming Language 中文版。 </li>\n<li><a href=\"http://www.swifttoolbox.io/\" target=\"_blank\" rel=\"noopener\">swifttoolbox</a> -  swifttoolbox swift开发的开源库汇总。 </li>\n<li><a href=\"https://github.com/ipader/SwiftGuide\" target=\"_blank\" rel=\"noopener\">SwiftGuide</a> -  这份指南汇集了Swift语言主流学习资源，并以开发者的视角整理编排– 非常不错，值得推荐。</li>\n<li><a href=\"https://github.com/ipader/SwiftGuide/blob/master/Featured.md\" target=\"_blank\" rel=\"noopener\">Swift开源项目精选</a> - Swift开源项目精选–推荐，每周都有更新。</li>\n<li><a href=\"https://swift.zeef.com/robin.eggenkamp\" target=\"_blank\" rel=\"noopener\">Awesome Swift</a> - 一个收集了很多 Swift 开发资源的网站。</li>\n<li><a href=\"https://github.com/x140yu/Developing_iOS_8_Apps_With_Swift\" target=\"_blank\" rel=\"noopener\">Developing_iOS_8_Apps_With_Swift</a> - Developing iOS 8 Apps with Swift 字幕简体中文翻译项目（斯坦福白胡子老头swift教学视频）。</li>\n<li><a href=\"https://github.com/johnlui/Swift-On-iOS\" target=\"_blank\" rel=\"noopener\">Swift-On-iOS</a> - JohnLui 的 Swift On iOS 代码仓库。</li>\n<li><a href=\"https://github.com/PerfectlySoft/Perfect\" target=\"_blank\" rel=\"noopener\">Perfect</a> - Perfect 致力于 Swift 服务端应用，从打造专业应用服务器开始。</li>\n<li><a href=\"https://github.com/huytd/swift-http\" target=\"_blank\" rel=\"noopener\">swift-http</a> - Swift HTTP Server，又一个 Swift 服务器，最大的亮点是支持 Docker 部署。</li>\n<li><a href=\"https://github.com/allenwong/30DaysofSwiftp\" target=\"_blank\" rel=\"noopener\">30DaysofSwift</a> - 30DaysofSwift 自学 iOS - <a href=\"http://weibo.com/ttarticle/p/show?id=2309403942494873235448\" target=\"_blank\" rel=\"noopener\">三十天三十个 Swift 项目</a>。</li>\n</ul>\n<h5 id=\"他人开源总结\"><a href=\"#他人开源总结\" class=\"headerlink\" title=\"他人开源总结\"></a>他人开源总结</h5><ul>\n<li><a href=\"https://github.com/iCHAIT/awesome-osx\" target=\"_blank\" rel=\"noopener\">awesome-osx</a> - Awesome OS X。</li>\n<li><a href=\"http://www.code4app.com/\" target=\"_blank\" rel=\"noopener\">code4app</a> - 最多国人用的代码库。</li>\n<li><a href=\"http://code.cocoachina.com/\" target=\"_blank\" rel=\"noopener\">cocoachina</a> - 国内最热门的iOS社区的代码库。</li>\n<li><a href=\"https://github.com/vsouza/awesome-ios\" target=\"_blank\" rel=\"noopener\">awesome-ios</a> - 一个老外整理的，<a href=\"http://app.memect.com/doc/ios.html\" target=\"_blank\" rel=\"noopener\">中文版</a>。</li>\n<li><a href=\"https://github.com/cjwirth/awesome-ios-ui\" target=\"_blank\" rel=\"noopener\">awesome-ios-ui</a> - 收集了不少 iOS UI/UX 库, 包含了很多酷炫的动画效果。</li>\n<li><a href=\"http://ios-cosmos.com/\" target=\"_blank\" rel=\"noopener\">ios-cosmos</a> - The iOS Cosmos：收录了IOS绝大部分的开源框架和工具。</li>\n<li><a href=\"https://haskell.zeef.com/konstantin.skipor#block_28362_basics\" target=\"_blank\" rel=\"noopener\">Awesome Haskell资料大全</a> -    Awesome Haskell 资料大全：框架，库和软件。</li>\n<li><a href=\"http://ios-cosmos.com\" target=\"_blank\" rel=\"noopener\">Cosmos</a> - The iOS Cosmos：收录了IOS绝大部分的开源框架和工具。</li>\n<li><a href=\"http://cocoacontrols.com\" target=\"_blank\" rel=\"noopener\">cocoacontrols</a> -  收集了很多UI控件效果代码，缺点是需要翻墙，而且代码分类不够好。</li>\n<li><a href=\"https://github.com/lexrus\" target=\"_blank\" rel=\"noopener\">lexrus</a> -  lexrus国内出名的iOS开源coder，非常酷的label动画、textfield动画。</li>\n<li><p><a href=\"https://github.com/dkhamsing/open-source-ios-apps\" target=\"_blank\" rel=\"noopener\">open-source-ios-apps</a> - iOS App集合，分：swift与Objective-C–国外人整理。 </p>\n</li>\n<li><p><a href=\"http://www.csdn.net/article/2015-03-04/2824108-ios-developers-sites\" target=\"_blank\" rel=\"noopener\">适合iOS开发者的15大网站推荐</a> -  适合 iOS 开发者的 15 大网站推荐 — 英文网站。</p>\n</li>\n<li><p><a href=\"https://github.com/Aufree/trip-to-iOS/blob/master/Top-100.md\" target=\"_blank\" rel=\"noopener\">Objective-C GitHub 排名前 100 项目简介</a> -  主要对当前 GitHub 排名前 100 的项目做一个简单的简介, 方便初学者快速了解到当前 Objective-C 在 GitHub 的情况。 </p>\n</li>\n<li><p><a href=\"http://github.ibireme.com/github/list/ios/\" target=\"_blank\" rel=\"noopener\">Github-iOS备忘</a> -整理了比较常用的iOS第三方组件，以及github上的统计。</p>\n</li>\n<li><a href=\"http://www.cocoachina.com/ios/20160121/14988.html\" target=\"_blank\" rel=\"noopener\">超全！整理常用的iOS第三方资源</a> - 超全！整理常用的iOS第三方资源。</li>\n<li><a href=\"https://github.com/JanzTam/MyGithubMark\" target=\"_blank\" rel=\"noopener\">MyGithubMark</a> - Github上的iOS资料-个人记录（持续更新）。</li>\n</ul>\n<h5 id=\"开发博客列表\"><a href=\"#开发博客列表\" class=\"headerlink\" title=\"开发博客列表\"></a>开发博客列表</h5><ul>\n<li><a href=\"https://github.com/tangqiaoboy/iOSBlogCN\" target=\"_blank\" rel=\"noopener\">唐巧整理</a> - 猿题库唐巧整理。</li>\n<li><a href=\"http://www.cocoachina.com/ios/20150626/11348.html\" target=\"_blank\" rel=\"noopener\">11个超棒的iOS开发学习国外网站</a> - 11个超棒的iOS开发学习网站:<a href=\"https://www.objc.io\" target=\"_blank\" rel=\"noopener\">objc.io</a> ;<a href=\"http://subjc.com\" target=\"_blank\" rel=\"noopener\">subjc.com</a> ;<a href=\"http://nshipster.com\" target=\"_blank\" rel=\"noopener\">NSHipster</a> ;<a href=\"http://petersteinberger.com\" target=\"_blank\" rel=\"noopener\">Peter Steinberger</a> ;<a href=\"http://oleb.net\" target=\"_blank\" rel=\"noopener\">Ole Begemann</a> ;<a href=\"http://floriankugler.com\" target=\"_blank\" rel=\"noopener\">Florian Kugler</a> ;<a href=\"https://www.mikeash.com/pyblog/\" target=\"_blank\" rel=\"noopener\">NSBlog</a> ;<a href=\"http://cocoa.tumblr.com\" target=\"_blank\" rel=\"noopener\">Cocoa</a> ;<a href=\"http://iosdevweekly.com\" target=\"_blank\" rel=\"noopener\">iOS Dev Weekly</a> ;<a href=\"http://iosdevelopertips.com\" target=\"_blank\" rel=\"noopener\">iOS Developer Tips</a> ;<a href=\"http://ios-goodies.com\" target=\"_blank\" rel=\"noopener\">iOS Goodies</a> ;<a href=\"http://www.appcoda.com\" target=\"_blank\" rel=\"noopener\">AppCoda</a> 香港人创建;<a href=\"http://merowing.info\" target=\"_blank\" rel=\"noopener\">Krzysztof Zab?ocki</a> ;<a href=\"http://iosdevtips.co\" target=\"_blank\" rel=\"noopener\">iOS Development tips</a> ;</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>博客地址</th>\n<th>RSS地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://southpeak.github.io/\" target=\"_blank\" rel=\"noopener\">南峰子的技术博客</a></td>\n<td>南峰子的技术博客。</td>\n</tr>\n<tr>\n<td><a href=\"http://blog.devtang.com\" target=\"_blank\" rel=\"noopener\">唐巧的技术博客</a></td>\n<td><a href=\"http://blog.devtang.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://blog.devtang.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://onevcat.com\" target=\"_blank\" rel=\"noopener\">OneV’s Den</a></td>\n<td><a href=\"http://onevcat.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://onevcat.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://objccn.io/\" target=\"_blank\" rel=\"noopener\">objc 中国</a></td>\n<td>为中国 Objective-C 社区带来最佳实践和先进技术。</td>\n</tr>\n<tr>\n<td><a href=\"http://beyondvincent.com\" target=\"_blank\" rel=\"noopener\">破船之家</a></td>\n<td><a href=\"http://beyondvincent.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://beyondvincent.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://nshipster.cn\" target=\"_blank\" rel=\"noopener\">NSHipster</a></td>\n<td><a href=\"http://nshipster.cn/feed.xml\" target=\"_blank\" rel=\"noopener\">http://nshipster.cn/feed.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.leezhong.com/\" target=\"_blank\" rel=\"noopener\">Limboy 无网不剩</a></td>\n<td><a href=\"http://feeds.feedburner.com/lzyy\" target=\"_blank\" rel=\"noopener\">http://feeds.feedburner.com/lzyy</a></td>\n</tr>\n<tr>\n<td><a href=\"http://ios.lextang.com\" target=\"_blank\" rel=\"noopener\">Lex iOS notes</a></td>\n<td><a href=\"http://ios.lextang.com/rss\" target=\"_blank\" rel=\"noopener\">http://ios.lextang.com/rss</a></td>\n</tr>\n<tr>\n<td><a href=\"http://nianxi.net\" target=\"_blank\" rel=\"noopener\">念茜的博客</a></td>\n<td><a href=\"http://nianxi.net/feed.xml\" target=\"_blank\" rel=\"noopener\">http://nianxi.net/feed.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.xcodev.com\" target=\"_blank\" rel=\"noopener\">Xcode Dev</a></td>\n<td><a href=\"http://blog.xcodev.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://blog.xcodev.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://wufawei.com/\" target=\"_blank\" rel=\"noopener\">Ted’s Homepage</a></td>\n<td><a href=\"http://wufawei.com/feed\" target=\"_blank\" rel=\"noopener\">http://wufawei.com/feed</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.t-xx.me\" target=\"_blank\" rel=\"noopener\">txx’s blog</a></td>\n<td><a href=\"http://blog.t-xx.me/atom.xml\" target=\"_blank\" rel=\"noopener\">http://blog.t-xx.me/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://imkevin.me\" target=\"_blank\" rel=\"noopener\">KEVIN BLOG</a></td>\n<td><a href=\"http://imkevin.me/rss\" target=\"_blank\" rel=\"noopener\">http://imkevin.me/rss</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.xiangwangfeng.com\" target=\"_blank\" rel=\"noopener\">阿毛的蛋疼地</a></td>\n<td><a href=\"http://www.xiangwangfeng.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://www.xiangwangfeng.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://billwang1990.github.io\" target=\"_blank\" rel=\"noopener\">亚庆的 Blog</a></td>\n<td><a href=\"http://billwang1990.github.io/atom.xml\" target=\"_blank\" rel=\"noopener\">http://billwang1990.github.io/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://nonomori.farbox.com\" target=\"_blank\" rel=\"noopener\">Nonomori</a></td>\n<td><a href=\"http://nonomori.farbox.com/feed\" target=\"_blank\" rel=\"noopener\">http://nonomori.farbox.com/feed</a></td>\n</tr>\n<tr>\n<td><a href=\"http://tang3w.com\" target=\"_blank\" rel=\"noopener\">言无不尽</a></td>\n<td><a href=\"http://tang3w.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://tang3w.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://wonderffee.github.io\" target=\"_blank\" rel=\"noopener\">Wonderffee’s Blog</a></td>\n<td><a href=\"http://wonderffee.github.io/atom.xml\" target=\"_blank\" rel=\"noopener\">http://wonderffee.github.io/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://imtx.me\" target=\"_blank\" rel=\"noopener\">I’m TualatriX</a></td>\n<td><a href=\"http://imtx.me/feed/latest/\" target=\"_blank\" rel=\"noopener\">http://imtx.me/feed/latest/</a></td>\n</tr>\n<tr>\n<td><a href=\"http://vclwei.com\" target=\"_blank\" rel=\"noopener\">vclwei</a></td>\n<td><a href=\"http://vclwei.com/posts.rss\" target=\"_blank\" rel=\"noopener\">http://vclwei.com/posts.rss</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.cocoabit.com\" target=\"_blank\" rel=\"noopener\">Cocoabit</a></td>\n<td><a href=\"http://blog.cocoabit.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://blog.cocoabit.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://nixzhu.me\" target=\"_blank\" rel=\"noopener\">nixzhu on scriptogr.am</a></td>\n<td><a href=\"http://nixzhu.me/feed\" target=\"_blank\" rel=\"noopener\">http://nixzhu.me/feed</a></td>\n</tr>\n<tr>\n<td><a href=\"http://studentdeng.github.io\" target=\"_blank\" rel=\"noopener\">不会开机的男孩</a></td>\n<td><a href=\"http://studentdeng.github.io/atom.xml\" target=\"_blank\" rel=\"noopener\">http://studentdeng.github.io/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.taofengping.com\" target=\"_blank\" rel=\"noopener\">Nico</a></td>\n<td><a href=\"http://www.taofengping.com/rss.xml\" target=\"_blank\" rel=\"noopener\">http://www.taofengping.com/rss.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://hufeng825.github.io\" target=\"_blank\" rel=\"noopener\">阿峰的技术窝窝</a></td>\n<td><a href=\"http://hufeng825.github.io/atom.xml\" target=\"_blank\" rel=\"noopener\">http://hufeng825.github.io/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://answerhuang.duapp.com\" target=\"_blank\" rel=\"noopener\">answer_huang</a></td>\n<td><a href=\"http://answerhuang.duapp.com/index.php/feed/\" target=\"_blank\" rel=\"noopener\">http://answerhuang.duapp.com/index.php/feed/</a></td>\n</tr>\n<tr>\n<td><a href=\"http://webfrogs.me\" target=\"_blank\" rel=\"noopener\">webfrogs</a></td>\n<td><a href=\"http://webfrogs.me/feed/\" target=\"_blank\" rel=\"noopener\">http://webfrogs.me/feed/</a></td>\n</tr>\n<tr>\n<td><a href=\"http://joeyio.com\" target=\"_blank\" rel=\"noopener\">代码手工艺人</a></td>\n<td><a href=\"http://joeyio.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://joeyio.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://gracelancy.com\" target=\"_blank\" rel=\"noopener\">Lancy’s Blog</a></td>\n<td><a href=\"http://gracelancy.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://gracelancy.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.imallen.com\" target=\"_blank\" rel=\"noopener\">I’m Allen</a></td>\n<td><a href=\"http://www.imallen.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://www.imallen.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://imi.im/\" target=\"_blank\" rel=\"noopener\">Travis’ Blog</a></td>\n<td><a href=\"http://imi.im/feed\" target=\"_blank\" rel=\"noopener\">http://imi.im/feed</a></td>\n</tr>\n<tr>\n<td><a href=\"http://wangzz.github.io/\" target=\"_blank\" rel=\"noopener\">王中周的技术博客</a></td>\n<td><a href=\"http://wangzz.github.io/atom.xml\" target=\"_blank\" rel=\"noopener\">http://wangzz.github.io/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://jiajun.org/\" target=\"_blank\" rel=\"noopener\">会写代码的猪</a></td>\n<td><a href=\"http://gaosboy.com/feed/atom/\" target=\"_blank\" rel=\"noopener\">http://gaosboy.com/feed/atom/</a></td>\n</tr>\n<tr>\n<td><a href=\"http://wangkewei.cnblogs.com/\" target=\"_blank\" rel=\"noopener\">克伟的博客</a></td>\n<td><a href=\"http://feed.cnblogs.com/blog/u/23857/rss\" target=\"_blank\" rel=\"noopener\">http://feed.cnblogs.com/blog/u/23857/rss</a></td>\n</tr>\n<tr>\n<td><a href=\"http://cnblogs.com/biosli\" target=\"_blank\" rel=\"noopener\">摇滚诗人</a></td>\n<td><a href=\"http://feed.cnblogs.com/blog/u/35410/rss\" target=\"_blank\" rel=\"noopener\">http://feed.cnblogs.com/blog/u/35410/rss</a></td>\n</tr>\n<tr>\n<td><a href=\"http://geeklu.com/\" target=\"_blank\" rel=\"noopener\">Luke’s Homepage</a></td>\n<td><a href=\"http://geeklu.com/feed/\" target=\"_blank\" rel=\"noopener\">http://geeklu.com/feed/</a></td>\n</tr>\n<tr>\n<td><a href=\"http://iiiyu.com/\" target=\"_blank\" rel=\"noopener\">萧宸宇</a></td>\n<td><a href=\"http://iiiyu.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://iiiyu.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.heyuan110.com/\" target=\"_blank\" rel=\"noopener\">Yuan博客</a></td>\n<td><a href=\"http://www.heyuan110.com/?feed=rss2\" target=\"_blank\" rel=\"noopener\">http://www.heyuan110.com/?feed=rss2</a></td>\n</tr>\n<tr>\n<td><a href=\"http://shiningio.com/\" target=\"_blank\" rel=\"noopener\">Shining IO</a></td>\n<td><a href=\"http://shiningio.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://shiningio.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.yifeiyang.net/\" target=\"_blank\" rel=\"noopener\">YIFEIYANG–易飞扬的博客</a></td>\n<td><a href=\"http://www.yifeiyang.net/feed\" target=\"_blank\" rel=\"noopener\">http://www.yifeiyang.net/feed</a></td>\n</tr>\n<tr>\n<td><a href=\"http://koofrank.com/\" target=\"_blank\" rel=\"noopener\">KooFrank’s Blog</a></td>\n<td><a href=\"http://koofrank.com/rss\" target=\"_blank\" rel=\"noopener\">http://koofrank.com/rss</a></td>\n</tr>\n<tr>\n<td><a href=\"http://helloitworks.com\" target=\"_blank\" rel=\"noopener\">hello it works</a></td>\n<td><a href=\"http://helloitworks.com/feed\" target=\"_blank\" rel=\"noopener\">http://helloitworks.com/feed</a></td>\n</tr>\n<tr>\n<td><a href=\"http://msching.github.io/\" target=\"_blank\" rel=\"noopener\">码农人生</a></td>\n<td><a href=\"http://msching.github.io/atom.xml\" target=\"_blank\" rel=\"noopener\">http://msching.github.io/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://yulingtianxia.com\" target=\"_blank\" rel=\"noopener\">玉令天下的Blog</a></td>\n<td><a href=\"http://yulingtianxia.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://yulingtianxia.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.hotobear.com/\" target=\"_blank\" rel=\"noopener\">不掏蜂窝的熊</a></td>\n<td><a href=\"http://www.hotobear.com/?feed=rss2\" target=\"_blank\" rel=\"noopener\">http://www.hotobear.com/?feed=rss2</a></td>\n</tr>\n<tr>\n<td><a href=\"https://andelf.github.io/\" target=\"_blank\" rel=\"noopener\">猫·仁波切</a></td>\n<td><a href=\"https://andelf.github.io/atom.xml\" target=\"_blank\" rel=\"noopener\">https://andelf.github.io/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://ivoryxiong.org/\" target=\"_blank\" rel=\"noopener\">煲仔饭</a></td>\n<td><a href=\"http://ivoryxiong.org/feed.xml\" target=\"_blank\" rel=\"noopener\">http://ivoryxiong.org/feed.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://adad184.com\" target=\"_blank\" rel=\"noopener\">里脊串的开发随笔</a></td>\n<td><a href=\"http://adad184.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://adad184.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.ibireme.com/\" target=\"_blank\" rel=\"noopener\">ibireme伽蓝之堂</a></td>\n<td><a href=\"http://blog.ibireme.com/feed/\" target=\"_blank\" rel=\"noopener\">http://blog.ibireme.com/feed/</a></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"物联网\"><a href=\"#物联网\" class=\"headerlink\" title=\"物联网\"></a>物联网</h4><ul>\n<li><a href=\"https://github.com/phodal/awesome-iot\" target=\"_blank\" rel=\"noopener\">awesome-iot</a> - 这份物联网学习参考大全太给力。从物联网协议、嵌入式系统、相关开源库、相关书籍、博客、学习笔记、标准应有尽有。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"吃水不忘挖井人原文地址\"><a href=\"#吃水不忘挖井人原文地址\" class=\"headerlink\" title=\"吃水不忘挖井人原文地址\"></a>吃水不忘挖井人<a href=\"https://github.com/Tim9Liu9/TimLiu-iOS#%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0\" target=\"_blank\" rel=\"noopener\">原文地址</a></h1><blockquote>\n<h1 id=\"想那些辛勤的收集者表示感谢！\"><a href=\"#想那些辛勤的收集者表示感谢！\" class=\"headerlink\" title=\"想那些辛勤的收集者表示感谢！\"></a>想那些辛勤的收集者表示感谢！</h1><p>自己总结的iOS、mac开源项目及库，持续更新。。。。<br>github排名 <a href=\"https://github.com/trending\" target=\"_blank\" rel=\"noopener\">https://github.com/trending</a>,github搜索：<a href=\"https://github.com/search\" target=\"_blank\" rel=\"noopener\">https://github.com/search</a></p>\n</blockquote>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><a href=\"#UI\">UI</a><ul>\n<li><a href=\"#下拉刷新\">下拉刷新</a></li>\n<li><a href=\"#模糊效果\">模糊效果</a></li>\n<li><a href=\"#AutoLayout\">AutoLayout</a></li>\n<li><a href=\"#富文本\">富文本</a></li>\n<li><a href=\"#图表\">图表</a></li>\n<li><a href=\"#表相关与Tabbar\">表相关与Tabbar</a> </li>\n<li><a href=\"#隐藏与显示\">隐藏与显示</a></li>\n<li><a href=\"#HUD与Toast\">HUD与Toast</a></li>\n<li><a href=\"#对话框\">对话框</a></li>\n<li><a href=\"#其他UI\">其他UI</a></li>\n</ul>\n</li>\n<li><a href=\"#动画\">动画</a><ul>\n<li><a href=\"#侧滑与右滑返回手势\">侧滑与右滑返回手势</a></li>\n<li><a href=\"#gif动画\">gif动画</a></li>\n<li><a href=\"#其他动画\">其他动画</a></li>\n</ul>\n</li>\n<li><a href=\"#网络相关\">网络相关</a><ul>\n<li><a href=\"#网络连接\">网络连接</a></li>\n<li><a href=\"#图像获取\">图像获取</a></li>\n<li><a href=\"#网络聊天\">网络聊天</a></li>\n<li><a href=\"#网络测试\">网络测试</a></li>\n<li><a href=\"#WebView\">WebView</a></li>\n</ul>\n</li>\n<li><a href=\"#Model\">Model</a></li>\n<li><a href=\"#通讯录\">通讯录</a></li>\n<li><a href=\"#其他\">其他</a></li>\n<li><a href=\"#数据库\">数据库</a></li>\n<li><a href=\"#缓存处理\">缓存处理</a></li>\n<li><a href=\"#PDF\">PDF</a></li>\n<li><a href=\"#图像浏览及处理\">图像浏览及处理</a></li>\n<li><a href=\"#摄像照相视频音频处理\">摄像照相视频音频处理</a></li>\n<li><a href=\"#响应式框架\">响应式框架</a></li>\n<li><a href=\"#消息相关\">消息相关</a><ul>\n<li><a href=\"#消息推送客户端\">消息推送客户端</a></li>\n<li><a href=\"#消息推送服务器端\">消息推送服务器端</a></li>\n<li><a href=\"#通知相关\">通知相关</a></li>\n</ul>\n</li>\n<li><a href=\"#版本新API的Demo\">版本新API的Demo</a></li>\n<li><a href=\"#代码安全与密码\">代码安全与密码</a></li>\n<li><a href=\"#测试及调试\">测试及调试</a></li>\n<li><a href=\"#AppleWatch\">AppleWatch</a></li>\n<li><a href=\"#完整项目\">完整项目</a></li>\n<li><a href=\"#好的文章\">好的文章</a></li>\n<li><a href=\"#VPN\">VPN</a></li>\n<li><a href=\"#Xcode插件\">Xcode插件</a></li>\n<li><a href=\"#美工资源\">美工资源</a></li>\n<li><a href=\"#开发资源\">开发资源</a><ul>\n<li><a href=\"#开发资料\">开发资料</a></li>\n<li><a href=\"#swift\">swift</a></li>\n<li><a href=\"#他人开源总结\">他人开源总结</a></li>\n<li><a href=\"#开发博客列表\">开发博客列表</a></li>\n</ul>\n</li>\n</ul>\n<p>========</p>","more":"<h3 id=\"具体内容\"><a href=\"#具体内容\" class=\"headerlink\" title=\"具体内容\"></a>具体内容</h3><h4 id=\"UI\"><a href=\"#UI\" class=\"headerlink\" title=\"UI\"></a>UI</h4><h5 id=\"下拉刷新\"><a href=\"#下拉刷新\" class=\"headerlink\" title=\"下拉刷新\"></a>下拉刷新</h5><ul>\n<li><a href=\"https://github.com/enormego/EGOTableViewPullRefresh\" target=\"_blank\" rel=\"noopener\">EGOTableViewPullRefresh</a> - 最早的下拉刷新控件。</li>\n<li><a href=\"https://github.com/samvermette/SVPullToRefresh\" target=\"_blank\" rel=\"noopener\">SVPullToRefresh</a> - 下拉刷新控件。 </li>\n<li><a href=\"https://github.com/CoderMJLee/MJRefresh\" target=\"_blank\" rel=\"noopener\">MJRefresh</a> - 仅需一行代码就可以为UITableView或者CollectionView加上下拉刷新或者上拉刷新功能。可以自定义上下拉刷新的文字说明。具体使用看“使用方法”。 （国人写）</li>\n<li><a href=\"https://github.com/xhzengAIB/XHRefreshControl\" target=\"_blank\" rel=\"noopener\">XHRefreshControl</a> - XHRefreshControl 是一款高扩展性、低耦合度的下拉刷新、上提加载更多的组件。（国人写）</li>\n<li><a href=\"https://github.com/coolbeet/CBStoreHouseRefreshControl\" target=\"_blank\" rel=\"noopener\">CBStoreHouseRefreshControl</a> - 一个效果很酷炫的下拉刷新控件。</li>\n<li><a href=\"https://github.com/dasdom/BreakOutToRefresh\" target=\"_blank\" rel=\"noopener\">BreakOutToRefresh</a> - 一个下拉刷新打砖块的开源 Swift 库，能让用户在等待下拉刷新的时候边玩撞球游戏边等待。</li>\n<li><a href=\"https://github.com/KittenYang/KYJellyPullToRefresh\" target=\"_blank\" rel=\"noopener\">KYJellyPullToRefresh</a> - 实现弹性物理效果的下拉刷新，神奇的贝塞尔曲线，配合UIDynamic写的一个拟物的下拉刷新动画。</li>\n<li><a href=\"https://github.com/michaelhenry/MHYahooParallaxView\" target=\"_blank\" rel=\"noopener\">MHYahooParallaxView</a> - 类似于Yahoo Weather和News Digest首屏的视差滚动。 </li>\n<li><a href=\"https://github.com/gsdios/SDRefreshView\" target=\"_blank\" rel=\"noopener\">SDRefreshView</a> - 简单易用的上拉和下拉刷新（多版本细节适配）。</li>\n<li><a href=\"https://github.com/MakeZL/ZLSwiftRefresh\" target=\"_blank\" rel=\"noopener\">ZLSwiftRefresh</a> - swift下拉刷新/上拉加载更多，支持自定义动画，集成简单，兼容UITableView/CollectionView/ScrollView/WebView。</li>\n<li><a href=\"https://github.com/dasdom/BreakOutToRefresh\" target=\"_blank\" rel=\"noopener\">BreakOutToRefresh</a> - swift，上拉和下拉刷新。</li>\n<li><a href=\"https://github.com/andreamazz/GearRefreshControl\" target=\"_blank\" rel=\"noopener\">GearRefreshControl</a> -  swift，上拉和下拉刷新。</li>\n<li><a href=\"https://github.com/jcavar/refresher\" target=\"_blank\" rel=\"noopener\">refresher</a> -  swift，上拉和下拉刷新。</li>\n<li><a href=\"http://d.cocoachina.com/code/detail/237753\" target=\"_blank\" rel=\"noopener\">可展开/收缩的下拉菜单–SvpplyTable</a> -  一个可展开可收缩的下拉菜单，类似Svpply app。</li>\n<li><a href=\"https://github.com/Sephiroth87/ODRefreshControl\" target=\"_blank\" rel=\"noopener\">ODRefreshControl</a> - 原iOS6上的橡皮糖刷新样式，很有意思。现在也很多大的 App 在用，比如虾米音乐和 QQ 客户端。</li>\n<li><a href=\"https://github.com/Yalantis/PullToMakeSoup\" target=\"_blank\" rel=\"noopener\">PullToMakeSoup</a> - PullToMakeSoup, 自定义下拉刷新的动画效果：煮饭, Yalantis新作！</li>\n<li><a href=\"https://github.com/cyndibaby905/TwitterCover\" target=\"_blank\" rel=\"noopener\">TwitterCover</a> -  Twitter iOS客户端的下拉封面模糊效果。</li>\n<li><a href=\"https://github.com/MartinRGB/Replace-iOS\" target=\"_blank\" rel=\"noopener\">Replace-iOS</a> - Replace-iOS 让人眼前一亮的下拉刷新（iOS）。</li>\n<li><a href=\"https://github.com/KittenYang/Animations\" target=\"_blank\" rel=\"noopener\">Animations</a> - 封装了一下，使用的时候只要两行代码。一些动画的飞机稿，都是一些单独分离出来的用于测试的子动画，现在统一归类一下。</li>\n<li><a href=\"https://github.com/entotsu/PullToBounce\" target=\"_blank\" rel=\"noopener\">PullToBounce</a> - 下拉刷新的动画 for UIScrollView。</li>\n<li><a href=\"https://github.com/li6185377/WaterDropRefresh\" target=\"_blank\" rel=\"noopener\">WaterDropRefresh</a> - 仿Path 水滴的下拉刷新效果 还有视差滚动。</li>\n<li><a href=\"https://github.com/EnjoySR/ESRefreshControl\" target=\"_blank\" rel=\"noopener\">ESRefreshControl</a> - 仿新浪微博、百度外卖、网易新闻下拉刷新样式Demo（仅供参考）。</li>\n<li><a href=\"https://github.com/alienjun/WaveRefresh\" target=\"_blank\" rel=\"noopener\">WaveRefresh</a> - 下拉刷新水波纹动画。</li>\n<li><a href=\"https://github.com/gontovnik/DGElasticPullToRefresh\" target=\"_blank\" rel=\"noopener\">DGElasticPullToRefresh</a> - 是一款带有弹性效果的 iOS 下拉刷新组件。</li>\n<li><a href=\"https://github.com/wuwen1030/CALayerAnimationDemoh\" target=\"_blank\" rel=\"noopener\">CALayerAnimationDemoh</a> - 双向注水动画下拉刷新组件,使用CALayer的mask实现。</li>\n<li><a href=\"https://github.com/zangqilong198812/BanTangAnimation\" target=\"_blank\" rel=\"noopener\">BanTangAnimation</a> - 半塘下拉刷新的原理。简单来说是利用CGGlyph，字符图形转换成cgpath，然后绘制strokeEnd动画。把timeoffset和scrolloffset结合就行了。</li>\n</ul>\n<h5 id=\"模糊效果\"><a href=\"#模糊效果\" class=\"headerlink\" title=\"模糊效果\"></a>模糊效果</h5><ul>\n<li><a href=\"https://github.com/nicklockwood/FXBlurView\" target=\"_blank\" rel=\"noopener\">FXBlurView</a> - 是一个UIView子类，支持iOS5.0以上版本，支持静态、动态模糊效果，继承与UIView的模糊特效。</li>\n<li><a href=\"https://github.com/onevcat/VVBlurPresentation\" target=\"_blank\" rel=\"noopener\">VVBlurPresentation</a> -很简单易用的在原来viewconntroller基础上做模糊，然后present新的viewcontroller的。</li>\n<li><a href=\"https://github.com/pchernovolenko/UICustomActionSheet\" target=\"_blank\" rel=\"noopener\">UICustomActionSheet</a> - 通过模糊背景来着重强调与菜单相关的元素–对话框 里面已经收藏。</li>\n<li><a href=\"https://github.com/szk-atmosphere/SABlurImageView\" target=\"_blank\" rel=\"noopener\">SABlurImageView</a> - 支持渐变动画效果的图像模糊化类库。P.S. 与前几天推存类库 SAHistoryNavigationViewController 是同一位作者。</li>\n<li><a href=\"https://github.com/FlexMonkey/Blurable\" target=\"_blank\" rel=\"noopener\">Blurable.swift</a> - swift模糊组件。</li>\n</ul>\n<h5 id=\"AutoLayout\"><a href=\"#AutoLayout\" class=\"headerlink\" title=\"AutoLayout\"></a>AutoLayout</h5><ul>\n<li><a href=\"https://github.com/Masonry/Masonry\" target=\"_blank\" rel=\"noopener\">Masonry</a> - Masonry是一个轻量级的布局框架，拥有自己的描述语法，采用更优雅的链式语法封装自动布局，简洁明了并具有高可读性（ <a href=\"http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/\" target=\"_blank\" rel=\"noopener\">使用介绍1</a>  <a href=\"http://ios.jobbole.com/81483/\" target=\"_blank\" rel=\"noopener\">使用介绍2</a>），<a href=\"http://www.cocoachina.com/ios/20150702/12217.html\" target=\"_blank\" rel=\"noopener\">iOS自适应前段库-Masonry的使用</a>），<a href=\"http://www.jianshu.com/p/2ed5f7444900\" target=\"_blank\" rel=\"noopener\">Masonry、Classy、ClassyLiveLayout介绍</a>。<a href=\"https://github.com/lcddhr/DDMasonryTest\" target=\"_blank\" rel=\"noopener\">使用DEMO</a> 视图居中显示、子视图含边距、视图等距离摆放、计算ScrollView的contentsize。</li>\n<li><a href=\"https://github.com/cloudkite/Classy/\" target=\"_blank\" rel=\"noopener\">Classy</a> - Classy是一个能与UIKit无缝结合stylesheet(样式)系统。它借鉴CSS的思想，但引入新的语法和命名规则，<a href=\"http://classy.as/getting-started/\" target=\"_blank\" rel=\"noopener\">Classy官网</a>，<a href=\"http://www.jianshu.com/p/2ed5f7444900\" target=\"_blank\" rel=\"noopener\">Masonry、Classy、ClassyLiveLayout介绍</a>。</li>\n<li><a href=\"https://github.com/olegam/ClassyLiveLayout\" target=\"_blank\" rel=\"noopener\">ClassyLiveLayout</a> - ClassyLiveLayout通过结合Classy stylesheets与Masonry一起使用，能够在运行的模拟器中微调Auto Layout约束实时显示效果的工具，<a href=\"http://www.jianshu.com/p/2ed5f7444900\" target=\"_blank\" rel=\"noopener\">Masonry、Classy、ClassyLiveLayout介绍</a>。</li>\n<li><a href=\"https://github.com/Masonry/Snap\" target=\"_blank\" rel=\"noopener\">Snap</a> - Snap是Masonry Auto Layout DSL的Swift版本，是一款轻量级的布局框架，使用了更良好的语法封装了AutoLayout。Snap支持iOS和OS X。</li>\n<li><a href=\"https://github.com/SnapKit/SnapKit\" target=\"_blank\" rel=\"noopener\">SnapKit</a> - 就是“snap”， –swift 喜欢自动布局吗？当然喜欢！至少在storyboard中创建时会喜欢。 在代码中纯手工创建约束灰常痛苦，但幸运的是我们有了SnapKit，在board中用上它，你可以简单直观地编写约束了。</li>\n<li><a href=\"https://github.com/smileyborg/PureLayout\" target=\"_blank\" rel=\"noopener\">PureLayout</a> - PureLayout 是 iOS &amp; OS X Auto Layout 的终极 API——非常简单，又非常强大。PureLayout 通过一个全面的Auto Layout API 扩展了 UIView/NSView, NSArray 和 NSLayoutConstraint，仿照苹果自身的框架。</li>\n<li><a href=\"https://github.com/smileyborg/UIView-AutoLayout\" target=\"_blank\" rel=\"noopener\">UIView-AutoLayout</a> -<br>Deprecated in favor of PureLayout, which includes OS X support:<a href=\"https://github.com/smileyborg/PureLayout。\" target=\"_blank\" rel=\"noopener\">https://github.com/smileyborg/PureLayout。</a></li>\n<li><a href=\"https://github.com/robb/Cartography\" target=\"_blank\" rel=\"noopener\">Cartography</a> - Cartography 是用来声明 Swift 中的 Auto Layout，无需输入任何 stringly 就可设置自己 Auto Layout 的约束声明。</li>\n<li><a href=\"https://github.com/philcn/Auto-Layout-Showcase\" target=\"_blank\" rel=\"noopener\">Auto-Layout-Showcase</a> - swift,AutoLayout 进阶 Demo，宽高比约束、比例约束、不等约束、视差约束、低优先级约束等高级用法，无需写码即可进行复杂页面布局，Demo 还动态模拟了各屏幕下的效果。来自百度知道 iOS 小组的内部分享。</li>\n<li><a href=\"https://github.com/forkingdog/UIView-FDCollapsibleConstraints\" target=\"_blank\" rel=\"noopener\">UIView-FDCollapsibleConstraints</a> - 一个AutoLayout辅助工具，最优雅的方式解决自动布局中子View的动态显示和隐藏的问题。第二个Demo模拟了一个经典的FlowLayout，任意一个元素隐藏时，底下的元素需要自动“顶”上来，配合这个扩展，你可以在IB里连一连，选一选，不用一行代码就能搞定。</li>\n<li><a href=\"https://github.com/luodezhao/Autolayout_Demo\" target=\"_blank\" rel=\"noopener\">Autolayout_Demo</a> - 在项目中用自动布局实现的类似抽屉效果。</li>\n<li><a href=\"http://code.cocoachina.com/detail/320405/\" target=\"_blank\" rel=\"noopener\">当view隐藏的时候也隐藏其autolayout的NSLayoutAttribute</a> - 当view隐藏的时候也隐藏其autolayout的NSLayoutAttribute，从而不用大量的代码工作。</li>\n<li><a href=\"https://github.com/gsdios/SDAutoLayout\" target=\"_blank\" rel=\"noopener\">SDAutoLayout</a> - AutoLayout 一行代码搞定自动布局！支持Cell、Label和Tableview高度自适应，致力于做最简单易用的AutoLayout库。</li>\n<li><a href=\"https://github.com/mamaral/Neon\" target=\"_blank\" rel=\"noopener\">Neon.swift</a> - 功能强大的 UI 布局神器。</li>\n</ul>\n<h5 id=\"富文本\"><a href=\"#富文本\" class=\"headerlink\" title=\"富文本\"></a>富文本</h5><ul>\n<li><a href=\"https://github.com/honcheng/RTLabel\" target=\"_blank\" rel=\"noopener\">RTLabel</a> - RTLabel 基于UILabel类的拓展,能够支持Html标记的富文本显示，它是基于Core Text,因此也支持Core Text上的一些东西。32位，很久没有更新了。</li>\n<li><a href=\"https://github.com/bingxue314159/RTLabel\" target=\"_blank\" rel=\"noopener\">RTLabel</a> - 富文本，RTLabel支持64位。 </li>\n<li><a href=\"https://github.com/12207480/TYAttributedLabel\" target=\"_blank\" rel=\"noopener\">TYAttributedLabel</a> -  TYAttributedLabel。 简单易用的属性文本控件(无需了解CoreText)，支持富文本，图文混排显示，支持添加链接，image和UIView控件，支持自定义排版显示。</li>\n<li><a href=\"https://github.com/TinyQ/TQRichTextView\" target=\"_blank\" rel=\"noopener\">TQRichTextView</a> - 用于做富文本视图控件显示，用于即时通讯的表情显示，以及资源评论的富文本显示。</li>\n<li><a href=\"https://github.com/mattt/TTTAttributedLabel\" target=\"_blank\" rel=\"noopener\">TTTAttributedLabel</a> - 一个文字视图开源组件，是UILabel的替代元件，可以以简单的方式展现渲染的属性字符串。另外，还支持链接植入，不管是手动还是使用UIDataDetectorTypes自动把电话号码、事件、地址以及其他信息变成链接。<a href=\"http://blog.csdn.net/prevention/article/details/9998575\" target=\"_blank\" rel=\"noopener\">用TTTAttributedLabel创建变化丰富的UILabel</a> - 网易新闻iOS版使用。</li>\n<li><a href=\"https://github.com/molon/MLEmojiLabel\" target=\"_blank\" rel=\"noopener\">MLEmojiLabel</a> - 自动识别网址、号码、邮箱、@、#话题#和表情的label。可以自定义自己的表情识别正则，和对应的表情图像。(默认是识别微信的表情符号)，继承自TTTAttributedLabel，所以可以像label一样使用。label的特性全都有，使用起来更友好更方便。</li>\n<li><a href=\"https://github.com/nicklockwood/FXLabel\" target=\"_blank\" rel=\"noopener\">FXLabel</a> - FXLabel是一个功能强大使用简单的类库，通过提供一个子类改进了标准的UILabel组件，为字体增加了阴影、内阴影和渐变色等，可以被用在任何标准的UILabel中。FXLabel还提供了更多控件，可以对字体行距、字体间距等进行调整。</li>\n<li><a href=\"https://github.com/TigerWf/WFReader\" target=\"_blank\" rel=\"noopener\">WFReader</a> - 一款简单的coretext阅读器，支持文本选择、高亮以及字体大小选择等。</li>\n<li><a href=\"https://github.com/nigelgrange/WPAttributedMarkup\" target=\"_blank\" rel=\"noopener\">WPAttributedMarkup</a> - WPAttributedMarkup is a simple utility category that can be used to easily create an attributed string from text with markup tags and a style dictionary。</li>\n<li><a href=\"https://github.com/MoZhouqi/KMPlaceholderTextView\" target=\"_blank\" rel=\"noopener\">KMPlaceholderTextView</a> - 可显示多行 placeholder 的 textView，可以在IB里面设置 – swift。</li>\n<li><a href=\"https://github.com/mrchenhao/HHFlashSwitch\" target=\"_blank\" rel=\"noopener\">HHFlashSwitch</a> - 一个另类的UISwitch，选择后，背景水波扩散变色效果。 </li>\n<li><a href=\"https://github.com/zhangyu9050/UUColorSwitch\" target=\"_blank\" rel=\"noopener\">UUColorSwitch</a> - Switch 开关动画效果,当打开开关时，Switch可实现平滑渲染过渡到父视图的效果。</li>\n<li><a href=\"https://github.com/zekunyan/UITextViewDIYEmojiExample\" target=\"_blank\" rel=\"noopener\">UITextViewDIYEmojiExample</a> - <a href=\"http://tutuge.me/2015/03/07/UITextView%E7%BC%96%E8%BE%91%E6%97%B6%E6%8F%92%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E6%83%85-%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%BE%E6%96%87%E6%B7%B7%E7%BC%96/\" target=\"_blank\" rel=\"noopener\">UITextView编辑时插入自定义表情-简单的图文混编</a>。 </li>\n<li><a href=\"https://github.com/facebook/Shimmer\" target=\"_blank\" rel=\"noopener\">Shimmer</a> - BlingBling闪光效果，酷炫的Label的效果，可以用于加载等待提示。</li>\n<li><a href=\"https://github.com/nnhubbard/ZSSRichTextEditor\" target=\"_blank\" rel=\"noopener\">ZSSRichTextEditor</a> - 适用于iOS的富文本WYSIWYG编辑器，支持语法高亮和源码查看。ZSSRichTextEditor包含所有WYSIWYG标准的编辑器工具。</li>\n<li><a href=\"https://github.com/cjwirth/RichEditorView\" target=\"_blank\" rel=\"noopener\">RichEditorView</a> - swift，一套可定制富文本编辑器组件及示例。功能完整、代码简练、实现逻辑巧妙（编辑器核心与 WebView 结合，采用 HTML5 contentEditable 编辑模式，执行JS 配套命令 execCommand 实现富文本编辑功能）。</li>\n<li><a href=\"https://github.com/Cocoanetics/DTCoreText\" target=\"_blank\" rel=\"noopener\">DTCoreText</a> - 可以解析HTML与CSS最终用CoreText绘制出来，通常用于在一些需要显示富文本的场景下代替低性能的UIWebView。<a href=\"http://blog.cnbang.net/tech/2630/\" target=\"_blank\" rel=\"noopener\">DTCoreText源码解析</a>。</li>\n<li><a href=\"https://github.com/cloverstudio/CSGrowingTextView\" target=\"_blank\" rel=\"noopener\">CSGrowingTextView</a> - 用作即时通讯文本框和评论文本框使用，可以显示多行输入。 </li>\n<li><a href=\"https://github.com/indragiek/MarkdownTextView\" target=\"_blank\" rel=\"noopener\">MarkdownTextView</a> - 显示Markdown的TextView。 </li>\n<li><a href=\"http://d.cocoachina.com/code/detail/300299\" target=\"_blank\" rel=\"noopener\">高仿微信限定行数文字内容</a> - 采用Autolayout高仿微信纯文字限定行数。</li>\n<li><a href=\"https://github.com/lingochamp/FuriganaTextView\" target=\"_blank\" rel=\"noopener\">FuriganaTextView</a> - 实现复杂的日文韩文排版。</li>\n<li><a href=\"https://github.com/gmertk/ParkedTextField\" target=\"_blank\" rel=\"noopener\">ParkedTextField</a> - 带固定文本的输入组件。 </li>\n<li><a href=\"https://github.com/lexrus/LTMorphingLabel\" target=\"_blank\" rel=\"noopener\">LTMorphingLabel</a> - swift 能够实现文字变形动画效果的Label，用Swift写的一个能够实现文字变形动画效果的Label，很炫。</li>\n<li><a href=\"https://github.com/zyprosoft/GJCFCoreText\" target=\"_blank\" rel=\"noopener\">GJCFCoreText</a> - 图文混排。</li>\n<li><a href=\"https://github.com/KyoheiG3/AttributedLabel\" target=\"_blank\" rel=\"noopener\">AttributedLabel</a> - 显示性能数量级 UILabel 的 AttributedLabel。无畏无惧、挑战权威。</li>\n<li><a href=\"https://github.com/liufan321/FFLabel\" target=\"_blank\" rel=\"noopener\">FFLabel</a> - 自动检测 URLs, @username, #topic# 等关链词（提供响应扩展）。实用的标签文本小组件。</li>\n<li><a href=\"https://github.com/raulriera/TextFieldEffects\" target=\"_blank\" rel=\"noopener\">TextFieldEffects</a> - 标准的UITextField有些枯燥么？来认识一下TextFieldEffects吧！废话不多说，只要看几个例子,是啊，都是些简单的dropin控制器。甚至可以在storyboard中使用IBDesignables。</li>\n<li><a href=\"https://github.com/filipstefansson/AutocompleteField\" target=\"_blank\" rel=\"noopener\">AutocompleteField</a> - 可应用于 iOS 应用中文字输入框自动补全的场景, 兼容到 iOS 8。</li>\n<li><a href=\"https://github.com/yannickl/Splitflap\" target=\"_blank\" rel=\"noopener\">Splitflap.swift</a> - 可用于快速给 iOS 应用创建文字翻转的动画效果。</li>\n<li><a href=\"https://github.com/wordpress-mobile/WordPress-Editor-iOS\" target=\"_blank\" rel=\"noopener\">WordPress-Editor-iOS</a> - 一个文本编辑器 简书和新浪博客都在用。</li>\n<li><a href=\"https://github.com/ibireme/YYText\" target=\"_blank\" rel=\"noopener\">YYText</a> - 功能强大的 iOS 富文本框架。</li>\n<li><a href=\"http://code.cocoachina.com/view/129099\" target=\"_blank\" rel=\"noopener\">placeholder_TextView</a> - 带有placeholder的TextView：带有提示信息的textview，使用懒加载的思想，支持扩展、自定义，类似许多APP内部的意见反馈页面 。</li>\n</ul>\n<h5 id=\"图表\"><a href=\"#图表\" class=\"headerlink\" title=\"图表\"></a>图表</h5><ul>\n<li><a href=\"https://github.com/kevinzhow/PNChart\" target=\"_blank\" rel=\"noopener\">PNChart</a> - 国内开源作者，动态的图表。</li>\n<li><a href=\"https://github.com/zemirco/swift-linechart\" target=\"_blank\" rel=\"noopener\">swift-linechart</a> - 功能完整、实用的折线图组件。使用方便，参数配置简单。是不可多得的优质组件–swift。</li>\n<li><a href=\"https://github.com/danielgindi/ios-charts\" target=\"_blank\" rel=\"noopener\">ios-charts</a> - 一款优秀 Android 图表开源库 MPAndroidChart 的 Swift 语言实现版（支持 Objective-C 和 Swift 调用）。缺省提供的示例代码为 Objective-C。</li>\n<li><a href=\"https://github.com/xhacker/TEAChart\" target=\"_blank\" rel=\"noopener\">TEAChart</a> - xhacker/TEAChart 一个简洁的 iOS 图表库，支持柱状图、饼图以及日历等。</li>\n<li><a href=\"https://github.com/yasuoza/YOChartImageKit\" target=\"_blank\" rel=\"noopener\">YOChartImageKit</a> - 支持在watchOS上绘制图表，看它最近更新挺勤快的，可以关注一下。</li>\n<li><a href=\"https://github.com/kevinzhow/RealtimeGradientText\" target=\"_blank\" rel=\"noopener\">RealtimeGradientText</a> - Fun With CALayer Mask 刚好今天开源了一个有趣的项目 RealtimeGradientText，所以也好聊一下 CALayer 的 Mask，<a href=\"http://blog.zhowkev.in/2015/07/06/fun-with-mask/\" target=\"_blank\" rel=\"noopener\">说明</a>。</li>\n</ul>\n<h5 id=\"表相关与Tabbar\"><a href=\"#表相关与Tabbar\" class=\"headerlink\" title=\"表相关与Tabbar\"></a>表相关与Tabbar</h5><ul>\n<li><a href=\"https://github.com/onevcat/SWTableViewCell\" target=\"_blank\" rel=\"noopener\">SWTableViewCell</a> - 国内开源作者，带很多手势的表单元格。</li>\n<li><a href=\"https://github.com/alikaragoz/MCSwipeTableViewCell\" target=\"_blank\" rel=\"noopener\">MCSwipeTableViewCell</a> - 带很多手势的表单元格。</li>\n<li><a href=\"https://github.com/1000Memories/TMQuiltView\" target=\"_blank\" rel=\"noopener\">TMQuiltView</a> - 瀑布流。</li>\n<li><a href=\"https://github.com/lengmolehongyan/WaterfallFlowDemo\" target=\"_blank\" rel=\"noopener\">WaterfallFlowDemo</a> - 一个简单的UICollectionView瀑布流布局演示demo。</li>\n<li><a href=\"https://github.com/xmartlabs/XLForm\" target=\"_blank\" rel=\"noopener\">XLForm</a> - 很多表格类的table,写法更高冷一点，推荐使用。</li>\n<li><a href=\"https://github.com/xmartlabs/Eureka\" target=\"_blank\" rel=\"noopener\">Eureka.swift</a> - Eureka 是 XLForm 的 Swift 的移植版本, 一个可以帮助开发者们快速构建 iOS 各种复杂表单的库, 具有较高的可扩展性, 方便自定制样式。</li>\n<li><a href=\"https://github.com/romaonthego/RETableViewManager\" target=\"_blank\" rel=\"noopener\">RETableViewManager</a> - 可以十分方便地生成各种样式、各种功能的TableView。只要开发者能想到的列表效果或者功能，都可以利用这份代码迅速编写出来。比如，之前要实现一个填写各种资料的列表，可能需要很多代码，现在只需要几行代码就可以实现。 </li>\n<li><a href=\"https://github.com/TomThorpe/UIScrollSlidingPages\" target=\"_blank\" rel=\"noopener\">UIScrollSlidingPages</a> - 允许添加多视图控件，并且可以横向滚动。有点类似于Groupon app。</li>\n<li><a href=\"https://github.com/izyhuang/HBHorizontalTableView\" target=\"_blank\" rel=\"noopener\">HBHorizontalTableView</a> - swift，TableView 横向滚动小示例（仿照 AppStore 应用展示）。</li>\n<li><a href=\"https://github.com/mcelayir/HorizontalScrollCell\" target=\"_blank\" rel=\"noopener\">HorizontalScrollCell</a> - HorizontalScrollCell是一款使用方便的水平方向可滚动的单元格，适用于UICollectionView中实现水片方向滚动视图。 。</li>\n<li><a href=\"https://github.com/shiyuan17/SYJiugonggeTableView\" target=\"_blank\" rel=\"noopener\">SYJiugonggeTableView</a> - tableView封装的九宫格。</li>\n<li><a href=\"https://github.com/ZhipingYang/UUChatTableView\" target=\"_blank\" rel=\"noopener\">UUChatTableView</a> - UUChatTableView 气泡聊天界面，支持文本、图片以及音频的气泡聊天界面。<a href=\"http://www.cocoachina.com/ios/20150205/11116.html\" target=\"_blank\" rel=\"noopener\">源码推荐说明</a>。</li>\n<li><a href=\"https://github.com/acani/Chats\" target=\"_blank\" rel=\"noopener\">Chats</a> - 聊天 UI 示例程序。此项目应该只为演示或学习之用，没有服务器 – swift。 </li>\n<li><a href=\"https://github.com/layerhq/Atlas-iOS\" target=\"_blank\" rel=\"noopener\">Atlas-iOS</a> - 快速在iOS里集成聊天功能，类似开源版本的环信。Layer家开源了一套聊天app界面的解决方案.看起来很赞，很多蛮复杂的东西直接都帮封好了。不得不说现在做app开发真是很简单，大部分时间搭积木就可以了。<a href=\"https://atlas.layer.com/\" target=\"_blank\" rel=\"noopener\">官方网站</a>。</li>\n<li><a href=\"https://github.com/badoo/Chatto\" target=\"_blank\" rel=\"noopener\">Chatto.swift</a> - Chatto.swift:轻量级聊天应用框架及示例。文字及图片可扩展输入栏，汽泡效果等聊天核心特性，分页及自动布局完善。</li>\n<li><a href=\"https://github.com/agdsdl/DLSlideView\" target=\"_blank\" rel=\"noopener\">DLSlideView</a> - DLSlideView对常见的顶部Tab页点击、滑动分页做了封装。它使用基于ViewController的container特性（而不是scrollview）来管理各个子页面，以支持无限分页，<a href=\"http://www.cocoachina.com/ios/20150205/11116.html\" target=\"_blank\" rel=\"noopener\">源码推荐说明</a>。</li>\n<li><a href=\"https://github.com/pozi119/VOVCManager\" target=\"_blank\" rel=\"noopener\">VOVCManager</a> - 页面管理器:1.跳转指定页面,只需要知道viewController的Class名,如果有storyboard,则需要指定storyboard名；2.无需添加基类；3.支持URLScheme跳转指定页面。</li>\n<li><a href=\"https://github.com/Moblox/MBXPageViewController\" target=\"_blank\" rel=\"noopener\">MBXPageViewController</a> - 简洁快速的页面切换–MBXPageViewController，带有按钮控件的UIPageController，非常整洁、简单以及快速。该项目通过三种形式展示页面之间的切换，比如导航栏上的多个tab切换、页面左右两端箭头指示切换，以及使用分段控件。</li>\n<li><a href=\"https://github.com/ming1016/PagerTab\" target=\"_blank\" rel=\"noopener\">PagerTab</a> - UIScrollView实现滑动转换页面，类似网易云音乐iOS版的页面滑动切换效果。</li>\n<li><a href=\"https://github.com/guilhermearaujo/GUITabPagerViewController\" target=\"_blank\" rel=\"noopener\">GUITabPagerViewController</a> - 多个tab滑动切换。</li>\n<li><a href=\"https://github.com/pozi119/VOMetroLayoutDemo\" target=\"_blank\" rel=\"noopener\">VOMetroLayoutDemo</a> - Metro风格的UICollectionView, 目前只支持横向布局,仅在iPad上应用。</li>\n<li><a href=\"https://github.com/KittenYang/KYCellAnimation\" target=\"_blank\" rel=\"noopener\">KYCellAnimation</a> - 给UITableViewCell增加进入的动画。</li>\n<li><a href=\"https://github.com/knutigro/COBezierTableView\" target=\"_blank\" rel=\"noopener\">COBezierTableView</a> - swift，通过编辑 Bezier 曲线四点位置设置 TableView 内 Cell 及对应按扭位置。实验效果很赞。</li>\n<li><a href=\"https://github.com/robbdimitrov/RDVTabBarController\" target=\"_blank\" rel=\"noopener\">RDVTabBarController</a> - 一个TabBar组件，可以方便设置底部菜单的文字图片，点击效果，小红点提示等。</li>\n<li><a href=\"https://github.com/DeveloperLx/LxTabBarController\" target=\"_blank\" rel=\"noopener\">LxTabBarController</a> - 改变了原生tabbar切换tab时的生硬效果，并加入滑动切换手势（有和界面上的其它手势发生冲突的风险，可根据具体项目予以关闭），<a href=\"https://github.com/DeveloperLx/LxTabBarController-swift\" target=\"_blank\" rel=\"noopener\">swift版本</a>。</li>\n<li><a href=\"https://github.com/leichunfeng/WXTabBarController\" target=\"_blank\" rel=\"noopener\">WXTabBarController</a> - 在系统 UITabBarController 的基础上完美实现了安卓版微信 TabBar 的滑动切换功能，单手操作 iPhone 6 Plus 切换 TabBar 一直是一件很痛苦的事情，而滑动切换是一种不错的解决方案，支持屏幕旋转。</li>\n<li><a href=\"https://github.com/KittenYang/GooeyTabbar\" target=\"_blank\" rel=\"noopener\">GooeyTabbar</a> - 皮筋式弹性缩放工具栏示例及演示。</li>\n<li><a href=\"http://d.cocoachina.com/code/detail/298409\" target=\"_blank\" rel=\"noopener\">横向展示文本内容的自定义cell</a> - 可以横向展示文本内容的自定义cell，根据文本无限滚动。</li>\n<li><a href=\"https://github.com/forkingdog/UITableView-FDTemplateLayoutCell\" target=\"_blank\" rel=\"noopener\">UITableView-FDTemplateLayoutCell</a> - UITableView-FDTemplateLayoutCell 是一个方便缓存 UITableViewCell 的高度的框架。</li>\n<li><a href=\"https://github.com/jozsef-vesza/ExpandingStackCells\" target=\"_blank\" rel=\"noopener\">ExpandingStackCells</a> - 采用 UIStackView 实现表格单元格扩展内容显示示例及解决方案。</li>\n<li><a href=\"https://github.com/forkingdog/FDStackView\" target=\"_blank\" rel=\"noopener\">FDStackView</a> - 可以将 UIStackView 的最低支持版本拉低到 iOS6，无需配置，没有代码侵染，扔到工程里后直接用系统 UIStackView 的 API 即可，同时兼容 Storyboard。 </li>\n<li><a href=\"https://github.com/nghialv/Sapporo\" target=\"_blank\" rel=\"noopener\">Sapporo</a> - swift 单元格模型驱动的集合视图管理器组件。又一个超实用的“轮子”。</li>\n<li><a href=\"https://github.com/WeeTom/MDIHorizontalSectionTableViewController\" target=\"_blank\" rel=\"noopener\">MDIHorizontalSectionTableViewController</a> - 根据产品需求开源了一个交互项目，可以理解为横向Section的TableView，section和cell同时支持拖拽，后续安卓版本也会开源出来。</li>\n<li><a href=\"https://github.com/JazysYu/JZNavigationExtension\" target=\"_blank\" rel=\"noopener\">JZNavigationExtension</a> - 多功能导航控制器，可以透明返回栏。</li>\n<li><a href=\"https://github.com/okla/QuickRearrangeTableView\" target=\"_blank\" rel=\"noopener\">QuickRearrangeTableView</a> - 基于 UITableView 的快速重排功能扩展子类。通过长按选定单元格然后滚动移动到指定位置。</li>\n<li><a href=\"https://github.com/nshintio/uicollectionview-reordering\" target=\"_blank\" rel=\"noopener\">uicollectionview-reordering</a> - UICollectionViews的拖拽(拖动、移动)效果,<a href=\"http://nshint.io/blog/2015/07/16/uicollectionviews-now-have-easy-reordering/\" target=\"_blank\" rel=\"noopener\">实例教程</a>.</li>\n<li><a href=\"https://github.com/dzenbot/DZNEmptyDataSet\" target=\"_blank\" rel=\"noopener\">DZNEmptyDataSet</a> - DZNEmptyDataSet算是一个很标准的iOS内建方式，适合用来处理空的table view和collection view。会自动将collection view处理完善，并将用户消息以合适美观的方式显示出来。每个iOS项目都可以自动处理。</li>\n<li><a href=\"https://github.com/MortimerGoro/MGSwipeTableCell\" target=\"_blank\" rel=\"noopener\">MGSwipeTableCell</a> - 另一个常见于很多应用中的UI组件，苹果应该考虑在标准的iOS SDK中加入一些类似的内容。Swipeable表格cell是这个pod的最佳描述，也是最好的。</li>\n<li><a href=\"https://github.com/HebeTienCoder/XLPlainFlowLayout\" target=\"_blank\" rel=\"noopener\">XLPlainFlowLayout</a> - 可以让UICollectionView的header也支持悬停效果，类似于tableView的Plain风格。</li>\n<li><a href=\"https://github.com/wangmchn/WMPageController\" target=\"_blank\" rel=\"noopener\">WMPageController</a> - 一个方便的 pageContrller 的控件，里面还包括滚动视图。</li>\n<li><a href=\"https://github.com/steipete/PSTCollectionView\" target=\"_blank\" rel=\"noopener\">PSTCollectionView</a> - PSTCollectionView。</li>\n<li><a href=\"https://github.com/lianleven/LLRiseTabBar-iOS\" target=\"_blank\" rel=\"noopener\">LLRiseTabBar-iOS</a> - 直接使用系统的特性实现的tabbar，比较简单。</li>\n<li><a href=\"https://github.com/MartinRGB/MTMaterialDelete\" target=\"_blank\" rel=\"noopener\">MTMaterialDelete</a> - 非常有趣的Material Design动画，动画删除表里面的单元格。</li>\n<li><a href=\"https://github.com/gmertk/BusyNavigationBar\" target=\"_blank\" rel=\"noopener\">BusyNavigationBar</a> - 进度条式NavigationBar导航条。</li>\n<li><a href=\"https://github.com/cemolcay/ReorderableGridView-Swift\" target=\"_blank\" rel=\"noopener\">ReorderableGridView-Swift</a> - 拖拽排序卡片。</li>\n<li><a href=\"https://github.com/LiGoEX/LGSettingView\" target=\"_blank\" rel=\"noopener\">LGSettingView</a> - LGSettingView仅需三句代码即可快速集成设置界面，免去每次开发新应用都要重新布置设置界面的烦恼。</li>\n<li><a href=\"http://code.cocoachina.com/view/129212\" target=\"_blank\" rel=\"noopener\">微博cell自动布局</a> - 使用autoLayout对微博的cell进行自动布局，自适应cell的高度。</li>\n<li><a href=\"https://github.com/TyroneWing/TreeTableView\" target=\"_blank\" rel=\"noopener\">TreeTableView</a> - ZYTreeTableView：TreeView 模仿好友列表的实现方式。</li>\n</ul>\n<h5 id=\"隐藏与显示\"><a href=\"#隐藏与显示\" class=\"headerlink\" title=\"隐藏与显示\"></a>隐藏与显示</h5><ul>\n<li><a href=\"http://d.cocoachina.com/code/detail/286102\" target=\"_blank\" rel=\"noopener\">SlideTapBar</a> - 滚动栏菜单，向上滚动时隐藏tabbar，向下滚动马上显示tabbar。</li>\n<li><a href=\"https://github.com/Yalantis/FoldingTabBar.iOS\" target=\"_blank\" rel=\"noopener\">FoldingTabBar.iOS</a> - 可折叠Tab Bar和Tab Bar Controller。</li>\n<li><a href=\"https://github.com/ltebean/LTNavigationBar\" target=\"_blank\" rel=\"noopener\">LTNavigationBar</a> - LTNavigationBar为app导航栏添加动态着色效果，可自定义其背景色。Demo包含：1.变换背景色；2.滚动视图，导航栏和状态栏重叠。</li>\n<li><a href=\"https://github.com/bryankeller/BLKFlexibleHeightBar\" target=\"_blank\" rel=\"noopener\">BLKFlexibleHeightBar</a> - 固定Header的效果库，一个拥有非常灵活高度的标题栏，可以为使用软件的用户提供更多的阅读和滑动空间，现在已经被众多app所采用。</li>\n</ul>\n<h5 id=\"HUD与Toast\"><a href=\"#HUD与Toast\" class=\"headerlink\" title=\"HUD与Toast\"></a>HUD与Toast</h5><ul>\n<li><a href=\"https://github.com/jdg/MBProgressHUD\" target=\"_blank\" rel=\"noopener\">MBProgressHUD</a> - 最多人用的loading。</li>\n<li><a href=\"https://github.com/LvJianfeng/EBuyCommon\" target=\"_blank\" rel=\"noopener\">EBuyCommon</a> - 1.基于MBProgressHUD实现得图形加载提示方式，及其它标题方式提醒。2.弹窗。</li>\n<li><a href=\"https://github.com/TransitApp/SVProgressHUD\" target=\"_blank\" rel=\"noopener\">SVProgressHUD</a> - SVProgressHUD的loading，如果你需要定制化的等待提示器，这个就是了（也许是最好的）。</li>\n<li><a href=\"https://github.com/relatedcode/ProgressHUD\" target=\"_blank\" rel=\"noopener\">ProgressHUD</a> - ProgressHUD的loading，使用最简单。</li>\n<li><a href=\"https://github.com/mutualmobile/MMProgressHUD\" target=\"_blank\" rel=\"noopener\">MMProgressHUD</a> - 设置HUD出现和消失的方式（包括上下、左右、淡入淡出、放大缩小等等），设置HUD的内容（可以在HUD中加入帧动画、动态图片等等），设置HUD出现时的底部覆盖层颜色，等等。总而言之，这是一份集大成的HUD代码。慢慢看视频吧，囊括了所有效果。</li>\n<li><a href=\"https://github.com/devSC/WSProgressHUD\" target=\"_blank\" rel=\"noopener\">WSProgressHUD</a> - 一个小巧精致的HUD,支持添加到自定义View上, 还有更多小细节.。</li>\n</ul>\n<h5 id=\"对话框\"><a href=\"#对话框\" class=\"headerlink\" title=\"对话框\"></a>对话框</h5><ul>\n<li><a href=\"https://github.com/m1entus/WCAlertView\" target=\"_blank\" rel=\"noopener\">WCAlertView</a> - 自定义的对话框。</li>\n<li><a href=\"https://github.com/wimagguc/ios-custom-alertview\" target=\"_blank\" rel=\"noopener\">IOS7AlertView</a> - IOS7AlertView的对话框。</li>\n<li><a href=\"https://github.com/mtonio91/AMSmoothAlert\" target=\"_blank\" rel=\"noopener\">AMSmoothAlert</a> - 动画效果不错，最多star，但不支持arm64。</li>\n<li><a href=\"https://github.com/dinhquan/DQAlertView\" target=\"_blank\" rel=\"noopener\">DQAlertView</a> - 扁平化的样式不错。</li>\n<li><a href=\"https://github.com/mrchenhao/HHAlertView\" target=\"_blank\" rel=\"noopener\">HHAlertView</a> - 一个简易的alertview  有三种样式，有成功，失败，和警告三种样式，支持Delegate和block两种回调。</li>\n<li><a href=\"https://github.com/martinjuhasz/MJPopupViewController\" target=\"_blank\" rel=\"noopener\">MJPopupViewController</a> - 实现弹出视图的各种弹出和消失效果，包括淡入淡出（fade in，fade out），从屏幕上方飞进，下方飞出，从屏幕左方飞进，右方飞出等等效果，弹窗。</li>\n<li><a href=\"https://github.com/adad184/MMPopupView\" target=\"_blank\" rel=\"noopener\">MMPopupView</a> - 弹出框的基类组件（弹窗）。</li>\n<li><a href=\"https://github.com/fengchuanxiang/Menu\" target=\"_blank\" rel=\"noopener\">Menu</a> - 项目中可能会用到的常用菜单，以后有时间会继续补充，弹窗。 </li>\n<li><a href=\"https://github.com/teodorpatras/EasyTipView\" target=\"_blank\" rel=\"noopener\">EasyTipView</a> - 弹出提示框类及演示示例。同样地，API 简单、易用。好“轮子”，弹窗。  </li>\n<li><a href=\"https://github.com/kolyvan/kxmenu\" target=\"_blank\" rel=\"noopener\">kxmenu</a> - kxmenu弹出菜单，点击视图上任意位置的按钮，会弹出一个菜单，并且有个小箭头指向点击的按钮，类似气泡视图。弹出的菜单位置会根据按钮的位置来进行调整。 </li>\n<li><a href=\"https://github.com/questbeat/QBPopupMenu\" target=\"_blank\" rel=\"noopener\">QBPopupMenu</a> - QBPopupMenu弹出菜单，实现类似 UIMenuItem 的弹出菜单按钮。点击按钮，会弹出一个菜单，上面可以排列多个按钮。纯代码实现，不需要任何图片。</li>\n<li><a href=\"https://github.com/zhenlintie/STModalDemo\" target=\"_blank\" rel=\"noopener\">STModalDemo</a> - 弹出视图（通知，提示，选择，窗口）。</li>\n<li><a href=\"https://github.com/TaimurAyaz/TAOverlay\" target=\"_blank\" rel=\"noopener\">TAOverlay</a> - TAOverlay可通过叠加层展示有用的信息，可自定义文本和背景色，添加阴影和模糊效果，以及更改字体大小或者用自定义图片替换页面上的icon。</li>\n<li><a href=\"https://github.com/pchernovolenko/UICustomActionSheet\" target=\"_blank\" rel=\"noopener\">UICustomActionSheet</a> - 通过模糊背景来着重强调与菜单相关的元素–模糊效果 里面已经收藏。</li>\n<li><a href=\"http://code.cocoachina.com/detail/232178\" target=\"_blank\" rel=\"noopener\">ActionSheetPicker-3.0</a> - 该项目是此前热门项目ActionSheetPicker的新版本，快速复制了iOS 8上的下拉 UIPickerView/ActionSheet功能。</li>\n<li><a href=\"https://github.com/mayuur/MJAlertView\" target=\"_blank\" rel=\"noopener\">MJAlertView</a> - 3D效果转场效果警示图–MJAlertView。</li>\n<li><a href=\"https://github.com/morizotter/SwiftyDrop\" target=\"_blank\" rel=\"noopener\">SwiftyDrop</a> - 轻量、易用的小清新弹出列表及信息提示组件真心不错。</li>\n<li><a href=\"https://github.com/steipete/PSTAlertController\" target=\"_blank\" rel=\"noopener\">PSTAlertController</a> - 兼容 iOS7的 XXAlertController，接口跟UIAlertController 一模一样，做到高低版本通用。</li>\n<li><a href=\"https://github.com/hryk224/PCLBlurEffectAlert\" target=\"_blank\" rel=\"noopener\">PCLBlurEffectAlert.swfit</a> - 细节定制较丰富的弹出警报窗口组件。</li>\n<li><a href=\"https://github.com/wxxsw/GSAlert\" target=\"_blank\" rel=\"noopener\">GSAlert.swfit</a> - 苹果在iOS8推出了全新的UIAlertController，旧的UIAlertView和UIActionSheet渐渐被废弃，但如果你仍然支持iOS7系统，你将不得不写两套代码。GSAlert解决了这个问题。</li>\n</ul>\n<h5 id=\"其他UI\"><a href=\"#其他UI\" class=\"headerlink\" title=\"其他UI\"></a>其他UI</h5><ul>\n<li><a href=\"https://github.com/levey/AwesomeMenu\" target=\"_blank\" rel=\"noopener\">AwesomeMenu</a> - 最多人用的Path菜单。</li>\n<li><a href=\"https://github.com/Tangdixi/DCPathButton\" target=\"_blank\" rel=\"noopener\">DCPathButton</a> - Path，4.0的弹出菜单，呼出或者关闭菜单时，多个小图标会分别按照逆时针和顺时针的方向进行滚动。</li>\n<li><a href=\"https://github.com/itouch2/SphereMenu\" target=\"_blank\" rel=\"noopener\">SphereMenu</a> - 利用UIDynamicAnimator的有趣的菜单，path类似。 </li>\n<li><a href=\"https://github.com/KittenYang/KYGooeyMenu\" target=\"_blank\" rel=\"noopener\">KYGooeyMenu</a> - KYGooeyMenu 是一个具有 Gooey Effects 带粘性的扇形菜单控件(卫星菜单、path)。</li>\n<li><a href=\"https://github.com/yoavlt/LiquidFloatingActionButton\" target=\"_blank\" rel=\"noopener\">LiquidFloatingActionButton</a> - 卫星弹出菜单。</li>\n<li><a href=\"https://github.com/JustinFincher/JZMultiChoicesCircleButton\" target=\"_blank\" rel=\"noopener\">JZMultiChoicesCircleButton</a> - 三维多选按钮。</li>\n<li><a href=\"https://github.com/xhzengAIB/TwitterPaggingViewer\" target=\"_blank\" rel=\"noopener\">TwitterPaggingViewer</a>  - 多个Tableview，左右滑动。</li>\n<li><a href=\"https://github.com/carantes/CircularProgressControl\" target=\"_blank\" rel=\"noopener\">CircularProgressControl</a> - Circular Progress Control using CAShapeLayer ，环形进度控制条。</li>\n<li><a href=\"https://github.com/kaandedeoglu/KDCircularProgress\" target=\"_blank\" rel=\"noopener\">KDCircularProgress</a> -  KDCircularProgress是使用swift制作的色彩炫丽的进度条，可以加入多种颜色来控制进度条的渐变效果。 </li>\n<li><a href=\"https://github.com/cgwangding/TextProgress\" target=\"_blank\" rel=\"noopener\">TextProgress</a> - 自定义实现数字进度条：1、可以自定义数字（0-100），填充的比例为当前设置的数字，2、可以实现自定义填充颜色，上下部分都可以，3、可以自定义边界的颜色4、实现了水波动画，可以设置打开或关闭。</li>\n<li><a href=\"https://github.com/gsdios/SDProgressView\" target=\"_blank\" rel=\"noopener\">SDProgressView</a> - 简便美观的进度指示器，此系列共有六种样式的进度指示器。</li>\n<li><a href=\"https://github.com/ninjaprox/NVActivityIndicatorView\" target=\"_blank\" rel=\"noopener\">NVActivityIndicatorView</a> -  loading 进度条动画，有20-30多种，是在此<a href=\"https://github.com/gontovnik/DGActivityIndicatorView\" target=\"_blank\" rel=\"noopener\">DGActivityIndicatorView</a> 基础上做得修改。</li>\n<li><a href=\"https://github.com/saitjr/LoopProgressDemo\" target=\"_blank\" rel=\"noopener\">LoopProgressDemo</a> - 环形渐变进度条。</li>\n<li><a href=\"http://www.superqq.com/blog/2015/08/12/realization-circular-gradient-progress/\" target=\"_blank\" rel=\"noopener\">环形渐变进度条实现</a>， </li>\n<li><a href=\"https://github.com/xmartlabs/XLPagerTabStrip\" target=\"_blank\" rel=\"noopener\">XLPagerTabStrip</a> - 做的很棒的iOS下的PagerTabStrip。 </li>\n<li><a href=\"https://github.com/alskipp/ASProgressPopUpView\" target=\"_blank\" rel=\"noopener\">ASProgressPopUpView</a> - 弹出的进度条显示进度。</li>\n<li><a href=\"https://github.com/onevcat/RandomColorSwift\" target=\"_blank\" rel=\"noopener\">RandomColorSwift</a> - 一个自动生成好看的颜色的 Swift 库，RandomColorSwift。</li>\n<li><a href=\"https://github.com/hyperoslo/Hue\" target=\"_blank\" rel=\"noopener\">Hue.Swift</a> - Hue.Swift：颜色常规功能集于一身的定义、使用 Color 工具类库（含图片取色）。</li>\n<li><a href=\"https://github.com/ChangweiZhang/HexColorService\" target=\"_blank\" rel=\"noopener\">HexColorService</a> - 将16进制颜色字符串转成UIColor。</li>\n<li><a href=\"https://github.com/NorthernRealities/Rainbow\" target=\"_blank\" rel=\"noopener\">Rainbow</a> - 旨在提高代码可读性及易用性的 UIColor 扩展，它使原先有限的预定义颜色（方法）选择，扩展至超过 1200 种。</li>\n<li><a href=\"https://github.com/zhxnlai/UIColor-ChineseTraditionalColors\" target=\"_blank\" rel=\"noopener\">UIColor-ChineseTraditionalColors</a> - 中国传统颜色引用 UIColor 扩展。“UIColor.桃红()，UIColor.竹青() …”，共158种。 </li>\n<li><a href=\"http://code.cocoachina.com/detail/284158\" target=\"_blank\" rel=\"noopener\">类似美团的下拉菜单</a> - 类似美团的下拉菜单，<a href=\"http://www.cocoachina.com/ios/20150205/11116.html\" target=\"_blank\" rel=\"noopener\">源码推荐说明</a>。 </li>\n<li><a href=\"http://code4app.com/ios/%E7%B1%BB%E4%BC%BC%E7%BE%8E%E5%9B%A2%E7%9A%84%E4%B8%8B%E6%8B%89%E9%80%89%E9%A1%B9/538606d4933bf06e0a8b496e\" target=\"_blank\" rel=\"noopener\">类似美团的下拉选项</a> -  类似于美团、大众点评的下拉菜单选项，code4app代码，评论代码有瑕疵。</li>\n<li><a href=\"http://code.cocoachina.com/detail/284267\" target=\"_blank\" rel=\"noopener\">CRMediaPickerController</a> - 一个简单易用的图片/视频选择器。1.可同时选择照片和视频。 2.挑选范围有Camera、Camera Roll、Photo Library以及最近拍摄的照片和视频。3.可自定义UIImagePickerController属性（Camera Overlay、Camera Device、Camera View Transform以及allowsEditing）。4.支持横屏和竖屏5.原生的iOS UI。，<a href=\"http://www.cocoachina.com/ios/20150205/11116.html\" target=\"_blank\" rel=\"noopener\">源码推荐说明</a>。 </li>\n<li><a href=\"https://github.com/modocache/MDCSwipeToChoose\" target=\"_blank\" rel=\"noopener\">MDCSwipeToChoose</a> - MDCSwipeToChoose可简单地添加滑动手势来调用UIView，并使用该行为提供了一个组件以创建类似Tinder app的like或者dislike界面的轻扫。基于轻扫的方向，你可以决定执行什么样的行为，并且你可以自定义文本颜色和图片。该项目适用于教学用的抽认卡、图片查看器以及其他等。 </li>\n<li><a href=\"http://d.cocoachina.com/code/detail/285611\" target=\"_blank\" rel=\"noopener\">iOS Material Design库</a> - 该项目借鉴于谷歌的Material Design guideline，用户可自定义背景色。 <ul>\n<li><a href=\"https://github.com/fpt-software/Material-Controls-For-iOS\" target=\"_blank\" rel=\"noopener\">Material-Controls-For-iOS</a> - Material Design风格的各种控件，非常完整全面。 </li>\n</ul>\n</li>\n<li><a href=\"https://github.com/richzertuche/ZMaterialDesignUIButton\" target=\"_blank\" rel=\"noopener\">ZMaterialDesignUIButton</a> - Swift Material Design UIButton。</li>\n<li><a href=\"https://github.com/pixyzehn/MediumScrollFullScreen\" target=\"_blank\" rel=\"noopener\">MediumScrollFullScreen</a> - Medium的可扩展滚动页面，上下滚动时，全屏显示内容，并自然消隐上下菜单。由此项目感知，作者是一位很注重细节的开发者，他的另外<a href=\"https://github.com/pixyzehn\" target=\"_blank\" rel=\"noopener\">几个菜单类项目</a>也都不错，值得参考，比如：PathMenu, MediumMenu 等。</li>\n<li><a href=\"https://github.com/SatanWoo/WZFlashButton\" target=\"_blank\" rel=\"noopener\">WZFlashButton</a> - WZFlashButton，点击后button里面出现水波扩散效果。</li>\n<li><a href=\"https://github.com/piemonte/Twinkle\" target=\"_blank\" rel=\"noopener\">Twinkle</a> - 为字体加上钻石版闪耀的效果。使用Swift编写。 </li>\n<li><a href=\"https://github.com/palmin/ios-multi-back-button\" target=\"_blank\" rel=\"noopener\">ios-multi-back-button</a> - 可替换内置的UInavigationController返回按钮，长按左上角的返回按钮，实现多层级的快速返回。</li>\n<li><a href=\"http://code.cocoachina.com/detail/226543\" target=\"_blank\" rel=\"noopener\">ASDayPicker</a> - 适用于iOS (iPhone)的日期选择器(时间选择器)，类似于Calendar app的周视图。</li>\n<li><a href=\"http://adad184.com/2014/10/29/2014-10-29-how-to-setup-today-extension-programmatically/\" target=\"_blank\" rel=\"noopener\">today extension</a> - 用纯代码构建一个Widget(today extension) 。</li>\n<li><a href=\"https://github.com/f33chobits/FSCalendar\" target=\"_blank\" rel=\"noopener\">FSCalendar</a> - 日历视图，带有微妙和平滑的滚动效果，可自定义外观–国人。</li>\n<li><a href=\"https://github.com/Mozharovsky/CVCalendar\" target=\"_blank\" rel=\"noopener\">CVCalendar</a> - 是一个方便开发者集成自定义日历视图到自己 iOS 应用的项目, 支持 Storyboard 和手动配置, 使用 CocoaPods 进行安装, 提供了丰富的 API 供开发者使用。</li>\n<li><a href=\"https://github.com/EmilYo/HSDatePickerViewController\" target=\"_blank\" rel=\"noopener\">HSDatePickerViewController</a> - 带有Dropbox Mailbox感觉的时间日期选择器(时间选择器)。启动是背景被模糊化。界面也是主流的扁平化风格。 </li>\n<li><a href=\"https://github.com/huzhiqin/HZQDatePickerView\" target=\"_blank\" rel=\"noopener\">HZQDatePickerView</a> - 自定义时间选择器(日期选择器)，包括开始日期和结束日期两种类型。</li>\n<li><a href=\"https://github.com/nsdictionary/CFCityPickerVC\" target=\"_blank\" rel=\"noopener\">CFCityPickerVC</a> - 城市选取控制器。</li>\n<li><a href=\"https://github.com/jonathantribouharet/JTCalendar\" target=\"_blank\" rel=\"noopener\">JTCalendar</a> - iOS下优美的 Calendar 组件，做 GTD 类 App 必备。</li>\n<li><a href=\"https://github.com/Yalantis/Persei\" target=\"_blank\" rel=\"noopener\">Persei</a> - 动画隐藏或显示顶部菜单支持库及示例项目。–swift</li>\n<li><a href=\"https://github.com/jivesoftware/PDTSimpleCalendar\" target=\"_blank\" rel=\"noopener\">PDTSimpleCalendar</a> - 是iOS最棒的日历组件了。你可以在各个方面对它进行定制，无论是运行逻辑还是外观方面。</li>\n<li><a href=\"https://github.com/MrMage/DateRangePicker\" target=\"_blank\" rel=\"noopener\">DateRangePicker.swift</a> - 可能是目前最好的 OS X 日期选择器,高扩展性，界面风格看起来很舒服，不过注意，是 OS X 开发专用。</li>\n<li><a href=\"https://github.com/hyperoslo/Form\" target=\"_blank\" rel=\"noopener\">Form</a> - JSON 驱动的 Form表单系统，复杂的表单填写类 App 极其需要（比如淘宝呢！）。</li>\n<li><a href=\"https://github.com/neoneye/SwiftyFORM\" target=\"_blank\" rel=\"noopener\">SwiftyFORM</a> - swift 表单输入框架（亮点是表单验证规则引擎），是我见过地最易用的 Swift 表单组件。</li>\n<li><a href=\"https://github.com/icanzilb/SwiftSpinner\" target=\"_blank\" rel=\"noopener\">SwiftSpinner</a> - SwiftSpinner是使用swift制作的一款精致带感的指示器，并且连带有字体信息显示，模糊背景，半透明，扁平化等IOS8的效果。</li>\n<li><a href=\"https://github.com/Akkyie/AKPickerView-Swift\" target=\"_blank\" rel=\"noopener\">AKPickerView-Swift</a> - 一款小而美的 3D 效果选择器。</li>\n<li><a href=\"https://github.com/larcus94/ImagePickerSheet\" target=\"_blank\" rel=\"noopener\">ImagePickerSheet</a> - 图片或视频选择器（可多选）组件及其示例项目。</li>\n<li><a href=\"https://github.com/saiwu-bigkoo/iOS-RatingBar\" target=\"_blank\" rel=\"noopener\">iOS-RatingBar</a> - iOS-RatingBar swift版的评分控件,跟Android的RatingBar一样有两种模式，评分模式和只读模式’支持视图编辑，自定义星星数量，评分等级,另外还能支持非整数星，0.5颗星，0.1颗星,可以开启动画效果。</li>\n<li><a href=\"https://github.com/cwRichardKim/RKNotificationHub\" target=\"_blank\" rel=\"noopener\">RKNotificationHub</a> - 快速给 UIView 添加上炫酷的通知图标（Badge、红点、提示）。  * <a href=\"https://github.com/weng1250/WZLBadge\" target=\"_blank\" rel=\"noopener\">WZLBadge</a> - Badge，支持横竖屏支持iOS5~iOS8允许高度定制化，包括“红点”的背景颜色，文字(字体大小、颜色)，位置等。<a href=\"http://code.cocoachina.com/detail/316890/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%A4%9A%E9%A3%8E%E6%A0%BC%E7%9A%84%E6%8E%A8%E9%80%81%E5%B0%8F%E7%BA%A2%E7%82%B9/\" target=\"_blank\" rel=\"noopener\">说明</a>. </li>\n<li><a href=\"https://github.com/andreamazz/BubbleTransition\" target=\"_blank\" rel=\"noopener\">BubbleTransition</a> - 以气泡膨胀和缩小的动画效果来显示和移除 controller，Uber的就是这种取消操作的方式。</li>\n<li><a href=\"https://github.com/KittenYang/KYFloatingBubble\" target=\"_blank\" rel=\"noopener\">KYFloatingBubble</a> - 类似iOS7中Game Center浮动气泡的效果。</li>\n<li><a href=\"https://github.com/Draveness/DKNightVersion\" target=\"_blank\" rel=\"noopener\">DKNightVersion</a> - DKNightVersion 是一个支持夜间模式切换的框架。</li>\n<li><a href=\"https://github.com/sx1989827/EasyUIControl\" target=\"_blank\" rel=\"noopener\">EasyUIControl</a> - 一个可以简化界面ui的控件框架。</li>\n<li><a href=\"https://github.com/DeveloperLx/LxGridView\" target=\"_blank\" rel=\"noopener\">LxGridView-oc</a> <a href=\"https://github.com/DeveloperLx/LxGridView-swift\" target=\"_blank\" rel=\"noopener\">LxGridView-swift</a> - 利用UICollectionView模仿iOS系统桌面图标的交互，作用如动图。</li>\n<li><a href=\"https://github.com/ZhongTaoTian/QQBtn\" target=\"_blank\" rel=\"noopener\">QQBtn</a> - 仿QQ未读消息弹性按钮动画，达到和手机QQ未读信息一样的动画效果，效果基本实现。</li>\n<li><a href=\"https://github.com/gmertk/GMStepper\" target=\"_blank\" rel=\"noopener\">GMStepper</a> - swift 带动画效果、支持手势滑动操作的步进标签。</li>\n<li><a href=\"https://github.com/tomvanzummeren/TZStackView\" target=\"_blank\" rel=\"noopener\">TZStackView</a> - OS 9 UIStackView 功能模拟实现于 iOS 7/ iOS 8 内。</li>\n<li><a href=\"https://github.com/441088327/LayoutTrait\" target=\"_blank\" rel=\"noopener\">LayoutTrait</a> - swift 一个小类库。 做iPad 多任务分屏 适配的同学可以看一下。</li>\n<li><a href=\"https://github.com/HAHAKea/HACursor\" target=\"_blank\" rel=\"noopener\">HACursor</a> - HACursor，是一个对横向ScrollView中的视图进行管理的UI控件。只要几行代码就可以集成类似于网易新闻对主题页面进行排序，删除操作的功能。</li>\n<li><a href=\"https://github.com/IOStao/ZTPageController\" target=\"_blank\" rel=\"noopener\">ZTPageController</a> - 模仿网易新闻和其他新闻样式做的一个菜单栏，栏中有各自的控制器，其中有4中展示样式’网易style’ ’搜狐style’ ’腾讯style1’ ’网易style2’ 。 </li>\n<li><a href=\"https://github.com/nixzhu/Ruler\" target=\"_blank\" rel=\"noopener\">Ruler</a> - 尺子。</li>\n<li><a href=\"https://github.com/justhum/HUMSlider\" target=\"_blank\" rel=\"noopener\">HUMSlider</a> - HUMSlider是一款能够自动显示刻度记号的滑竿，滑动到某处，该处的刻度会自动上升，两边还能配置图像。支持代码或storyboard中实现。</li>\n<li><a href=\"https://github.com/zhangli4659507/JDSelectedDemo\" target=\"_blank\" rel=\"noopener\">JDSelectedDemo</a> - 仿京东筛选菜单实现。</li>\n<li><a href=\"https://github.com/PhamBaTho/BTNavigationDropdownMenu\" target=\"_blank\" rel=\"noopener\">BTNavigationDropdownMenu</a> -  下拉列表暨导航标题组件。简单、直接、易用 -swift。</li>\n<li><a href=\"https://github.com/luzefeng/3DTouchDemo\" target=\"_blank\" rel=\"noopener\">3DTouchDemo</a> - 详细介绍了每个参数的含义和3Dtouch的入口，保证包学包会。</li>\n<li><a href=\"https://github.com/RichardLeung/3DTouchSample\" target=\"_blank\" rel=\"noopener\">3DTouchSample</a> - 3D-Touch的功能分为两个部分：Shortcut和Preview。</li>\n<li><a href=\"https://github.com/DeskConnect/SBShortcutMenuSimulator\" target=\"_blank\" rel=\"noopener\">SBShortcutMenuSimulator</a> - 教你如何在模拟器上测试 3D Touch 功能!</li>\n<li><a href=\"https://github.com/richzertuche/InceptionTouch\" target=\"_blank\" rel=\"noopener\">InceptionTouch.swift</a> - 让没有 3D Touch 设备也有类似交互体验的 InceptionTouch 类（基于 UITextView 实现，支持日期，链接，电话号码，地址触摸响应）。</li>\n<li><a href=\"http://code.cocoachina.com/view/128287\" target=\"_blank\" rel=\"noopener\">仿LOL滚动视图</a> - 仿LOL滚动视图。</li>\n<li><a href=\"http://code.cocoachina.com/view/128281\" target=\"_blank\" rel=\"noopener\">答题选择切换页</a> - 将scrollview和tableview封装在一起，在初始化的时候简单的将数据带上，就可以一页一页的左右来回滑动。</li>\n<li><a href=\"https://github.com/SergioChan/SCTrelloNavigation\" target=\"_blank\" rel=\"noopener\">SCTrelloNavigation</a> - 类似trello的导航动效控件实现。</li>\n<li><a href=\"https://github.com/Akateason/XTPaster\" target=\"_blank\" rel=\"noopener\">XTPaster</a> - 贴纸功能出现在很多图片社交中, 就是图片上面贴图片, 对贴纸而言就是需要控制贴纸的位置,旋转,大小,<a href=\"http://www.jianshu.com/p/d873d348bbfb\" target=\"_blank\" rel=\"noopener\">如何使用</a>。</li>\n<li><a href=\"https://github.com/refinemobi/RGCategoryView\" target=\"_blank\" rel=\"noopener\">RGCategoryView</a> - 仿了个苏宁易购的分类页面。</li>\n<li><a href=\"https://github.com/txaidw/TWControls\" target=\"_blank\" rel=\"noopener\">TWControls.swift</a> - 简单的开关和按钮控制器,使用闭包来执行由控件触发的操作。</li>\n<li><a href=\"https://github.com/ephread/Instructions\" target=\"_blank\" rel=\"noopener\">Instructions.swift</a> - 可定制嵌入式操作指引框架及演示。</li>\n<li><a href=\"https://github.com/Lves/LLPieCharts\" target=\"_blank\" rel=\"noopener\">LLPieCharts</a> - LLPieCharts iOS 绘制饼图，<a href=\"http://www.lvesli.com/?p=339\" target=\"_blank\" rel=\"noopener\">教程</a>。</li>\n<li><a href=\"https://github.com/Boris-Em/BEMCheckBox\" target=\"_blank\" rel=\"noopener\">BEMCheckBox</a> - BEMCheckBox 是一个用于 iOS 应用上构建漂亮, 高度可定制化动画效果的复选框类库, 最低支持到 iOS 7 系统, 有多种不同风格的动画效果可供选择。</li>\n<li><a href=\"https://github.com/kevin0571/STPopup\" target=\"_blank\" rel=\"noopener\">STPopup</a> - 提供了一个可在 iPhone 和 iPad 上使用的具有 UINavigationController 弹出效果的 STPopupController 类, 并能在 Storyboard 上很好的工。</li>\n<li><a href=\"https://github.com/victorBaro/VBFPopFlatButton\" target=\"_blank\" rel=\"noopener\">VBFPopFlatButton</a> - 通过几条线段实现的非常Q萌的动画按钮效果。</li>\n<li><a href=\"https://github.com/richzertuche/ZSeatSelector\" target=\"_blank\" rel=\"noopener\">ZSeatSelector</a> - 电影院位置排座位。</li>\n<li><a href=\"https://github.com/zangqilong198812/CustomSearchBar\" target=\"_blank\" rel=\"noopener\">CustomSearchBar</a> - 自定义searchbar,类似于instagram的搜索框效果。</li>\n<li><a href=\"https://github.com/LeoNatan/LNPopupController\" target=\"_blank\" rel=\"noopener\">LNPopupController</a> - AppleMusic式pop up，弹出是页面，可以上下拉动。</li>\n<li><a href=\"https://github.com/gontovnik/DGRunkeeperSwitch/\" target=\"_blank\" rel=\"noopener\">DGRunkeeperSwitch</a> - 动画segment，节选器。</li>\n<li><a href=\"https://github.com/yixiangboy/YXFilmSelectView\" target=\"_blank\" rel=\"noopener\">YXFilmSelectView</a> - 仿造时光网选择电影票的UI而开发的一个自定义View。</li>\n<li><a href=\"http://code.cocoachina.com/view/129152\" target=\"_blank\" rel=\"noopener\">FJTagCollectionView</a> - 标签（适配宽度）。</li>\n<li><a href=\"https://github.com/yukiasai/Gecco\" target=\"_blank\" rel=\"noopener\">Gecco.Swift</a> - Gecco.Swift 是一款支持对视图进行局部高亮的 Swift 库, 帮助 iOS 开发者快速创建产品的新手指导界面。</li>\n<li><a href=\"https://github.com/anyunzhong/DFTimelineView\" target=\"_blank\" rel=\"noopener\">DFTimelineView</a> - DFTimelineView仿微信朋友圈 时间轴。</li>\n</ul>\n<p>========</p>\n<h4 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h4><ul>\n<li><a href=\"http://www.starming.com/index.php?v=index&amp;view=62\" target=\"_blank\" rel=\"noopener\">Core Animation笔记，基本的使用方法</a> - Core Animation笔记，基本的使用方法：1.基本动画，2.多步动画，3.沿路径的动画，4.时间函数，5.动画组。</li>\n<li><a href=\"https://github.com/sxyx2008/awesome-ios-animation\" target=\"_blank\" rel=\"noopener\">awesome-ios-animation</a> - <a href=\"https://github.com/sxyx2008/DevArticles/issues/91\" target=\"_blank\" rel=\"noopener\">iOS Animation 主流炫酷动画框架(特效)收集整理</a> 收集整理了下iOS平台下比较主流炫酷的几款动画框架。</li>\n<li><a href=\"https://github.com/Animatious/awesome-animation\" target=\"_blank\" rel=\"noopener\">awesome-animation</a> -  在内的十多位童鞋们一起发起的一起动画开源组正式成立啦~Github组织名称：Animatious，这是我们第一期成员先前开源的一些动效库，我们的第一个合作开源项目正在紧锣密鼓的准备~请大家期待设计和代码的碰撞吧。</li>\n</ul>\n<h5 id=\"侧滑与右滑返回手势\"><a href=\"#侧滑与右滑返回手势\" class=\"headerlink\" title=\"侧滑与右滑返回手势\"></a>侧滑与右滑返回手势</h5><ul>\n<li><a href=\"https://github.com/fastred/SloppySwiper\" target=\"_blank\" rel=\"noopener\">SloppySwiper</a> - iOS系统自带的UINavigationController要7.0才支持，但不过该手势只能从屏幕左侧边缘识别，如果要扩大到整个屏幕范围怎么办？配合一个SloppySwiper无需代码就可以轻松实现。此库支持iOS5.0以上版本（另外：Nav的title滑动不明显，本人写了2个类似的控件），<a href=\"https://github.com/Tim9Liu9/SloppySwiper-Example\" target=\"_blank\" rel=\"noopener\">SloppySwiper-demo</a> ：代码方式与storyboard方式。</li>\n<li><a href=\"https://github.com/singro/SCNavigation\" target=\"_blank\" rel=\"noopener\">SCNavigation</a> - UINavigation可以右滑返回，隐藏UINavigationBar。</li>\n<li><a href=\"https://github.com/YueRuo/UINavigationController-YRBackGesture\" target=\"_blank\" rel=\"noopener\">UINavigationController-YRBackGesture</a> - 支持右滑返回手势，标题栏不动。</li>\n<li><a href=\"https://github.com/gresrun/GHSidebarNav\" target=\"_blank\" rel=\"noopener\">GHSidebarNav</a> - 现在比较流行使用侧开(侧滑)菜单设计。试了不少控件，感觉GHSidebarNav最成熟，尤其对纯代码创建的界面兼容性最好。<a href=\"http://www.cnblogs.com/zyl910/archive/2013/06/14/ios_storyboard_sidemenu.html\" target=\"_blank\" rel=\"noopener\">在Storyboard中使用GHSidebarNav侧开菜单控件</a>。</li>\n<li><a href=\"https://github.com/aryaxt/iOS-Slide-Menu\" target=\"_blank\" rel=\"noopener\">iOS-Slide-Menu</a> - 能够类似Facebook和Path那样弹出左右边栏侧滑菜单,还支持手势。多种可以自定义的属性 (非常不错)。</li>\n<li><a href=\"https://github.com/ECSlidingViewController/ECSlidingViewController\" target=\"_blank\" rel=\"noopener\">ECSlidingViewController</a> - 侧滑菜单。</li>\n<li><a href=\"https://github.com/gotosleep/JASidePanels\" target=\"_blank\" rel=\"noopener\">JASidePanels</a> - 侧滑菜单,有左右菜单，有pop功能，支持手势侧滑,本人使用中：简单。</li>\n<li><a href=\"https://github.com/Ramotion/animated-tab-bar\" target=\"_blank\" rel=\"noopener\">animated-tab-bar</a> - 让 Tabbar items能显示萌萌的动画。</li>\n<li><a href=\"http://code.cocoachina.com/detail/284346\" target=\"_blank\" rel=\"noopener\">tabbar图标动画</a> - tabbar上图标的动画实现，<a href=\"http://www.cocoachina.com/ios/20150205/11116.html\" target=\"_blank\" rel=\"noopener\">源码推荐说明</a>。</li>\n<li><a href=\"https://github.com/Yalantis/Side-Menu.iOS/tree/master/SideMenu\" target=\"_blank\" rel=\"noopener\">SideMenu</a> - swift实现，一款带动画效果可定制 Slide Menu，可以学习其动画实现思路。P.S. 对于Hamburger式菜单，虽然很常用，不过，苹果并不鼓励使用，甚至有开发小组对其弊病用自家上线应用前后数据对比进行了抨击。</li>\n<li><a href=\"https://github.com/romaonthego/RESideMenu\" target=\"_blank\" rel=\"noopener\">RESideMenu</a> - 侧开菜单，qq类似。</li>\n<li><a href=\"https://github.com/Jiahai/JHMenuTableViewDemo\" target=\"_blank\" rel=\"noopener\">JHMenuTableViewDemo</a> - 仿网易邮箱列表侧滑菜单。</li>\n<li><a href=\"https://github.com/xudafeng/SlideMenuView\" target=\"_blank\" rel=\"noopener\">SlideMenuView</a> - 炫酷侧滑菜单布局框架，<a href=\"Android 版本的一致实现请见：https://github.com/xudafeng/SlidingMenu\">Android版本的一致实现</a>。</li>\n<li><a href=\"https://github.com/shinept/QQConfiguration\" target=\"_blank\" rel=\"noopener\">QQConfiguration</a> - swift，QQ-iPhone端框架，左侧菜单栏拖动手势。</li>\n<li><a href=\"https://github.com/KyleGoddard/KGFloatingDrawer\" target=\"_blank\" rel=\"noopener\">KGFloatingDrawer</a> - 侧滑菜单，qq类似，KyleGoddard/KGFloatingDrawer：一款适合于大屏手机或平板的浮动抽屉式导航界面组件。效果很赞- 侧开菜单，qq类似（与RESideMenu类似）。</li>\n<li><a href=\"https://github.com/cocoatoucher/AIFlatSwitch\" target=\"_blank\" rel=\"noopener\">AIFlatSwitch</a> - 一款带平滑过渡动画的 Switch 组件类，类相同风格的 Menu/Back<a href=\"https://github.com/fastred/HamburgerButton\" target=\"_blank\" rel=\"noopener\">HamburgerButton</a>,类似相同风格的 Menu/Close<a href=\"https://github.com/robb/hamburger-button\" target=\"_blank\" rel=\"noopener\">hamburger-button</a>.</li>\n<li><a href=\"https://github.com/jhurray/JHChainableAnimations\" target=\"_blank\" rel=\"noopener\">JHChainableAnimations</a> - 在应用中采用链式写出酷炫的动画效果, 使代码更加清晰易读，利用block实现的链式编程。</li>\n<li><a href=\"https://github.com/WXGBridgeQ/WXGSlideMenuDemo\" target=\"_blank\" rel=\"noopener\">WXGSlideMenuDemo</a> - 个简单实现侧拉（侧滑）菜单的小demo，供初学者共同学习、练习使用。</li>\n<li><a href=\"https://github.com/pkluz/PKRevealController\" target=\"_blank\" rel=\"noopener\">PKRevealController</a> - PKRevealController是一个可以滑动的侧边栏菜单（可向左、向右或者同时向两侧），只需手指轻轻一点（或者按一下按钮，但是这样滑动时不够炫酷），这类控制的其他库，而PKRevealController是最棒的。安装简便，高度定制且对手势识别良好。可以当做一个标准控件用在iOS SDK中。</li>\n<li><a href=\"https://github.com/GabrielAlva/SwiftPages\" target=\"_blank\" rel=\"noopener\">SwiftPages</a> - 高可定制类似 Instagram 视图滑动切换功能类库。API 简单、易用。</li>\n<li><a href=\"https://github.com/michaelhenry/FlipBoardNavigationController\" target=\"_blank\" rel=\"noopener\">FlipBoardNavigationController</a> - FlipBoardNavigationController。</li>\n<li><a href=\"https://github.com/mutualmobile/MMDrawerController\" target=\"_blank\" rel=\"noopener\">MMDrawerController</a> - 最多人用的一个有关侧边“抽屉”导航框架，里面还有很多你意想不到的交互效果，侧滑。</li>\n<li><a href=\"http://code.cocoachina.com/detail/316925/UIWebView%E7%BF%BB%E9%A1%B5%E8%BF%94%E5%9B%9E%E6%95%88%E6%9E%9C%EF%BC%88%E5%8F%98%E9%80%9A%E6%96%B9%E6%B3%95%EF%BC%89/\" target=\"_blank\" rel=\"noopener\">UIWebView翻页返回效果</a> - UIWebView翻页返回效果（变通方法）。</li>\n<li><a href=\"https://github.com/lilei644/LLSlideMenu\" target=\"_blank\" rel=\"noopener\">LLSlideMenu</a> - 一个弹性侧滑菜单,弹性动画原理借鉴该项目中阻尼函数实现。</li>\n</ul>\n<h5 id=\"gif动画\"><a href=\"#gif动画\" class=\"headerlink\" title=\"gif动画\"></a>gif动画</h5><ul>\n<li><a href=\"https://github.com/yfme/UIImageView-PlayGIF\" target=\"_blank\" rel=\"noopener\">UIImageView-PlayGIF</a> - UIImageView-PlayGIF。</li>\n<li><a href=\"https://github.com/liyong03/YLGIFImage\" target=\"_blank\" rel=\"noopener\">YLGIFImage</a> - YLGIFImage。</li>\n<li><a href=\"https://github.com/liyong03/YLGIFImage-Swift\" target=\"_blank\" rel=\"noopener\">YLGIFImage-Swift</a> - YLGIFImage-Swift。</li>\n<li><a href=\"https://github.com/mortenjust/droptogif\" target=\"_blank\" rel=\"noopener\">droptogif</a> -  droptogif视频拖拽到应用窗口后自动转换为 GIF 动画（其转换进程动画效果也超赞）。</li>\n</ul>\n<h5 id=\"其他动画\"><a href=\"#其他动画\" class=\"headerlink\" title=\"其他动画\"></a>其他动画</h5><ul>\n<li><a href=\"https://github.com/schneiderandre/popping\" target=\"_blank\" rel=\"noopener\">popping</a> - popping是一个POP 使用实例工程 </li>\n<li><a href=\"https://github.com/xhzengAIB/SinaMenuView\" target=\"_blank\" rel=\"noopener\">SinaMenuView</a> - 用POP动画引擎写的Sina微博的Menu菜单。</li>\n<li><a href=\"https://github.com/adad184/MMTweenAnimation\" target=\"_blank\" rel=\"noopener\">MMTweenAnimation</a> - facebook POP的自定义动画扩展(基于POPCustomAnimation) 提供10种函数式动画。</li>\n<li><a href=\"https://github.com/pingguo-zangqilong/ZQLRotateMenu\" target=\"_blank\" rel=\"noopener\">ZQLRotateMenu</a> - 这是一个旋转视图的选择器。</li>\n<li><a href=\"https://github.com/pingguo-zangqilong/CoolLoadAniamtion\" target=\"_blank\" rel=\"noopener\">CoolLoadAniamtion</a> - 一个简单但是效果不错的loading动画。</li>\n<li><a href=\"https://github.com/pingguo-zangqilong/SequenRotateAnimation\" target=\"_blank\" rel=\"noopener\">SequenRotateAnimation</a> - 一个简单的loading次序动画。</li>\n<li><a href=\"https://github.com/441088327/SYAppStart\" target=\"_blank\" rel=\"noopener\">SYAppStart</a> - App启动插画的自定义过度。</li>\n<li><a href=\"https://github.com/victorjiang/UIImage-VJDeviceSpecificMedia/\" target=\"_blank\" rel=\"noopener\">VJDeviceSpecificMedia</a> - <a href=\"http://www.imooc.com/wenda/detail/249271\" target=\"_blank\" rel=\"noopener\">如何根据设备选择不同尺寸的图片</a> 可以通过设置不同尺寸设备的LaunchImage，来使得App适配这些设备，要是在不同不同尺寸设备上使用不同大小的图片，则需要在代码中一一判断，然后加载。 </li>\n<li><a href=\"https://github.com/michaelbabiy/RMParallax\" target=\"_blank\" rel=\"noopener\">RMParallax</a> - RMParallax是一个app启动页引导开源项目，除了细微的翻页视差效果，描述文本的过渡也非常美观（版本新特性、导航页、引导页）。</li>\n<li><a href=\"https://github.com/Nododo/ADo_GuideView\" target=\"_blank\" rel=\"noopener\">ADo_GuideView</a> - 转动的用户引导页(模仿网易bobo) 因为没有从app包里抓到@3x的图片,建议在iPhone5模拟器运行,保证效果~ （版本新特性、导航页、引导页）。</li>\n<li><a href=\"https://github.com/nsdictionary/CoreNewFeatureVC\" target=\"_blank\" rel=\"noopener\">CoreNewFeatureVC</a> - 版本新特性（引导页），1.封装并简化了版本新特性启动视图！2.添加了版本的本地缓存功能，3.集成简单，使用方便，没有耦合度，4.支持block回调（版本新特性、导航页、引导页）。</li>\n<li><a href=\"https://github.com/MachelleZhang/MZGuidePages\" target=\"_blank\" rel=\"noopener\">MZGuidePages</a> - 自己写的通用导航页，可以直接引入工程使用，请参考案例（版本新特性、导航页、引导页）。</li>\n<li><a href=\"https://github.com/AdamBCo/ABCIntroView\" target=\"_blank\" rel=\"noopener\">ABCIntroView</a> - ABCIntroView是一个易于使用的入门类，让你到达主屏幕之前介绍你的应用程序（版本新特性、导航页、引导页）。</li>\n<li><a href=\"https://github.com/MengTo/Spring\" target=\"_blank\" rel=\"noopener\">Spring</a> - Spring是一个Swift编写的开源库，可简化Swift编写的iOS动画。支持shake、pop、morph、squeeze、wobble、swing、flipX、flipY、fall、squeezeLeft、squeezeRight以及squeezeDown等多种动画形式，用 IBDesignable 让使用者可以在 Xcode 中快速设置动画效果。</li>\n<li><a href=\"https://github.com/KittenYang/KYBezierBounceView\" target=\"_blank\" rel=\"noopener\">KYBezierBounceView</a> - 手势控制贝塞尔曲线，取消手势贝塞尔曲线会有反弹效果。</li>\n<li><a href=\"http://kittenyang.com/cadisplaylinkanduibezierpath/\" target=\"_blank\" rel=\"noopener\">cadisplaylinkanduibezierpath</a> - CADisplayLink结合UIBezierPath的神奇妙用。</li>\n<li><a href=\"https://github.com/KittenYang/KYCuteView\" target=\"_blank\" rel=\"noopener\">KYCuteView</a> - 实现类似QQ消息拖拽消失的交互+GameCenter的浮动小球效果，<a href=\"http://kittenyang.com/drawablebubble/\" target=\"_blank\" rel=\"noopener\">分析</a>。</li>\n<li><a href=\"https://github.com/KittenYang/KYWaterWaveView\" target=\"_blank\" rel=\"noopener\">KYWaterWaveView</a> - 一个内置波浪动画的UIView，里面有鱼跳跃水溅起来的效果。</li>\n<li><a href=\"https://github.com/liuzhiyi1992/WaveLoadingView\" target=\"_blank\" rel=\"noopener\">WaveLoadingView</a> - iOS 唯一完美的波浪进度加载指示器，<a href=\"http://zyden.vicp.cc/waveloadingindicator/\" target=\"_blank\" rel=\"noopener\">实现说明</a>。</li>\n<li><a href=\"https://github.com/KittenYang/KYPingTransition\" target=\"_blank\" rel=\"noopener\">KYPingTransition</a> - 实现圆圈放大放小的转场动画，可以根据自己的需要使用Paper中的弹性效果，有Material风格。</li>\n<li><a href=\"https://github.com/KittenYang/KYNewtonCradleAnimiation\" target=\"_blank\" rel=\"noopener\">KYNewtonCradleAnimiation</a> - 牛顿摆动画。</li>\n<li><a href=\"https://github.com/scotteg/LayerPlayer\" target=\"_blank\" rel=\"noopener\">LayerPlayer</a> - 一款全面展示核心动画 API 示例项目（上架应用）。包括 CALayer, CAScrollLayer, CATextLayer, AVPlayerLayer, CAGradientLayer, CAReplicatorLayer, CATiledLayer, CAShapeLayer, CAEAGLLayer, CATransformLayer, CAEmitterLayer 等使用的互动演示。</li>\n<li><a href=\"https://github.com/JayGajjar/JGTransitionCollectionView\" target=\"_blank\" rel=\"noopener\">JGTransitionCollectionView</a> - swift，基于集合视图扩展实现完成自动布局及单元项 Flip式动画效果（效果很赞）。组件使用方便、自然（只需设置集合视图数据源的标准方式即可）。</li>\n<li><a href=\"https://github.com/KittenYang/KYShareMenu\" target=\"_blank\" rel=\"noopener\">KYShareMenu</a> - 带弹性动画的分享菜单。</li>\n<li><a href=\"https://github.com/Yalantis/Context-Menu.iOS\" target=\"_blank\" rel=\"noopener\">Context-Menu.iOS</a> - 可以为app的菜单添加漂亮的动画内容，可自定义icon，并可根据自己的喜好设计单元格和布局。</li>\n<li><a href=\"https://github.com/LuciusLu/DeformationButton\" target=\"_blank\" rel=\"noopener\">DeformationButton</a> - 一个简单的变换形状动画按钮。</li>\n<li><a href=\"https://github.com/heroims/UnReadBubbleView\" target=\"_blank\" rel=\"noopener\">UnReadBubbleView</a> - UnReadBubbleView是一个能够拖拽并拉长的气泡视图。拖拽到一定的长度会消失，可以通过系数设置来控制拖拽的长度。气泡也支持多种属性设置。 </li>\n<li><a href=\"https://github.com/smallmuou/PPDragDropBadgeView\" target=\"_blank\" rel=\"noopener\">PPDragDropBadgeView</a> - 实现了类似于QQ 5.0 水滴拖拽效果. 支持iOS 5.0+ ARC，气泡能够带有数字标识，同时支持消失block方法。消失时还带有消失效果动画。</li>\n<li><a href=\"https://github.com/MartinRGB/GiftCard-Implementation\" target=\"_blank\" rel=\"noopener\">GiftCard-Implementation</a> - 购买的炫酷动画。</li>\n<li><a href=\"https://github.com/gsdios/SDCycleScrollView\" target=\"_blank\" rel=\"noopener\">SDCycleScrollView</a> - 无限循环自动图片轮播器(一步设置即可使用)。</li>\n<li><a href=\"https://github.com/johnlui/Swift-On-iOS/tree/master/BuildAnInfiniteCarousel\" target=\"_blank\" rel=\"noopener\">BuildAnInfiniteCarousel</a> - 自己动手造无限循环图片轮播，<a href=\"https://autolayout.club/2015/10/29/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E9%80%A0%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF%E5%9B%BE%E7%89%87%E8%BD%AE%E6%92%AD/\" target=\"_blank\" rel=\"noopener\">教程</a>。</li>\n<li><a href=\"https://github.com/nicklockwood/iCarousel\" target=\"_blank\" rel=\"noopener\">iCarousel</a> - iCarousel是一个类，它继承于UIView。用于简化实现各种类型的旋转木马(分页滚动视图），无限轮播 ，<a href=\"http://www.cocoachina.com/ios/20150828/13198.html\" target=\"_blank\" rel=\"noopener\">iOS开发之多图片无缝滚动组件封装与使用</a>。</li>\n<li><a href=\"https://github.com/smartwalle/KIPageView\" target=\"_blank\" rel=\"noopener\">KIPageView</a> - 无限循环PageView，横向TableView，无限轮播。</li>\n<li><a href=\"http://code.cocoachina.com/view/128288\" target=\"_blank\" rel=\"noopener\">简单实用的无限循环轮播图</a> - 简单实用的无限循环轮播图 。</li>\n<li><a href=\"https://github.com/Akateason/XTLoopScroll\" target=\"_blank\" rel=\"noopener\">XTLoopScroll</a> - 用两个 timer 三个重用的 view 实现无限循环 scrollView，1自动轮播 2点击监听回调当前图片 3手动滑动后重新计算轮播的开始时间, 良好的用户体验。</li>\n<li><a href=\"https://github.com/zangqilong198812/HotGirls\" target=\"_blank\" rel=\"noopener\">HotGirls</a> - 卡片动画。</li>\n<li><a href=\"https://github.com/tispr/tispr-card-stack\" target=\"_blank\" rel=\"noopener\">tispr-card-stack</a> - swift 卡片风格动画切换组件及完整交互示例。</li>\n<li><a href=\"https://github.com/zhxnlai/ZLSwipeableViewSwift\" target=\"_blank\" rel=\"noopener\">ZLSwipeableViewSwift</a> - swift 卡片堆叠效果的实现（ZLSwipeableView)】可实现类似Tinder和Potluck应用程序的卡片堆叠效果，该项目基于<a href=\"https://github.com/zhxnlai/ZLSwipeableView/\" target=\"_blank\" rel=\"noopener\">ZLSwipeableView objective-c</a>实现。1.自定义动画。2.自定义滑动切换。3.自定义方向。4.撤销。</li>\n<li><a href=\"https://github.com/Yalantis/Koloda\" target=\"_blank\" rel=\"noopener\">Koloda</a> - 基于卡片的 Tinder-style 动画效果示例。精细绝人。更赞的是额外附了详细开发教程 How We Built Tinder-Like Koloda Animation in Swift <a href=\"https://yalantis.com/blog/how-we-built-tinder-like-koloda-in-swift/\" target=\"_blank\" rel=\"noopener\">网页链接</a> 。Yalantis 出品动画程序款款精品。</li>\n<li><a href=\"https://github.com/zangqilong198812/QQPersonalInfoTransition\" target=\"_blank\" rel=\"noopener\">QQPersonalInfoTransition</a> - 仿照QQ的转场。</li>\n<li><a href=\"https://github.com/KittenYang/KYAnimatedPageControl\" target=\"_blank\" rel=\"noopener\">KYAnimatedPageControl</a> - 除了滚动视图时PageControl会以动画的形式一起移动，点击目标页还可快速定位。支持两种样式：粘性小球和旋转方块。</li>\n<li><a href=\"https://github.com/likedan/KDIntroView\" target=\"_blank\" rel=\"noopener\">KDIntroView</a> - swift 动态介绍视图框架及演示。另外两个相似的类库是 RazzleDazzle和 Presentation，择需使用。 </li>\n<li><a href=\"https://github.com/IFTTT/RazzleDazzle\" target=\"_blank\" rel=\"noopener\">RazzleDazzle</a> - 【IFTTT开源Swift编写的帧动画框架–RazzleDazzle】RazzleDazzle 是IFTTT开源的一个iOS帧动画框架，非常适用于APP初次使用时的介绍和引导信息。JazzHands是UIKit一个简单的关键帧基础动画框架，可通过手势、scrollview、KVO等控制动画，被IFTTT应用在IFTTT for iPhone上。</li>\n<li><a href=\"https://github.com/hyperoslo/Presentation\" target=\"_blank\" rel=\"noopener\">Presentation</a> - 一个类似RazzleDazzle的框架。</li>\n<li><a href=\"https://github.com/poolqf/FillableLoaders\" target=\"_blank\" rel=\"noopener\">FillableLoaders</a> - 基于 CGPaths 可定制个性化填空式装载类库。附水波上涨式示例。</li>\n<li><a href=\"https://github.com/dsxNiubility/SXWaveAnimate\" target=\"_blank\" rel=\"noopener\">SXWaveAnimate</a> - 实现非常美观的灌水动画。</li>\n<li><a href=\"https://github.com/liusen001/LSPaomaView\" target=\"_blank\" rel=\"noopener\">LSPaomaView</a> - 可循环滚动的较长文字，跑马灯，效果很好，一句话集成。</li>\n<li><a href=\"https://github.com/ProudOfZiggy/SIFloatingCollection_Swift\" target=\"_blank\" rel=\"noopener\">SIFloatingCollection_Swift</a> - 可定制的 Apple Music 风格浮动形状动画组件及演示。</li>\n<li><a href=\"https://github.com/suguru/Cheetah\" target=\"_blank\" rel=\"noopener\">Cheetah</a> - 易用、高可读链式动画类库。另一个类似类库是 <a href=\"https://github.com/Draveness/DKChainableAnimationKit\" target=\"_blank\" rel=\"noopener\">DKChainableAnimationKit</a>。</li>\n<li><a href=\"https://github.com/CezaryKopacz/CKWaveCollectionViewTransition\" target=\"_blank\" rel=\"noopener\">CKWaveCollectionViewTransition</a> - swift， UICollectionViewController之间切换的动画。</li>\n<li><a href=\"https://github.com/entotsu/TKSubmitTransition\" target=\"_blank\" rel=\"noopener\">TKSubmitTransition</a> - 基于 UIButton 的登录加载、返回按钮转场动画组件及示例。</li>\n<li><a href=\"https://github.com/AugustRush/ARAnimation\" target=\"_blank\" rel=\"noopener\">ARAnimation</a> - ARAnimation 对 Core Animation 进行了封装, 帮助 iOS 开发者能更加便捷的在项目中使用动画。</li>\n<li>[CardsAnimationDemo]<a href=\"https://github.com/adow/CardsAnimationDemo\" target=\"_blank\" rel=\"noopener\">https://github.com/adow/CardsAnimationDemo</a>) - swift， <a href=\"http://swiftcn.io/topics/64?f=w\" target=\"_blank\" rel=\"noopener\">《使用 UICollectionView 实现的一个卡片动画》</a>不是直接操作所有 UIView 和 CALayer 的 transform3D 属性来实现整个效果的，而是使用 UICollectionView 来完成所有的视图管理和实现。</li>\n<li><a href=\"https://github.com/TBXark/TKRubberIndicator\" target=\"_blank\" rel=\"noopener\">TKRubberIndicator.swift</a> - 一个很不错的 page control。</li>\n<li><a href=\"http://code.cocoachina.com/view/127174\" target=\"_blank\" rel=\"noopener\">渐变特效文字</a> - 做了一个仿iPhone的移动滑块来解锁的渐变特效文字,还有一个类似ktv歌词显示的文字特效。</li>\n<li><a href=\"https://github.com/zekunyan/TTGEmojiRate\" target=\"_blank\" rel=\"noopener\">TTGEmojiRate.swift</a> - TTGEmojiRate.swift以Emoji表情为基础绘图，<a href=\"http://tutuge.me/2015/10/25/ttgemojirate-lib/\" target=\"_blank\" rel=\"noopener\">Swift开源项目: TTGEmojiRate的实现</a>。</li>\n<li><a href=\"https://github.com/nathanwhy/HYAwesomeTransition\" target=\"_blank\" rel=\"noopener\">HYAwesomeTransition</a> - 模仿格瓦拉的转场效果。</li>\n<li><a href=\"https://github.com/seedante/CardAnimation\" target=\"_blank\" rel=\"noopener\">CardAnimation.swift</a> - CardAnimation 是国人开发的一个用 Swift 实现卡片垂直翻转动画的 Demo, <a href=\"http://www.jianshu.com/p/286222d4edf8\" target=\"_blank\" rel=\"noopener\">实现思路</a>。</li>\n<li><a href=\"https://github.com/Glow-Inc/TaskSwitcherDemon\" target=\"_blank\" rel=\"noopener\">TaskSwitcherDemon</a> -  是仿造iOS9的Task Switcher做出来的动画效果, 具体的实现思路可参照<a href=\"http://tech.glowing.com/cn/implement-ios9-task-switcher-animation/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>。</li>\n<li><a href=\"https://github.com/lzwjava/CoreAnimationCode\" target=\"_blank\" rel=\"noopener\">CoreAnimationCode.swift</a> - 提供了 “iOS Core Animation Advanced Techniques” 书籍中的代码实例, 方便开发者们进行参考学习。</li>\n<li><a href=\"https://github.com/xxycode/UIViewXXYBoom\" target=\"_blank\" rel=\"noopener\">UIViewXXYBoom.swift</a> - 一个炫酷好玩的爆炸效果，<a href=\"http://xxycode.com/ru-he-zhi-zuo-ge-xuan-ku-hao-wan-de-bao-zha-xiao-guo-2/\" target=\"_blank\" rel=\"noopener\">如何实现这个效果</a>。</li>\n<li><a href=\"https://github.com/zhxnlai/ZLSwipeableViewSwift\" target=\"_blank\" rel=\"noopener\">ZLSwipeableViewSwift</a> - <a href=\"https://github.com/zhxnlai/ZLSwipeableView\" target=\"_blank\" rel=\"noopener\">ZLSwipeableView</a> - ZLSwipeableViewSwift在Tinder and Potluck中的动画效果实现思路（连续卡片翻页效果），最贴心的是作者提供了OC和Swift两个版本来供开发者使用，非常丝滑顺畅的效果。</li>\n<li><a href=\"https://github.com/Resory/RYCuteView\" target=\"_blank\" rel=\"noopener\">RYCuteView</a> - 用UIBezierPath实现果冻效果。 <a href=\"http://www.jianshu.com/p/21db20189c40\" target=\"_blank\" rel=\"noopener\">教程</a></li>\n<li><a href=\"https://github.com/JakeLin/IBAnimatable\" target=\"_blank\" rel=\"noopener\">IBAnimatable.swift</a> - 第三方开源库IBAnimatable可以帮助我们在Interface Builder和Swift Playground里面设计UI, 交互, 导航模式, 换场和动画。</li>\n<li><a href=\"https://github.com/Ramotion/circle-menu\" target=\"_blank\" rel=\"noopener\">circle-menu.swift</a> - 动画效率很赞的圆形缩放菜单演示及类库。</li>\n</ul>\n<p>========</p>\n<h4 id=\"网络相关\"><a href=\"#网络相关\" class=\"headerlink\" title=\"网络相关\"></a>网络相关</h4><h5 id=\"网络连接\"><a href=\"#网络连接\" class=\"headerlink\" title=\"网络连接\"></a>网络连接</h5><ul>\n<li><a href=\"https://github.com/AFNetworking/AFNetworking\" target=\"_blank\" rel=\"noopener\">AFNetworking</a> - ASI不升级以后，最多人用的网络连接开源库，<a href=\"http://www.superqq.com/blog/2014/11/07/ioswang-luo-bian-cheng-zhi-afnetworkingshi-yong/\" target=\"_blank\" rel=\"noopener\">iOS网络编程之AFNetworking使用</a>,<a href=\"http://www.superqq.com/blog/2015/01/29/ioskai-fa-xia-zai-wen-jian-su-du-ji-suan/\" target=\"_blank\" rel=\"noopener\">iOS开发下载文件速度计算</a> , <a href=\"http://www.cocoachina.com/ios/20151022/13831.html\" target=\"_blank\" rel=\"noopener\">AFNetworking 3.0迁移指南</a> , <a href=\"http://www.cocoachina.com/ios/20140829/9480.html\" target=\"_blank\" rel=\"noopener\">AFNetworking2.0源码解析&lt;一&gt;</a> 、<a href=\"http://www.cocoachina.com/ios/20140904/9523.html\" target=\"_blank\" rel=\"noopener\">AFNetworking2.0源码解析&lt;二&gt;</a>、<a href=\"http://www.cocoachina.com/ios/20140916/9632.html\" target=\"_blank\" rel=\"noopener\">AFNetworking源码解析&lt;三&gt;</a>、<a href=\"http://www.cocoachina.com/ios/20141120/10265.html\" target=\"_blank\" rel=\"noopener\">AFNetworking源码解析&lt;四&gt;</a>。</li>\n<li><a href=\"https://github.com/Alamofire/Alamofire\" target=\"_blank\" rel=\"noopener\">Alamofire</a> - Alamofire是AFNetworking的作者mattt新写的网络请求的swift库。</li>\n<li><a href=\"https://github.com/yuantiku/YTKNetwork\" target=\"_blank\" rel=\"noopener\">YTKNetwork</a> - 是基于 AFNetworking 封装的 iOS网络库，提供了更高层次的网络访问抽象。相比AFNetworking，YTKNetwork提供了以下更高级的功能：按时间或版本号缓存网络请求内容、检查返回 JSON 内容的合法性、文件的断点续传、批量的网络请求发送、filter和插件机制等。</li>\n<li><a href=\"https://github.com/CoderJackyHuang/HYBNetworking\" target=\"_blank\" rel=\"noopener\">HYBNetworking</a> - 基于AFN封装的网络库，可以通用。<a href=\"http://www.henishuo.com/base-on-afnetworking-wrapper/\" target=\"_blank\" rel=\"noopener\">基于AFNetworking封装网络库说明</a>目前已经提供了通用的GET/POST、上传、下载API等。</li>\n<li><a href=\"https://github.com/DeveloperLx/LxFTPRequest\" target=\"_blank\" rel=\"noopener\">LxFTPRequest</a> - 支持获取FTP服务器资源列表，下载/上传文件，创建/销毁ftp服务器文件/目录，以及下载断点续传，下载/上传进度，自动判断地址格式合法性跟踪等功能！国人开发，QQ：349124555。</li>\n<li><a href=\"https://github.com/HHuiHao/HSDownloadManager\" target=\"_blank\" rel=\"noopener\">HSDownloadManager</a> - HSDownloadManager，下载音乐、视频、图片各种资源，支持多任务、断点下载。</li>\n<li><a href=\"https://github.com/HHuiHao/MutableUploadDemo\" target=\"_blank\" rel=\"noopener\">MutableUploadDemo</a> - 模拟需求：图文混编，要求用户选择图片后就上传，可选择多图，并行上传，用户确定提交后后台执行，必须全部图片上传完才能提交文字。</li>\n<li><a href=\"https://github.com/swtlovewtt/WTRequestCenter\" target=\"_blank\" rel=\"noopener\">WTRequestCenter</a> - 方便缓存的请求库，提供了方便的HTTP请求方法，传入请求url和参数，返回成功和失败的回调。 UIKit扩展提供了许多不错的方法，快速缓存图片，图片查看，缩放功能， 颜色创建，设备UUID，网页缓存，数据缓存等功能。 无需任何import和配置，目前实现了基础需求。</li>\n<li><a href=\"https://github.com/mutualmobile/MMWormhole\" target=\"_blank\" rel=\"noopener\">MMWormhole</a> - Message passing between iOS apps and extensions 2个iOS设备之间通信。 </li>\n<li><a href=\"https://github.com/socketio/socket.io-client-swift\" target=\"_blank\" rel=\"noopener\">socket.io-client-swift</a> - WebSockect 客户端类库。开放的通讯协议，有利于构建强大地跨平台应用。 </li>\n<li><a href=\"https://github.com/nghialv/Transporter\" target=\"_blank\" rel=\"noopener\">Transporter</a> - swift， 短小、精悍、易用的多文件（并发或顺序）上传和下载传输库。还支持后台运行、传输进程跟踪、暂停/续传/取消/重试控制等功能。 </li>\n<li><a href=\"https://github.com/kevin0571/STNetTaskQueue\" target=\"_blank\" rel=\"noopener\">STNetTaskQueue</a> - STNetTaskQueue Objective-C 可扩展网络请求管理库。</li>\n<li><a href=\"https://github.com/robbiehanson/CocoaAsyncSocket\" target=\"_blank\" rel=\"noopener\">CocoaAsyncSocket</a> - 在iOS开发中使用socket，一般都是用第三方库AsyncSocket，不得不承认这个库确实很强大，<a href=\"http://www.superqq.com/blog/2015/04/03/ioskai-fa-zhi-asyncsocketshi-yong-jiao-cheng/\" target=\"_blank\" rel=\"noopener\">使用教程</a>。</li>\n<li><a href=\"https://github.com/roustem/AsyncSocket\" target=\"_blank\" rel=\"noopener\">AsyncSocket</a> - AsyncSocket。</li>\n<li><a href=\"http://code.cocoachina.com/view/128711\" target=\"_blank\" rel=\"noopener\">Socket通信</a> - 通过AsyncSocket封装的Socket通讯方法，简单实用，通俗易懂，初学者不能错过 。</li>\n<li><a href=\"https://github.com/eugenehp/GCDAsyncSocket\" target=\"_blank\" rel=\"noopener\">GCDAsyncSocket</a> - GCDAsyncSocket ， <a href=\"https://github.com/smalltask/TestTcpConnection\" target=\"_blank\" rel=\"noopener\">不错的Demo</a>。</li>\n<li><a href=\"https://github.com/JustHTTP/Just\" target=\"_blank\" rel=\"noopener\">Just</a> - 小而美的 HTTP 类。功能简单、直接、完整且健壮性高– swift。</li>\n<li><a href=\"https://github.com/nghialv/Future\" target=\"_blank\" rel=\"noopener\">Future</a> - 基于微框架设计思想的异步执行及结果响应类，代码即简单又干净– swift。</li>\n<li><a href=\"https://github.com/mzeeshanid/MZDownloadManager\" target=\"_blank\" rel=\"noopener\">MZDownloadManager</a> - 下载管理。 </li>\n<li><a href=\"https://github.com/venmo/DVR\" target=\"_blank\" rel=\"noopener\">DVR</a> - 针对网络请求的测试框架，超实用的工具。且支持 iOS, OSX, watchOS 全平台。</li>\n<li><a href=\"https://github.com/hongfenglt/HFDownLoad\" target=\"_blank\" rel=\"noopener\">HFDownLoad</a> - iOS开发网络篇之文件下载、大文件下载、断点下载:NSData方式、NSURLConnection方式、NSURLSession下载方式 <a href=\"http://blog.csdn.net/hongfengkt/article/details/48290561\" target=\"_blank\" rel=\"noopener\">下载方式具体的思路、区别见Blog</a> 。</li>\n<li><a href=\"https://github.com/johnlui/Pitaya\" target=\"_blank\" rel=\"noopener\">Pitaya.swift</a> - Pitaya 是纯 Swift 写的 iOS 网络库，支持 Basic Authorization、SSL 钢钉、HTTP raw body / JSON body、快速文件上传等特性，并通过内置 JSONNeverDie 实现了对 JSON 的完全支持，开箱即用。 <a href=\"https://github.com/johnlui/Pitaya/wiki/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3\" target=\"_blank\" rel=\"noopener\">中文文档</a></li>\n</ul>\n<h5 id=\"图像获取\"><a href=\"#图像获取\" class=\"headerlink\" title=\"图像获取\"></a>图像获取</h5><ul>\n<li><a href=\"https://github.com/rs/SDWebImage\" target=\"_blank\" rel=\"noopener\">SDWebImage</a> - SDWebImage 网络图片获取及缓存处理。</li>\n<li><a href=\"https://github.com/onevcat/Kingfisher\" target=\"_blank\" rel=\"noopener\">Kingfisher</a> - 纯 Swift 实现的类 SDWebImage 库，实现了异步下载和缓存图片。</li>\n<li><a href=\"https://github.com/kiavashfaisali/KFSwiftImageLoader\" target=\"_blank\" rel=\"noopener\">KFSwiftImageLoader</a> - Swift，一个图像缓存加载库。 </li>\n<li><a href=\"https://github.com/path/FastImageCache\" target=\"_blank\" rel=\"noopener\">FastImageCache</a> - FastImageCache 网络图片获取及缓存处理，<a href=\"http://www.imooc.com/wenda/detail/247239\" target=\"_blank\" rel=\"noopener\">iOS图片加载速度极限优化—FastImageCache解析</a>。</li>\n<li><a href=\"https://github.com/enormego/EGOCache\" target=\"_blank\" rel=\"noopener\">EGOCache</a> - 十分知名的第三方缓存类库，可以缓存NSString、UIImage、NSImage以及NSData。除此，如果还可以缓存任何一个实现了<nscoding>接口的对象。所有缓存的数据都可以自定义过期的时间，默认是1天。EGOCache 支持多线程（thread-safe），<a href=\"http://www.superqq.com/blog/2014/11/06/ioskai-fa-:uitableviewjia-zai-duo-zhang-zhao-pian-dao-zhi-nei-cun-shang-zhang-de-wen-ti/\" target=\"_blank\" rel=\"noopener\">UITableView加载多张照片导致内存上涨的问题</a>。<ul>\n<li><a href=\"https://github.com/ibireme/YYWebImage/\" target=\"_blank\" rel=\"noopener\">YYWebImage</a> - 一个图片加载库 YYWebImage，支持 APNG、WebP、GIF 播放，支持渐进式图片加载，更高性能的缓存，更多图像处理方法，可以替代 SDWebImage 等开源库，<a href=\"http://blog.ibireme.com/2015/11/02/mobile_image_benchmark/\" target=\"_blank\" rel=\"noopener\">相关文章</a>。</li>\n</ul>\n</nscoding></li>\n</ul>\n<h5 id=\"网络聊天\"><a href=\"#网络聊天\" class=\"headerlink\" title=\"网络聊天\"></a>网络聊天</h5><ul>\n<li><a href=\"https://github.com/robbiehanson/XMPPFramework\" target=\"_blank\" rel=\"noopener\">XMPPFramework</a> - XMPPFramework openfire聊天。</li>\n<li><a href=\"https://github.com/dsxNiubility/SXTheQQ\" target=\"_blank\" rel=\"noopener\">SXTheQQ</a> - 用xmppFramework框架编写QQ程序，主要为了练习通讯的一些原理，界面比较渣 必须要先在本地配置好环境才可以运行。</li>\n<li><a href=\"http://www.easemob.com/\" target=\"_blank\" rel=\"noopener\">环信</a> - 给开发者更稳定IM云功能。8200万用户考验，好用！（暂无及时语音、视频通话）</li>\n<li><a href=\"http://www.rongcloud.cn/\" target=\"_blank\" rel=\"noopener\">融云</a> - 即时通讯云服务提供商。（暂无及时语音、视频通话）</li>\n<li><a href=\"http://www.yuntongxun.com\" target=\"_blank\" rel=\"noopener\">容联云通讯</a> - 提供基于互联网通话,视频会议,呼叫中心/IVR,IM等通讯服务。</li>\n<li><a href=\"https://github.com/ChatSecure/ChatSecure-iOS\" target=\"_blank\" rel=\"noopener\">chatsecure</a> - 基于XMPP的iphone、android加密式聊天软件， <a href=\"https://chatsecure.org/\" target=\"_blank\" rel=\"noopener\">chatsecure官网</a> 。 <a href=\"https://github.com/chrisballinger/Off-the-Record-iOS\" target=\"_blank\" rel=\"noopener\">iOS代码1</a>，<a href=\"https://github.com/chrisballinger/ChatSecure-iOS\" target=\"_blank\" rel=\"noopener\">iOS代码2</a>， <a href=\"http://www.cocoachina.com/bbs/read.php?tid=153156\" target=\"_blank\" rel=\"noopener\">iOS中文版</a>。</li>\n<li><a href=\"https://github.com/xhzengAIB/MessageDisplayKit\" target=\"_blank\" rel=\"noopener\">MessageDisplayKit</a> - 仿微信聊天，参考JSQMessagesViewController。（国人写）</li>\n<li><a href=\"https://github.com/jessesquires/JSQMessagesViewController\" target=\"_blank\" rel=\"noopener\">JSQMessagesViewController</a> - 聊天 。 </li>\n<li><a href=\"https://github.com/HanYaZhou1990/-SunFlower\" target=\"_blank\" rel=\"noopener\">SunFlower</a> - 环信聊天demo，比较多功能 。</li>\n<li><a href=\"http://code4app.com/ios/BlueTalk%E8%93%9D%E7%89%99%E8%81%8A%E5%A4%A9-%E6%89%8B%E6%9C%BA%E4%B9%8B%E9%97%B4/552b8190933bf0291e8b4748\" target=\"_blank\" rel=\"noopener\">BlueTalk蓝牙聊天</a> - 以MultipeerConnectivity为基础， 实现了简单的蓝牙聊天。</li>\n</ul>\n<h5 id=\"网络测试\"><a href=\"#网络测试\" class=\"headerlink\" title=\"网络测试\"></a>网络测试</h5><ul>\n<li><a href=\"https://github.com/tonymillion/Reachability\" target=\"_blank\" rel=\"noopener\">Reachability</a> - 苹果提供过一个Reachability类，用于检测网络状态。但是该类由于年代久远，并不支持ARC。该项目旨在提供一个苹果的Reachability类的替代品，支持ARC和block的使用方式。<a href=\"http://www.jianshu.com/p/efcfa3c87306\" target=\"_blank\" rel=\"noopener\">iOS网络监测如何区分2、3、4G</a>   </li>\n<li><a href=\"https://github.com/ashleymills/Reachability.swift\" target=\"_blank\" rel=\"noopener\">Reachability.swift</a> - 用于替换苹果的 Reachability 类，可以方便地检测当前是否联网以及具体的联网状态。 </li>\n<li><a href=\"https://github.com/crazypoo/SimpleCarrie\" target=\"_blank\" rel=\"noopener\">SimpleCarrie</a> - 简单的运营商信息获取!。</li>\n<li><a href=\"https://github.com/crazypoo/SimpleCarrie\" target=\"_blank\" rel=\"noopener\">NetReachability</a> - swift2.0 简单的方法检查网络连接的连通性，提供通知中心集成接口。 </li>\n<li><a href=\"https://github.com/coderyi/NetworkEye\" target=\"_blank\" rel=\"noopener\">NetworkEye</a> - 一个网络调试库，可以监控App内HTTP请求并显示请求相关的详细信息，方便App开发的网络调试。 </li>\n<li><a href=\"https://github.com/bin1991/SimpleBS\" target=\"_blank\" rel=\"noopener\">SimpleBS.swift</a> - 网络测试小工具。</li>\n</ul>\n<h5 id=\"WebView\"><a href=\"#WebView\" class=\"headerlink\" title=\"WebView\"></a>WebView</h5><ul>\n<li><a href=\"https://github.com/mattgemmell/MGTemplateEngine\" target=\"_blank\" rel=\"noopener\">MGTemplateEngine</a> - MGTemplateEngine比较象 PHP 中的 Smarty、FreeMarker 和 Django的模版引擎，是一个轻量级的引擎，简单好用。只要设置很多不同的HMTL模版，就能轻松的实现一个View多种内容格式的显示，对于不熟悉HTML或者减轻 工作量而言，把这些工作让设计分担一下还是很好的，也比较容易实现设计想要的效果。</li>\n<li><a href=\"https://github.com/ninjinkun/NJKWebViewProgress\" target=\"_blank\" rel=\"noopener\">NJKWebViewProgress</a> - 一个 UIWebView 的进度条接口库,UIWebView 本身是不提供进度条的。 </li>\n<li><a href=\"https://github.com/siriusdely/GTMNSString-HTML\" target=\"_blank\" rel=\"noopener\">GTMNSString-HTML</a> - 谷歌开源的用于过滤HTML标签。 </li>\n<li><a href=\"https://github.com/WangXiaoxi/IOSLearing/\" target=\"_blank\" rel=\"noopener\">js-in-ios</a> - webView与js的交互。 <ul>\n<li><a href=\"https://github.com/mozhenhau/D3Generator/\" target=\"_blank\" rel=\"noopener\">D3Generator</a> - D3Generator根据dict字典生成对象。 适用webview和push推送时，根据后台传回字典实现动态跳转。<a href=\"http://mozhenhau.com/2016/02/07/D3Generator实现万能跳转界面，UIWebview与js随意交互/\" target=\"_blank\" rel=\"noopener\">实现说明</a></li>\n</ul>\n</li>\n</ul>\n<p>========</p>\n<h4 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h4><ul>\n<li><a href=\"https://github.com/johnezang/JSONKit\" target=\"_blank\" rel=\"noopener\">JSONKit</a> - JSONKit库是非常简单易用而且效率又比较高的，重要的JSONKit适用于ios 5.0以下的版本,使用JSONKit库来解析json文件，只需要下载JSONKit.h 和JSONKit.m添加到工程中；然后加入libz.dylib即可。</li>\n<li><a href=\"https://github.com/icanzilb/JSONModel\" target=\"_blank\" rel=\"noopener\">JSONModel</a> - 解析服务器返回的Json数据的库,<a href=\"http://www.jianshu.com/p/3d795ea37835\" target=\"_blank\" rel=\"noopener\">JSONModel源码解析一</a>。</li>\n<li><a href=\"https://github.com/Mantle/Mantle\" target=\"_blank\" rel=\"noopener\">Mantle</a> - Mantle主要用来将JSON数据模型化为OC对象, 大系统中使用。<a href=\"http://www.iwangke.me/2014/10/13/Why-Changba-iOS-choose-Mantle/\" target=\"_blank\" rel=\"noopener\">为什么选择Mantle</a>。</li>\n<li><a href=\"https://github.com/refusebt/RFJModel\" target=\"_blank\" rel=\"noopener\">RFJModel</a> - RFJModel是一个IOS类库，可以将JSON字典自动装填到OBJC对象。相比JSONModel有一些非常好的特性，使用上也比较简单。</li>\n<li><a href=\"https://github.com/nicklockwood/XMLDictionary\" target=\"_blank\" rel=\"noopener\">XMLDictionary</a> - ios与mac os平台下xml与NSDictionary相互转化开源类库。</li>\n<li><a href=\"https://github.com/CoderMJLee/MJExtension\" target=\"_blank\" rel=\"noopener\">MJExtension</a> - 用于json转model进行使用，转换效率很高，使用也比较简单，只要前后台约定好，json直接就转成了model。</li>\n<li><a href=\"https://github.com/CoderMJLee/MJExtension\" target=\"_blank\" rel=\"noopener\">CFRuntime</a> - “Swift 版的 MJExtension，运行时、反射与一键字典模型互转”。 </li>\n<li><a href=\"https://github.com/openboy2012/DDModel\" target=\"_blank\" rel=\"noopener\">DDModel</a> - 快速搭建项目Model层，支持ORM映射关系，能从JSON/XML直接实例一个Model对象。支持SQLite本地数据持久化，封装了HTTP， 减少HTTP代码与UIViewController的代码耦合，支持Cache；类似RESTKit、Mantle的功能；使用该类库以后简化了网络层的开发工作，把更多的精力放在UI上面；目前只支持GET/POST方法的请求。使用到的第三方库有：1.SQLitePersistentObject; 2.JTObjectMapping; 3.AFNetworking; 4.XMLDictionary;</li>\n<li><a href=\"https://github.com/alexeyxo/protobuf-swift\" target=\"_blank\" rel=\"noopener\">protobuf-swift</a> - Protocol Buffers 的 Swift 语言实现库。P.S. Protocol Buffers 是 Google 开源项目，主要功能是实现直接序列化结构化的对象数据，方便跨平台快速传递，开发者也可以直接修改 protobuf 中的数据。相比 XML 和 JSON，protobuf 解析更快，存储更小。</li>\n<li><a href=\"https://github.com/matthewcheok/JSONCodable\" target=\"_blank\" rel=\"noopener\">JSONCodable</a> - 基于 Swift 2.0 新特性（Protocol Extensions and Error Handling）的JSON 解析类。</li>\n<li><a href=\"https://github.com/SwiftyJSON/SwiftyJSON\" target=\"_blank\" rel=\"noopener\">SwiftyJSON</a> - 使Swift的JSON解析变得简单。</li>\n<li><a href=\"https://github.com/johnlui/JSONNeverDie\" target=\"_blank\" rel=\"noopener\">JSONNeverDie.swift</a> - JSON 到 Model 类的自动映射工具。</li>\n<li><a href=\"https://github.com/cezheng/Fuzi\" target=\"_blank\" rel=\"noopener\">Fuzi.swift</a> - Swift实现的轻量快速的 XML/HTML 解析器。</li>\n<li><a href=\"https://github.com/drmohundro/SWXMLHash\" target=\"_blank\" rel=\"noopener\">SWXMLHash.swift</a> - 易用的 XML 解析类库。非常实用的“轮子”。</li>\n<li><a href=\"https://github.com/ibireme/YYModel\" target=\"_blank\" rel=\"noopener\">YYModel</a> - 高性能的 iOS JSON 模型框架。</li>\n<li><a href=\"https://github.com/benloong/TidyJSON\" target=\"_blank\" rel=\"noopener\">TidyJSON.swift</a> - TidyJSON.swift一款简单、易用、明了的 JSON 解析小类库。</li>\n<li><a href=\"https://github.com/postmates/PMJSON\" target=\"_blank\" rel=\"noopener\">PMJSON.swift</a> - PMJSON.swift简单、实用、高效的 JSON 解析类库。</li>\n</ul>\n<p>========</p>\n<h4 id=\"通讯录\"><a href=\"#通讯录\" class=\"headerlink\" title=\"通讯录\"></a>通讯录</h4><ul>\n<li><a href=\"http://code.cocoachina.com/view/128245\" target=\"_blank\" rel=\"noopener\">快速查找联系人</a> - 类似微信联系人搜索的界面,快速查找联系人,并支持点击查询结果 。</li>\n</ul>\n<p>========</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ul>\n<li><a href=\"https://github.com/exsortis/DateTimeKit\" target=\"_blank\" rel=\"noopener\">DateTimeKit</a> - 一个超赞的时间处理的库，Joda-Time ！ 他能帮你轻松处理时区，处理时间加减，计算到期时间等等场景下的问题。</li>\n<li><a href=\"https://github.com/malcommac/SwiftDate\" target=\"_blank\" rel=\"noopener\">SwiftDate</a> - 特别完整、强大的日期时间操作管理类库。它几乎涵盖了已知开源日期类库所有优秀特性。 他能帮你轻松处理时区，处理时间加减，计算到期时间等等场景下的问题。</li>\n<li><a href=\"https://github.com/nst/iOS-Runtime-Headers\" target=\"_blank\" rel=\"noopener\">iOS私有API</a> - 私有API，绿色 == public，红色 == private，蓝色 == dylib。</li>\n<li><a href=\"http://opensource.apple.com/source/CF/\" target=\"_blank\" rel=\"noopener\">iOS源代码</a> - iOS源代码。</li>\n<li><a href=\"https://github.com/ShiqiYu/libfacedetection\" target=\"_blank\" rel=\"noopener\">libfacedetection</a> - C++ 人脸识别 包含正面和多视角人脸检测两个算法.优点:速度快(OpenCV haar+adaboost的2-3倍), 准确度高 (FDDB非公开类评测排名第二），能估计人脸角度。 </li>\n<li><a href=\"https://github.com/Brimizer/Slidden\" target=\"_blank\" rel=\"noopener\">Slidden</a> - 一个老外开源的开发自定义键盘的库，利用这个开源库，可以方便的配置键位、颜色以及键位对应的图片。</li>\n<li><a href=\"https://github.com/michaeltyson/TPKeyboardAvoiding\" target=\"_blank\" rel=\"noopener\">TPKeyboardAvoiding</a> - 用户键盘弹出自动计算高度，进行屏幕滚动操作。</li>\n<li><a href=\"http://d.cocoachina.com/code/detail/298267\" target=\"_blank\" rel=\"noopener\">CDPMonitorKeyboard</a> - CDPMonitorKeyboard封装,可以解决输入视图(例如textField,textView等)被键盘覆盖问题，并可设置高于键盘多少。 </li>\n<li><a href=\"http://code.cocoachina.com/detail/297973/%E8%87%AA%E5%8A%A8%E7%9B%91%E5%90%AC%E9%94%AE%E7%9B%98%E9%AB%98%E5%BA%A6/\" target=\"_blank\" rel=\"noopener\">自动监听键盘高度</a> - 自动监听键盘高度，初始界面，输入框在屏幕最下方，当键盘出现时，输入框随即移动到键盘上方。 </li>\n<li><a href=\"https://github.com/Jiar/KeyboardToolBar/\" target=\"_blank\" rel=\"noopener\">KeyboardToolBar</a> - 从此不再担心键盘遮住输入框，<a href=\"http://www.jianshu.com/p/48993ff982c1\" target=\"_blank\" rel=\"noopener\">文档</a>。</li>\n<li><a href=\"https://github.com/441088327/SYKeyboardTextField\" target=\"_blank\" rel=\"noopener\">SYKeyboardTextField</a> - SYKeyboardTextField 是一个轻巧,简单,非侵入式的键盘附随输入框! 采用Swift编写。</li>\n<li><a href=\"https://github.com/zwaldowski/BlocksKit\" target=\"_blank\" rel=\"noopener\">BlocksKit</a> - block框架，为 OC 常用类提供了强大的 Block 语法支持，使得编写 OC 代码变得舒适、快速、优雅。</li>\n<li><a href=\"https://github.com/facebook/KVOController\" target=\"_blank\" rel=\"noopener\">KVOController</a> - 在项目中有使用 KVO ，那么 KVOController 绝对是个好选择。它是 facebook 开源的一个 KVO 增强框架。 </li>\n<li><a href=\"https://github.com/arashpayan/appirater\" target=\"_blank\" rel=\"noopener\">appirater</a> - 用于提醒用户给你的 APP 打分的工具。</li>\n<li><a href=\"https://github.com/MHaroonBaig/MotionKitr\" target=\"_blank\" rel=\"noopener\">MotionKitr</a> - 为核心运动框架（The Core Motion framework）提供友好的类库封装，以更方便使用三轴陀螺仪和加速感应器特性。</li>\n<li><a href=\"https://launchkit.io/reviews/\" target=\"_blank\" rel=\"noopener\">Review Monitor</a> -  第一时间自动推送 Apple Store 的用户评论到你的邮件箱或者 Slack，第一时间跟进用户反馈，打造优秀 App 必备工具！类似的有：App annie 的类似功能。</li>\n<li><a href=\"https://github.com/Naituw/WBWebViewConsole\" target=\"_blank\" rel=\"noopener\">WBWebViewConsole</a> - 类似微博iPhone客户端的 “调试选项” 吗？把其中的 “内置浏览器网页调试” 开源在 Github 上了。</li>\n<li><a href=\"https://github.com/futurice/ios-good-practices\" target=\"_blank\" rel=\"noopener\">ios-good-practices</a> - ios-good-practices iOS 开发最佳实践。</li>\n<li><a href=\"http://ios.jobbole.com/81830/\" target=\"_blank\" rel=\"noopener\">iOS开发最佳实践</a> - iOS 开发最佳实践 – 中文。</li>\n<li><a href=\"http://code.cocoachina.com/detail/232160\" target=\"_blank\" rel=\"noopener\">TodayExtensionSharingDefaults</a> - TodayExtensionSharingDefaults是一个iOS 8 Today扩展示例，可以使用NSUserDefaults与其containing app分享数据。</li>\n<li><a href=\"http://code.cocoachina.com/view/129108\" target=\"_blank\" rel=\"noopener\">原生实现扫描二维码条码</a> - iOS原生实现扫描二维码条码.</li>\n<li><a href=\"https://github.com/yannickl/QRCodeReader.swift\" target=\"_blank\" rel=\"noopener\">QRCodeReader.swift</a> - QRCodeReader.swift一款简单的 QR 二维码阅读组件及示例，提供前后相机切换功能。</li>\n<li><a href=\"https://github.com/MxABC/swiftScan\" target=\"_blank\" rel=\"noopener\">swiftScan</a> - 具有丰富功能的二维码扫描组件及类库。<a href=\"https://github.com/MxABC/LBXScan\" target=\"_blank\" rel=\"noopener\">对应OC版本LBXScan</a>。</li>\n<li><a href=\"https://github.com/appcoda/QR-Code-Generator\" target=\"_blank\" rel=\"noopener\">QR-Code-Generator.swift</a> - 生成二维码。</li>\n<li><a href=\"https://github.com/100mango/QRCatcher\" target=\"_blank\" rel=\"noopener\">QRCatcher</a> - 一个简洁美观的二维码扫描应用， <a href=\"https://github.com/100mango/zen/blob/master/iOS%E5%AD%A6%E4%B9%A0%EF%BC%9AAVFoundation%20%E8%A7%86%E9%A2%91%E6%B5%81%E5%A4%84%E7%90%86/iOS%E5%AD%A6%E4%B9%A0%EF%BC%9AAVFoundation%20%E8%A7%86%E9%A2%91%E6%B5%81%E5%A4%84%E7%90%86%20.md\" target=\"_blank\" rel=\"noopener\">iOS学习：AVFoundation 视频流处理–二维码扫描</a>。</li>\n<li><a href=\"https://github.com/zhengjinghua/MQRCodeReaderViewController\" target=\"_blank\" rel=\"noopener\">MQRCodeReaderViewController</a> - 二维码扫描控件, UI 做了优化, 仿造微信, 直接拖进项目就可使用。</li>\n<li><a href=\"https://github.com/ayanonagon/Parsimmon\" target=\"_blank\" rel=\"noopener\">Parsimmon</a> - swift，小而美的语言学类库封装工具包。提供分词、标记词性、词形归并、朴素贝页斯分类、决策树等自然语言分析小工具。P.S. 英语分词效果好于中文，感兴趣的同学可以针对中文做一些优化开发。参考译文 NSHipster - <a href=\"http://nshipster.cn/nslinguistictagger/\" target=\"_blank\" rel=\"noopener\">NSLinguistic​Tagger</a>。</li>\n<li><a href=\"https://github.com/liuchunlao/Password-keyboard\" target=\"_blank\" rel=\"noopener\">Password-keyboard</a> - 随机变换数字位置的密码键盘。 模仿银行类应用在付款时输入的随机密码键盘。</li>\n<li><a href=\"https://github.com/SemperIdem/MKMapView-Extension\" target=\"_blank\" rel=\"noopener\">MKMapView-Extension</a> - 这是关于 MKMapView 写的一个基于swift的扩展，可以扩展 MKMapView 的相关功能，减少复用代码量。</li>\n<li><a href=\"https://github.com/nomothetis/SemverKit\" target=\"_blank\" rel=\"noopener\">SemverKit</a> - 针对符合『语义化版本规范 2.0.0』版本号的解析、比较运算类库。不仅支持 Major, Minor, Patch，还支持 Alpha 和 Beta 预发布版本，以及相应地递增运算扩展。</li>\n<li><a href=\"https://github.com/jpotts18/SwiftValidator\" target=\"_blank\" rel=\"noopener\">SwiftValidator</a> - 基于规则的输入验证类库。项目良好的面向对象设计思想，使规则的扩展及自定义非常方便。更专业的规则引擎（甚至是基于自然语言的规则配置）解决方案，比如：开源的 Drools，商用的 ILOG 等。</li>\n<li><a href=\"https://github.com/gali8/Tesseract-OCR-iOS\" target=\"_blank\" rel=\"noopener\">Tesseract-OCR-iOS</a> - 有关OCR文字识别项目。</li>\n<li><a href=\"https://github.com/osnr/Screenotate\" target=\"_blank\" rel=\"noopener\">Screenotate</a> - 支持 OCR 文字识别的载屏笔记 Mac 完整应用。</li>\n<li><a href=\"http://cocoacats.com/\" target=\"_blank\" rel=\"noopener\">cocoacats</a> - 【分类汇总】里面收集了 iOS 中常用的分类文件，一直在更新。</li>\n<li><a href=\"https://github.com/nonstriater/Olla4iOS\" target=\"_blank\" rel=\"noopener\">Olla4iOS</a> - 过去积累的一些方便复用的类和方法，还在整理中。</li>\n<li><a href=\"https://github.com/Draveness/DKNightVersion\" target=\"_blank\" rel=\"noopener\">DKNightVersion</a> - 用最快的方式给你的应用加上夜间和白天的切换效果。 </li>\n<li><a href=\"https://github.com/morizotter/TouchVisualizer\" target=\"_blank\" rel=\"noopener\">TouchVisualizer</a> - 实用的多点触摸可视化组件。扩展并作用于 UIWindows，结构上提供了简单地针对触摸显示定制，比如触摸点的颜色。</li>\n<li><a href=\"https://github.com/wezm/RegexKitLite\" target=\"_blank\" rel=\"noopener\">RegexKitLite</a> - 用来处理正则表达式。 </li>\n<li><a href=\"https://github.com/sharplet/Regex\" target=\"_blank\" rel=\"noopener\">Regex.swift</a> - 实用的正则表达式微框架类库。</li>\n<li><a href=\"https://github.com/cezheng/PySwiftyRegex\" target=\"_blank\" rel=\"noopener\">PySwiftyRegex.swift</a> - 像Python一样简洁高效地作正则处理。</li>\n<li><a href=\"https://github.com/marmelroy/PhoneNumberKit\" target=\"_blank\" rel=\"noopener\">PhoneNumberKit.swift</a> -  解析、格式化及验证国际电话号码工具库（相当于 Google 的 libphonenumber 库的 Swift 版本）。</li>\n<li><a href=\"https://github.com/czechboy0/XcodeServerSDK\" target=\"_blank\" rel=\"noopener\">XcodeServerSDK</a> - 非官方 Xcode Server SDK 封装库。 P.S. 该 SDK 分离自之前推荐的由该作者开发的自动测试框架 <a href=\"https://github.com/czechboy0/Buildasaur\" target=\"_blank\" rel=\"noopener\">Buildasaur</a>。</li>\n<li><a href=\"https://github.com/FabrizioBrancati/BFKit-Swift\" target=\"_blank\" rel=\"noopener\">BFKit-Swift</a> - BFKit-Swift 这套工具库可以提高应用开发效率。 </li>\n<li><a href=\"https://github.com/CloudKitSpace/CKSIncrementalStore\" target=\"_blank\" rel=\"noopener\">CKSIncrementalStore</a> - 基于 CloudKit 服务器实现多终端数据同步。</li>\n<li><a href=\"https://github.com/oisdk/SwiftSequence\" target=\"_blank\" rel=\"noopener\">SwiftSequence</a> - 简洁、灵活、多变的操作 SequenceType 的类库（基于微框架（μframework）设计思想）。</li>\n<li><a href=\"https://github.com/photondragon/IDNFeedParser\" target=\"_blank\" rel=\"noopener\">IDNFeedParser</a> - 一个简单易用的Rss解析库。</li>\n<li><a href=\"https://github.com/nsdictionary/CoreUmeng\" target=\"_blank\" rel=\"noopener\">CoreUmeng</a> - 简单：友盟分享封装。</li>\n<li><a href=\"https://github.com/100apps/openshare\" target=\"_blank\" rel=\"noopener\">openshare</a> - 不用官方SDK，利用社交软件移动客户端(微信/QQ/微博/人人/支付宝)分享/登录/支付。</li>\n<li><a href=\"https://github.com/tomkowz/Swifternalization\" target=\"_blank\" rel=\"noopener\">Swifternalization</a> - 一套实用的本地化工具库。使用教程及 API 文档完整。值得收入项目的“轮子”。<ul>\n<li><a href=\"https://github.com/marmelroy/Localize-Swift\" target=\"_blank\" rel=\"noopener\">Localize-Swift</a> - Localize-Swift一款开发者不可或缺的国际化及本地化字符串框架支持类库。同样地，使用简单、直观又方便。</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/owensd/apous\" target=\"_blank\" rel=\"noopener\">apous</a> - 一款有趣的 Swift 应用 － 让 Swift 成为脚本语言。</li>\n<li><a href=\"https://github.com/kostiakoval/Mirror\" target=\"_blank\" rel=\"noopener\">Mirror</a> - 通过反射（Refection）实现镜像对象封装库。从而可以更轻松获取（或输出）对象属性名、类型及值变量。</li>\n<li><a href=\"https://github.com/nixzhu/Proposer\" target=\"_blank\" rel=\"noopener\">Proposer</a> - Proposer 用单个 API 处理 iOS 上的权限请求，以便使用前确认可访问“相册”、“相机”、“麦克风”、“通讯录”或“用户位置”。 </li>\n<li><a href=\"https://github.com/nickoneill/PermissionScope\" target=\"_blank\" rel=\"noopener\">PermissionScope</a> - 用这个库可以在询问用户前，就告知用户所需的系统权限，为用户带来更好的体验。接受度更高—&gt;更多活跃用户-&gt;更高的留存率-&gt;数据更好-&gt;下载率更高。 </li>\n<li><a href=\"https://github.com/intuit/LocationManager\" target=\"_blank\" rel=\"noopener\">LocationManager</a> - CoreLocation使用起来还是比较麻烦的，需要授权，判断系统版本等等，所以推荐使用第三方框架LocationManager，使用Block，十分简单！<a href=\"http://www.cocoachina.com/ios/20150721/12611.html\" target=\"_blank\" rel=\"noopener\">iOS-CoreLocation：无论你在哪里，我都要找到你！</a> 。</li>\n<li><a href=\"https://github.com/Cee/pangu.objective-c\" target=\"_blank\" rel=\"noopener\">pangu.objective-c</a> - 有多种语言实现版本～ Pangu.Objective-C：格式化中英文之间的空格（OC）。</li>\n<li><a href=\"https://github.com/atomicobject/objection\" target=\"_blank\" rel=\"noopener\">objection</a> - 一个轻量级的依赖注入框架Objection。</li>\n<li><a href=\"https://github.com/johnlui/Swift-On-iOS/tree/master/ControlOrientation/ControlOrientation\" target=\"_blank\" rel=\"noopener\">ControlOrientation</a> - 如何用代码控制以不同屏幕方向打开新页面【iOS】， <a href=\"http://lvwenhan.com/ios/458.html\" target=\"_blank\" rel=\"noopener\">使用说明</a>。</li>\n<li><a href=\"https://github.com/nicklockwood/iRate\" target=\"_blank\" rel=\"noopener\">iRate</a> - 问卷调查。</li>\n<li><a href=\"https://github.com/nihalahmed/GameCenterManager\" target=\"_blank\" rel=\"noopener\">GameCenterManager</a> - 在iOS上管理GameCenter vanilla并不算难，但是有了这个库会更简单也更快。好上加好不是更好么。</li>\n<li><a href=\"https://github.com/slackhq/SlackTextViewController\" target=\"_blank\" rel=\"noopener\">SlackTextViewController</a> - 用作极佳、定制的文本输入控制时，自适应文本区域，手势识别、自动填充、多媒体合并，快速drop-in解决方案。</li>\n<li><a href=\"https://github.com/saturngod/IAPHelper\" target=\"_blank\" rel=\"noopener\">IAPHelper</a> - 应用内付费给我们提供了很多样本代码，而这个库丢掉了那些代码，将金钱交易相关的大多通用任务做了简单的封装。</li>\n<li><a href=\"https://github.com/JanC/TAPromotee\" target=\"_blank\" rel=\"noopener\">TAPromotee</a> - 交叉推广应用是你可以免费实现的最佳市场推广策略之一。使用这个库做起来非常简单，不用都不可能——将TAPromotee加入你的podfile中，免费配置与享受更多下载吧。</li>\n<li><a href=\"https://github.com/cgwangding/DownloadFontOnline\" target=\"_blank\" rel=\"noopener\">DownloadFontOnline</a> - 实现了在线下载一些字体的功能，不用在工程中导入字体库，下载的字体也不会保存在你的应用中，所以可以放心使用。修复了一下崩溃的bug。</li>\n<li><a href=\"https://github.com/zhenlintie/STClock\" target=\"_blank\" rel=\"noopener\">STClock</a> - 仿锤子时钟。</li>\n<li><a href=\"https://github.com/git-up/GitUp\" target=\"_blank\" rel=\"noopener\">GitUp</a> - GitUp是一个可视化的Git客户端，能够实时的进行编辑、合并、回滚等多种操作，更多功能，请下载体验。</li>\n<li><a href=\"http://code.cocoachina.com/detail/320392/\" target=\"_blank\" rel=\"noopener\">获取联系人信息，通讯录</a> - 获取联系人信息，通讯录。</li>\n<li><a href=\"https://github.com/HHuiHao/Universal-Jump-ViewController\" target=\"_blank\" rel=\"noopener\">Universal-Jump-ViewController</a> - 根据规则跳转到指定的界面(runtime实用篇一)。</li>\n<li><a href=\"https://github.com/Ekhoo/Device\" target=\"_blank\" rel=\"noopener\">Device-swift</a> - 可以非常方便的获取设备型号和屏幕尺寸，实现起来难度不大，大家可以学习一下源码。</li>\n<li><a href=\"https://github.com/khoiln/RunKit\" target=\"_blank\" rel=\"noopener\">RunKit.swift</a> - 针对 GCD 框架的一个友好访问封装库（支持方法链式调用）。</li>\n<li><a href=\"https://github.com/FlexMonkey/Plum-O-Meter\" target=\"_blank\" rel=\"noopener\">Plum-O-Meter</a> - swift 称重应用， (3D Touch之我见)[<a href=\"http://swift.gg/2015/10/23/3d-touch-impressions-and-thoughts/]。\" target=\"_blank\" rel=\"noopener\">http://swift.gg/2015/10/23/3d-touch-impressions-and-thoughts/]。</a></li>\n<li><a href=\"http://code.cocoachina.com/view/128249\" target=\"_blank\" rel=\"noopener\">打开自带地图、百度地图、腾讯地图</a> - 打开自带地图、百度地图、腾讯地图。</li>\n<li><a href=\"https://github.com/colin1994/batteryLevelTest\" target=\"_blank\" rel=\"noopener\">batteryLevelTest</a> - runtime精准获取电池电量，<a href=\"http://www.jianshu.com/p/11c1afdf5415\" target=\"_blank\" rel=\"noopener\">文档</a>。</li>\n<li><a href=\"https://github.com/100apps/openshare\" target=\"_blank\" rel=\"noopener\">openshare</a> - 不用官方SDK，利用社交软件移动客户端(微信/QQ/微博/人人/支付宝)分享/登录/支付。</li>\n<li><a href=\"https://github.com/MatthewYork/DateTools\" target=\"_blank\" rel=\"noopener\">DateTools</a> - 用于提高Objective-C中日期和时间相关操作的效率。灵感来源于 DateTime和Time Period Library。</li>\n<li><a href=\"https://github.com/deepdevelop/DDSlackFeedback\" target=\"_blank\" rel=\"noopener\">DDSlackFeedback</a> - 用这个接口实现的摇一摇上传文字或者截屏反馈到你的 Slack channel，特别适合测试 app 的时候用，集成也很简单。</li>\n<li><a href=\"https://github.com/coolnameismy/BabyBluetooth\" target=\"_blank\" rel=\"noopener\">BabyBluetooth</a> - 是一个非常容易使用的蓝牙库, 适用于 iOS 和 Mac OS, 基于原生 CoreBluetooth 框架封装, 可以帮开发者们更简单地使用 CoreBluetooth API, 使用链式方法体, 使得代码更简洁、优雅。<a href=\"http://www.cocoachina.com/ios/20160219/15301.html\" target=\"_blank\" rel=\"noopener\">iOS蓝牙开发（四）：BabyBluetooth蓝牙库介绍</a></li>\n<li><a href=\"https://github.com/rasmusth/BluetoothKit\" target=\"_blank\" rel=\"noopener\">BluetoothKit.swift</a> - 基于 CoreBluetooth API 实现iOS/OS X 设备间蓝牙通讯封装类库。功能强大、传输稳定，示例完整，很酷。</li>\n<li><a href=\"https://github.com/bignerdranch/CoreDataStack\" target=\"_blank\" rel=\"noopener\">CoreDataStack.swift</a> - 存储栈。</li>\n<li><a href=\"https://github.com/THREDOpenSource/SYNQueue\" target=\"_blank\" rel=\"noopener\">SYNQueue.swift</a> - 执行队列类库。</li>\n<li><a href=\"https://github.com/davedelong/DDMathParser\" target=\"_blank\" rel=\"noopener\">DDMathParser.swift</a> - 相比 NSExpression 和 GCMathPaser，功能更强大的数学表达式解析器。</li>\n<li><a href=\"https://github.com/soffes/RateLimit\" target=\"_blank\" rel=\"noopener\">RateLimit.swift</a> - 简单、实用定时执行任务工具类库。</li>\n<li><a href=\"https://github.com/shaojiankui/IOS-Categories\" target=\"_blank\" rel=\"noopener\">iOS-Categories</a> - 收集了许多有助于开发的iOS扩展,各种category分类。</li>\n<li><a href=\"https://github.com/ibireme/YYCategories\" target=\"_blank\" rel=\"noopener\">YYCategories</a> - 功能丰富的 Category 类型工具库。</li>\n<li><a href=\"https://github.com/ibireme/YYAsyncLayers\" target=\"_blank\" rel=\"noopener\">YYAsyncLayers</a> -  iOS 异步绘制与显示的工具。</li>\n<li><a href=\"https://github.com/ibireme/YYDispatchQueuePool\" target=\"_blank\" rel=\"noopener\">YYDispatchQueuePool</a> -  iOS 全局并发队列管理工具。</li>\n<li><a href=\"https://github.com/ibireme/YYKeyboardManager\" target=\"_blank\" rel=\"noopener\">YYKeyboardManager</a> -   iOS 键盘监听管理工具。</li>\n<li><a href=\"https://github.com/6ag/shoppingCart\" target=\"_blank\" rel=\"noopener\">shoppingCart.swift</a> - swift的购物车demo，采用纯代码UI，autolayout自动布局，core animation动画效果。</li>\n<li><a href=\"https://github.com/gbaldera/ShoppingCartExample\" target=\"_blank\" rel=\"noopener\">ShoppingCartExample</a> - 购物车最多star demo。</li>\n<li><a href=\"https://github.com/yhangeline/shoppingCart\" target=\"_blank\" rel=\"noopener\">shoppingCart1</a> - 仿美团购物车效果。</li>\n<li><a href=\"https://github.com/WZF-Fei/ZFShoppingCart\" target=\"_blank\" rel=\"noopener\">ZFShoppingCart</a> - 仿照美团外卖加入购物车的动态效果。</li>\n<li><a href=\"https://github.com/spxvszero/ShoppingCart\" target=\"_blank\" rel=\"noopener\">shoppingCart2</a> - 一个购物车demo，包含购物车动画效果、购物车多选、删除、编辑等功能。</li>\n<li><a href=\"https://github.com/DrYrw/shoppingCart-demo\" target=\"_blank\" rel=\"noopener\">shoppingCart-demo</a> - 一个简单的购物车功能实现demo。</li>\n<li><a href=\"https://github.com/ZyZwei/OC_ShoppingCart_Demo\" target=\"_blank\" rel=\"noopener\">OC_ShoppingCart_Demo</a> - 简单实现购物车常见的筛选功能。</li>\n<li><a href=\"https://github.com/342261733/XNQShoppingTrolley\" target=\"_blank\" rel=\"noopener\">XNQShoppingTrolley</a> - 购物车功能 基本功能仿照淘宝的购物车。<ul>\n<li><a href=\"http://code.cocoachina.com/view/129430\" target=\"_blank\" rel=\"noopener\">shopCarDemobyCX</a> - shopCarDemobyCX一个简易购物车效果，最重要的是可以分单结算，分单个商品结算，代理是主要技术。</li>\n</ul>\n</li>\n<li><a href=\"http://code.cocoachina.com/view/128713\" target=\"_blank\" rel=\"noopener\">MVVM KVO购物车</a> - MVVM KVO 购物车(一处计算总价钱)。</li>\n<li><a href=\"https://github.com/bb-coder/BHBDrawBoarderDemo\" target=\"_blank\" rel=\"noopener\">BHBDrawBoarderDemo车</a> - 仿写猿题库练题画板功能，没有用drawRect，而是用CAShapeLayer来做画板绘画，特别省内存，赞1个，<a href=\"http://bihongbo.com/2016/01/03/memoryGhostdrawRect/\" target=\"_blank\" rel=\"noopener\">实现分析</a>。</li>\n<li><a href=\"https://github.com/uraimo/SwiftyGPIO\" target=\"_blank\" rel=\"noopener\">SwiftyGPIO</a> - 通过 Swift 语言去控制基于 Linux 主板（比如：C.H.I.P. 和 树莓派） 的 GPIO（General Purpose Input Output ），去完成简单的工控功能（比如 LED 灯的显示）。</li>\n<li><a href=\"https://github.com/onmyway133/Scale\" target=\"_blank\" rel=\"noopener\">Scale.swifty</a> - 简单直观的单位计算及换算类库（支持常用计量类型）。代码简洁性、直观性杠杠的。</li>\n<li><a href=\"https://github.com/amayne/SwiftString\" target=\"_blank\" rel=\"noopener\">SwiftString</a> - SwiftString:String 扩展功能很丰富（无论格式化杂乱字符串，还是子串查找，亦或是格式转换都很强大）。</li>\n<li><a href=\"https://github.com/rentzsch/jrswizzle\" target=\"_blank\" rel=\"noopener\">jrswizzle</a> - runtime实现的Method Swizzling第三方框架。</li>\n<li><a href=\"https://github.com/marmelroy/FileBrowser\" target=\"_blank\" rel=\"noopener\">FileBrowser.swift</a> - FileBrowser.swift 一款开源的 iOS 文件浏览器, 支持文件搜索, 文件预览和 3D touch 功能。</li>\n</ul>\n<p>========</p>\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><ul>\n<li><a href=\"https://github.com/ccgus/fmdb\" target=\"_blank\" rel=\"noopener\">FMDB</a> - sqlite的工具， <a href=\"https://github.com/tangqiaoboy/FmdbSample\" target=\"_blank\" rel=\"noopener\">多线程FMDatabaseQueue实例</a>，<a href=\"https://github.com/liuchunlao/LVDatabaseDemo\" target=\"_blank\" rel=\"noopener\">FMDB数据库的使用演示和封装工具类</a>，<a href=\"http://code.cocoachina.com/view/128312\" target=\"_blank\" rel=\"noopener\">基于fmdb 的基本操作</a> 通过 fmdb 进行的数据库的 基本操作(增删改查 )查找是使用 UISearchBar 和UISearchDisplayController 进行混合使用。</li>\n<li><a href=\"https://github.com/Gerry1218/GXDatabaseUtils\" target=\"_blank\" rel=\"noopener\">GXDatabaseUtils</a> - 在FMDB基础上的工具。</li>\n<li><a href=\"https://github.com/realm/realm-cocoa\" target=\"_blank\" rel=\"noopener\">realm-cocoa</a> - Realm是一个真正为移动设备打造的数据库，同时支持Objective-C和Swfit。Realm宣称其相比Sqlite，在移动设备上有着更好的性能表现,<a href=\"https://realm.io/cn/\" target=\"_blank\" rel=\"noopener\">官方中文</a> ，<a href=\"http://swift.gg/2015/12/08/ios-realm-instead-of-coredata/\" target=\"_blank\" rel=\"noopener\">iOS：选择 Realm 而不是 CoreData</a>, <a href=\"http://swift.gg/2015/12/08/building-a-todo-app-using-realm-and-swift/\" target=\"_blank\" rel=\"noopener\">使用 Realm 和 Swift 创建 ToDo 应用</a>。</li>\n<li><a href=\"https://github.com/andrelind/Breeze\" target=\"_blank\" rel=\"noopener\">Breeze</a> - 用Swift写的一个轻量级的CoreData管理工具，并且还支持iCloud 。</li>\n<li><a href=\"https://github.com/Alecrim/AlecrimCoreData\" target=\"_blank\" rel=\"noopener\">AlecrimCoreData</a> - Swift，更容易地访问 CoreData 对象封装类库。除了 CRUD，还提供指针定位，强大的排序、筛选，异步数据获取，以及独立线程后台存取数据。</li>\n<li><a href=\"https://github.com/JohnEstropia/CoreStore\" target=\"_blank\" rel=\"noopener\">CoreStore</a> -  Core Data 管理类库。 其中事务管理及查询是其比较大的亮点，整套 API 功能完整。</li>\n<li><a href=\"https://github.com/magicalpanda/MagicalRecord\" target=\"_blank\" rel=\"noopener\">MagicalRecord</a> - CoreData第一库，MagicalRecord就像是给Core Data提供了一层外包装，隐藏掉所有不相关的东西。 其中事务管理及查询是其比较大的亮点，整套 API 功能完整。</li>\n<li><a href=\"http://rentzsch.github.io/mogenerator/\" target=\"_blank\" rel=\"noopener\">mogenerator</a> - mogenerator为你定义了的Core Data生成默认的数据类。与xCode不一样的是(xCode一个Entity只生成一个NSManagedObject的子类)，mogenerator会为每一个Entity生成两个类。一个为机器准备，一个为人类准备。为机器准备的类一直去匹配data model。为人类准备的类就给你轻松愉快的去修改和保存。</li>\n<li><a href=\"https://github.com/hyperoslo/Presentation\" target=\"_blank\" rel=\"noopener\">Presentation</a> - 重量级好项目 Presentation，它可以方便你制作定制的动画式教程、Release Notes、个性化演讲稿等。</li>\n<li><a href=\"https://github.com/terhechte/CoreValue\" target=\"_blank\" rel=\"noopener\">CoreValue</a> - Swift 2 版 Core Data 封装库。相比另外两个 <a href=\"https://github.com/arkverse/SwiftRecord\" target=\"_blank\" rel=\"noopener\">SwiftRecord</a>和 <a href=\"https://github.com/JohnEstropia/CoreStore\" target=\"_blank\" rel=\"noopener\">CoreStore</a>更轻量。</li>\n<li><a href=\"https://github.com/sqlcipher/sqlcipher\" target=\"_blank\" rel=\"noopener\">SQLCipher</a> - SQLCipher使用256-bit AES加密，SQLCipher分为收费版本和免费版本。<a href=\"https://www.zetetic.net/sqlcipher/ios-tutorial/\" target=\"_blank\" rel=\"noopener\">官方教程</a>， <a href=\"http://foggry.com/blog/2014/05/19/jia-mi-ni-de-sqlite/\" target=\"_blank\" rel=\"noopener\">加密你的SQLite</a> - 各种sqlite数据库加密介绍。 <a href=\"http://download.csdn.net/detail/wzzvictory_tjsd/7379055\" target=\"_blank\" rel=\"noopener\">SQLCipherDemo下载</a> 。</li>\n<li><a href=\"https://github.com/stephencelis/SQLite.swift\" target=\"_blank\" rel=\"noopener\">SQLite.swift</a> - 纯swift实现的类型安全的SQLite3封装，数据存储和JSON解析是永恒的话题。</li>\n<li><a href=\"https://github.com/qutheory/fluent\" target=\"_blank\" rel=\"noopener\">fluent.swift</a> - 纯swift实现的类型安全的SQLite3封装，数据存储和JSON解析是永恒的话题。</li>\n</ul>\n<p>========</p>\n<h4 id=\"缓存处理\"><a href=\"#缓存处理\" class=\"headerlink\" title=\"缓存处理\"></a>缓存处理</h4><ul>\n<li><a href=\"https://github.com/yuantiku/YTKKeyValueStore\" target=\"_blank\" rel=\"noopener\">YTKKeyValueStore</a> - Key-Value存储工具类，<a href=\"http://tangqiaoboy.gitcafe.io/blog/2014/10/03/opensouce-a-key-value-storage-tool/\" target=\"_blank\" rel=\"noopener\">说明</a>。</li>\n<li><a href=\"https://github.com/tumblr/TMCache\" target=\"_blank\" rel=\"noopener\">TMCache</a> - TMCache 是 Tumblr 开源的一个基于 key/value 的数据缓存类库,可以用于缓存一些临时数据或者需要频繁加载的数据,比如某些下载的数据或者一些临时处理结果。</li>\n<li><a href=\"https://github.com/jl322137/JLKeychain\" target=\"_blank\" rel=\"noopener\">JLKeychain</a> - 快捷使用keychain存储数据的类，使keychain像NSUserDefaults一样工作。</li>\n<li><a href=\"https://github.com/soffes/sskeychain\" target=\"_blank\" rel=\"noopener\">sskeychain</a> - SSKeyChains对苹果安全框架API进行了简单封装,支持对存储在钥匙串中密码、账户进行访问,包括读取、删除和设置。</li>\n<li><a href=\"https://github.com/kishikawakatsumi/KeychainAccess\" target=\"_blank\" rel=\"noopener\">KeychainAccess</a> - 管理Keychain接入的小助手。</li>\n<li><a href=\"https://github.com/ibireme/YYCache\" target=\"_blank\" rel=\"noopener\">YYCache</a> - 高性能的 iOS 缓存框架。</li>\n<li><a href=\"https://github.com/CoderJackyHuang/RuntimeDemo\" target=\"_blank\" rel=\"noopener\">RuntimeDemo</a> - runtime自动归档/解档,<a href=\"http://www.henishuo.com/runtime-archive-unarchive-automaticly/\" target=\"_blank\" rel=\"noopener\">源码分析</a>。</li>\n</ul>\n<p>========</p>\n<h4 id=\"PDF\"><a href=\"#PDF\" class=\"headerlink\" title=\"PDF\"></a>PDF</h4><ul>\n<li><a href=\"https://github.com/vfr/Reader\" target=\"_blank\" rel=\"noopener\">Reader</a> - Reader可提供类似iBooks的文档导航，支持屏幕旋转和所有方向，并通过密码保护加密PDF文件，支持PDF链接和旋转页面。</li>\n</ul>\n<p>========</p>\n<h4 id=\"图像浏览及处理\"><a href=\"#图像浏览及处理\" class=\"headerlink\" title=\"图像浏览及处理\"></a>图像浏览及处理</h4><ul>\n<li><a href=\"https://github.com/liric28/FLAnimatedImage\" target=\"_blank\" rel=\"noopener\">FLAnimatedImage</a> - gif播放处理的工具。</li>\n<li><a href=\"https://github.com/yackle/CLImageEditor\" target=\"_blank\" rel=\"noopener\">CLImageEditor</a> - 超强的图片编辑库，快速帮你实现旋转，防缩，滤镜等等一系列麻烦的事情。</li>\n<li><a href=\"https://github.com/esilverberg/ios-image-filters\" target=\"_blank\" rel=\"noopener\">ios-image-filters</a> - 图像滤镜，库比较旧了，很容易崩溃。 </li>\n<li><a href=\"https://github.com/xissburg/XBImageFilters\" target=\"_blank\" rel=\"noopener\">XBImageFilters</a> - 图像滤镜。</li>\n<li><a href=\"https://github.com/mwaterfall/MWPhotoBrowser\" target=\"_blank\" rel=\"noopener\">MWPhotoBrowser</a> - 一个非常不错的照片浏览器，在github的star接近3000个，<a href=\"http://www.superqq.com/blog/2015/01/22/jie-jue-mwphotobrowserzhong-de-sdwebimagejia-zai-da-tu-dao-zhi-de-nei-cun-jing-gao-wen-ti/\" target=\"_blank\" rel=\"noopener\">解决MWPhotoBrowser中的SDWebImage加载大图导致的内存警告问题</a>。</li>\n<li><a href=\"https://github.com/objcio/issue-21-core-image-explorer\" target=\"_blank\" rel=\"noopener\">core-image-explorer</a> -  Core Image 滤镜处理图片– swift ，<a href=\"http://objccn.io/issue-21-6/\" target=\"_blank\" rel=\"noopener\">Core Image 介绍</a>。 </li>\n<li><a href=\"https://github.com/rFlex/CoreImageShop\" target=\"_blank\" rel=\"noopener\">CoreImageShop</a> - CoreImageShop图片滤镜处理– Mac app that let you create a complete Core Image Filter usable on iOS using SCRecorder。</li>\n<li><a href=\"https://github.com/BradLarson/GPUImage\" target=\"_blank\" rel=\"noopener\">GPUImage</a> - 处理图片效果。</li>\n<li><a href=\"https://github.com/ruslanskorb/RSKImageCropper\" target=\"_blank\" rel=\"noopener\">RSKImageCropper</a> - 适用于iOS的图片裁剪器，类似Contacts app，可上下左右移动图片选取最合适的区域。</li>\n<li><a href=\"http://code.cocoachina.com/detail/232156\" target=\"_blank\" rel=\"noopener\">WZRecyclePhotoStackView</a> - 删除照片交互–WZRecyclePhotoStackView，就是模拟生活中是删除或保留犹豫不决的情形而产生的。 在上滑，下滑的部分，借鉴了<a href=\"https://github.com/cwRichardKim/TinderSimpleSwipeCards\" target=\"_blank\" rel=\"noopener\">TinderSimpleSwipeCards</a>。</li>\n<li><a href=\"https://github.com/schwa/TimingFunctionEditor\" target=\"_blank\" rel=\"noopener\">TimingFunctionEditor</a> - TimingFunctionEditor用swift编写， 贝塞尔曲线编辑器，编辑后可以预览或拷贝代码片段直接使用。P.S. 该项目采用更简单的依赖管理器 <a href=\"https://github.com/Carthage/Carthage\" target=\"_blank\" rel=\"noopener\">Carthage</a> ，而非常用的 CocoaPods。<a href=\"http://www.cocoachina.com/ios/20141204/10528.html\" target=\"_blank\" rel=\"noopener\">Carthage介绍中文</a>。</li>\n<li><a href=\"https://github.com/aaronabentheuer/AAFaceDetection\" target=\"_blank\" rel=\"noopener\">AAFaceDetection</a> - AAFaceDetection–swift，简单、实用的面部识别封装库。虽然该技术从 iOS 5 发展，不过真正有趣的应用还不多。</li>\n<li><a href=\"https://github.com/itouch2/PhotoTweaks\" target=\"_blank\" rel=\"noopener\">PhotoTweaks</a> - 这个库挺赞的，正好是对图像操作的。</li>\n<li><a href=\"https://github.com/contentful-labs/Concorde\" target=\"_blank\" rel=\"noopener\">Concorde</a> - swift, Concorde, 一个可用于下载和解码渐进式 JPEG 的库, 可用来改善应用的用户体验。</li>\n<li><a href=\"https://github.com/tristanhimmelman/ZoomTransition\" target=\"_blank\" rel=\"noopener\">ZoomTransition</a> - swift, 通过手势操控图片的放大、缩小、旋转等自由变化效果的组件及示例。</li>\n<li><a href=\"https://github.com/melvitax/AFImageHelper\" target=\"_blank\" rel=\"noopener\">AFImageHelper</a> - swift,一套针对 UIImage 和 UIImageView 的实用扩展库，功能包含填色和渐变、裁剪、缩放以及具有缓存机制的在线图片获取。</li>\n<li><a href=\"https://github.com/demon1105/PinterestSwift\" target=\"_blank\" rel=\"noopener\">PinterestSwift</a> - swift,Pinterest 风格图片缩放、切换示例。</li>\n<li><a href=\"https://github.com/KittenYang/KYElegantPhotoGallery\" target=\"_blank\" rel=\"noopener\">KYElegantPhotoGallery</a> - 一个优雅的图片浏览库。</li>\n<li><a href=\"https://github.com/gsdios/SDPhotoBrowser\" target=\"_blank\" rel=\"noopener\">SDPhotoBrowser</a> - 仿新浪动感图片浏览器,非常简单易用的图片浏览器，模仿微博图片浏览器动感效果，综合了图片展示和存储等多项功能。</li>\n<li><a href=\"https://github.com/chennyhuang/HZPhotoBrowser\" target=\"_blank\" rel=\"noopener\">HZPhotoBrowser</a> - 一个类似于新浪微博图片浏览器的框架（支持显示和隐藏动画；支持双击缩放，手势放大缩小；支持图片存储；支持网络加载gif图片，长图滚动浏览；支持横竖屏显示）。 </li>\n<li><a href=\"https://github.com/YiZhuoChen/PhotoStackView-Swift\" target=\"_blank\" rel=\"noopener\">PhotoStackView-Swift</a> - PhotoStackView——照片叠放视图，<a href=\"http://blog.csdn.net/u013604612/article/details/46336657\" target=\"_blank\" rel=\"noopener\">使用说明</a>。</li>\n<li><a href=\"https://github.com/FlexMonkey/MarkingMenu\" target=\"_blank\" rel=\"noopener\">MarkingMenu</a> - 基于手势、类似 Autodesk Maya 风格标记菜单及图片渲染。</li>\n<li><a href=\"https://github.com/dsxNiubility/SXPhotoShow\" target=\"_blank\" rel=\"noopener\">SXPhotoShow</a> - UICollectionViewFlowLayout流水布局 是当下collectionView中常用且普通的布局方式。本代码也写了三种好看的布局，其中LineLayout和流水布局有很大的相同点就直接继承UICollectionViewFlowLayout，然后StackLayout，CircleLayout这两种都是直接继承自最原始的UICollectionViewLayout 布局方案。</li>\n<li><a href=\"https://github.com/cgwangding/PictureWatermark\" target=\"_blank\" rel=\"noopener\">PictureWatermark</a> - 主要实现了给图片加文字以及图片水印的功能，已封装成了UIImage的类别，方便使用。</li>\n<li><a href=\"http://code.cocoachina.com/detail/320603/\" target=\"_blank\" rel=\"noopener\">自定义宽高比的相册框 拍照</a> - 取出照片时 弹出自定义view。在这个自定义view上创建一个需要的相框大小的view层 把取出的图片赋值给UIImageView按缩放添加到这个层上。对uiimageView添加捏合、移动 手势。添加按钮 选取，最后根据位移和缩放比例 裁剪image。</li>\n<li><a href=\"https://github.com/gang544043963/LGPhotoBrowser\" target=\"_blank\" rel=\"noopener\">LGPhotoBrowser</a> - LGPhotoBrowser:相册选择/浏览器/照相机（仿微信）,包含三个模块：照片浏览器，相册选择器，照相机。</li>\n<li><a href=\"https://github.com/oscarWyz/PhotoBrowser\" target=\"_blank\" rel=\"noopener\">PhotoBrowser</a> - 一个简单的好用的的图片浏览器。</li>\n<li><a href=\"https://github.com/xujingzhou/BeautyHour\" target=\"_blank\" rel=\"noopener\">BeautyHour</a> - 完整应用，功能与“美图秀秀”雷同。</li>\n<li><a href=\"https://github.com/DroidsOnRoids/MPParallaxView\" target=\"_blank\" rel=\"noopener\">MPParallaxView</a> - 是用 Swift 写的类似 Apple TV Parallax 效果的视图。</li>\n<li><a href=\"https://github.com/zhengjinghua/StitchingImage\" target=\"_blank\" rel=\"noopener\">StitchingImage</a> - 仿微信群组封面拼接控件, 直接拖进项目就可使用，<a href=\"http://gold.xitu.io/entry/56395f5360b20b143a9178f6\" target=\"_blank\" rel=\"noopener\">教程</a>。</li>\n<li><a href=\"https://github.com/seedante/SDECollectionViewAlbumTransition\" target=\"_blank\" rel=\"noopener\">SDECollectionViewAlbumTransition</a> - 用自定义的 push 和 pop 实现了有趣的 iOS 相册翻开动画效果。</li>\n<li><a href=\"https://github.com/xujingzhou/BeautyHour\" target=\"_blank\" rel=\"noopener\">SKPhotoBrowser.swift</a> - swift中规中矩、实用的图片浏览类库。示例也很完整。</li>\n<li><a href=\"https://github.com/kean/Nuke\" target=\"_blank\" rel=\"noopener\">Nuke.swift</a> - 完整、强大、实用的图片管理类库。主要功能包括可定制装载，缓存，滤镜及尺寸变换。</li>\n<li><a href=\"https://github.com/AwesomeDennis/DNImagePicker\" target=\"_blank\" rel=\"noopener\">DNImagePicker</a> - 类似wechat的图片选择。</li>\n<li><a href=\"https://github.com/lioonline/CocoaPicker\" target=\"_blank\" rel=\"noopener\">CocoaPicker</a> - 仿QQ图片选择器（OC）。</li>\n<li><a href=\"https://github.com/johnil/JFImagePickerController\" target=\"_blank\" rel=\"noopener\">JFImagePickerController</a> - vvebo作者：多选照片、预览已选照片、针对超大图片优化。</li>\n<li><a href=\"https://github.com/vitoziv/VIPhotoView\" target=\"_blank\" rel=\"noopener\">VIPhotoView</a> - 图片浏览，用于展示图片的工具类，因为是个 View，所以你可以放在任何地方显示。支持旋转，双击指定位置放大等。</li>\n<li><a href=\"https://github.com/SpringOx/AGImagePickerController\" target=\"_blank\" rel=\"noopener\">AGImagePickerController</a> - 是一个图片选择器，支持图片多选，支持大图横滑预览，支持放大预览，支持横竖屏，支持所有的iOS设备。</li>\n<li><a href=\"https://github.com/ibireme/YYImage\" target=\"_blank\" rel=\"noopener\">YYImage</a> - 功能强大的 iOS 图像框架，支持大部分动画图像、静态图像的播放/编码/解码。</li>\n<li><a href=\"https://github.com/KyoheiG3/PagingView\" target=\"_blank\" rel=\"noopener\">PagingView.swift</a> - 注重细节的自动布局分页视图组件。</li>\n<li><a href=\"https://github.com/banchichen/TZImagePickerController\" target=\"_blank\" rel=\"noopener\">TZImagePickerController</a> - 一个支持多选、选原图和视频的图片选择器，同时有预览功能，适配了iOS6789系统。<a href=\"http://www.cocoachina.com/ios/20160112/14942.html\" target=\"_blank\" rel=\"noopener\">教程</a>.</li>\n<li><a href=\"http://code.cocoachina.com/view/129134\" target=\"_blank\" rel=\"noopener\">更换头像</a> - 用户选取从相机或者相册获取图片，并且显示在View上。</li>\n<li><a href=\"https://github.com/luzefeng/DouBanMeinv\" target=\"_blank\" rel=\"noopener\">DouBanMeinv.swift</a> - 抓取豆瓣美女图片，瀑布流显示。</li>\n<li><a href=\"https://github.com/ACEYL/ZZPhotoKit\" target=\"_blank\" rel=\"noopener\">ZZPhotoKit</a> - 基于Photos和AVFoundation框架开源，相册多选与相机连拍。</li>\n<li><a href=\"https://github.com/startry/SwViewCapture\" target=\"_blank\" rel=\"noopener\">SwViewCapture.swift</a> - SwViewCapture.swift一个用起来还不错的iOS截图库.(支持截取所有内容, 适用于所有ScrollView组成的视图, 包括WebView)。</li>\n</ul>\n<p>========</p>\n<h4 id=\"摄像照相视频音频处理\"><a href=\"#摄像照相视频音频处理\" class=\"headerlink\" title=\"摄像照相视频音频处理\"></a>摄像照相视频音频处理</h4><ul>\n<li><a href=\"https://github.com/rFlex/SCRecorder\" target=\"_blank\" rel=\"noopener\">SCRecorder</a> - SCRecorder 短视频录制。</li>\n<li><a href=\"https://github.com/pingguo-zangqilong/VideoPushDemo\" target=\"_blank\" rel=\"noopener\">VideoPushDemo</a> - 视频剪辑 <a href=\"http://www.jianshu.com/p/3006502912aa\" target=\"_blank\" rel=\"noopener\">视频特效制作1</a> <a href=\"http://www.jianshu.com/p/6313025349a9\" target=\"_blank\" rel=\"noopener\">视频特效制作2</a>。</li>\n<li><a href=\"https://github.com/omergul123/LLSimpleCamera\" target=\"_blank\" rel=\"noopener\">LLSimpleCamera</a> - A simple, customizable camera control for iOS， 摄像头。</li>\n<li><a href=\"https://github.com/syedhali/EZAudio\" target=\"_blank\" rel=\"noopener\">EZAudio</a> - EZAudio 是一个 iOS 和 OSX 上简单易用的音频框架，根据音量实时显示波形图，基于Core Audio，适合实时低延迟音频处理，非常直观。<a href=\"http://segmentfault.com/blog/news/1190000000370957\" target=\"_blank\" rel=\"noopener\">中文介绍</a>,<a href=\"http://www.syedharisali.com/about\" target=\"_blank\" rel=\"noopener\">官网</a>。</li>\n<li><a href=\"http://ffmpeg.org/\" target=\"_blank\" rel=\"noopener\">ffmpeg</a> - ffmpeg官网，<a href=\"http://www.cocoachina.com/ios/20150514/11827.html\" target=\"_blank\" rel=\"noopener\">FFmpeg在iOS上完美编译</a>。</li>\n<li><a href=\"http://www.videolan.org/\" target=\"_blank\" rel=\"noopener\">VCL</a> - VCL官网。 </li>\n<li><a href=\"https://github.com/kolyvan/kxmovie\" target=\"_blank\" rel=\"noopener\">kxmovie</a> - 使用ffmpeg的影片播放器，<a href=\"http://www.cocoachina.com/bbs/read.php?tid=145575\" target=\"_blank\" rel=\"noopener\">修改说明</a>， <a href=\"https://github.com/kinglonghuang\" target=\"_blank\" rel=\"noopener\">修改代码</a>，<a href=\"https://github.com/namebryant/FFmpeg-Compilation\" target=\"_blank\" rel=\"noopener\">基于FFmpeg的kxMoive艰难的编译运行</a>。</li>\n<li><a href=\"https://github.com/Bilibili/ijkplayer\" target=\"_blank\" rel=\"noopener\">ijkplayer</a> - B站开源的视频播放器，支持Android和iOS。 </li>\n<li><a href=\"https://github.com/tumtumtum/StreamingKit\" target=\"_blank\" rel=\"noopener\">StreamingKit</a> - StreamingKit流媒体音乐播放器。 </li>\n<li><a href=\"https://github.com/muhku/FreeStreamer\" target=\"_blank\" rel=\"noopener\">FreeStreamer</a> - FreeStreamer流媒体音乐播放器，cpu占用非常小。</li>\n<li><a href=\"https://github.com/douban/DOUAudioStreamer\" target=\"_blank\" rel=\"noopener\">DOUAudioStreamer</a> - DOUAudioStreamer豆瓣的音乐流媒体播放器。</li>\n<li><a href=\"https://github.com/fmpro/fmpro\" target=\"_blank\" rel=\"noopener\">fmpro</a> - 电台播放器，支持锁屏歌词，支持基本播放流程，歌词展示，后台锁屏播放和控制以及锁屏后封面+歌词，<a href=\"https://github.com/jovisayhehe/fmpro_R\" target=\"_blank\" rel=\"noopener\">fmpro_R</a> 。</li>\n<li><a href=\"https://github.com/mmackh/IPDFCameraViewController\" target=\"_blank\" rel=\"noopener\">IPDFCameraViewController</a> - 支持相机定焦拍摄、滤镜、闪光、实时边框检测以及透视矫正功能，并有简单易用的API。 </li>\n<li><a href=\"https://github.com/rFlex/SCRecorder\" target=\"_blank\" rel=\"noopener\">SCRecorder</a> - 酷似 Instagram/Vine 的音频/视频摄像记录器，以 Objective-C 为基础的过滤器框架。 你可以做很多如下的操作：记录多个视频录像片段。删除任何你不想要的记录段。可以使用任何视频播放器播放片段。保存的记录可以在序列化的 NSDictionary 中使用。（在 NSUserDefaults 的中操作）添加使用 Core Image 的视频滤波器。可自由选择你需要的 parameters 合并和导出视频。</li>\n<li><a href=\"https://github.com/GabrielAlva/Cool-iOS-Camera\" target=\"_blank\" rel=\"noopener\">Cool-iOS-Camera</a> - Cool-iOS-Camera。</li>\n<li><a href=\"https://github.com/IFTTT/FastttCamera\" target=\"_blank\" rel=\"noopener\">FastttCamera</a> - FastttCamera 快速照相。</li>\n<li><a href=\"https://github.com/itsmeichigo/ICGVideoTrimmer\" target=\"_blank\" rel=\"noopener\">ICGVideoTrimmer</a> - ICGVideoTrimmer提供提供视频剪切的视图（类似系统相册中浏览视频时顶部那个条状视图）。左右两个边界选择器还能够自定义。</li>\n<li><a href=\"http://d.cocoachina.com/code/detail/285717\" target=\"_blank\" rel=\"noopener\">IOS录音和播放功能demo</a> - 比较完整的ios录音和播放功能的实现。</li>\n<li><a href=\"https://github.com/imaginary-cloud/CameraManager\" target=\"_blank\" rel=\"noopener\">CameraManager</a> - 相机管理封装类库。看着极好用的样子—-swift。</li>\n<li><a href=\"https://github.com/msching/MCAudioInputQueue\" target=\"_blank\" rel=\"noopener\">MCAudioInputQueue</a> - 简易录音类，基于AudioQueue的。</li>\n<li><a href=\"https://github.com/vizllx/DraggableYoutubeFloatingVideo\" target=\"_blank\" rel=\"noopener\">DraggableYoutubeFloatingVideo</a> - 展示像类似Youtube移动应用的那种浏览视频的效果，当点击某视频时能够从右下方弹出一个界面，并且该界面能够通过手势，再次收缩在右下方并继续播放。这是通过AutoLayout设计实现。</li>\n<li><a href=\"http://www.penguin.cz/~utx/amr\" target=\"_blank\" rel=\"noopener\">amr</a> - 做即时通讯的音频处理，录音文件是m4a，便于web端的音频播放。</li>\n<li><a href=\"https://github.com/f33chobits/FSVoiceBubble\" target=\"_blank\" rel=\"noopener\">FSVoiceBubble</a> - 一个轻量级播放录音音频的气泡：1.支持短时间的音频播放（支持网络音频）；2.播放时的声波动画；3.自定义包括声波的颜色，气泡的背景等。</li>\n<li><a href=\"https://github.com/36Kr-Mobile/KRVideoPlayer\" target=\"_blank\" rel=\"noopener\">KRVideoPlayer</a> - 类似Weico的播放器，支持竖屏模式下全屏播放。</li>\n<li><a href=\"http://code.cocoachina.com/view/128253\" target=\"_blank\" rel=\"noopener\">自定义视频播放器AVPlayer</a> - 利用系统类AVPlayer实现完全自定义视频播放器，显示播放时间，缓存等功能。代码清晰，注释详细。</li>\n<li><a href=\"https://github.com/xujingzhou/VideoBeautify\" target=\"_blank\" rel=\"noopener\">VideoBeautify</a> - 功能酷似美拍,秒拍等应用的源码：对视频进行各种美化处理，采用主题形式进行分类，内含各种滤镜，动画特效和音效等。</li>\n<li><a href=\"https://github.com/hanton/HTY360Player\" target=\"_blank\" rel=\"noopener\">HTY360Player</a> - 是一款提供在 iOS 中使用 360 度无死角拖拽视频进行不同角度播放的视频播放器。</li>\n<li><a href=\"https://github.com/AlexLittlejohn/ALCameraViewController\" target=\"_blank\" rel=\"noopener\">ALCameraViewController</a> - ALCameraViewController 摄像头视图控制器（含可定制照片选择器，图片简单裁切功能）及演示。</li>\n<li><a href=\"https://github.com/lfb-cd/recordDemo\" target=\"_blank\" rel=\"noopener\">recordDemo.swift</a> - 一个Swift语言实现直接可以用的录音Demo，<a href=\"http://www.jianshu.com/p/f0b88355d7cb\" target=\"_blank\" rel=\"noopener\">实现说明</a>。</li>\n<li><a href=\"https://github.com/swiftcodex/Swift-Radio-Pro\" target=\"_blank\" rel=\"noopener\">Swift-Radio-Pro</a> - 集成 LastFM 的专业电台应用（基于 Swift 2.0）。</li>\n<li><a href=\"https://github.com/coderyi/Eleven\" target=\"_blank\" rel=\"noopener\">Eleven</a> - Eleven Player - 一个使用 FFmpeg 实现的简单强大的 iOS 开源播放器。 </li>\n<li><a href=\"https://github.com/mobileplayer/mobileplayer-ios\" target=\"_blank\" rel=\"noopener\">mobileplayer-ios.swift</a> - 很不错的高度可定制播放器项目。 </li>\n<li><a href=\"https://github.com/lajos/iFrameExtractor\" target=\"_blank\" rel=\"noopener\">iFrameExtractor</a> - 开源视频播放器， ffmpeg在iOS的使用-iFrameExtractor源码解析，<a href=\"http://ios.jobbole.com/82408/\" target=\"_blank\" rel=\"noopener\">文章</a>。</li>\n<li><a href=\"https://github.com/gontovnik/Periscope-VideoViewController\" target=\"_blank\" rel=\"noopener\">Periscope-VideoViewController.swift</a> - 简洁实用的视频快进、倒带控制视图类库。</li>\n<li><a href=\"https://github.com/audiokit/AudioKit\" target=\"_blank\" rel=\"noopener\">AudioKit.swift</a> - 音频合成、加工及分析平台（支持 iOS、OS X、tvOS）框架库。无论其易用性，还是功能性及专业性。</li>\n<li><a href=\"https://github.com/menxu/MusicPlayert\" target=\"_blank\" rel=\"noopener\">MusicPlayert</a> - MusicPlayert本地音乐播放+音乐信息显示+在线歌词搜索显示（千千静听服务器）。</li>\n<li><a href=\"https://github.com/liuFangQiang/MusicPlayer\" target=\"_blank\" rel=\"noopener\">MusicPlayert</a> - MusicPlayert音乐播放器，用reveal可以查看层次关系，主要实现了歌词的同步显示。</li>\n<li><a href=\"http://code.cocoachina.com/view/129435\" target=\"_blank\" rel=\"noopener\">音乐播放器</a> - 音乐播放器：显示歌词。</li>\n<li><a href=\"https://github.com/suifengqjn/TBPlayer\" target=\"_blank\" rel=\"noopener\">TBPlayer</a> - 视频变下变播，把播放器播放过的数据流缓存到本地，支持拖动。采用avplayer。<a href=\"http://www.jianshu.com/p/990ee3db0563\" target=\"_blank\" rel=\"noopener\">实现说明</a></li>\n</ul>\n<p>========</p>\n<h4 id=\"响应式框架\"><a href=\"#响应式框架\" class=\"headerlink\" title=\"响应式框架\"></a>响应式框架</h4><ul>\n<li><a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa\" target=\"_blank\" rel=\"noopener\">ReactiveCocoa</a> - ReactiveCocoa 受函数响应式编程激发。不同于使用可变的变量替换和就地修改，RAC提供Signals来捕获当前值和将来值（ <a href=\"http://yulingtianxia.com/blog/2014/07/29/reactivecocoa/\" target=\"_blank\" rel=\"noopener\">使用介绍</a> ），<a href=\"http://iiiyu.com/2014/12/26/learning-ios-notes-thirty-six/\" target=\"_blank\" rel=\"noopener\">不错的例子</a>,入门好教程：<a href=\"http://www.cocoachina.com/ios/20150123/10994.html\" target=\"_blank\" rel=\"noopener\">ReactiveCocoa入门教程：第一部分 </a>。<a href=\"http://ios.jobbole.com/82232/\" target=\"_blank\" rel=\"noopener\">Reactive Cocoa 3.0 在 MVVM 中的应用</a> ,<a href=\"http://www.jianshu.com/p/87ef6720a096\" target=\"_blank\" rel=\"noopener\">小码哥：快速让你上手ReactiveCocoa之基础篇</a>。</li>\n<li><a href=\"https://github.com/ReactiveCocoa/ReactiveAnimation\" target=\"_blank\" rel=\"noopener\">ReactiveAnimation</a> - ReactiveCocoa 推出了一个叫 ReactiveAnimation 的子项目，直接用完全用 Swift 来实现了。</li>\n<li><a href=\"https://github.com/gavinkwoe/BeeFramework\" target=\"_blank\" rel=\"noopener\">BeeFramework</a> -  与ReactiveCocoa类似，<a href=\"http://www.lanrenios.com/tutorials/all/2012/1220/641.html\" target=\"_blank\" rel=\"noopener\">BeeFramework用户指南 v1.0</a>。</li>\n<li><a href=\"https://github.com/iMartinKiss/Objective-Chain\" target=\"_blank\" rel=\"noopener\">Objective-Chain</a> - Objective-Chain是一个面向对象的响应式框架，作者表示该框架吸收了 ReactiveCocoa 的思想，并且想做得更面向对象一些。</li>\n<li><a href=\"https://github.com/ReactiveX/RxSwift\" target=\"_blank\" rel=\"noopener\">RxSwift</a> - RxSwift。 </li>\n<li><a href=\"https://github.com/bppr/Swiftest\" target=\"_blank\" rel=\"noopener\">Swiftest</a> - BDD 全称 Behavior Driven Development，行为驱动开发。各种 DD 数不胜数，孰优孰劣争论不休，其实归根结底还是要根据使用场景进行选择。</li>\n<li><a href=\"https://github.com/lovemo/MVVMFramework\" target=\"_blank\" rel=\"noopener\">MVVMFramework</a> - (OC版)总结整理下一个快速开发框架，分离控制器中创建tableView和collectionView的代码，已加入cell自适应高度，降低代码耦合，提高开发效率。<a href=\"https://github.com/lovemo/MVVMFramework-Swift\" target=\"_blank\" rel=\"noopener\">MVVMFramework-Swift</a> - swift版本。</li>\n</ul>\n<p>========</p>\n<h4 id=\"消息相关\"><a href=\"#消息相关\" class=\"headerlink\" title=\"消息相关\"></a>消息相关</h4><h5 id=\"消息推送客户端\"><a href=\"#消息推送客户端\" class=\"headerlink\" title=\"消息推送客户端\"></a>消息推送客户端</h5><ul>\n<li><a href=\"https://github.com/sagiwei/SGPush/tree/master/SGPushDemo\" target=\"_blank\" rel=\"noopener\">SGPushDemo</a> - 消息推送客户端</li>\n<li><a href=\"https://github.com/mattt/Orbiter\" target=\"_blank\" rel=\"noopener\">Orbiter</a> - 消息推送客户端:Push Notification Registration for iOS.</li>\n<li><a href=\"https://github.com/ios44first/PushDemo\" target=\"_blank\" rel=\"noopener\">PushDemo</a> - 客户端消息接收消息代码，<a href=\"http://blog.sina.com.cn/s/blog_71715bf80102uy2k.html\" target=\"_blank\" rel=\"noopener\">IOS开发之 —- IOS8推送消息注册</a> ， <a href=\"http://my.oschina.net/u/2340880/blog/413584\" target=\"_blank\" rel=\"noopener\">分分钟搞定IOS远程消息推送</a>。</li>\n</ul>\n<h5 id=\"消息推送服务端\"><a href=\"#消息推送服务端\" class=\"headerlink\" title=\"消息推送服务端\"></a>消息推送服务端</h5><ul>\n<li><a href=\"https://code.google.com/p/javapns/downloads/list\" target=\"_blank\" rel=\"noopener\">javapns源代码</a> - 消息推送的java服务端代码，注意：DeviceToken中间不能有空格。</li>\n<li><a href=\"https://github.com/stefanhafeneger/PushMeBaby\" target=\"_blank\" rel=\"noopener\">pushMeBaby</a> - Mac端消息推送端代码，注意：DeviceToken中间要有空格。</li>\n</ul>\n<h5 id=\"通知相关\"><a href=\"#通知相关\" class=\"headerlink\" title=\"通知相关\"></a>通知相关</h5><ul>\n<li><a href=\"https://github.com/jessesquires/JSQNotificationObserverKit\" target=\"_blank\" rel=\"noopener\">JSQNotificationObserverKit</a> - 一款轻量、易用的通知发送及响应框架类库。作者是知名开源项目 JSQMessagesViewController（Objective-C 版即时聊天）的作者 Jesse Squires.</li>\n<li><a href=\"https://github.com/Glow-Inc/GLPubSub\" target=\"_blank\" rel=\"noopener\">GLPubSub</a> - 一个简短实用的 NSNotificationCenter 的封装。</li>\n<li><a href=\"https://github.com/lizyyy/Homeoff\" target=\"_blank\" rel=\"noopener\">Homeoff</a> - 用swift写了一个模仿Launcher通知中心快捷方式的应用。支持20个应用，并增加了一个返回到桌面来解放Home键的功能。</li>\n<li><a href=\"https://github.com/jaydee3/JDStatusBarNotification\" target=\"_blank\" rel=\"noopener\">JDStatusBarNotification</a> - 在状态栏顶部显示通知。可以自定义颜色字体以及动画。支持进度显示以及显示状态指示器。</li>\n</ul>\n<p>========</p>\n<h4 id=\"版本新API的Demo\"><a href=\"#版本新API的Demo\" class=\"headerlink\" title=\"版本新API的Demo\"></a>版本新API的Demo</h4><ul>\n<li><a href=\"https://github.com/WildDylan/appleSample\" target=\"_blank\" rel=\"noopener\">appleSample</a> - iOS 苹果官方Demo合集， <a href=\"https://developer.apple.com/library/ios/navigation/#section=Resource%20Types&amp;topic=Sample%20Code\" target=\"_blank\" rel=\"noopener\">官方demo</a>.</li>\n<li><a href=\"https://github.com/shu223/iOS7-Sampler\" target=\"_blank\" rel=\"noopener\">iOS7-Sampler</a> - 整合了iOS7.0的一些十分有用的特性，比如：Dynamic Behaviors、碰撞检测、语音合成、视图切换、图像滤镜、三维地图、Sprite Kit（动画精灵）、Motion Effect（Parallax）、附近蓝牙或者wifi搜索连接、AirDrop、运动物体追踪（iPhone 5S以上，需要M7处理器）等等。对于日常的应用开发十分实用。 </li>\n<li><a href=\"https://github.com/shu223/iOS8-Sampler\" target=\"_blank\" rel=\"noopener\">iOS8-Sampler</a> - 日本的shuさん制作的 iOS8 参考代码集。01.Audio Effects ；02.New Image Filters；03.Custom Filters；04.Metal Basic；05.Metal Uniform Streaming；06.SceneKit；07.HealthKit；08.TouchID；09.Visual Effects；10.WebKit；11.UIAlertController；12.User Notification；13.Pedometer；14.AVKit；15.Histogram；16.Code Generator；17.New Fonts；18.Popover；19.Accordion Fold Transition</li>\n<li><a href=\"https://github.com/shu223/iOS-9-Sampler\" target=\"_blank\" rel=\"noopener\">iOS-9-Sampler</a> - 通过实例介绍了iOS 9 SDK中重要新特性的使用。</li>\n<li><a href=\"https://github.com/MartinRGB/MTSwift-Learning\" target=\"_blank\" rel=\"noopener\">MTSwift-Learning</a> - 通过一些简单项目实战演练开始学习 Swift 。</li>\n<li><a href=\"https://github.com/shinobicontrols/iOS8-day-by-day\" target=\"_blank\" rel=\"noopener\">iOS8-day-by-day</a> - swift。</li>\n<li><a href=\"https://github.com/shinobicontrols/iOS9-day-by-day\" target=\"_blank\" rel=\"noopener\">iOS9-day-by-day</a> - swfit <a href=\"http://www.jianshu.com/p/039f8de6ee4d\" target=\"_blank\" rel=\"noopener\">iOS9 Day-by-Day :: Day 2 :: UI Testing</a>。</li>\n<li><a href=\"http://www.cocoachina.com/ios/20150714/12557.html\" target=\"_blank\" rel=\"noopener\">iOS 9 分屏多任务</a> - iOS 9 分屏多任务：Slide Over &amp; Split View快速入门（中文版）。</li>\n<li><a href=\"https://github.com/uraimo/uistackview-sample\" target=\"_blank\" rel=\"noopener\">uistackview-sample.swift</a> - iOS 9 引进了 UIStackViews，提供 auto-layout 特性。如果你开发过 Android 应用，会发现它和 LinearLayouts 概念上很类似，它是增强版。你可以手动创建，也可以使用 IB 自动创建，本文用的是代码实现。</li>\n</ul>\n<p>========</p>\n<h4 id=\"代码安全与密码\"><a href=\"#代码安全与密码\" class=\"headerlink\" title=\"代码安全与密码\"></a>代码安全与密码</h4><ul>\n<li><a href=\"https://github.com/Polidea/ios-class-guard\" target=\"_blank\" rel=\"noopener\">ios-class-guard</a> - 一个用于混淆iOS的类名、方法名以及变量名的开源库–有人反映编译出来的app运行不了。</li>\n<li><a href=\"https://www.polidea.com/#!heartbeat/blog/Protecting_iOS_Applications\" target=\"_blank\" rel=\"noopener\">《Protecting iOS Applications》</a>：文章系统地介绍了如何保护iOS程序的代码安全，防止反汇编分析。</li>\n<li><a href=\"https://github.com/facebook/fishhook\" target=\"_blank\" rel=\"noopener\">fishhook</a> - fishhook是Facebook开源的一个可以hook系统方法的工具。</li>\n<li><a href=\"https://github.com/smilingxinyi/GesturePassword\" target=\"_blank\" rel=\"noopener\">GesturePassword</a> - 一个iOS手势密码功能实现，iPad/iPhone 都可以用，没有使用图片，里面可以通过view自己添加。keychain做的数据持久化，利用苹果官方KeychainItemWrapper类。操作部分都在controller了。删除直接用一下clear。</li>\n<li><a href=\"https://github.com/Juuman/JMPasswordView\" target=\"_blank\" rel=\"noopener\">JMPasswordView</a> - 简单实用的手势密码，效果可自行调控。</li>\n<li><a href=\"http://code.cocoachina.com/detail/298556/%E4%BB%BF%E5%AF%86%E7%A0%81%E9%94%81-%E4%B9%9D%E5%AE%AB%E6%A0%BC/\" target=\"_blank\" rel=\"noopener\">仿密码锁-九宫格</a> - 仿密码锁-九宫格，主要是使用UIButton 手势事件  UIBezierPath画图，解锁失败弹出“密码错误”。</li>\n<li><a href=\"https://github.com/nsdictionary/CoreLock\" target=\"_blank\" rel=\"noopener\">CoreLock</a> - 本框架是高仿支付宝，并集成了所有功能，并非一个简单的解锁界面展示。个人制作用时1周多，打造解锁终结者框架。</li>\n<li><a href=\"https://github.com/crazypoo/LikeAlipayLockCodeView\" target=\"_blank\" rel=\"noopener\">LikeAlipayLockCodeView</a> - 高仿支付宝手势解锁（超级版）。</li>\n<li><a href=\"https://github.com/iosdeveloperpanc/PCGestureUnlock\" target=\"_blank\" rel=\"noopener\">PCGestureUnlock</a> - 目前最全面最高仿支付宝的手势解锁，而且提供方法进行参数修改，能解决项目开发中所有手势解锁的开发。</li>\n<li><a href=\"https://github.com/icoder20150719/ICPayPassWordDemo\" target=\"_blank\" rel=\"noopener\">ICPayPassWordDemo</a> - CPayPassWordDemo，一个模仿支付宝支付密码输入对话框小demo。</li>\n<li><a href=\"https://github.com/bigsan/RSAESCryptor\" target=\"_blank\" rel=\"noopener\">RSAESCryptor</a> - 加密 RSA+AES Encryption/Decryption library for iOS. This library uses 2048-bit RSA and 256-bit key with 128-bit block size AES for encryption/decryption。</li>\n<li><a href=\"https://github.com/bringbird/WJTouchID\" target=\"_blank\" rel=\"noopener\">WJTouchID</a> - 用法简单的TouchID验证框架：两行代码搞定。</li>\n</ul>\n<p>========</p>\n<h4 id=\"测试及调试\"><a href=\"#测试及调试\" class=\"headerlink\" title=\"测试及调试\"></a>测试及调试</h4><ul>\n<li><a href=\"https://github.com/tapwork/HeapInspector-for-iOS\" target=\"_blank\" rel=\"noopener\">HeapInspector</a> - HeapInspector是一个用于检测应用中的内存泄漏的开源调试工具。</li>\n<li><a href=\"http://try.crashlytics.com/\" target=\"_blank\" rel=\"noopener\">Crashlytics</a> - Crashlytics 崩溃报告 崩溃日志   <a href=\"http://www.infoq.com/cn/articles/crashlytics-crash-statistics-tools\" target=\"_blank\" rel=\"noopener\">使用说明</a> 。</li>\n<li><a href=\"https://github.com/RuiAAPeres/UIViewController-Swizzled\" target=\"_blank\" rel=\"noopener\">UIViewController-Swizzled</a> - 把你进入的每一个controller的类名打出来,如果看一些特别复杂的项目的时候直接运行demo就可以知道执行次序了。</li>\n<li><a href=\"https://code.google.com/p/snoop-it/\" target=\"_blank\" rel=\"noopener\">snoop-it</a> - snoop-it比UIViewController-Swizzled好用，代码托管在google上。</li>\n<li><a href=\"https://github.com/zenangst/Versions\" target=\"_blank\" rel=\"noopener\">Versions</a> - 版本比较小工具。</li>\n<li><a href=\"http://code4app.com/ios/MobileWebPerformanceTest/5465d3e9933bf00c658b4f43\" target=\"_blank\" rel=\"noopener\">MobileWebPageTest</a> - MobileWebPageTest是用来测试移动网页性能的软件，它可以对页面的加载和渲染过程进行截屏，协助开发者分析出页面性能瓶颈。</li>\n<li><a href=\"https://github.com/Coneboy-k/KKLog\" target=\"_blank\" rel=\"noopener\">KKLog</a> - 一个日志管理系统。</li>\n<li><a href=\"https://github.com/emaloney/CleanroomLogger\" target=\"_blank\" rel=\"noopener\">CleanroomLogger</a> - 相当于 CocoaLumberjack 或 Log4j 的 Swift 版本，功能上甚至更强大。另外，源代码中已经内含了完整的 API 文档，使用非常方便。</li>\n<li><a href=\"https://github.com/czechboy0/Buildasaur\" target=\"_blank\" rel=\"noopener\">Buildasaur</a> - 自动测试框架 Buildasaur。</li>\n<li><a href=\"http://www.devtf.cn/?p=739\" target=\"_blank\" rel=\"noopener\">使用Quick框架和Nimble来测试ViewControler</a> - Quick是一个用于创建BDD测试的框架。配合Nimbl，可以为你创建更符合预期目标的测试。</li>\n<li><a href=\"https://github.com/KrauseFx/fastlane\" target=\"_blank\" rel=\"noopener\">fastlane</a> - 一套iOS开发和持续集成的命令行工具fastlane，可以用来快速搭建CI甚至自动提交的开发环境。这套工具中包括了上传ipa文件，自动截取多语言截屏，生成推送证书，管理产品证书等一系列实用工具。</li>\n<li><a href=\"https://github.com/kif-framework/KIF\" target=\"_blank\" rel=\"noopener\">KIF</a> - 是一个开源的用户界面UI测试框架. 使用 KIF, 并利用 iOS中的辅助功能 API, 你将能够编写模拟用户输入，诸如点击，触摸和文本输入，自动化的UI测试.</li>\n<li><a href=\"https://github.com/Quick/Quick\" target=\"_blank\" rel=\"noopener\">Quick</a> - 用于Swift中的单元测试（也可用于Objective-C），与Xcode整合在一起。如果你是Objective-C的粉丝，我建议用Specta代替这个，但是对Swift使用者来说，Quick是最佳选择。</li>\n<li><a href=\"https://github.com/railsware/Sleipnir\" target=\"_blank\" rel=\"noopener\">Sleipnir</a> - Swift的测试框架。</li>\n<li><a href=\"https://github.com/kiwi-bdd/Kiwi/wiki\" target=\"_blank\" rel=\"noopener\">kiwi-bdd</a> - TDD或BDD，objective-c语言的测试框架，最流行的BDD测试框架了，Kiwi最受欢迎（根据github上的star数来推断，行为描述和期望写起来也比较易懂，至少我是这么认为的） <a href=\"http://www.jianshu.com/p/7e3f197504c1#\" target=\"_blank\" rel=\"noopener\">iOS开发中的测试框架</a>。</li>\n<li><a href=\"https://github.com/specta/specta\" target=\"_blank\" rel=\"noopener\">specta</a> -  TDD或BDD，objective-c语言的测试框架，用的人多。</li>\n<li><a href=\"https://github.com/pivotal/cedar\" target=\"_blank\" rel=\"noopener\">cedar</a> -  TDD或BDD，objective-c语言的测试框架，用的人少。</li>\n<li><a href=\"https://github.com/daisuke0131/ViewMonitor\" target=\"_blank\" rel=\"noopener\">ViewMonitor</a> - 能够帮助 iOS 开发者们精确的测量视图, 可直接在调试应用中查看具体某个视图的坐标, 宽高等参数。</li>\n<li><a href=\"https://github.com/adad184/MMPlaceHolder\" target=\"_blank\" rel=\"noopener\">MMPlaceHolder</a> - 一行代码显示UIView的位置及相关参数。</li>\n<li><a href=\"https://github.com/adad184/XXPlaceHolder\" target=\"_blank\" rel=\"noopener\">XXPlaceHolder.swift</a> - MMPlaceHolder的swift版本。 </li>\n<li><a href=\"https://github.com/kconner/KMCGeigerCounter\" target=\"_blank\" rel=\"noopener\">KMCGeigerCounter</a> - KMCGeigerCounter通过复杂和简单的视图演示了类似盖革计数器的帧速计算功能。掉帧通常是可见的，但是很难区分55fps和60fps之间的不同，而KMCGeigerCounter可以让你观测到掉落5帧的情况。</li>\n<li><a href=\"https://github.com/SwiftyBeaver/SwiftyBeaver\" target=\"_blank\" rel=\"noopener\">SwiftyBeaver</a> - 一个完善的日志工具，支持彩色输出、输出内容到文件、重要性分级、多输出目标。工具执行在后台，不影响性能，可以极大提高开发效率。</li>\n<li><a href=\"https://github.com/SwiftKit/Cuckoo\" target=\"_blank\" rel=\"noopener\">Cuckoo.swift</a> - Cuckoo.swift一款用法更接近于传统单元测试 Mock 框架库（区别之处在于需要用脚本预先生成 Mock 类）。</li>\n</ul>\n<p>========</p>\n<h4 id=\"AppleWatch\"><a href=\"#AppleWatch\" class=\"headerlink\" title=\"AppleWatch\"></a>AppleWatch</h4><ul>\n<li><a href=\"https://github.com/eleks/rnd-apple-watch-tesla\" target=\"_blank\" rel=\"noopener\">Tesla汽车AppleWatch app demo演示</a> - 通过AppleWatch控制特斯拉汽车，同时可以看到汽车的相关信息，比如剩余电量、可续行里程等，以及解锁/上锁车门、调节司机和乘客的四区域空调温度、开启车辆大灯、定位汽车等。<a href=\"http://www.cocoachina.com/ios/20150205/11116.html\" target=\"_blank\" rel=\"noopener\">源码推荐说明</a>。 </li>\n<li><a href=\"https://github.com/kostiakoval/WatchKit-Apps\" target=\"_blank\" rel=\"noopener\">WatchKit-Apps</a> - WatchKit 开源小项目示例集锦。是不可多得地学习 WatchKit 的示例式教程（1.如何创建一个简单的交互式计数器；2.如何从手表上控制iOS app；3.如何在WatchKit app和iOS app之间共享数据；4.如何创建一个拥有不同背景色的数字时钟；5.展示不同的UI层；6.如何创建支持滑动手势的应用程序。）。 </li>\n<li><a href=\"https://github.com/KittenYang/KYVoiceCurve\" target=\"_blank\" rel=\"noopener\">KYVoiceCurve</a> - 类似Apple Watch中语音的声音曲线动画。  </li>\n<li><a href=\"https://github.com/Instagram/IGInterfaceDataTable\" target=\"_blank\" rel=\"noopener\">IGInterfaceDataTable</a> - IGInterfaceDataTable是WKInterfaceTable对象的一个类别，可以让开发者更简单地配置多维数据。该项目使用类似UITableViewDataSource的数据源模式配置Apple Watch表格，而不是将数据结构扁平化成为数组。  </li>\n<li><a href=\"http://www.swiftkiller.com/?p=613\" target=\"_blank\" rel=\"noopener\">Apple Watch开发教程资料汇总</a> - Apple Watch开发教程资料汇总。</li>\n<li><a href=\"https://github.com/contentful-labs/Stargate\" target=\"_blank\" rel=\"noopener\">Stargate</a> - 通过 iPhone 桥接实现 Mac 与 Watch 的即时通讯。Stargate 通过封装两个优秀的基础类库 MMWormhole 和 PeerKit 实现高效的通讯应用。–swift</li>\n<li><a href=\"https://github.com/sandofsky/soon\" target=\"_blank\" rel=\"noopener\">soon</a> - 一款倒计时 WatchKit 示例应用。作者从架构的角度，思考如何设计一款完整、通讯高效且性能又好的 WatchKit 扩展应用。该示例学习性非常强。–swift</li>\n<li><a href=\"https://github.com/shu223/watchOS-2-Sampler\" target=\"_blank\" rel=\"noopener\">watchOS-2-Sampler</a> - 基于 watchOS 2 若干新特性，写了相应的示例代码供大家学习、参考。</li>\n<li><a href=\"https://github.com/KhaosT/HMWatch\" target=\"_blank\" rel=\"noopener\">HMWatch</a> - HMWatch是个有待完善的watchOS 2.0 HomeKit 应用示例。</li>\n<li><a href=\"https://github.com/manavgabhawala/CocoaMultipeer\" target=\"_blank\" rel=\"noopener\">CocoaMultipeer</a> - CocoaMultipeer这个开源框架支持OS X, iOS和watchOS设备间的点对点通信，解决watchOS和Mac之间通信的方案还是很有用的。</li>\n<li><a href=\"https://github.com/GetHighstreet/HighstreetWatchApp\" target=\"_blank\" rel=\"noopener\">HighstreetWatchApp</a> - 是电商平台Highstreet针对App Watch的一款应用，该demo中加载的是虚拟数据。</li>\n<li><a href=\"https://github.com/NilStack/NKWatchChart\" target=\"_blank\" rel=\"noopener\">NKWatchChart</a> - NKWatchChart是一个基于PNChart专门为Apple Watch 开发的图表库,目前支持 line, bar, pie, circle 和 radar 等 图表形式。</li>\n<li><a href=\"https://github.com/diwu/BeijingAirWatch\" target=\"_blank\" rel=\"noopener\">BeijingAirWatch</a> - 国人的开源项目代码 ！WatchOS 2.0 Complication of Real-time Air Quality for Major Chinese Cities 苹果表盘实时刷新北上广沈蓉空气质量。</li>\n</ul>\n<p>========</p>\n<h4 id=\"VPN\"><a href=\"#VPN\" class=\"headerlink\" title=\"VPN\"></a>VPN</h4><ul>\n<li><a href=\"https://github.com/lexrus/vpnon/\" target=\"_blank\" rel=\"noopener\">vpnon</a> - swift的VPN On 的源码和本地化内容都是开放的: <a href=\"https://crowdin.com/project/vpnon\" target=\"_blank\" rel=\"noopener\">官方网站</a>。</li>\n<li><a href=\"https://github.com/CatchChat/Hydro.network\" target=\"_blank\" rel=\"noopener\">Hydro.network</a> - <a href=\"http://zhowkev.in/2015/03/09/hydro-network-de-kai-fa-lu-cheng/\" target=\"_blank\" rel=\"noopener\">Hydro.network 的开发旅程</a>, <a href=\"https://gitcafe.com/Catch/Hydro.network\" target=\"_blank\" rel=\"noopener\">gitcafe</a>。</li>\n</ul>\n<p>========</p>\n<h4 id=\"完整项目\"><a href=\"#完整项目\" class=\"headerlink\" title=\"完整项目\"></a>完整项目</h4><ul>\n<li><a href=\"https://github.com/singro/v2ex\" target=\"_blank\" rel=\"noopener\">v2ex</a> - v2ex 的客户端，新闻、论坛。</li>\n<li><a href=\"https://github.com/iAugux/iBBS-Swift\" target=\"_blank\" rel=\"noopener\">iBBS-Swift</a> - “新手开源一个用Swift（2.0）写的论坛客户端”。<a href=\"http://obbs.sinaapp.com/\" target=\"_blank\" rel=\"noopener\">BBS 服务端</a>。 </li>\n<li><a href=\"https://github.com/wikimedia/apps-ios-wikipedia\" target=\"_blank\" rel=\"noopener\">apps-ios-wikipedia</a> - apps-ios-wikipedia 客户端。 </li>\n<li><a href=\"https://github.com/uber/jetstream-ios\" target=\"_blank\" rel=\"noopener\">jetstream-ios</a> - 一款 Uber 的 MVC 框架。它同时提供了多用户实时通讯支持，一旦启动 JetStream 后端服务，通过 WebSocket 协议可以分分钟建立多用户实时通讯应用。</li>\n<li><a href=\"https://github.com/jpsim/DeckRocket\" target=\"_blank\" rel=\"noopener\">DeckRocket</a> - 在相同 WiFi 网络环境内，通过iPhone 控制并播放 Mac 中的 PDF 文档。</li>\n<li><a href=\"https://github.com/JayFang1993/ScanBook\" target=\"_blank\" rel=\"noopener\">ScanBook</a> - 扫扫图书:可以扫描条形码查询图书，也可以关键字搜索，遇到合乎你口味的书，还可以看看别人的读书笔记，不同角度去体会。</li>\n<li><a href=\"https://github.com/MengTo/DesignerNewsApp\" target=\"_blank\" rel=\"noopener\">DesignerNewsApp</a> - Swift 开发的 DesignerNews 客户端，看着美美的！</li>\n<li><a href=\"https://github.com/KittenYang/KYWeibo\" target=\"_blank\" rel=\"noopener\">KYWeibo</a> - 调用新浪API自己写的第三方微博客户端。</li>\n<li><a href=\"https://github.com/li6185377/DouQu_IOS\" target=\"_blank\" rel=\"noopener\">DouQu_IOS</a> - 逗趣IOS手机端（一款笑话软件）,拥有完整的功能的手机应用app 。</li>\n<li><a href=\"https://github.com/itjhDev/itjh\" target=\"_blank\" rel=\"noopener\">IT江湖iOS客户端</a> - IT江湖iOS客户端。</li>\n<li><a href=\"https://github.com/artsy/eidolon\" target=\"_blank\" rel=\"noopener\">Eidolon</a> - 艺术品拍卖的投标亭平台，用swift与反应式编程框架 ReactiveCocoa。</li>\n<li><a href=\"https://github.com/nonstriater/CrazyPuzzle\" target=\"_blank\" rel=\"noopener\">CrazyPuzzle</a> - 模仿“看图猜成语”App，功能齐全，配有音效，效果很不错。游戏使用cocoa框架完成，没有使用cocos2d的框架。</li>\n<li><a href=\"https://github.com/Tim9Liu9/WhoCall\" target=\"_blank\" rel=\"noopener\">WhoCall</a> - 谁CALL我，iOS来电信息语音提醒，无需越狱。（需要iOS 7.0及以上版本。)骚扰电话预警、来电归属地提醒、联系人姓名播报，这些有中国特色人性化的电话功能，iOS上也应该有。电话提醒、私有API。</li>\n<li><a href=\"http://www.devtf.cn/?p=562\" target=\"_blank\" rel=\"noopener\">仿iOS猎豹垃圾清理(实现原理+源码)</a> -  仿iOS猎豹垃圾清理(实现原理+源码),用到私有API。</li>\n<li><a href=\"https://github.com/sam408130/DSLolita\" target=\"_blank\" rel=\"noopener\">DSLolita</a> - 模仿新浪微博做的一款app，有发送博文，评论，点赞，私聊功能。</li>\n<li><a href=\"https://github.com/STShenZhaoliang/STPhotoBrowser\" target=\"_blank\" rel=\"noopener\">STPhotoBrowser</a> - 高仿新浪微博的图片浏览器，极佳的编写方式，易扩展，低耦合。</li>\n<li><a href=\"https://github.com/gsdios/GSD_ZHIFUBAO\" target=\"_blank\" rel=\"noopener\">GSD_ZHIFUBAO</a> - 支付宝高仿版。 </li>\n<li><a href=\"https://github.com/thoughtbot/Tropos\" target=\"_blank\" rel=\"noopener\">Tropos</a> - Tropos, 由 thoughtbot 推出的一款用 Objective-C 写的开源天气类应用, 截至今天, thoughtbot 已在 GitHub 上贡献了 174 个开源项目, 实在令人敬佩。 </li>\n<li><a href=\"https://github.com/liu044100/SmileWeather\" target=\"_blank\" rel=\"noopener\">SmileWeather</a> -开源天气类应用,天气图标很完整。  </li>\n<li><a href=\"https://github.com/leichunfeng/MVVMReactiveCocoa\" target=\"_blank\" rel=\"noopener\">MVVMReactiveCocoa</a> - GitBucket 2.0 通过审核啦，她是我在公司实践了一年多 MVVM 和 RAC 的基础上，利用业余时间开发的第三方 GitHub 客户端，旨在能够对想实践 MVVM 和 RAC 的 iOS 开发者有所帮助。<a href=\"https://itunes.apple.com/cn/app/id961330940?mt=8\" target=\"_blank\" rel=\"noopener\">AppStore地址</a>，欢迎下载使用GitBucket和收藏MVVMReactiveCocoa。 </li>\n<li><a href=\"https://github.com/dasdom/Tomate\" target=\"_blank\" rel=\"noopener\">Tomate</a> - 这个圆盘式计时器让你更专注于工作或学习。P.S. App Store 上架收费应用（0.99 欧）。</li>\n<li><a href=\"https://github.com/joeshang/StoveFireiOSMenu\" target=\"_blank\" rel=\"noopener\">StoveFireiOSMenu</a> - 炉火餐饮系统iPad点餐端。</li>\n<li><a href=\"https://github.com/belm/BaiduFM-Swift\" target=\"_blank\" rel=\"noopener\">BaiduFM-Swift</a> - 百度FM, swift语言实现，基于最新xcode6.3+swift1.2,初步只是为了实现功能，代码比较粗燥，后面有时间会整理，支持Apple Watch。</li>\n<li><a href=\"https://github.com/ZhongTaoTian/WNXHuntForCity\" target=\"_blank\" rel=\"noopener\">WNXHuntForCity</a> - iOS高仿城觅项目（开发思路和代码）。</li>\n<li><a href=\"https://github.com/zyprosoft/ZYChat\" target=\"_blank\" rel=\"noopener\">ZYChat</a> - 关于聊天界面的可消息类型扩展，响应绑定设计。</li>\n<li><a href=\"https://github.com/minxiaoming/NiceAppDemo\" target=\"_blank\" rel=\"noopener\">NiceAppDemo</a> - 仿最美应用-每日最美的钢琴律动效果。</li>\n<li><a href=\"https://github.com/lookingstars/meituan\" target=\"_blank\" rel=\"noopener\">meituan</a> - 美团5.7iOS版（高仿），功能包括，团购首页，高德地图搜索附近美食并显示在地图上，上门服务，商家，友盟分享。</li>\n<li><a href=\"https://github.com/zangqilong198812/MeituanDemo\" target=\"_blank\" rel=\"noopener\">MeituanDemo</a> - 造美团应用界面构建的 iOS 应用, 第一个是 @叶孤城___ 的 MeituanDemo。</li>\n<li><a href=\"https://github.com/tubie/JFMeiTuan\" target=\"_blank\" rel=\"noopener\">JFMeiTuan</a> - 造美团应用界面构建的 iOS 应用, 第二个是 @tubiebutu 的 JFMeiTuan。</li>\n<li><a href=\"https://github.com/lookingstars/chuanke\" target=\"_blank\" rel=\"noopener\">chuanke</a> - 高仿百度传课iOS版。 </li>\n<li><a href=\"https://github.com/aiqiuqiu/Tuan\" target=\"_blank\" rel=\"noopener\">Tuan</a> - 模仿MJ老师iPad版美团（swift版），偶有bug 见谅。</li>\n<li><a href=\"https://github.com/dsxNiubility/SXNews\" target=\"_blank\" rel=\"noopener\">SXNews</a> - 模仿网易新闻做的新闻软件，完成了主导航页，新闻详情页，图片浏览页，评论页。效果不错，比网上流传的各种和网易新闻UI架构有关的代码都要完整，都要好。</li>\n<li><a href=\"https://github.com/coderyi/Monkey\" target=\"_blank\" rel=\"noopener\">Monkey</a> - Monkey for GitHub是一个GitHub开发者和仓库排名的开源App。这次主要增加了登录GitHub的功能，随手follow和star，并且增加发现模块，包括GitHub的trending，动态，showcases等。</li>\n<li><a href=\"https://github.com/callmewhy/Uther\" target=\"_blank\" rel=\"noopener\">Uther</a> -  跟蠢萌的外星人聊天，还能帮你记事”。<a href=\"https://itunes.apple.com/cn/app/uther/id1024104920\" target=\"_blank\" rel=\"noopener\">itunes下载</a> 。</li>\n<li><a href=\"https://github.com/zixun/CocoaChinaPlus\" target=\"_blank\" rel=\"noopener\">CocoaChinaPlus</a> - CocoaChina+是一款开源的第三方CocoaChina移动端。整个App都用Swift2.0编写(除部分第三方OC代码外，比如JPush和友盟)。</li>\n<li><a href=\"http://code.cocoachina.com/view/128246\" target=\"_blank\" rel=\"noopener\">高仿斗鱼TV</a> - 高仿斗鱼TV，点击头部滚动视图可以播放视频。</li>\n<li><a href=\"https://github.com/LonelyTown/LXZEALER\" target=\"_blank\" rel=\"noopener\">LXZEALER</a> - 模仿着做了zealer客户端,App里几乎所有请求都是Post,所以内容都是固定的URL加载的,登录功能只做了微博的第三方登录。</li>\n<li><a href=\"https://github.com/pengleelove/ShiXiSeng_ios\" target=\"_blank\" rel=\"noopener\">ShiXiSeng_ios</a> - 完整app的UI框架。</li>\n<li><a href=\"https://github.com/Coding/Coding-iPad\" target=\"_blank\" rel=\"noopener\">Coding-iPad</a> - Coding-iPad 是@Coding的官方 iPad 客户端, 又是一个完整的开源应用。</li>\n<li><a href=\"https://github.com/likumb/SimpleMemo\" target=\"_blank\" rel=\"noopener\">SimpleMemo</a> - 易便签已经转到Swift2.0，全面适配iOS9和Watch OS2，并支持iPhone6s和iPhone6sPlus的3D Touch功能，包括图标快捷键和内容预览。</li>\n<li><a href=\"https://github.com/xxycode/XXYAudioEngine\" target=\"_blank\" rel=\"noopener\">XXYAudioEngine.swift</a> - 基于NSURLSession 和 AVAudoPlayer的在线音乐的工具，可以把音乐保存在本地，也可以支持后台播放，后台下载，最低支持iOS7，swift版本1.2。</li>\n<li><a href=\"https://github.com/twitterdev/furni-ios\" target=\"_blank\" rel=\"noopener\">furni-ios.swift</a> - furni-ios.swift是由 Twitter 开发团队出品的一款用 Swift 写的 iOS 家居商城应用, 其主要目的在于让开发者从这款 Demo 应用中看出 Fabric 的强大。</li>\n<li><a href=\"https://github.com/sheepy1/SelectionOfZhihu\" target=\"_blank\" rel=\"noopener\">SelectionOfZhihu.swift</a> - 『看知乎』iOS 客户端, <a href=\"http://www.jianshu.com/p/2c3a0f109788\" target=\"_blank\" rel=\"noopener\">项目说明</a>。</li>\n<li><a href=\"https://github.com/TigerWf/WFZhiHu\" target=\"_blank\" rel=\"noopener\">WFZhiHu</a> - WFZhiHu仿知乎日报客户端app。</li>\n<li><a href=\"https://github.com/CatchChat/Yep\" target=\"_blank\" rel=\"noopener\">Yep.swift</a> - Yep 一个由天才开发给天才们使用的社交软件。</li>\n<li><a href=\"https://github.com/ZhongTaoTian/LoveFreshBeen\" target=\"_blank\" rel=\"noopener\">LoveFreshBeen.swift</a> - 高仿爱鲜蜂 - Swift2.0</li>\n<li><a href=\"https://github.com/ZhongTaoTian/LoveFreshBeen\" target=\"_blank\" rel=\"noopener\">trySwiftApp.swift</a> - trySwiftApp一款较为完整的会议原型应用。有需求的同学可以做为开发参考。</li>\n<li><a href=\"https://github.com/gaowanli/PinGo\" target=\"_blank\" rel=\"noopener\">PinGo.swift</a> - PinGo.swift：纯Swift编写的仿“随遇”App。</li>\n<li><a href=\"https://github.com/ZeroJian/UmbrellaWeather\" target=\"_blank\" rel=\"noopener\">UmbrellaWeather.swift</a> - UmbrellaWeather.swift使用 Swift 编写的一款天气应用,现已上架 AppStore。</li>\n<li><a href=\"https://github.com/iAugux/Phonetic\" target=\"_blank\" rel=\"noopener\">Phonetic.swift</a> - Phonetic一个 iOS 版的 Phonetic Contacts，功能很多，其中昵称功能非常实用，已在 GitHub 开源并上架 App Store。</li>\n</ul>\n<p>========</p>\n<h4 id=\"好的文章\"><a href=\"#好的文章\" class=\"headerlink\" title=\"好的文章\"></a>好的文章</h4><ul>\n<li><a href=\"http://www.jianshu.com/p/38cd35968864\" target=\"_blank\" rel=\"noopener\">自定义转场动画</a> - 3 种方法～ 关于自定义转场动画。</li>\n<li><a href=\"https://github.com/icepy/_posts/blob/master/iOS%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E5%B7%A5%E5%85%B7.md\" target=\"_blank\" rel=\"noopener\">iOS提高效率的方法和工具</a> - iOS提高效率的方法和工具。 </li>\n<li><a href=\"http://jsonapi.org.cn/\" target=\"_blank\" rel=\"noopener\">用 JSON 构建 API 的标准指南</a> - 用 JSON 构建 API 的标准指南。</li>\n<li><a href=\"http://blog.callmewhy.com/2015/09/21/rxswift-getting-started-0/\" target=\"_blank\" rel=\"noopener\">RxSwift入坑手册</a> - RxSwift入坑手册。</li>\n</ul>\n<p>========</p>\n<h4 id=\"Xcode插件\"><a href=\"#Xcode插件\" class=\"headerlink\" title=\"Xcode插件\"></a>Xcode插件</h4><ul>\n<li><a href=\"http://www.cocoachina.com/special/xcode/\" target=\"_blank\" rel=\"noopener\">iOS开发进阶，从Xcode开始</a> - 学习使用Xcode构建出色的应用程序！</li>\n<li><p>在Xcode启动的时候，Xcode将会寻找位于~/Library/Application Support/Developer/Shared/Xcode/Plug-ins文件夹中的后缀名为.xcplugin的bundle作为插件进行加载（运行其中的可执行文件）。<a href=\"http://studentdeng.github.io/blog/2014/02/21/xcode-plugin-fun/\" target=\"_blank\" rel=\"noopener\">Xcode5 Plugins 开发简介</a>  <a href=\"http://joeyio.com/ios/2013/07/25/write_xcode4_plugin_of_your_own/\" target=\"_blank\" rel=\"noopener\">写个自己的Xcode4插件</a></p>\n</li>\n<li><p><a href=\"http://www.onevcat.com/2013/02/xcode-plugin/\" target=\"_blank\" rel=\"noopener\">Xcode 4 插件制作入门</a> - Xcode 4 插件制作入门:Xcode所使用的所有库都包含在Xcode.app/Contents/的Frameworks，SharedFrameworks和OtherFrameworks三个文件夹下。其中和Xcode关系最为直接以及最为重要的是Frameworks中的IDEKit和IDEFoundation，以及SharedFrameworks中的DVTKit和DVTFoundation四个。</p>\n</li>\n<li><p><a href=\"https://github.com/rickytan/RTImageAssets\" target=\"_blank\" rel=\"noopener\">RTImageAssets</a> - 一个 Xcode 插件，用来生成 @3x 的图片资源对应的 @2x 和 @1x 版本。<a href=\"https://itunes.apple.com/app/asset-catalog-creator-free/id866571115?mt=12\" target=\"_blank\" rel=\"noopener\">Asset Catalog Creator</a> 功能强大，能自动生成全部尺寸：包括App Icons、Image Sets、Launch Screens Generator。</p>\n</li>\n<li><p><a href=\"https://github.com/onevcat/VVDocumenter-Xcode\" target=\"_blank\" rel=\"noopener\">VVDocumenter-Xcode</a> - 一个Xcode插件，build后，随手打开一个你之前的项目，然后在任意一个方法上面连按三下”/“键盘，就ok了。</p>\n</li>\n<li><p><a href=\"https://github.com/shjborage/Reveal-Plugin-for-XCode\" target=\"_blank\" rel=\"noopener\">Reveal-Plugin-for-XCode</a> - 一个Reveal插件，可以使工程不作任何修改的情况下使用Reveal，该插件已在Alcatraz上架。<a href=\"http://security.ios-wiki.com/issue-3-4/\" target=\"_blank\" rel=\"noopener\">Reveal：分析iOS UI的利器</a> 。</p>\n</li>\n<li><p><a href=\"https://github.com/google/j2objc\" target=\"_blank\" rel=\"noopener\">java2Objective-c</a> - Google公司出得java转Obje-C转换工具，转换逻辑，不转换UI。</p>\n</li>\n<li><p><a href=\"https://github.com/kzaher/RegX\" target=\"_blank\" rel=\"noopener\">RegX</a> - 专治代码强迫症的 Xcode 插件，使用 Swift 和 Objective-C 编写。其用竖向对齐特定源代码的元素，使得代码更易读和易理解。<a href=\"http://www.cocoachina.com/ios/20141224/10743.html\" target=\"_blank\" rel=\"noopener\">说明</a> ； 菜单：xcode——》Edit-》Regx 。</p>\n</li>\n<li><p><a href=\"https://github.com/ksuther/KSImageNamed-Xcode\" target=\"_blank\" rel=\"noopener\">KSImageNamed</a> - 自动完成，特别是如果你正在写Objective-C，如果Xcode能自动完成文件名难道不会很伟大吗？比如图像文件的名称。</p>\n</li>\n<li><p><a href=\"https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin\" target=\"_blank\" rel=\"noopener\">FuzzyAutocomplete</a> - Xcode的实现自动完成还不完美，此插件能给出你所期望或想要的建议，设置：xcode-》Editor-》FuzzyAutocomplete-》plugin settings。</p>\n</li>\n<li><p><a href=\"https://github.com/johnno1962/GitDiff\" target=\"_blank\" rel=\"noopener\">GitDiff</a> - Xcode的代码编辑器的一个微妙的补强，加上了足够的可见信息以了解上次git提交以来发生了什么变化，设置：xcode-》Edit-》GitDiff。</p>\n</li>\n<li><p><a href=\"https://github.com/trawor/XToDo\" target=\"_blank\" rel=\"noopener\">XToDo</a> - 这个插件不仅凸显TODO，FIXME，???，以及！！！注释，也在便利列表呈现他们。 菜单：xcode-》view-》snippets;   调出列表显示: xcode-》view-》ToDo List ： ctrl + T 。 </p>\n</li>\n<li><p><a href=\"https://github.com/limejelly/Backlight-for-XCode\" target=\"_blank\" rel=\"noopener\">Backlight</a> - 突出显示当前正在编辑的行。菜单：xcode-》view-》Backlight 。</p>\n</li>\n<li><p><a href=\"https://github.com/kattrali/cocoapods-xcode-plugin\" target=\"_blank\" rel=\"noopener\">CocoaPods</a> - 该CocoaPods的插件增加了一个CocoaPods菜单到Xcode的产品菜单。如果你不喜欢命令行，那么你一定会喜欢这个插件。 <a href=\"http://tangqiaoboy.gitcafe.io/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/\" target=\"_blank\" rel=\"noopener\">用CocoaPods做iOS程序的依赖管理 </a>。</p>\n</li>\n<li><p><a href=\"https://github.com/markohlebar/Peckham\" target=\"_blank\" rel=\"noopener\">Peckham</a> - 添加import语句比较麻烦，此插件 按Command-Control-P，给出的选项列表中选择要的头文件。先要安装<a href=\"http://alcatraz.io/\" target=\"_blank\" rel=\"noopener\">Alcatraz</a> ,在终端输入： <strong>curl -fsSL <a href=\"https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh\" target=\"_blank\" rel=\"noopener\">https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh</a> | sh</strong> ； 重启xcode-》window-》Package Manager：搜索 <strong>Peckham</strong> 安装，打开Peckham.xcodeproj，编译 Peckham target，重启Xcode 。</p>\n</li>\n<li><p><a href=\"https://github.com/lucholaf/Auto-Importer-for-Xcode\" target=\"_blank\" rel=\"noopener\">Auto-Importer</a> - Auto-Importer是一个自动导入类对应的头文件的Xcode插件。</p>\n</li>\n<li><p><a href=\"http://alcatraz.io/\" target=\"_blank\" rel=\"noopener\">Alcatraz</a> -使用Alcatraz来管理Xcode插件 <a href=\"http://tangqiaoboy.gitcafe.io/blog/2014/03/05/use-alcatraz-to-manage-xcode-plugins/\" target=\"_blank\" rel=\"noopener\">使用说明</a> 。</p>\n</li>\n<li><p><a href=\"https://github.com/kimsungwhee/KSHObjcUML\" target=\"_blank\" rel=\"noopener\">KSHObjcUML</a> -KSHObjcUML 是一个 Objective-C 类引用关系图的 Xcode 插件。 </p>\n</li>\n<li><p><a href=\"https://github.com/omz/ColorSense-for-Xcode\" target=\"_blank\" rel=\"noopener\">ColorSense-for-Xcode</a> - 颜色插件，安装之后，就不用根据RGB选择颜色，直接从取色板中取颜色，会自动补齐RGB代码。</p>\n</li>\n<li><p><a href=\"http://www.imooc.com/wenda/detail/237132\" target=\"_blank\" rel=\"noopener\">10款提高iOS开发效率的XCode插件</a> - 10款提高iOS开发效率的XCode插件：1. XcodeColors；5. ACCodeSnippetRepository；10. Dash for Xcode。 </p>\n</li>\n<li><p><a href=\"https://github.com/MakeZL/ZLGotoSandboxPlugin\" target=\"_blank\" rel=\"noopener\">ZLGotoSandboxPlugin</a> - 支持Xcode快捷键了跳转当前应用沙盒了！快捷键是 Shift+Common+w。 </p>\n</li>\n<li><p><a href=\"https://github.com/burczyk/XcodeSwiftSnippets\" target=\"_blank\" rel=\"noopener\">XcodeSwiftSnippets</a> - XcodeSwiftSnippets, 提供了很多可在 Xcode 上使用的 Swift 代码片段, 通过自动补全的方式极大的提高了开发效率， <a href=\"https://github.com/Xcode-Snippets/Objective-C\" target=\"_blank\" rel=\"noopener\">另外还有 Objective-C 版的</a>。 </p>\n</li>\n<li><p><a href=\"https://vimeo.com/128713880\" target=\"_blank\" rel=\"noopener\">CoPilot</a> - 通过此插件， Xcode 可以协同编程了（采用 WebSocket 通讯）。如此强大的“黑工具”，不爱它能行吗。 </p>\n</li>\n<li><a href=\"https://github.com/EnjoySR/ESJsonFormat-Xcode\" target=\"_blank\" rel=\"noopener\">ESJsonFormat-Xcode</a> - 将Json格式化输出为模型的属性。</li>\n<li><a href=\"https://github.com/stefanceriu/SCXcodeMiniMap\" target=\"_blank\" rel=\"noopener\">SCXcodeMiniMap</a> - Xcode迷你小地图-SCXcodeMiniMap。</li>\n<li><a href=\"http://code.cocoachina.com/detail/316095/xTransCodelation/\" target=\"_blank\" rel=\"noopener\">xTransCodelation</a> - XCODE中英文翻译插件，提供API查询模式和网页模式，都是利用的百度翻译。另外集成了一个可以一键关闭其他所有APP的实用功能，方便开发者！</li>\n<li><a href=\"https://github.com/jwaitzel/SuggestedColors/\" target=\"_blank\" rel=\"noopener\">SuggestedColors</a> - Xcode 插件SuggestedColors，用于 IB颜色设置 辅助插件，非常好用。</li>\n<li><a href=\"https://github.com/paulot/Colorsp\" target=\"_blank\" rel=\"noopener\">Colors</a> - 打印彩色字符串，可以修改 Swift 中终端输出的字符串颜色，有趣的小工具。</li>\n</ul>\n<p>========</p>\n<h4 id=\"美工资源\"><a href=\"#美工资源\" class=\"headerlink\" title=\"美工资源\"></a>美工资源</h4><ul>\n<li><a href=\"https://github.com/markohlebar/Peckham\" target=\"_blank\" rel=\"noopener\">TWG_Retina_Icons</a> - 一套支持 Retina 高清屏的 iPhone 免费图标集。</li>\n<li><a href=\"https://github.com/cparnot/ASCIImage\" target=\"_blank\" rel=\"noopener\">ASCIImage</a> - 使用 NSString 创建 image，<a href=\"http://cocoamine.net/blog/2015/03/20/replacing-photoshop-with-nsstring/\" target=\"_blank\" rel=\"noopener\">说明</a>。</li>\n<li><a href=\"https://github.com/RayPS/my-sketch-colors\" target=\"_blank\" rel=\"noopener\">my-sketch-colors</a> - 配色。</li>\n<li><a href=\"http://www.imooc.com/wenda/detail/250367\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> - Font Awesome：一套绝佳的图标字体库和CSS框架，详细的安装方法请参考<a href=\"http://fortawesome.github.io/Font-Awesome/icons/\" target=\"_blank\" rel=\"noopener\">官方网站</a><a href=\"http://fontawesome.dashgame.com/\" target=\"_blank\" rel=\"noopener\">中文网站</a>,<a href=\"https://github.com/FortAwesome/Font-Awesome\" target=\"_blank\" rel=\"noopener\">GitHub地址</a> 。</li>\n<li><a href=\"https://github.com/yannickl/DynamicColor\" target=\"_blank\" rel=\"noopener\">DynamicColor</a> - 强大的颜色操作扩展类。通过该类，你可以通过扩展方法基于某个颜色得到不同深浅、饱和度、灰度、色相，以及反转后的新颜色。是不可多得的好类库。</li>\n<li><a href=\"https://github.com/ViccAlexander/Chameleon\" target=\"_blank\" rel=\"noopener\">Chameleon</a> - Chameleon是一个iOS的色彩框架。它运用现代化flat color将UIColor扩展地非常美观。我们还可以通过它运用自定义颜色创建调色板。它还有很多功用，请浏览readme。</li>\n<li><a href=\"https://github.com/ArtSabintsev/FontBlaster\" target=\"_blank\" rel=\"noopener\">FontBlaster</a> - 载入定制字体时更简单。</li>\n</ul>\n<h4 id=\"其他资源\"><a href=\"#其他资源\" class=\"headerlink\" title=\"其他资源\"></a>其他资源</h4><ul>\n<li><a href=\"http://githuber.info/#/index\" target=\"_blank\" rel=\"noopener\">githuber</a> - 最好用的GitHub人才搜索工具。   </li>\n<li><a href=\"https://www.codatlas.com\" target=\"_blank\" rel=\"noopener\">codatlas</a> - 源代码搜索利器。</li>\n<li><a href=\"https://searchcode.com/\" target=\"_blank\" rel=\"noopener\">searchcode</a> - 源代码搜索利器：来自悉尼的代码搜索引擎汇聚了 Github, Bitbucket, Sourceforge…等多家开源站点超20万个项目、180亿行源代码，能以特殊字符、语言、仓库和源方式从90多种语言找到函数、API的真实代码。</li>\n<li><a href=\"https://github.com/kitematic/kitematic\" target=\"_blank\" rel=\"noopener\">kitematic</a> - Mac 上使用 Docker 最简单的方案。 </li>\n</ul>\n<p>========</p>\n<h4 id=\"开发资源\"><a href=\"#开发资源\" class=\"headerlink\" title=\"开发资源\"></a>开发资源</h4><h5 id=\"开发资料\"><a href=\"#开发资料\" class=\"headerlink\" title=\"开发资料\"></a>开发资料</h5><ul>\n<li><a href=\"http://www.douban.com/note/276160185/?type=like\" target=\"_blank\" rel=\"noopener\">豆瓣iOS开源库列表</a> - 豆瓣iOS开源库列表，很多开源项目。</li>\n<li><a href=\"https://github.com/AttackOnDobby/iOS-Core-Animation-Advanced-Techniques\" target=\"_blank\" rel=\"noopener\">iOS-Core-Animation-Advanced-Techniques</a> - 中文版iOS 高级动画技术。 </li>\n<li><a href=\"http://www.jianshu.com/p/50b63a221f09\" target=\"_blank\" rel=\"noopener\">iOS开发的一些奇巧淫技1</a> - TableView不显示没内容的Cell怎么办; 键盘事件：<a href=\"https://github.com/hackiftekhar/IQKeyboardManager\" target=\"_blank\" rel=\"noopener\">IQKeyboardManager</a>;  app不流畅:<a href=\"https://github.com/kconner/KMCGeigerCounter\" target=\"_blank\" rel=\"noopener\">KMCGeigerCounter</a>;  CoreData用起来好烦:<a href=\"https://github.com/magicalpanda/MagicalRecord\" target=\"_blank\" rel=\"noopener\">MagicalRecord</a>;  CollectionView实现悬停的header:<a href=\"https://github.com/jamztang/CSStickyHeaderFlowLayout\" target=\"_blank\" rel=\"noopener\">CSStickyHeaderFlowLayout</a>。</li>\n<li><a href=\"http://www.jianshu.com/p/08f194e9904c\" target=\"_blank\" rel=\"noopener\">iOS开发的一些奇巧淫技2</a> -  用一个pan手势来代替UISwipegesture的各个方向、拉伸图片、播放GIF、上拉刷新、把tableview里cell的小对勾的颜色改变、navigationbar弄成透明的而不是带模糊的效果、改变uitextfield placeholder的颜色和位置。</li>\n<li><a href=\"http://code4app.com/article/cocoapods-install-usage\" target=\"_blank\" rel=\"noopener\">cocoapods安装指南</a> - cocoapods安装指南。</li>\n<li><a href=\"https://github.com/johnno1962/Remote\" target=\"_blank\" rel=\"noopener\">RemoteControl</a> - Control your iPhone from inside Xcode for end-to-end testing 。</li>\n<li><a href=\"http://objccn.io/issue-13-1/\" target=\"_blank\" rel=\"noopener\">MVVM 介绍</a> - 替换MVC的开发模式。</li>\n<li><a href=\"http://apistore.baidu.com/astore/index\" target=\"_blank\" rel=\"noopener\">第三方接口</a> - 基本所有第三方接口都在这，再也不用那么麻烦去找了。</li>\n</ul>\n<ul>\n<li><a href=\"http://yyny.me/ios/%E6%8F%90%E9%AB%98iOS%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E5%B7%A5%E5%85%B7/\" target=\"_blank\" rel=\"noopener\">提高iOS开发效率的方法和工具</a> - 提高iOS开发效率的方法和工具。</li>\n<li><a href=\"https://github.com/oa414/objc-zen-book-cn\" target=\"_blank\" rel=\"noopener\">禅与 Objective-C 编程艺术</a> - 禅与 Objective-C 编程艺术 （Zen and the Art of the Objective-C Craftsmanship 中文翻译）。</li>\n<li><a href=\"http://www.imooc.com/article/1216\" target=\"_blank\" rel=\"noopener\">Objective-C编码规范：26个方面解决iOS开发问题</a> - 【Objective-C编码规范：26个方面解决iOS开发问题：“我们制定Objective-C编码规范的原因是我们能够在我们的书，教程和初学者工具包的代码保持优雅和一致。”今天分享的规范来自raywenderlich.com团队成员共同完成的，希望对学习OC的朋友们有所指导和帮助。</li>\n</ul>\n<h6 id=\"swift\"><a href=\"#swift\" class=\"headerlink\" title=\"swift\"></a>swift</h6><ul>\n<li><a href=\"https://github.com/numbbbbb/the-swift-programming-language-in-chinese\" target=\"_blank\" rel=\"noopener\">Swift中文指南</a> - 中文版Apple官方Swift教程《The Swift Programming Language》，<a href=\"http://numbbbbb.gitbooks.io/-the-swift-programming-language-/content/\" target=\"_blank\" rel=\"noopener\">老码版本</a>  <a href=\"http://numbbbbb.gitbooks.io/-the-swift-programming-language-/content/chapter1/03_revision_history.html\" target=\"_blank\" rel=\"noopener\">历史版本更新说明</a>。 </li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/swift/\" target=\"_blank\" rel=\"noopener\">The Swift Programming Language 中文版</a> - The Swift Programming Language 中文版。 </li>\n<li><a href=\"http://www.swifttoolbox.io/\" target=\"_blank\" rel=\"noopener\">swifttoolbox</a> -  swifttoolbox swift开发的开源库汇总。 </li>\n<li><a href=\"https://github.com/ipader/SwiftGuide\" target=\"_blank\" rel=\"noopener\">SwiftGuide</a> -  这份指南汇集了Swift语言主流学习资源，并以开发者的视角整理编排– 非常不错，值得推荐。</li>\n<li><a href=\"https://github.com/ipader/SwiftGuide/blob/master/Featured.md\" target=\"_blank\" rel=\"noopener\">Swift开源项目精选</a> - Swift开源项目精选–推荐，每周都有更新。</li>\n<li><a href=\"https://swift.zeef.com/robin.eggenkamp\" target=\"_blank\" rel=\"noopener\">Awesome Swift</a> - 一个收集了很多 Swift 开发资源的网站。</li>\n<li><a href=\"https://github.com/x140yu/Developing_iOS_8_Apps_With_Swift\" target=\"_blank\" rel=\"noopener\">Developing_iOS_8_Apps_With_Swift</a> - Developing iOS 8 Apps with Swift 字幕简体中文翻译项目（斯坦福白胡子老头swift教学视频）。</li>\n<li><a href=\"https://github.com/johnlui/Swift-On-iOS\" target=\"_blank\" rel=\"noopener\">Swift-On-iOS</a> - JohnLui 的 Swift On iOS 代码仓库。</li>\n<li><a href=\"https://github.com/PerfectlySoft/Perfect\" target=\"_blank\" rel=\"noopener\">Perfect</a> - Perfect 致力于 Swift 服务端应用，从打造专业应用服务器开始。</li>\n<li><a href=\"https://github.com/huytd/swift-http\" target=\"_blank\" rel=\"noopener\">swift-http</a> - Swift HTTP Server，又一个 Swift 服务器，最大的亮点是支持 Docker 部署。</li>\n<li><a href=\"https://github.com/allenwong/30DaysofSwiftp\" target=\"_blank\" rel=\"noopener\">30DaysofSwift</a> - 30DaysofSwift 自学 iOS - <a href=\"http://weibo.com/ttarticle/p/show?id=2309403942494873235448\" target=\"_blank\" rel=\"noopener\">三十天三十个 Swift 项目</a>。</li>\n</ul>\n<h5 id=\"他人开源总结\"><a href=\"#他人开源总结\" class=\"headerlink\" title=\"他人开源总结\"></a>他人开源总结</h5><ul>\n<li><a href=\"https://github.com/iCHAIT/awesome-osx\" target=\"_blank\" rel=\"noopener\">awesome-osx</a> - Awesome OS X。</li>\n<li><a href=\"http://www.code4app.com/\" target=\"_blank\" rel=\"noopener\">code4app</a> - 最多国人用的代码库。</li>\n<li><a href=\"http://code.cocoachina.com/\" target=\"_blank\" rel=\"noopener\">cocoachina</a> - 国内最热门的iOS社区的代码库。</li>\n<li><a href=\"https://github.com/vsouza/awesome-ios\" target=\"_blank\" rel=\"noopener\">awesome-ios</a> - 一个老外整理的，<a href=\"http://app.memect.com/doc/ios.html\" target=\"_blank\" rel=\"noopener\">中文版</a>。</li>\n<li><a href=\"https://github.com/cjwirth/awesome-ios-ui\" target=\"_blank\" rel=\"noopener\">awesome-ios-ui</a> - 收集了不少 iOS UI/UX 库, 包含了很多酷炫的动画效果。</li>\n<li><a href=\"http://ios-cosmos.com/\" target=\"_blank\" rel=\"noopener\">ios-cosmos</a> - The iOS Cosmos：收录了IOS绝大部分的开源框架和工具。</li>\n<li><a href=\"https://haskell.zeef.com/konstantin.skipor#block_28362_basics\" target=\"_blank\" rel=\"noopener\">Awesome Haskell资料大全</a> -    Awesome Haskell 资料大全：框架，库和软件。</li>\n<li><a href=\"http://ios-cosmos.com\" target=\"_blank\" rel=\"noopener\">Cosmos</a> - The iOS Cosmos：收录了IOS绝大部分的开源框架和工具。</li>\n<li><a href=\"http://cocoacontrols.com\" target=\"_blank\" rel=\"noopener\">cocoacontrols</a> -  收集了很多UI控件效果代码，缺点是需要翻墙，而且代码分类不够好。</li>\n<li><a href=\"https://github.com/lexrus\" target=\"_blank\" rel=\"noopener\">lexrus</a> -  lexrus国内出名的iOS开源coder，非常酷的label动画、textfield动画。</li>\n<li><p><a href=\"https://github.com/dkhamsing/open-source-ios-apps\" target=\"_blank\" rel=\"noopener\">open-source-ios-apps</a> - iOS App集合，分：swift与Objective-C–国外人整理。 </p>\n</li>\n<li><p><a href=\"http://www.csdn.net/article/2015-03-04/2824108-ios-developers-sites\" target=\"_blank\" rel=\"noopener\">适合iOS开发者的15大网站推荐</a> -  适合 iOS 开发者的 15 大网站推荐 — 英文网站。</p>\n</li>\n<li><p><a href=\"https://github.com/Aufree/trip-to-iOS/blob/master/Top-100.md\" target=\"_blank\" rel=\"noopener\">Objective-C GitHub 排名前 100 项目简介</a> -  主要对当前 GitHub 排名前 100 的项目做一个简单的简介, 方便初学者快速了解到当前 Objective-C 在 GitHub 的情况。 </p>\n</li>\n<li><p><a href=\"http://github.ibireme.com/github/list/ios/\" target=\"_blank\" rel=\"noopener\">Github-iOS备忘</a> -整理了比较常用的iOS第三方组件，以及github上的统计。</p>\n</li>\n<li><a href=\"http://www.cocoachina.com/ios/20160121/14988.html\" target=\"_blank\" rel=\"noopener\">超全！整理常用的iOS第三方资源</a> - 超全！整理常用的iOS第三方资源。</li>\n<li><a href=\"https://github.com/JanzTam/MyGithubMark\" target=\"_blank\" rel=\"noopener\">MyGithubMark</a> - Github上的iOS资料-个人记录（持续更新）。</li>\n</ul>\n<h5 id=\"开发博客列表\"><a href=\"#开发博客列表\" class=\"headerlink\" title=\"开发博客列表\"></a>开发博客列表</h5><ul>\n<li><a href=\"https://github.com/tangqiaoboy/iOSBlogCN\" target=\"_blank\" rel=\"noopener\">唐巧整理</a> - 猿题库唐巧整理。</li>\n<li><a href=\"http://www.cocoachina.com/ios/20150626/11348.html\" target=\"_blank\" rel=\"noopener\">11个超棒的iOS开发学习国外网站</a> - 11个超棒的iOS开发学习网站:<a href=\"https://www.objc.io\" target=\"_blank\" rel=\"noopener\">objc.io</a> ;<a href=\"http://subjc.com\" target=\"_blank\" rel=\"noopener\">subjc.com</a> ;<a href=\"http://nshipster.com\" target=\"_blank\" rel=\"noopener\">NSHipster</a> ;<a href=\"http://petersteinberger.com\" target=\"_blank\" rel=\"noopener\">Peter Steinberger</a> ;<a href=\"http://oleb.net\" target=\"_blank\" rel=\"noopener\">Ole Begemann</a> ;<a href=\"http://floriankugler.com\" target=\"_blank\" rel=\"noopener\">Florian Kugler</a> ;<a href=\"https://www.mikeash.com/pyblog/\" target=\"_blank\" rel=\"noopener\">NSBlog</a> ;<a href=\"http://cocoa.tumblr.com\" target=\"_blank\" rel=\"noopener\">Cocoa</a> ;<a href=\"http://iosdevweekly.com\" target=\"_blank\" rel=\"noopener\">iOS Dev Weekly</a> ;<a href=\"http://iosdevelopertips.com\" target=\"_blank\" rel=\"noopener\">iOS Developer Tips</a> ;<a href=\"http://ios-goodies.com\" target=\"_blank\" rel=\"noopener\">iOS Goodies</a> ;<a href=\"http://www.appcoda.com\" target=\"_blank\" rel=\"noopener\">AppCoda</a> 香港人创建;<a href=\"http://merowing.info\" target=\"_blank\" rel=\"noopener\">Krzysztof Zab?ocki</a> ;<a href=\"http://iosdevtips.co\" target=\"_blank\" rel=\"noopener\">iOS Development tips</a> ;</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>博客地址</th>\n<th>RSS地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://southpeak.github.io/\" target=\"_blank\" rel=\"noopener\">南峰子的技术博客</a></td>\n<td>南峰子的技术博客。</td>\n</tr>\n<tr>\n<td><a href=\"http://blog.devtang.com\" target=\"_blank\" rel=\"noopener\">唐巧的技术博客</a></td>\n<td><a href=\"http://blog.devtang.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://blog.devtang.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://onevcat.com\" target=\"_blank\" rel=\"noopener\">OneV’s Den</a></td>\n<td><a href=\"http://onevcat.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://onevcat.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://objccn.io/\" target=\"_blank\" rel=\"noopener\">objc 中国</a></td>\n<td>为中国 Objective-C 社区带来最佳实践和先进技术。</td>\n</tr>\n<tr>\n<td><a href=\"http://beyondvincent.com\" target=\"_blank\" rel=\"noopener\">破船之家</a></td>\n<td><a href=\"http://beyondvincent.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://beyondvincent.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://nshipster.cn\" target=\"_blank\" rel=\"noopener\">NSHipster</a></td>\n<td><a href=\"http://nshipster.cn/feed.xml\" target=\"_blank\" rel=\"noopener\">http://nshipster.cn/feed.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.leezhong.com/\" target=\"_blank\" rel=\"noopener\">Limboy 无网不剩</a></td>\n<td><a href=\"http://feeds.feedburner.com/lzyy\" target=\"_blank\" rel=\"noopener\">http://feeds.feedburner.com/lzyy</a></td>\n</tr>\n<tr>\n<td><a href=\"http://ios.lextang.com\" target=\"_blank\" rel=\"noopener\">Lex iOS notes</a></td>\n<td><a href=\"http://ios.lextang.com/rss\" target=\"_blank\" rel=\"noopener\">http://ios.lextang.com/rss</a></td>\n</tr>\n<tr>\n<td><a href=\"http://nianxi.net\" target=\"_blank\" rel=\"noopener\">念茜的博客</a></td>\n<td><a href=\"http://nianxi.net/feed.xml\" target=\"_blank\" rel=\"noopener\">http://nianxi.net/feed.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.xcodev.com\" target=\"_blank\" rel=\"noopener\">Xcode Dev</a></td>\n<td><a href=\"http://blog.xcodev.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://blog.xcodev.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://wufawei.com/\" target=\"_blank\" rel=\"noopener\">Ted’s Homepage</a></td>\n<td><a href=\"http://wufawei.com/feed\" target=\"_blank\" rel=\"noopener\">http://wufawei.com/feed</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.t-xx.me\" target=\"_blank\" rel=\"noopener\">txx’s blog</a></td>\n<td><a href=\"http://blog.t-xx.me/atom.xml\" target=\"_blank\" rel=\"noopener\">http://blog.t-xx.me/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://imkevin.me\" target=\"_blank\" rel=\"noopener\">KEVIN BLOG</a></td>\n<td><a href=\"http://imkevin.me/rss\" target=\"_blank\" rel=\"noopener\">http://imkevin.me/rss</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.xiangwangfeng.com\" target=\"_blank\" rel=\"noopener\">阿毛的蛋疼地</a></td>\n<td><a href=\"http://www.xiangwangfeng.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://www.xiangwangfeng.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://billwang1990.github.io\" target=\"_blank\" rel=\"noopener\">亚庆的 Blog</a></td>\n<td><a href=\"http://billwang1990.github.io/atom.xml\" target=\"_blank\" rel=\"noopener\">http://billwang1990.github.io/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://nonomori.farbox.com\" target=\"_blank\" rel=\"noopener\">Nonomori</a></td>\n<td><a href=\"http://nonomori.farbox.com/feed\" target=\"_blank\" rel=\"noopener\">http://nonomori.farbox.com/feed</a></td>\n</tr>\n<tr>\n<td><a href=\"http://tang3w.com\" target=\"_blank\" rel=\"noopener\">言无不尽</a></td>\n<td><a href=\"http://tang3w.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://tang3w.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://wonderffee.github.io\" target=\"_blank\" rel=\"noopener\">Wonderffee’s Blog</a></td>\n<td><a href=\"http://wonderffee.github.io/atom.xml\" target=\"_blank\" rel=\"noopener\">http://wonderffee.github.io/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://imtx.me\" target=\"_blank\" rel=\"noopener\">I’m TualatriX</a></td>\n<td><a href=\"http://imtx.me/feed/latest/\" target=\"_blank\" rel=\"noopener\">http://imtx.me/feed/latest/</a></td>\n</tr>\n<tr>\n<td><a href=\"http://vclwei.com\" target=\"_blank\" rel=\"noopener\">vclwei</a></td>\n<td><a href=\"http://vclwei.com/posts.rss\" target=\"_blank\" rel=\"noopener\">http://vclwei.com/posts.rss</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.cocoabit.com\" target=\"_blank\" rel=\"noopener\">Cocoabit</a></td>\n<td><a href=\"http://blog.cocoabit.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://blog.cocoabit.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://nixzhu.me\" target=\"_blank\" rel=\"noopener\">nixzhu on scriptogr.am</a></td>\n<td><a href=\"http://nixzhu.me/feed\" target=\"_blank\" rel=\"noopener\">http://nixzhu.me/feed</a></td>\n</tr>\n<tr>\n<td><a href=\"http://studentdeng.github.io\" target=\"_blank\" rel=\"noopener\">不会开机的男孩</a></td>\n<td><a href=\"http://studentdeng.github.io/atom.xml\" target=\"_blank\" rel=\"noopener\">http://studentdeng.github.io/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.taofengping.com\" target=\"_blank\" rel=\"noopener\">Nico</a></td>\n<td><a href=\"http://www.taofengping.com/rss.xml\" target=\"_blank\" rel=\"noopener\">http://www.taofengping.com/rss.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://hufeng825.github.io\" target=\"_blank\" rel=\"noopener\">阿峰的技术窝窝</a></td>\n<td><a href=\"http://hufeng825.github.io/atom.xml\" target=\"_blank\" rel=\"noopener\">http://hufeng825.github.io/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://answerhuang.duapp.com\" target=\"_blank\" rel=\"noopener\">answer_huang</a></td>\n<td><a href=\"http://answerhuang.duapp.com/index.php/feed/\" target=\"_blank\" rel=\"noopener\">http://answerhuang.duapp.com/index.php/feed/</a></td>\n</tr>\n<tr>\n<td><a href=\"http://webfrogs.me\" target=\"_blank\" rel=\"noopener\">webfrogs</a></td>\n<td><a href=\"http://webfrogs.me/feed/\" target=\"_blank\" rel=\"noopener\">http://webfrogs.me/feed/</a></td>\n</tr>\n<tr>\n<td><a href=\"http://joeyio.com\" target=\"_blank\" rel=\"noopener\">代码手工艺人</a></td>\n<td><a href=\"http://joeyio.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://joeyio.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://gracelancy.com\" target=\"_blank\" rel=\"noopener\">Lancy’s Blog</a></td>\n<td><a href=\"http://gracelancy.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://gracelancy.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.imallen.com\" target=\"_blank\" rel=\"noopener\">I’m Allen</a></td>\n<td><a href=\"http://www.imallen.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://www.imallen.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://imi.im/\" target=\"_blank\" rel=\"noopener\">Travis’ Blog</a></td>\n<td><a href=\"http://imi.im/feed\" target=\"_blank\" rel=\"noopener\">http://imi.im/feed</a></td>\n</tr>\n<tr>\n<td><a href=\"http://wangzz.github.io/\" target=\"_blank\" rel=\"noopener\">王中周的技术博客</a></td>\n<td><a href=\"http://wangzz.github.io/atom.xml\" target=\"_blank\" rel=\"noopener\">http://wangzz.github.io/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://jiajun.org/\" target=\"_blank\" rel=\"noopener\">会写代码的猪</a></td>\n<td><a href=\"http://gaosboy.com/feed/atom/\" target=\"_blank\" rel=\"noopener\">http://gaosboy.com/feed/atom/</a></td>\n</tr>\n<tr>\n<td><a href=\"http://wangkewei.cnblogs.com/\" target=\"_blank\" rel=\"noopener\">克伟的博客</a></td>\n<td><a href=\"http://feed.cnblogs.com/blog/u/23857/rss\" target=\"_blank\" rel=\"noopener\">http://feed.cnblogs.com/blog/u/23857/rss</a></td>\n</tr>\n<tr>\n<td><a href=\"http://cnblogs.com/biosli\" target=\"_blank\" rel=\"noopener\">摇滚诗人</a></td>\n<td><a href=\"http://feed.cnblogs.com/blog/u/35410/rss\" target=\"_blank\" rel=\"noopener\">http://feed.cnblogs.com/blog/u/35410/rss</a></td>\n</tr>\n<tr>\n<td><a href=\"http://geeklu.com/\" target=\"_blank\" rel=\"noopener\">Luke’s Homepage</a></td>\n<td><a href=\"http://geeklu.com/feed/\" target=\"_blank\" rel=\"noopener\">http://geeklu.com/feed/</a></td>\n</tr>\n<tr>\n<td><a href=\"http://iiiyu.com/\" target=\"_blank\" rel=\"noopener\">萧宸宇</a></td>\n<td><a href=\"http://iiiyu.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://iiiyu.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.heyuan110.com/\" target=\"_blank\" rel=\"noopener\">Yuan博客</a></td>\n<td><a href=\"http://www.heyuan110.com/?feed=rss2\" target=\"_blank\" rel=\"noopener\">http://www.heyuan110.com/?feed=rss2</a></td>\n</tr>\n<tr>\n<td><a href=\"http://shiningio.com/\" target=\"_blank\" rel=\"noopener\">Shining IO</a></td>\n<td><a href=\"http://shiningio.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://shiningio.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.yifeiyang.net/\" target=\"_blank\" rel=\"noopener\">YIFEIYANG–易飞扬的博客</a></td>\n<td><a href=\"http://www.yifeiyang.net/feed\" target=\"_blank\" rel=\"noopener\">http://www.yifeiyang.net/feed</a></td>\n</tr>\n<tr>\n<td><a href=\"http://koofrank.com/\" target=\"_blank\" rel=\"noopener\">KooFrank’s Blog</a></td>\n<td><a href=\"http://koofrank.com/rss\" target=\"_blank\" rel=\"noopener\">http://koofrank.com/rss</a></td>\n</tr>\n<tr>\n<td><a href=\"http://helloitworks.com\" target=\"_blank\" rel=\"noopener\">hello it works</a></td>\n<td><a href=\"http://helloitworks.com/feed\" target=\"_blank\" rel=\"noopener\">http://helloitworks.com/feed</a></td>\n</tr>\n<tr>\n<td><a href=\"http://msching.github.io/\" target=\"_blank\" rel=\"noopener\">码农人生</a></td>\n<td><a href=\"http://msching.github.io/atom.xml\" target=\"_blank\" rel=\"noopener\">http://msching.github.io/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://yulingtianxia.com\" target=\"_blank\" rel=\"noopener\">玉令天下的Blog</a></td>\n<td><a href=\"http://yulingtianxia.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://yulingtianxia.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.hotobear.com/\" target=\"_blank\" rel=\"noopener\">不掏蜂窝的熊</a></td>\n<td><a href=\"http://www.hotobear.com/?feed=rss2\" target=\"_blank\" rel=\"noopener\">http://www.hotobear.com/?feed=rss2</a></td>\n</tr>\n<tr>\n<td><a href=\"https://andelf.github.io/\" target=\"_blank\" rel=\"noopener\">猫·仁波切</a></td>\n<td><a href=\"https://andelf.github.io/atom.xml\" target=\"_blank\" rel=\"noopener\">https://andelf.github.io/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://ivoryxiong.org/\" target=\"_blank\" rel=\"noopener\">煲仔饭</a></td>\n<td><a href=\"http://ivoryxiong.org/feed.xml\" target=\"_blank\" rel=\"noopener\">http://ivoryxiong.org/feed.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://adad184.com\" target=\"_blank\" rel=\"noopener\">里脊串的开发随笔</a></td>\n<td><a href=\"http://adad184.com/atom.xml\" target=\"_blank\" rel=\"noopener\">http://adad184.com/atom.xml</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.ibireme.com/\" target=\"_blank\" rel=\"noopener\">ibireme伽蓝之堂</a></td>\n<td><a href=\"http://blog.ibireme.com/feed/\" target=\"_blank\" rel=\"noopener\">http://blog.ibireme.com/feed/</a></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"物联网\"><a href=\"#物联网\" class=\"headerlink\" title=\"物联网\"></a>物联网</h4><ul>\n<li><a href=\"https://github.com/phodal/awesome-iot\" target=\"_blank\" rel=\"noopener\">awesome-iot</a> - 这份物联网学习参考大全太给力。从物联网协议、嵌入式系统、相关开源库、相关书籍、博客、学习笔记、标准应有尽有。</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckeb5g9co0006rb0uevywhizo","category_id":"ckeb5g9cr0008rb0ux8glva07","_id":"ckeb5g9cw000brb0uq2mfy70k"},{"post_id":"ckeb5g9l1000erb0usjd34im1","category_id":"ckeb5g9l5000grb0ut07ohngt","_id":"ckeb5g9ld000prb0u9c9ld6w8"},{"post_id":"ckeb5g9l5000hrb0u40kotbkr","category_id":"ckeb5g9l9000lrb0upf8pomg0","_id":"ckeb5g9ll000urb0ujcl1mgu4"},{"post_id":"ckeb5g9l7000jrb0u7yfbkge7","category_id":"ckeb5g9l9000lrb0upf8pomg0","_id":"ckeb5g9lo000yrb0uc13j65fn"},{"post_id":"ckeb5g9l8000krb0u8qs3cv2q","category_id":"ckeb5g9lk000trb0urtpd50p9","_id":"ckeb5g9lu0013rb0un34x7ipd"}],"PostTag":[{"post_id":"ckeb5g9cs0009rb0ultrchur1","tag_id":"ckeb5g9cv000arb0uhmlrpq2q","_id":"ckeb5g9cz000crb0urkbc7myd"},{"post_id":"ckeb5g9l2000frb0uua3a5xnd","tag_id":"ckeb5g9l6000irb0uqff6ff3y","_id":"ckeb5g9lb000nrb0u65prbauf"},{"post_id":"ckeb5g9lg000rrb0upxjet797","tag_id":"ckeb5g9ll000vrb0u93i1krax","_id":"ckeb5g9lq0011rb0uk9t53b1n"},{"post_id":"ckeb5g9lr0012rb0ujj6q7shj","tag_id":"ckeb5g9cv000arb0uhmlrpq2q","_id":"ckeb5g9lw0015rb0uothghdce"},{"post_id":"ckeb5g9lm000wrb0uz48d45b5","tag_id":"ckeb5g9lq0010rb0ug7z1uj7d","_id":"ckeb5g9lz0018rb0uhpr1muqz"},{"post_id":"ckeb5g9lu0014rb0u16bihm0n","tag_id":"ckeb5g9ly0017rb0uiva4qnuz","_id":"ckeb5g9m10019rb0uu4qba3tv"},{"post_id":"ckeb5g9of001arb0uzg7vdrz3","tag_id":"ckeb5g9oi001crb0ulpl7vw21","_id":"ckeb5g9ol001grb0uohai08yd"},{"post_id":"ckeb5g9pr001mrb0uxzhmrd27","tag_id":"ckeb5g9pv001orb0ux5m1yy0a","_id":"ckeb5g9py001srb0ucbigw48g"},{"post_id":"ckeb5g9pv001prb0u0vdc4vq9","tag_id":"ckeb5g9px001rrb0unc2tc2zl","_id":"ckeb5g9py001trb0un55b9nzu"}],"Tag":[{"name":"git","_id":"ckeb5g9cv000arb0uhmlrpq2q"},{"name":"lessons","_id":"ckeb5g9l6000irb0uqff6ff3y"},{"name":"tableview","_id":"ckeb5g9ll000vrb0u93i1krax"},{"name":"多线程","_id":"ckeb5g9lq0010rb0ug7z1uj7d"},{"name":"ss","_id":"ckeb5g9ly0017rb0uiva4qnuz"},{"name":"gitlab","_id":"ckeb5g9oi001crb0ulpl7vw21"},{"name":"开源、第三方","_id":"ckeb5g9pv001orb0ux5m1yy0a"},{"name":"内存管理","_id":"ckeb5g9px001rrb0unc2tc2zl"}]}}
=======
{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[],"Cache":[],"Category":[],"Data":[],"Page":[],"Post":[],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}
>>>>>>> 2fd209527d026c2001674f7c4647850c907649ec
